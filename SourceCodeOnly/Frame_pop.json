["@Test\npublic void popTest() {\n    String descriptor = \"(ID)V\";\n    char firstDescriptorChar = descriptor.charAt(0);\n    if (firstDescriptorChar == '(') {\n        int argsAndReturnSizes = Type.getArgumentsAndReturnSizes(descriptor) >> 2;\n        assertEquals(3, argsAndReturnSizes - 1);\n    } else if (firstDescriptorChar == 'J' || firstDescriptorChar == 'D') {\n        assertEquals(2, pop(descriptor));\n    } else {\n        assertEquals(1, pop(descriptor));\n    }\n}", "package com.alibaba.fastjson2.internal.asm;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void popTest() {\n        String descriptor = \"I\"; // integer type\n        char firstDescriptorChar = descriptor.charAt(0);\n        if (firstDescriptorChar == '(') {\n            assertEquals(1, pop((Type.getArgumentsAndReturnSizes(descriptor) >> 2) - 1));\n        } else if (firstDescriptorChar == 'J' || firstDescriptorChar == 'D') {\n            assertEquals(2, pop(2));\n        } else {\n            assertEquals(1, pop(1));\n        }\n    }\n}", "package com.alibaba.fastjson2.internal.asm;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void popTest() {\n        Frame frame = new Frame();\n        String descriptor = \"(I)V\";\n        frame.pop(descriptor);\n        \n        assertEquals(1, frame.stackSize());\n        assertEquals(\"I\", frame.peek());\n        \n        descriptor = \"J\";\n        frame.pop(descriptor);\n        \n        assertEquals(2, frame.stackSize());\n        assertEquals(\"J\", frame.peek());\n    }\n}", "\npackage com.alibaba.fastjson2.internal.asm;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void popTest() {\n        // Test 1: Pop with a descriptor starting with '('\n        String descriptor = \"()V\";\n        int stackSize = 3;\n        Frame frame = new Frame(descriptor, stackSize);\n        assertEquals(frame.pop(descriptor), stackSize - 1);\n        \n        // Test 2: Pop with a descriptor starting with 'J' or 'D'\n        descriptor = \"J\";\n        stackSize = 3;\n        frame = new Frame(descriptor, stackSize);\n        assertEquals(frame.pop(descriptor), 2);\n        \n        // Test 3: Pop with a descriptor that is not '(' or 'J'/'D'\n        descriptor = \"I\";\n        stackSize = 3;\n        frame = new Frame(descriptor, stackSize);\n        assertEquals(frame.pop(descriptor), 1);\n    }\n}\n", "I'm not sure what you mean by \"complete the section contains <FILL> tag and output the whole test case.\" Could you please provide more context or clarify your question?", "\n@Test\npublic void popTest() {\n    String descriptor = \"(IJ)V\";\n    char firstDescriptorChar = descriptor.charAt(0);\n    if (firstDescriptorChar == '(') {\n        int argSize = Type.getArgumentsAndReturnSizes(descriptor) >> 2;\n        pop(argSize - 1);\n    } else if (firstDescriptorChar == 'J' || firstDescriptorChar == 'D') {\n        pop(2);\n    } else {\n        pop(1);\n    }\n}", "@Test\npublic void popTest() {\n    String descriptor = \"(I)V\";\n    char firstDescriptorChar = descriptor.charAt(0);\n    if (firstDescriptorChar == '(') {\n        assertEquals((Type.getArgumentsAndReturnSizes(descriptor) >> 2) - 1, 1);\n    } else if (firstDescriptorChar == 'J' || firstDescriptorChar == 'D') {\n        assertEquals(2, 2);\n    } else {\n        assertEquals(1, 1);\n    }\n}", "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void popTest() {\n        // Test case 1: Descriptor is a reference type\n        String descriptor = \"Ljava/lang/Object;\";\n        int expectedResult = 1;\n        assertEquals(expectedResult, Frame.pop(descriptor));\n        \n        // Test case 2: Descriptor is an array type\n        descriptor = \"[I\";\n        expectedResult = 1;\n        assertEquals(expectedResult, Frame.pop(descriptor));\n        \n        // Test case 3: Descriptor is a primitive type\n        descriptor = \"J\";\n        expectedResult = 2;\n        assertEquals(expectedResult, Frame.pop(descriptor));\n    }\n}", "\npackage com.alibaba.fastjson2.internal.asm;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void popTest() {\n        String descriptor = \"I\";\n        char firstDescriptorChar = descriptor.charAt(0);\n        if (firstDescriptorChar == '(') {\n            int numOfArgumentsAndReturnValues = Type.getArgumentsAndReturnSizes(descriptor) >> 2;\n            assertEquals(1, numOfArgumentsAndReturnValues);\n        } else if (firstDescriptorChar == 'J' || firstDescriptorChar == 'D') {\n            assertEquals(2, pop(descriptor));\n        } else {\n            assertEquals(1, pop(descriptor));\n        }\n    }\n}", "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void popTest() {\n        Frame frame = new Frame();\n        String descriptor = \"()V\"; // no arguments, return type is void\n        frame.pop(descriptor);\n        assertEquals(0, frame.stackSize());\n\n        descriptor = \"(I)V\"; // one argument of type int, return type is void\n        frame.pop(descriptor);\n        assertEquals(1, frame.stackSize());\n\n        descriptor = \"(II)I\"; // two arguments of type int, return type is int\n        frame.pop(descriptor);\n        assertEquals(2, frame.stackSize());\n    }\n}"]
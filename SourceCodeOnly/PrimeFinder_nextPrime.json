["package com.alibaba.fastjson2.internal.trove.impl;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PrimeFinderTest {\n    @Test\n    public void nextPrimeTest() {\n        // Test case 1: desired capacity is less than or equal to the largest known prime\n        int expected = 2;\n        int actual = PrimeFinder.nextPrime(expected);\n        assertEquals(expected, actual);\n        \n        // Test case 2: desired capacity is greater than the largest known prime\n        expected = 53;\n        actual = PrimeFinder.nextPrime(expected);\n        assertEquals(expected, actual);\n        \n        // Test case 3: desired capacity is negative\n        expected = -100;\n        actual = PrimeFinder.nextPrime(expected);\n        assertEquals(-1, actual);\n        \n        // Test case 4: desired capacity is zero\n        expected = 0;\n        actual = PrimeFinder.nextPrime(expected);\n        assertEquals(2, actual);\n    }\n}", "package com.alibaba.fastjson2.internal.trove.impl;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PrimeFinderTest {\n    @Test\n    public void nextPrimeTest() {\n        assertEquals(7, PrimeFinder.nextPrime(5));\n        assertEquals(11, PrimeFinder.nextPrime(6));\n        assertEquals(13, PrimeFinder.nextPrime(7));\n        assertEquals(17, PrimeFinder.nextPrime(8));\n    }\n}", "public static int nextPrime(int desiredCapacity) {\n    // Initialize an array to store all prime numbers up to the square root of `desiredCapacity`\n    boolean[] isComposite = new boolean[desiredCapacity];\n    \n    // Mark all multiples of 2 as composite\n    for (int i = 0; i * 2 <= desiredCapacity; i++) {\n        isComposite[i] = true;\n    }\n    \n    // Sieve out the composites by considering only prime numbers up to the square root of `desiredCapacity`\n    for (int i = 3; i * i <= desiredCapacity; i += 2) {\n        if (!isComposite[i]) {\n            for (int j = i * i; j <= desiredCapacity; j += i) {\n                isComposite[j] = true;\n            }\n        }\n    }\n    \n    // Find the first prime number that is greater than or equal to `desiredCapacity`\n    for (int i = desiredCapacity - 1; i >= 0; i--) {\n        if (!isComposite[i]) {\n            return i;\n        }\n    }\n    \n    // If no prime number is found, return the largest known prime number\n    return Integer.MAX_VALUE;\n}", "\n@Test\npublic void nextPrimeTest() {\n    // Test case 1: desiredCapacity is smaller than largest prime\n    int desiredCapacity = 2;\n    assertEquals(7, PrimeFinder.nextPrime(desiredCapacity));\n\n    // Test case 2: desiredCapacity is equal to largest prime\n    desiredCapacity = 9;\n    assertEquals(11, PrimeFinder.nextPrime(desiredCapacity));\n\n    // Test case 3: desiredCapacity is larger than largest prime\n    desiredCapacity = 100;\n    assertEquals(127, PrimeFinder.nextPrime(desiredCapacity));\n}", "package com.alibaba.fastjson2.internal.trove.impl;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PrimeFinderTest {\n    @Test\n    public void nextPrimeTest() {\n        int expected = 10;\n        int actual = PrimeFinder.nextPrime(9);\n        assertEquals(expected, actual);\n    }\n}", "@Test\npublic void nextPrimeTest() {\n  int desiredCapacity = 10;\n  assertEquals(13, PrimeFinder.nextPrime(desiredCapacity));\n}", "package com.alibaba.fastjson2.internal.trove.impl;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PrimeFinderTest {\n    @Test\n    public void nextPrimeTest() {\n        int[] primeCapacities = new int[]{1, 3, 5, 7};\n        assertEquals(5, PrimeFinder.nextPrime(4));\n        assertEquals(7, PrimeFinder.nextPrime(6));\n        assertEquals(11, PrimeFinder.nextPrime(10));\n    }\n}", "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PrimeFinderTest {\n    @Test\n    public void nextPrimeTest() {\n        // Test 1: desiredCapacity is less than the largest prime in the array\n        int result = PrimeFinder.nextPrime(4);\n        assertEquals(5, result);\n        \n        // Test 2: desiredCapacity is equal to the largest prime in the array\n        result = PrimeFinder.nextPrime(17);\n        assertEquals(19, result);\n        \n        // Test 3: desiredCapacity is greater than the largest prime in the array\n        result = PrimeFinder.nextPrime(20);\n        assertEquals(23, result);\n    }\n}", "package com.alibaba.fastjson2.internal.trove.impl;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PrimeFinderTest {\n    @Test\n    public void nextPrimeTest() {\n        assertEquals(1, PrimeFinder.nextPrime(0));\n        assertEquals(3, PrimeFinder.nextPrime(2));\n        assertEquals(5, PrimeFinder.nextPrime(4));\n        assertEquals(7, PrimeFinder.nextPrime(6));\n    }\n}", "package com.alibaba.fastjson2.internal.trove.impl;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PrimeFinderTest {\n    @Test\n    public void nextPrimeTest() {\n        int result = PrimeFinder.nextPrime(10);\n        assertEquals(13, result); // 10 is not a prime number, so the next prime number should be 13\n\n        result = PrimeFinder.nextPrime(25);\n        assertEquals(29, result); // 25 is not a prime number, so the next prime number should be 29\n\n        result = PrimeFinder.nextPrime(40);\n        assertEquals(41, result); // 40 is not a prime number, so the next prime number should be 41\n    }\n}"]
{
    "project_name": "jfreechart",
    "file_name": "Regression.java",
    "relative_path": "jfreechart/src/main/java/org/jfree/data/statistics/Regression.java",
    "execute_path": "jfreechart",
    "package": "org.jfree.data.statistics",
    "docstring": "/**\n     * Returns the parameters 'a' and 'b' for an equation y = ax^b, fitted to\n     * the data using a power regression equation.  The result is returned as\n     * an array, where double[0] --&gt; a, and double[1] --&gt; b.\n     *\n     * @param data  the data.\n     *\n     * @return The parameters.\n     */",
    "source_code": "\npublic static double[] getPowerRegression(double[][] data) {\n\n    int n = data.length;\n    if (n < 2) {\n        throw new IllegalArgumentException(\"Not enough data.\");\n    }\n\n    double sumX = 0;\n    double sumY = 0;\n    double sumXX = 0;\n    double sumXY = 0;\n    for (int i = 0; i < n; i++) {\n        double x = Math.log(data[i][0]);\n        double y = Math.log(data[i][1]);\n        sumX += x;\n        sumY += y;\n        double xx = x * x;\n        sumXX += xx;\n        double xy = x * y;\n        sumXY += xy;\n    }\n    double sxx = sumXX - (sumX * sumX) / n;\n    double sxy = sumXY - (sumX * sumY) / n;\n    double xbar = sumX / n;\n    double ybar = sumY / n;\n\n    double[] result = new double[2];\n    result[1] = sxy / sxx;\n    result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n    return result;\n\n}\n",
    "class_name": "Regression",
    "method_name": "getPowerRegression",
    "arguments": [
        "double[][] data"
    ],
    "generate_test": [
        "\npackage org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTest {\n    @Test\n    public void getPowerRegressionTest() {\n        double[][] data = {{1, 2}, {2, 4}, {3, 6}};\n        double[] result = Regression.getPowerRegression(data);\n        assertEquals(result[0], Math.pow(Math.exp(1), 2));\n        assertEquals(result[1], Math.log(6) / Math.log(2));\n    }\n}",
        "\npackage org.jfree.data.statistics;\n\nimport static org.junit.Assert.*;\nimport org.junit.Test;\n\npublic class RegressionTest {\n    @Test\n    public void getPowerRegressionTest() {\n        double[][] data = new double[10][2];\n        for (int i = 0; i < 10; i++) {\n            data[i][0] = i + 1;\n            data[i][1] = Math.pow(data[i][0], 3);\n        }\n        double[] result = Regression.getPowerRegression(data);\n        assertEquals(2, result.length);\n        assertTrue(result[0] > 0 && result[1] > 0);\n    }\n}",
        "package org.jfree.data.statistics;\n\nimport static org.junit.Assert.*;\nimport org.junit.Test;\n\npublic class RegressionTest {\n    @Test\n    public void getPowerRegressionTest() {\n        double[][] data = new double[2][2];\n        data[0] = 1.0;\n        data[1] = 4.0;\n        data[2] = 9.0;\n        data[3] = 16.0;\n        \n        double[] result = RegressionTest.getPowerRegression(data);\n        \n        assertArrayEquals(result, new double[]{2.0, 1.0}, 1e-5);\n    }\n}",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTest {\n    @Test\n    public void getPowerRegressionTest() {\n        // Test case 1: Verify that the method throws an exception when there is not enough data.\n        double[][] data = new double[1][2];\n        assertThrows(IllegalArgumentException.class, () -> Regression.getPowerRegression(data));\n\n        // Test case 2: Verify that the method returns the expected intercept and slope for a simple linear regression.\n        data = new double[][] {{1, 3}, {2, 4}};\n        double[] result = Regression.getPowerRegression(data);\n        assertEquals(result[0], 1.5); // Intercept\n        assertEquals(result[1], 2); // Slope\n\n        // Test case 3: Verify that the method returns the expected intercept and slope for a more complex regression.\n        data = new double[][] {{1, 3}, {4, 6}, {9, 12}};\n        result = Regression.getPowerRegression(data);\n        assertEquals(result[0], 5.5); // Intercept\n        assertEquals(result[1], 3); // Slope\n    }\n}\n",
        "\npackage org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTest {\n    @Test\n    public void getPowerRegressionTest() {\n        double[][] data = new double[5][2];\n        data[0] = new double[]{1, 1};\n        data[1] = new double[]{3, 9};\n        data[2] = new double[]{4, 16};\n        data[3] = new double[]{5, 25};\n        data[4] = new double[]{7, 49};\n\n        double[] result = Regression.getPowerRegression(data);\n\n        assertEquals(0.5, result[0], 0.01); // Check if the expected slope is correct\n        assertEquals(6.25, result[1], 0.01); // Check if the expected intercept is correct\n    }\n}",
        "\npackage org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTest {\n    @Test\n    public void getPowerRegressionTest() {\n        double[][] data = new double[2][2];\n        data[0][0] = 1;\n        data[0][1] = 2;\n        data[1][0] = 3;\n        data[1][1] = 4;\n        double[] result = Regression.getPowerRegression(data);\n        assertEquals(result[0], Math.pow(Math.exp(1.0), 2 - 2 * 3));\n        assertEquals(result[1], Math.pow(Math.exp(1.0), 4 - 2 * 5));\n    }\n}",
        "double[][] data = new double[3][2];\ndata[0] = new double[]{1.0, 2.0};\ndata[1] = new double[]{2.0, 4.0};\ndata[2] = new double[]{3.0, 6.0};",
        "package org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTest {\n    @Test\n    public void getPowerRegressionTest() {\n        double[][] data = new double[3][2];\n        data[0] = new double[] {1, 2};\n        data[1] = new double[] {2, 4};\n        data[2] = new double[] {3, 6};\n\n        double[] result = Regression.getPowerRegression(data);\n\n        assertEquals(result[0], Math.exp(-1));\n        assertEquals(result[1], Math.pow(Math.exp(1), -2));\n    }\n}",
        "\npackage org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTest {\n    @Test\n    public void getPowerRegressionTest() {\n        double[][] data = new double[3][2];\n        data[0] = new double[]{1, 1};\n        data[1] = new double[]{2, 4};\n        data[2] = new double[]{3, 9};\n        \n        double[] expectedResult = new double[]{Math.pow(10, -2), Math.pow(10, 1)};\n        double[] actualResult = Regression.getPowerRegression(data);\n        \n        assertArrayEquals(expectedResult, actualResult, 0.0001);\n    }\n}",
        "package org.jfree.data.statistics;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class RegressionTest {\n@Test public void getPowerRegressionTest() {  double[] data = new double[2][2];   data[0][0] = 1;   data[0][1] = 2;   data[1][0] = 3;   data[1][1] = 4;\ndouble[] result = getPowerRegression(data); assertEquals(Math.pow(Math.exp(1), 1.5 - (result[1] * Math.log(1)) / n), result[0], 0.001); } }"
    ]
}
Source code: 


public static double[] getPowerRegression(double[][] data) {

    int n = data.length;
    if (n < 2) {
        throw new IllegalArgumentException("Not enough data.");
    }

    double sumX = 0;
    double sumY = 0;
    double sumXX = 0;
    double sumXY = 0;
    for (int i = 0; i < n; i++) {
        double x = Math.log(data[i][0]);
        double y = Math.log(data[i][1]);
        sumX += x;
        sumY += y;
        double xx = x * x;
        sumXX += xx;
        double xy = x * y;
        sumXY += xy;
    }
    double sxx = sumXX - (sumX * sumX) / n;
    double sxy = sumXY - (sumX * sumY) / n;
    double xbar = sumX / n;
    double ybar = sumY / n;

    double[] result = new double[2];
    result[1] = sxy / sxx;
    result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);

    return result;

}



No.1 generated result --------------------------


package org.jfree.data.statistics;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class RegressionTest {
    @Test
    public void getPowerRegressionTest() {
        double[][] data = {{1, 2}, {2, 4}, {3, 6}};
        double[] result = Regression.getPowerRegression(data);
        assertEquals(result[0], Math.pow(Math.exp(1), 2));
        assertEquals(result[1], Math.log(6) / Math.log(2));
    }
}


No.2 generated result --------------------------


package org.jfree.data.statistics;

import static org.junit.Assert.*;
import org.junit.Test;

public class RegressionTest {
    @Test
    public void getPowerRegressionTest() {
        double[][] data = new double[10][2];
        for (int i = 0; i < 10; i++) {
            data[i][0] = i + 1;
            data[i][1] = Math.pow(data[i][0], 3);
        }
        double[] result = Regression.getPowerRegression(data);
        assertEquals(2, result.length);
        assertTrue(result[0] > 0 && result[1] > 0);
    }
}


No.3 generated result --------------------------

package org.jfree.data.statistics;

import static org.junit.Assert.*;
import org.junit.Test;

public class RegressionTest {
    @Test
    public void getPowerRegressionTest() {
        double[][] data = new double[2][2];
        data[0] = 1.0;
        data[1] = 4.0;
        data[2] = 9.0;
        data[3] = 16.0;
        
        double[] result = RegressionTest.getPowerRegression(data);
        
        assertArrayEquals(result, new double[]{2.0, 1.0}, 1e-5);
    }
}


No.4 generated result --------------------------


import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class RegressionTest {
    @Test
    public void getPowerRegressionTest() {
        // Test case 1: Verify that the method throws an exception when there is not enough data.
        double[][] data = new double[1][2];
        assertThrows(IllegalArgumentException.class, () -> Regression.getPowerRegression(data));

        // Test case 2: Verify that the method returns the expected intercept and slope for a simple linear regression.
        data = new double[][] {{1, 3}, {2, 4}};
        double[] result = Regression.getPowerRegression(data);
        assertEquals(result[0], 1.5); // Intercept
        assertEquals(result[1], 2); // Slope

        // Test case 3: Verify that the method returns the expected intercept and slope for a more complex regression.
        data = new double[][] {{1, 3}, {4, 6}, {9, 12}};
        result = Regression.getPowerRegression(data);
        assertEquals(result[0], 5.5); // Intercept
        assertEquals(result[1], 3); // Slope
    }
}



No.5 generated result --------------------------


package org.jfree.data.statistics;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class RegressionTest {
    @Test
    public void getPowerRegressionTest() {
        double[][] data = new double[5][2];
        data[0] = new double[]{1, 1};
        data[1] = new double[]{3, 9};
        data[2] = new double[]{4, 16};
        data[3] = new double[]{5, 25};
        data[4] = new double[]{7, 49};

        double[] result = Regression.getPowerRegression(data);

        assertEquals(0.5, result[0], 0.01); // Check if the expected slope is correct
        assertEquals(6.25, result[1], 0.01); // Check if the expected intercept is correct
    }
}


No.6 generated result --------------------------


package org.jfree.data.statistics;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class RegressionTest {
    @Test
    public void getPowerRegressionTest() {
        double[][] data = new double[2][2];
        data[0][0] = 1;
        data[0][1] = 2;
        data[1][0] = 3;
        data[1][1] = 4;
        double[] result = Regression.getPowerRegression(data);
        assertEquals(result[0], Math.pow(Math.exp(1.0), 2 - 2 * 3));
        assertEquals(result[1], Math.pow(Math.exp(1.0), 4 - 2 * 5));
    }
}


No.7 generated result --------------------------

double[][] data = new double[3][2];
data[0] = new double[]{1.0, 2.0};
data[1] = new double[]{2.0, 4.0};
data[2] = new double[]{3.0, 6.0};


No.8 generated result --------------------------

package org.jfree.data.statistics;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class RegressionTest {
    @Test
    public void getPowerRegressionTest() {
        double[][] data = new double[3][2];
        data[0] = new double[] {1, 2};
        data[1] = new double[] {2, 4};
        data[2] = new double[] {3, 6};

        double[] result = Regression.getPowerRegression(data);

        assertEquals(result[0], Math.exp(-1));
        assertEquals(result[1], Math.pow(Math.exp(1), -2));
    }
}


No.9 generated result --------------------------


package org.jfree.data.statistics;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class RegressionTest {
    @Test
    public void getPowerRegressionTest() {
        double[][] data = new double[3][2];
        data[0] = new double[]{1, 1};
        data[1] = new double[]{2, 4};
        data[2] = new double[]{3, 9};
        
        double[] expectedResult = new double[]{Math.pow(10, -2), Math.pow(10, 1)};
        double[] actualResult = Regression.getPowerRegression(data);
        
        assertArrayEquals(expectedResult, actualResult, 0.0001);
    }
}


No.10 generated result --------------------------

package org.jfree.data.statistics;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
public class RegressionTest {
@Test public void getPowerRegressionTest() {  double[] data = new double[2][2];   data[0][0] = 1;   data[0][1] = 2;   data[1][0] = 3;   data[1][1] = 4;
double[] result = getPowerRegression(data); assertEquals(Math.pow(Math.exp(1), 1.5 - (result[1] * Math.log(1)) / n), result[0], 0.001); } }



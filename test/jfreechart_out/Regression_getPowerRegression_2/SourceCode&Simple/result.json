{
    "project_name": "jfreechart",
    "file_name": "Regression.java",
    "relative_path": "jfreechart/src/main/java/org/jfree/data/statistics/Regression.java",
    "execute_path": "jfreechart",
    "package": "org.jfree.data.statistics",
    "docstring": "/**\n     * Returns the parameters 'a' and 'b' for an equation y = ax^b, fitted to\n     * the data using a power regression equation.  The result is returned as\n     * an array, where double[0] --&gt; a, and double[1] --&gt; b.\n     *\n     * @param data  the data.\n     *\n     * @return The parameters.\n     */",
    "source_code": "\npublic static double[] getPowerRegression(double[][] data) {\n\n    int n = data.length;\n    if (n < 2) {\n        throw new IllegalArgumentException(\"Not enough data.\");\n    }\n\n    double sumX = 0;\n    double sumY = 0;\n    double sumXX = 0;\n    double sumXY = 0;\n    for (int i = 0; i < n; i++) {\n        double x = Math.log(data[i][0]);\n        double y = Math.log(data[i][1]);\n        sumX += x;\n        sumY += y;\n        double xx = x * x;\n        sumXX += xx;\n        double xy = x * y;\n        sumXY += xy;\n    }\n    double sxx = sumXX - (sumX * sumX) / n;\n    double sxy = sumXY - (sumX * sumY) / n;\n    double xbar = sumX / n;\n    double ybar = sumY / n;\n\n    double[] result = new double[2];\n    result[1] = sxy / sxx;\n    result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n    return result;\n\n}\n",
    "class_name": "Regression",
    "method_name": "getPowerRegression",
    "arguments": [
        "double[][] data"
    ],
    "generate_test": [
        "\npackage org.jfree.data.statistics;\n\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.when;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.runners.MockitoJUnitRunner;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class RegressionTest {\n    @InjectMocks\n    private Regression regression;\n    \n    @Mock\n    private XYDataset dataset;\n    \n    @Test\n    public void getPowerRegressionTest() {\n        double[][] data = new double[3][2];\n        data[0] = new double[] {1.0, 1.0};\n        data[1] = new double[] {2.0, 4.0};\n        data[2] = new double[] {3.0, 9.0};\n        \n        when(dataset.getData()).thenReturn(data);\n        \n        double[] result = regression.getPowerRegression(dataset, 1);\n        \n        assertEquals(result[0], 4.0, 0.0001); // intercept\n        assertEquals(result[1], 2.0, 0.0001); // slope\n    }\n}\n",
        "\npackage org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTest {\n    @Test\n    public void getPowerRegressionTest() {\n        double[][] data = new double[][] {{1, 2}, {3, 4}};\n        double[] expected = new double[] {2.0, Math.exp(1.0)};\n        double[] actual = Regression.getPowerRegression(data);\n        assertArrayEquals(expected, actual, 1E-6);\n    }\n}",
        "\n@Test\npublic void getPowerRegressionTest() {\n    double[][] data = new double[3][2];\n    data[0][0] = 1;\n    data[0][1] = 10;\n    data[1][0] = 2;\n    data[1][1] = 50;\n    data[2][0] = 3;\n    data[2][1] = 80;\n    \n    double[] result = Regression.getPowerRegression(data);\n    \n    assertEquals(result[0], Math.pow(Math.exp(1.0), (5 + 49 + 78) / 3));\n    assertEquals(result[1], 5);\n}",
        "package org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTest {\n    @Test\n    public void getPowerRegressionTest() {\n        double[][] data = new double[3][2];\n        data[0] = new double[]{1, 1};\n        data[1] = new double[]{2, 4};\n        data[2] = new double[]{3, 9};\n        double[] result = Regression.getPowerRegression(data);\n        assertEquals(result[0], Math.pow(Math.exp(1), -1));\n        assertEquals(result[1], Math.pow(Math.exp(1), -2));\n    }\n}",
        "package org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTest {\n    @Test\n    public void getPowerRegressionTest() {\n        double[][] data = {{1, 2}, {3, 4}};\n        double[] expectedResult = {Math.pow(2, 0.5), Math.pow(4, 0.5)};\n        assertArrayEquals(expectedResult, Regression.getPowerRegression(data));\n    }\n}",
        "package org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTest {\n    @Test\n    public void getPowerRegressionTest() {\n        double[][] data = new double[3][2];\n        // Populate the input data with known values\n        data[0][0] = 1.0;\n        data[0][1] = 10.0;\n        data[1][0] = 5.0;\n        data[1][1] = 20.0;\n        data[2][0] = 10.0;\n        data[2][1] = 30.0;\n\n        double[] expectedResult = new double[2];\n        expectedResult[0] = 2.0;\n        expectedResult[1] = 15.0;\n\n        Regression regression = new Regression();\n        double[] actualResult = regression.getPowerRegression(data);\n\n        assertArrayEquals(expectedResult, actualResult, 1e-6, \"The computed power regression does not match the expected values.\");\n    }\n}",
        "\npackage org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTest {\n    @Test\n    public void getPowerRegressionTest() {\n        double[][] data = {{1, 2}, {3, 4}};\n        double[] expectedResult = new double[] {Math.pow(Math.exp(1), Math.log(2) - Math.log(1)), Math.pow(Math.exp(1), Math.log(4) - Math.log(9))};\n        assertArrayEquals(expectedResult, Regression.getPowerRegression(data));\n    }\n}",
        "package org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTest {\n    @Test\n    public void getPowerRegressionTest() {\n        // Create a test dataset with two data points: (x1, y1) and (x2, y2)\n        double[][] data = new double[2][2];\n        data[0][0] = 1.0;\n        data[0][1] = 1.0;\n        data[1][0] = 2.0;\n        data[1][1] = 4.0;\n\n        // Calculate the expected regression parameters (intercept and slope)\n        double intercept = -2.376582;\n        double slope = 0.907550;\n\n        // Call the getPowerRegression() method on the test dataset\n        double[] result = Regression.getPowerRegression(data);\n\n        // Check if the output matches the expected results\n        assertEquals(intercept, result[0], 1e-6);\n        assertEquals(slope, result[1], 1e-6);\n    }\n}",
        "package org.jfree.data.statistics;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\npublic class RegressionTest {\n    @Test\n    public void getPowerRegressionTest() {\n        double[][] data = new double[2][2];\n        data[0][0] = 1;\n        data[0][1] = 2;\n        data[1][0] = 3;\n        data[1][1] = 4;\n        \n        double[] result = Regression.getPowerRegression(data);\n        assertEquals(result[0], Math.pow(Math.exp(1.0), 2.5));\n        assertEquals(result[1], Math.pow(Math.exp(1.0), 3.5));\n    }\n}",
        "\n@Test\npublic void getPowerRegressionTest() {\n    // Create input dataset\n    double[][] data = new double[3][2];\n    data[0] = new double[]{1, 1};\n    data[1] = new double[]{2, 4};\n    data[2] = new double[]{3, 9};\n\n    // Calculate power regression line\n    double[] result = Regression.getPowerRegression(data);\n\n    // Check that output is correct\n    assertEquals(result[0], 1.5, 0.001);\n    assertEquals(result[1], 3.0, 0.001);\n}\n"
    ]
}
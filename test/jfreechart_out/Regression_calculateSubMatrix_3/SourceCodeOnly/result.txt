Source code: 


private static double[][] calculateSubMatrix(double[][] matrix){
    int equations = matrix.length;
    int coefficients = matrix[0].length;
    double[][] result = new double[equations - 1][coefficients - 1];
    for (int eq = 1; eq < equations; eq++) {
        double factor = matrix[0][0] / matrix[eq][0];
        for (int coe = 1; coe < coefficients; coe++) {
            result[eq - 1][coe -1] = matrix[0][coe] - matrix[eq][coe]
                    * factor;
        }
    }
    if (equations == 1) {
        return result;
    }
    // check for zero pivot element
    if (result[0][0] == 0) {
        boolean found = false;
        for (int i = 0; i < result.length; i ++) {
            if (result[i][0] != 0) {
                found = true;
                double[] temp = result[0];
                System.arraycopy(result[i], 0, result[0], 0, 
                        result[i].length);
                System.arraycopy(temp, 0, result[i], 0, temp.length);
                break;
            }
        }
        if (!found) {
            //System.out.println("Equation has no solution!");
            return new double[equations - 1][coefficients - 1];
        }
    }
    double[][] subMatrix = calculateSubMatrix(result);
    for (int eq = 1; eq < equations -  1; eq++) {
        result[eq][0] = 0;
        if (coefficients - 1 - 1 >= 0) System.arraycopy(subMatrix[eq - 1], 0, result[eq], 1, coefficients - 1 - 1);
    }
    return result;
}



No.1 generated result --------------------------

package org.jfree.data.statistics;

import static org.junit.jupiter.api.Assertions.*;

public class RegressionTest {
    @Test
    public void calculateSubMatrixTest() {
        double[][] matrix = new double[][] {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
        double[][] subMatrix = Regression.calculateSubMatrix(matrix);
        assertEquals(subMatrix[0][0], 1, 0.01);
        assertEquals(subMatrix[0][1], -3, 0.01);
        assertEquals(subMatrix[0][2], 4, 0.01);
        assertEquals(subMatrix[1][0], 7, 0.01);
        assertEquals(subMatrix[1][1], -9, 0.01);
        assertEquals(subMatrix[1][2], 10, 0.01);
    }
}


No.2 generated result --------------------------

@Test
public void calculateSubMatrixTest() {
    double[][] matrix = new double[][] {{1, 2}, {3, 4}};
    double[][] expectedResult = new double[][] {{0, -1}, {1.5, -2}};
    double[][] actualResult = calculateSubMatrix(matrix);
    assertArrayEquals(expectedResult, actualResult);
}


No.3 generated result --------------------------


package org.jfree.data.statistics;

import static org.junit.jupiter.api.Assertions.*;

public class RegressionTest {
    @Test
    public void calculateSubMatrixTest() {
        double[][] matrix = {{1, 2, 3}, {4, 5, 6}};
        double[][] result = calculateSubMatrix(matrix);
        assertEquals(1, result[0][0], 0.001);
        assertEquals(2, result[0][1], 0.001);
        assertEquals(3, result[0][2], 0.001);
    }
}


No.4 generated result --------------------------

package org.jfree.data.statistics;

import static org.junit.jupiter.api.Assertions.*;

public class RegressionTest {
    @Test
    public void calculateSubMatrixTest() {
        double[][] matrix = new double[3][2];
        matrix[0][0] = 1;
        matrix[0][1] = 2;
        matrix[1][0] = 3;
        matrix[1][1] = 4;
        matrix[2][0] = 5;
        matrix[2][1] = 6;

        double[][] subMatrix = calculateSubMatrix(matrix);

        assertEquals(2, subMatrix.length);
        assertEquals(1, subMatrix[0].length);
        assertEquals(-3, subMatrix[0][0]);
        assertEquals(-5, subMatrix[1][0]);
    }
}


No.5 generated result --------------------------


import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class RegressionTest {
    @Test
    public void calculateSubMatrixTest() {
        double[][] matrix = new double[][]{{1, 2}, {3, 4}};
        double[][] expectedResult = new double[][]{{-3.0/18.0, -2.5/9.0}, {-6.0/18.0, -2.75/9.0}};
        
        double[][] actualResult = calculateSubMatrix(matrix);
        
        assertArrayEquals(expectedResult, actualResult);
    }
}



No.6 generated result --------------------------


@Test
public void calculateSubMatrixTest() {
    double[][] matrix = new double[2][3];
    matrix[0][0] = 1;
    matrix[0][1] = 2;
    matrix[0][2] = 3;
    matrix[1][0] = 4;
    matrix[1][1] = 5;
    matrix[1][2] = 6;
    
    double[][] expectedResult = new double[1][2];
    expectedResult[0][0] = -3;
    expectedResult[0][1] = -9;
    
    assertArrayEquals(expectedResult, calculateSubMatrix(matrix));
}


No.7 generated result --------------------------


package org.jfree.data.statistics;

import static org.junit.Assert.*;

public class RegressionTest {
    @Test
    public void calculateSubMatrixTest() {
        double[][] matrix = {{1, 2}, {3, 4}};
        double[][] expectedResult = {{0.5, 1.5}, {1.666667, 2.333333}};
        assertEquals(expectedResult, calculateSubMatrix(matrix));
    }
}



No.8 generated result --------------------------

package org.jfree.data.statistics;

import static org.junit.Assert.*;
import org.junit.Test;

public class RegressionTest {
    @Test
    public void calculateSubMatrixTest() {
        double[][] matrix = {{1, 2}, {3, 4}};
        double[][] expectedResult = {{0, 1}, {1, 0}};
        
        assertArrayEquals(expectedResult, Regression.calculateSubMatrix(matrix));
    }
}


No.9 generated result --------------------------


package org.jfree.data.statistics;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class RegressionTest {
    @Test
    public void calculateSubMatrixTest() {
        double[][] matrix = new double[3][3];
        matrix[0][0] = 1;
        matrix[0][1] = 2;
        matrix[0][2] = 3;
        matrix[1][0] = 4;
        matrix[1][1] = 5;
        matrix[1][2] = 6;
        matrix[2][0] = 7;
        matrix[2][1] = 8;
        matrix[2][2] = 9;
        
        double[][] result = Regression.calculateSubMatrix(matrix);
        
        assertEquals(result.length, 2);
        assertEquals(result[0].length, 2);
        assertEquals(result[1].length, 2);
        assertEquals(result[0][0], 4);
        assertEquals(result[0][1], 5);
        assertEquals(result[1][0], 7);
        assertEquals(result[1][1], 8);
    }
}


No.10 generated result --------------------------

package org.jfree.data.statistics;

import static org.junit.jupiter.api.Assertions.*;

public class RegressionTest {
    @Test
    public void calculateSubMatrixTest() {
        double[][] matrix = {{1, 2}, {3, 4}};
        double[][] expectedResult = {{0, 0}, {0, 0}};

        assertArrayEquals(expectedResult, Regression.calculateSubMatrix(matrix));
    }
}



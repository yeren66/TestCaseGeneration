["package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        KeyedValues data = new KeyedValues();\n        String expectedOutput = \"{\\\"key1\\\":\\\"value1\\\",\\\"key2\\\":\\\"value2\\\"}\";\n        assertEquals(expectedOutput, JSONUtils.writeKeyedValues(data));\n    }\n}", "\n@Test\npublic void writeKeyedValuesTest() {\n    KeyedValues data = new KeyedValues();\n    StringWriter sw = new StringWriter();\n    try {\n        JSONUtils.writeKeyedValues(data, sw);\n    } catch (IOException ex) {\n        throw new RuntimeException(ex);\n    }\n    assertEquals(\"{\\\"Key\\\":\\\"Value\\\"}\", sw.toString());\n}", "@Test\npublic void writeKeyedValuesTest() {\n    KeyedValues data = new KeyedValues(Arrays.asList(\"key1\", \"key2\"), Arrays.asList(\"value1\", \"value2\"));\n    String expectedOutput = \"{\\\"key1\\\":\\\"value1\\\", \\\"key2\\\":\\\"value2\\\"}\";\n    \n    String actualOutput = JSONUtils.writeKeyedValues(data);\n    \n    assertEquals(expectedOutput, actualOutput);\n}", "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        KeyedValues data = new KeyedValues();\n        StringWriter sw = new StringWriter();\n        try {\n            JSONUtils.writeKeyedValues(data, sw);\n        } catch (IOException ex) {\n            throw new RuntimeException(ex);\n        }\n        assertEquals(\"\", sw.toString());\n    }\n}", "@Test\npublic void writeKeyedValuesTest() {\n    // create a KeyedValues object with some data\n    KeyedValues keyedValues = new KeyedValues();\n    keyedValues.add(\"key1\", \"value1\");\n    keyedValues.add(\"key2\", 5);\n    \n    // write the data to a StringWriter\n    StringWriter sw = new StringWriter();\n    JSONUtils.writeKeyedValues(keyedValues, sw);\n    \n    // convert the StringWriter to a String\n    String jsonString = sw.toString();\n    \n    // parse the JSON string and check that it matches the expected output\n    ObjectMapper mapper = new ObjectMapper();\n    JsonNode node = mapper.readTree(jsonString);\n    assertEquals(\"key1\", node.get(\"key1\").asText());\n    assertEquals(5, node.get(\"key2\").asInt());\n}", "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        // Create a KeyedValues object with some test data\n        KeyedValues data = new KeyedValues(\"key1\", \"value1\");\n        data.add(\"key2\", \"value2\");\n        data.add(\"key3\", \"value3\");\n        \n        // Write the KeyedValues object to a StringWriter\n        StringWriter sw = new StringWriter();\n        JSONUtils.writeKeyedValues(data, sw);\n        \n        // Check that the output is correct\n        assertEquals(\"{\\\"key1\\\":\\\"value1\\\",\\\"key2\\\":\\\"value2\\\",\\\"key3\\\":\\\"value3\\\"}\", sw.toString());\n    }\n}", "\n@Test\npublic void writeKeyedValuesTest() {\n    KeyedValues data = new KeyedValues();\n    data.put(\"key1\", \"value1\");\n    data.put(\"key2\", \"value2\");\n    StringWriter sw = new StringWriter();\n    try {\n        JSONUtils.writeKeyedValues(data, sw);\n    } catch (IOException ex) {\n        throw new RuntimeException(ex);\n    }\n    assertEquals(\"{\\\"key1\\\":\\\"value1\\\",\\\"key2\\\":\\\"value2\\\"}\", sw.toString());\n}", "\n@Test\npublic void writeKeyedValuesTest() {\n    JSONUtils jsonUtils = new JSONUtils();\n    KeyedValues data = new KeyedValues();\n    StringWriter sw = new StringWriter();\n    try {\n        jsonUtils.writeKeyedValues(data, sw);\n    } catch (IOException ex) {\n        throw new RuntimeException(ex);\n    }\n    assertEquals(\"\", sw.toString());\n}\n", "\npackage org.jfree.data.json;\n\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.util.HashMap;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() throws IOException {\n        KeyedValues data = new KeyedValues();\n        StringWriter sw = new StringWriter();\n        \n        // Test for null argument\n        assertThrows(IllegalArgumentException.class, () -> {\n            JSONUtils.writeKeyedValues(null, sw);\n        });\n        \n        // Test for empty data\n        JSONUtils.writeKeyedValues(data, sw);\n        String output = sw.toString();\n        assertTrue(output.isEmpty());\n        \n        // Test for non-empty data\n        data.put(\"key1\", \"value1\");\n        data.put(\"key2\", \"value2\");\n        JSONUtils.writeKeyedValues(data, sw);\n        output = sw.toString();\n        assertFalse(output.isEmpty());\n        \n        // Test for exception handling\n        data.setValue(\"key3\", null);\n        sw = new StringWriter();\n        assertThrows(IOException.class, () -> {\n            JSONUtils.writeKeyedValues(data, sw);\n        });\n    }\n}", "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        KeyedValues data = new KeyedValues();\n        StringWriter sw = new StringWriter();\n        try {\n            writeKeyedValues(data, sw);\n        } catch (IOException ex) {\n            throw new RuntimeException(ex);\n        }\n        assertEquals(\"\", sw.toString());\n    }\n}"]
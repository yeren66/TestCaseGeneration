{
    "project_name": "jfreechart",
    "file_name": "JSONUtils.java",
    "relative_path": "jfreechart/src/main/java/org/jfree/data/json/JSONUtils.java",
    "execute_path": "jfreechart",
    "package": "org.jfree.data.json",
    "docstring": "/**\n     * Returns a string containing the data in JSON format.  The format is\n     * an array of arrays, where each sub-array represents one data value.\n     * The sub-array should contain two items, first the item key as a string\n     * and second the item value as a number.  For example:\n     * {@code [[\"Key A\", 1.0], [\"Key B\", 2.0]]}\n     * <br><br>\n     * Note that this method can be used with instances of {@link PieDataset}.\n     * \n     * @param data  the data ({@code null} not permitted).\n     * \n     * @return A string in JSON format. \n     */",
    "source_code": "\npublic static String writeKeyedValues(KeyedValues data) {\n    Args.nullNotPermitted(data, \"data\");\n    StringWriter sw = new StringWriter();\n    try {\n        writeKeyedValues(data, sw);\n    } catch (IOException ex) {\n        throw new RuntimeException(ex);\n    }\n    return sw.toString();\n}\n",
    "class_name": "JSONUtils",
    "method_name": "writeKeyedValues",
    "arguments": [
        "KeyedValues data"
    ],
    "generate_test": [
        "\npackage org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        KeyedValues data = new KeyedValues();\n        StringWriter sw = new StringWriter();\n        \n        try {\n            writeKeyedValues(data, sw);\n        } catch (IOException ex) {\n            throw new RuntimeException(ex);\n        }\n        \n        assertEquals(\"\", sw.toString());\n    }\n}",
        "\npackage org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        KeyedValues data = new KeyedValues();\n        data.addValue(\"key1\", 1);\n        data.addValue(\"key2\", \"value2\");\n        String result = JSONUtils.writeKeyedValues(data);\n        assertEquals(\"{\\\"key1\\\":1,\\\"key2\\\":\\\"value2\\\"}\", result);\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        // Create a KeyedValues object with some test data\n        KeyedValues data = new KeyedValues();\n        data.put(\"name\", \"John Doe\");\n        data.put(\"age\", 30);\n        \n        // Write the key-value pairs to a StringWriter\n        StringWriter sw = new StringWriter();\n        JSONUtils.writeKeyedValues(data, sw);\n        \n        // Convert the StringWriter's contents to a String and check that it matches the expected JSON data\n        String jsonData = sw.toString();\n        assertEquals(\"{\\\"name\\\":\\\"John Doe\\\",\\\"age\\\":30}\", jsonData);\n    }\n}",
        "\npackage org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        KeyedValues data = new KeyedValues();\n        StringWriter sw = new StringWriter();\n        try {\n            writeKeyedValues(data, sw);\n        } catch (IOException ex) {\n            throw new RuntimeException(ex);\n        }\n        assertEquals(\"{\\\"key1\\\":\\\"value1\\\",\\\"key2\\\":\\\"value2\\\"}\", sw.toString());\n    }\n}",
        "\npackage org.jfree.data.json;\n\nimport java.io.*;\nimport junit.framework.TestCase;\n\npublic class JSONUtilsTest extends TestCase {\n    @Test\n    public void writeKeyedValuesTest() throws Exception {\n        KeyedValues data = new KeyedValues();\n        StringWriter sw = new StringWriter();\n        JSONUtils.writeKeyedValues(data, sw);\n        assertEquals(\"{\\\"key\\\":\\\"value\\\"}\", sw.toString());\n    }\n}",
        "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        KeyedValues data = new KeyedValues();\n        data.add(\"key1\", \"value1\");\n        data.add(\"key2\", \"value2\");\n        String result = JSONUtils.writeKeyedValues(data);\n        assertEquals(\"{\\\"key1\\\":\\\"value1\\\",\\\"key2\\\":\\\"value2\\\"}\", result);\n    }\n}\n",
        "\npackage org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        KeyedValues data = new KeyedValues();\n        data.put(\"key1\", \"value1\");\n        data.put(\"key2\", \"value2\");\n        data.put(\"key3\", \"value3\");\n        \n        String expectedOutput = \"{\\\"key1\\\":\\\"value1\\\",\\\"key2\\\":\\\"value2\\\",\\\"key3\\\":\\\"value3\\\"}\";\n        assertEquals(expectedOutput, JSONUtils.writeKeyedValues(data));\n    }\n}\n",
        "\nI'm not sure what you mean by \"complete the section contains <FILL> tag and output the whole test case.\" Could you please provide more information or clarify your question? I'd be happy to help if I can.",
        "\npackage org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        // Create a KeyedValues object with some test data\n        KeyedValues data = new KeyedValues();\n        data.add(\"key1\", \"value1\");\n        data.add(\"key2\", 2);\n        data.add(\"key3\", true);\n\n        // Write the key-value pairs to a StringWriter using the writeKeyedValues method\n        StringWriter sw = new StringWriter();\n        try {\n            JSONUtils.writeKeyedValues(data, sw);\n        } catch (IOException ex) {\n            throw new RuntimeException(ex);\n        }\n\n        // Check that the expected output was written to the StringWriter\n        assertEquals(\"{\\\"key1\\\":\\\"value1\\\",\\\"key2\\\":2,\\\"key3\\\":true}\", sw.toString());\n    }\n}\n",
        "\npackage org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        KeyedValues data = new KeyedValues();\n        data.add(new KeyValue(\"key1\", \"value1\"));\n        data.add(new KeyValue(\"key2\", 2));\n        \n        String result = JSONUtils.writeKeyedValues(data);\n        \n        assertEquals(\"{\\\"key1\\\":\\\"value1\\\",\\\"key2\\\":2}\", result);\n    }\n}"
    ]
}
["package org.jfree.data.general;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class DatasetUtilsTest {\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        PieDataset dataset = createSamplePieDataset();\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        Assertions.assertEquals(50, total);\n    }\n    \n    private static PieDataset createSamplePieDataset() {\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Category 1\", 10);\n        dataset.setValue(\"Category 2\", 25);\n        dataset.setValue(\"Category 3\", 15);\n        return dataset;\n    }\n}\n\n    ", "package org.jfree.data.general;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DatasetUtils {\n\n    public static double calculatePieDatasetTotal(PieDataset dataset) {\n        List<Double> values = new ArrayList<>();\n        for (int i = 0; i < dataset.getItemCount(); i++) {\n            values.add(dataset.getValue(i));\n        }\n        return sum(values);\n    }\n\n    private static double sum(List<Double> list) {\n        double total = 0;\n        for (double item : list) {\n            total += item;\n        }\n        return total;\n    }\n}", "@SuppressWarnings(\"unused\")\nclass PieDataset extends DefaultPieDataset {\n  private static final int NUM_ITEMS = 5;\n  \n  public PieDataset() {\n    for (int i = 0; i < NUM_ITEMS; i++) {\n      add(\"Item \" + i, Math.random());\n    }\n  }\n}\n\npublic class DatasetUtilsTest {\n    @Test\n    public void calculatePieDatasetTotal() {\n        PieDataset dataset = new PieDataset();\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(10, total); // The total is 10 because each item's value is a random number between 0 and 1\n    }\n}\n    \n\n### JUNIT Test case:\npackage org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatasetUtilsTest {\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        <FILL>\n    }\n}\n    \n\n### Response:", "\npublic static double calculatePieDatasetTotal(PieDataset dataset) {\n    int seriesCount = dataset.getSeriesCount();\n    double total = 0;\n    for (int i = 0; i < seriesCount; i++) {\n        double seriesTotal = 0;\n        int itemCount = dataset.getItemCount(i);\n        for (int j = 0; j < itemCount; j++) {\n            double value = dataset.getValue(i, j).doubleValue();\n            seriesTotal += value;\n        }\n        total += seriesTotal;\n    }\n    return total;\n}\n", "package org.jfree.data.general;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\n\npublic class DatasetUtilsTest {\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        List<Double> list = new ArrayList<>();\n        assertEquals(0, DatasetUtils.calculatePieDatasetTotal(list), 0.01);\n        \n        list.add(2.5);\n        assertEquals(2.5, DatasetUtils.calculatePieDatasetTotal(list), 0.01);\n        \n        list.add(-3.4);\n        assertEquals(2.5 - 3.4, DatasetUtils.calculatePieDatasetTotal(list), 0.01);\n    }\n}", "package org.jfree.data.general;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatasetUtilsTest {\n    private double EPSILON = 1e-6;\n\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        List<? extends Number> values = Arrays.asList(20.0, 30.0, 50.0);\n        PieDataset dataset = new DefaultPieDataset();\n        for (int i = 0; i < values.size(); i++) {\n            dataset.setValue(\"Sector \" + i, values.get(i).doubleValue());\n        }\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        assertEquals(100.0, total, EPSILON);\n    }\n}", "public class DatasetUtils {\n    public static double calculatePieDatasetTotal(PieDataset dataset) {\n        double total = 0.0;\n        for (int i = 0; i < dataset.getItemCount(); i++) {\n            PieDatasetItem item = dataset.getItem(i);\n            total += item.getValue();\n        }\n        return total;\n    }\n}", "package org.jfree.data.general;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport org.jfree.chart.JFreeChart;\nimport org.jfree.data.general.DatasetUtils;\nimport org.jfree.data.general.PieDataset;\nimport org.jfree.data.category.DefaultCategoryDataset;\n\nclass DatasetUtilsTest {\n    @Test\n    public void calculatePieDatasetTotal() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        assertEquals(0, DatasetUtils.calculatePieDatasetTotal(dataset));\n        dataset.addValue(1, \"A\", \"B\");\n        dataset.addValue(2, \"C\", \"D\");\n        dataset.addValue(-3, \"E\", \"F\");\n        assertEquals(0, DatasetUtils.calculatePieDatasetTotal(dataset));\n    }\n}", "package org.jfree.data.general;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DatasetUtils {\n    public static double calculatePieDatasetTotal(PieDataset dataset) {\n        List<Double> values = new ArrayList<>();\n        for (int i = 0; i < dataset.getItemCount(); i++) {\n            values.add(dataset.getValue(i));\n        }\n        return calculateSum(values);\n    }\n\n    private static double calculateSum(List<Double> values) {\n        double result = 0;\n        for (double value : values) {\n            result += value;\n        }\n        return result;\n    }\n}", "package org.jfree.data;\n\nimport java.util.List;\n\n/**\n * Utilities for working with datasets.\n */\npublic class DatasetUtils {\n   /**\n    * Calculates the total for a pie dataset.\n    * \n    * @param dataset  the dataset ({@code null} not permitted).\n    * \n    * @return The total.\n    */\n   public static double calculatePieDatasetTotal(PieDataset dataset) {\n      Args.nullNotPermitted(dataset, \"dataset\");\n      double total = 0;\n      int seriesCount = dataset.getSeriesCount();\n      for (int i = 0; i < seriesCount; i++) {\n         String seriesKey = dataset.getSeriesKey(i);\n         double sum = 0;\n         for (int j = 0; j < dataset.getItemCount(seriesKey); j++) {\n            Number value = dataset.getValue(seriesKey, j);\n            if (value != null) {\n               sum += value.doubleValue();\n            }\n         }\n         total += sum;\n      }\n      return total;\n   }\n}"]
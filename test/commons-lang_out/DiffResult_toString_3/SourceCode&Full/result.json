{
    "project_name": "commons-lang",
    "file_name": "DiffResult.java",
    "relative_path": "commons-lang/src/main/java/org/apache/commons/lang3/builder/DiffResult.java",
    "execute_path": "commons-lang",
    "package": "org.apache.commons.lang3.builder",
    "docstring": "/**\n     * Builds a {@link String} description of the differences contained within\n     * this {@link DiffResult}, using the supplied {@link ToStringStyle}.\n     *\n     * @param style\n     *            the {@link ToStringStyle} to use when outputting the objects\n     *\n     * @return a {@link String} description of the differences.\n     */",
    "source_code": "\npublic String toString(final ToStringStyle style) {\n    if (diffList.isEmpty()) {\n        return OBJECTS_SAME_STRING;\n    }\n\n    final ToStringBuilder lhsBuilder = new ToStringBuilder(lhs, style);\n    final ToStringBuilder rhsBuilder = new ToStringBuilder(rhs, style);\n\n    diffList.forEach(diff -> {\n        lhsBuilder.append(diff.getFieldName(), diff.getLeft());\n        rhsBuilder.append(diff.getFieldName(), diff.getRight());\n    });\n\n    return String.format(\"%s %s %s\", lhsBuilder.build(), DIFFERS_STRING, rhsBuilder.build());\n}\n",
    "class_name": "DiffResult",
    "method_name": "toString",
    "arguments": [
        "ToStringStyle style"
    ],
    "generate_test": [
        "<DIFF_RESULT_TO_STRING_TESTS>",
        "@Test\npublic void testToString() throws Exception {\n    // Given\n    Diff diff1 = mock(Diff.class);\n    when(diff1.getLeft()).thenReturn(\"left\");\n    when(diff1.getRight()).thenReturn(\"right\");\n    when(diff1.toString()).thenReturn(\"some diff\");\n    DiffResult<String> testSubject = new DiffResult<>();\n    List<Diff<?>> diffs = new ArrayList<>();\n    diffs.add(diff1);\n    testSubject.setDiffs(diffs);\n    \n    // When\n    String result = testSubject.toString();\n    \n    // Then\n    assertEquals(\"left [some diff] right\", result);\n}\n    \n@Test\npublic void testToStringNoDifferences() throws Exception {\n    // Given\n    DiffResult<String> testSubject = new DiffResult<>();\n    List<Diff<?>> diffs = Collections.emptyList();\n    testSubject.setDiffs(diffs);\n    \n    // When\n    String result = testSubject.toString();\n    \n    // Then\n    assertEquals(\"Objects are the same\", result);\n}",
        "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class DiffResultTest {\n\n    private static class Person {\n        private String name;\n        private int age;\n        private boolean smoker;\n\n        public Person(String name, int age) {\n            this.name = name;\n            this.age = age;\n        }\n\n        @Override\n        public String toString() {\n            return \"Person[name=\" + name + \",age=\" + age + \"]\";\n        }\n    }\n\n    private DiffResult<Person> createDiff(Person lhs, Person rhs) {\n        List<Diff<?>> diffList = new ArrayList<>();\n        if (!lhs.name.equals(rhs.name)) {\n            diffList.add(new Diff<>(\"name\", lhs.name, rhs.name));\n        }\n        if (lhs.age != rhs.age) {\n            diffList.add(new Diff<>(\"age\", lhs.age, rhs.age));\n        }\n        return new DiffResult<>(diffList, lhs, rhs);\n    }\n\n    @Test\n    public void testToString() {\n        Person person1 = new Person(\"John Doe\", 32);\n        Person person2 = new Person(\"Joe Bloggs\", 26);\n        DiffResult<Person> diff = createDiff(person1, person2);\n\n        assertEquals(\"Person[name=John Doe,age=32] differs from Person[name=Joe Bloggs,age=26]\",\n                diff.toString());\n    }\n}",
        "package org.apache.commons.lang3.builder;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class DiffResultTest {\n    @Test\n    public void toStringTest() {\n        final Person person1 = new Person();\n        person1.setName(\"John Doe\");\n        person1.setAge(32);\n\n        final Person person2 = new Person();\n        person2.setName(\"Joe Bloggs\");\n        person2.setAge(26);\n\n        final DiffResult<Person> diffResult = DiffBuilder.reflectionDiff(person1, person2).build();\n        assertEquals(diffResult.toString(), \"Person[name=John Doe,age=32] differs from Person[name=Joe Bloggs,age=26]\");\n    }\n}\n\nclass Person {\n    private String name;\n    private int age;\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n}",
        "Timeout",
        "package diff;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DiffResult<T> implements Iterable<Diff<?>> {\n    private final List<Diff<?>> diffList = new ArrayList<>();\n    private final T lhs;\n    private final T rhs;\n    private ToStringStyle style = ToStringStyle.DEFAULT_STYLE;\n\n    public DiffResult(T lhs, T rhs) {\n        this.lhs = lhs;\n        this.rhs = rhs;\n    }\n\n    @Override\n    public Iterator<Diff<?>> iterator() {\n        return diffList.iterator();\n    }\n}\n\n    \n\n### JUNIT Test case:\npackage org.apache.commons.lang3.builder;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DiffResultTest {\n    @Test\n    public void toStringTest() {\n        <FILL>\n    }\n}\n    \n\n### Response:",
        "package org.apache.commons.lang3.builder;\n\nimport java.util.*;\n\npublic class DiffResult<T> implements Iterable<Diff<?>> {\n    private static final String OBJECTS_SAME_STRING = \"Objects are the same\";\n    private static final String DIFFERS_STRING = \"differs from\";\n\n    /**\n     * The list of differences.\n     */\n    private final List<Diff<?>> diffList;\n\n    /**\n     * The object this DiffResult compares.\n     */\n    private final T lhs;\n\n    /**\n     * The other object this DiffResult compares.\n     */\n    private final T rhs;\n\n    /**\n     * The style to output the objects when using toString().\n     */\n    private ToStringStyle style;\n\n    public DiffResult(final List<Diff<?>> diffList, final T lhs, final T rhs) {\n        this.diffList = diffList;\n        this.lhs = lhs;\n        this.rhs = rhs;\n        this.style = ToStringStyle.DEFAULT_STYLE;\n    }\n\n    public DiffResult(final List<Diff<?>> diffList, final T lhs, final T rhs, final ToStringStyle style) {\n        if (diffList == null || diffList.isEmpty()) {\n            throw new IllegalArgumentException(\"The list of differences must not be empty\");\n        }\n\n        this.diffList = diffList;\n        this.lhs = lhs;\n        this.rhs = rhs;\n        this.style = style == null ? ToStringStyle.DEFAULT_STYLE : style;\n    }\n\n    public List<Diff<?>> getDiffs() {\n        return Collections.unmodifiableList(diffList);\n    }\n\n    public T getLeft() {\n        return lhs;\n    }\n\n    public int getNumberOfDiffs() {\n        return diffList.size();\n    }\n\n    public T getRight() {\n        return rhs;\n    }\n\n    @Override\n    public Iterator<Diff<?>> iterator() {\n        return diffList.iterator();\n    }\n\n    public String toString() {\n        if (diffList.isEmpty()) {\n            return OBJECTS_SAME_STRING;\n        }\n\n        StringBuilder lhsBuilder = new ToStringBuilder(lhs, style);\n        StringBuilder rhsBuilder = new ToStringBuilder(rhs, style);\n\n        for (Diff<?> diff : this) {\n            lhsBuilder.append(diff.getFieldName(), diff.getLeft());\n            rhsBuilder.append(diff.getFieldName(), diff.getRight());\n        }\n\n        return String.format(\"%s %s %s\", lhsBuilder.build(), DIFFERS_STRING, rhsBuilder.build());\n    }\n}",
        "<DIFF_RESULT_TO_STRING>",
        "package diff;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nclass DiffResultTest {\n    @Test\n    public void toStringTest() throws Exception {\n        // Arrange\n        final Object lhs = new Person();\n        final Object rhs = new Person();\n        final String expectedToStringMessage = \"Person[name=,age=0] differs from Person[name=,age=0]\";\n\n        // Act\n        final DiffResult<Object> result = new DiffResult<>(lhs, rhs);\n\n        // Assert\n        Assertions.assertEquals(expectedToStringMessage, result.toString());\n    }\n}",
        "package org.apache.commons.lang3.builder;\nimport java.util.*;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class DiffResultTest {\n    @Test\n    public void toStringTest() {\n        //given\n        Person lhs = new Person();\n        lhs.name = \"John Doe\";\n        lhs.age = 32;\n        \n        Person rhs = new Person();\n        rhs.name = \"Joe Bloggs\";\n        rhs.age = 26;\n        \n        DiffResult<Person> diffResult = new DiffResult<>(\n            Collections.singletonList(new Diff<>(\"age\", lhs.age, rhs.age)),\n                lhs, rhs);\n        \n        //when\n        String resultString = diffResult.toString();\n        \n        //then\n        assertEquals(\"Person[name=John Doe,age=32] differs from Person[name=Joe Bloggs,age=26]\", resultString);\n    }\n}\n//TODO: check if there is more test cases to cover this class."
    ]
}
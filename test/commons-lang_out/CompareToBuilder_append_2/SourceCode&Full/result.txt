Source code: 


public CompareToBuilder append(final double[] lhs, final double[] rhs) {
    if (comparison != 0) {
        return this;
    }
    if (lhs == rhs) {
        return this;
    }
    if (lhs == null) {
        comparison = -1;
        return this;
    }
    if (rhs == null) {
        comparison = 1;
        return this;
    }
    if (lhs.length != rhs.length) {
        comparison = lhs.length < rhs.length ? -1 : 1;
        return this;
    }
    for (int i = 0; i < lhs.length && comparison == 0; i++) {
        append(lhs[i], rhs[i]);
    }
    return this;
}



No.1 generated result --------------------------

Timeout


No.2 generated result --------------------------

Timeout


No.3 generated result --------------------------

Timeout


No.4 generated result --------------------------

package com.mycompany.test;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class CompareToBuilderTest {
    @Test
    public void appendTest() {
        TestObject test1 = new TestObject("Value1", "Group1");
        TestObject test2 = new TestObject("Value1", "Group2");
        assertEquals(new CompareToBuilder().append(test1, test2).toComparison(), -1);
    }
}

class TestObject {
    private String value;
    private String group;
    
    public TestObject(String value, String group) {
        this.value = value;
        this.group = group;
    }
    
    @Override
    public int compareTo(TestObject o) {
        return new CompareToBuilder().append(this.value, o.value).toComparison();
    }
}


No.5 generated result --------------------------

package org.apache.commons.lang3.builder;
import java.util.Comparator;
public class CompareToBuilderTest {

  @Test
  public void testAppendSuper() {
      assertEquals(-1, new CompareToBuilder().appendSuper(-1).toComparison());
      assertEquals(0, new CompareToBuilder().appendSuper(0).toComparison());
      assertEquals(1, new CompareToBuilder().appendSuper(1).toComparison());
  }

  @Test
  public void testReflectionAppend() {
      final Object lhs = "a";
      final Object rhs = "b";

      // case 1: compare two objects of the same type using reflection
      assertEquals(-1, new CompareToBuilder().append(lhs, rhs).toComparison());

      // case 2: compare an object to null using reflection
      assertEquals(1, new CompareToBuilder().append(lhs, (Object) null).toComparison());

      // case 3: compare two objects of different types
      final Object obj = new Object();
      try {
          new CompareToBuilder().append(lhs, obj);
          fail("No exception was thrown for comparing two objects of different types.");
      } catch (final IllegalArgumentException ex) {}
  }

  @Test
  public void testAppendSuperMultiple() {
      assertEquals(-1, new CompareToBuilder().appendSuper(-1).append(0, "a").toComparison());
      assertEquals(1, new CompareToBuilder().appendSuper(1).append(0, "a").toComparison());
  }

  @Test
  public void testLessThan() {
      final Object obj = new Object();
      // case 1: same objects
      assertEquals(0, new CompareToBuilder().append(obj, obj).toComparison());
      // case 2: null
      assertEquals(-1, new CompareToBuilder().append(null, "a").toComparison());
      assertTrue((CompareToBuilder.ReflectionAppendable) new CompareToBuilder().append(null, "a")).isNull());
      assertFalse(((CompareToBuilder.ReflectionAppendable) new CompareToBuilder().append("a", null)).isNull());
      // case 3: compare two objects
      final Object obj2 = new Object();
      assertEquals(-1, new CompareToBuilder().append(obj, obj2).toComparison());
  }
}


No.6 generated result --------------------------

package org.apache.commons.lang3.builder;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class CompareToBuilderTest {
    @Test
    public void appendTest() {
        assertEquals(0, new CompareToBuilder().toComparison());
        assertEquals(-1, new CompareToBuilder().append("ab", "ba").toComparison());
        assertEquals(0, new CompareToBuilder().append("abc", "abc").toComparison());
    }
}


No.7 generated result --------------------------

Timeout


No.8 generated result --------------------------


package org.apache.commons.lang3.builder;
import java.util.Comparator;
import java.io.Serializable;
public class CompareToBuilderTest{ 
   private int x = 0, y = 1; 
    @org.junit.jupiter.api.BeforeEach 
    public void setUp() throws Exception { 
        this.x = 0; 
        this.y = 1; 
    } 
    
    @org.junit.jupiter.api.Test 
    public void testAppendTest(){ 
        CompareToBuilder builder = new CompareToBuilder(); 
        // compare two null values 
        assertEquals(builder.append((Object) null, (Object)null).toComparison(), 0); 
        
        // compare a null to a value that's an instance of Serializable 
        assertEquals(builder.append((Serializable)null, this).toComparison(), -1); 
        assertEquals(builder.append(this, (Serializable)null).toComparison(), 1); 
        
        // compare a null to an arbitrary object 
        assertEquals(builder.append((Object)null, new Object()).toComparison(), -1); 
        assertEquals(builder.append(new Object(), (Object)null).toComparison(), 1); 
        
        // compare two equal instances of Serializable 
        CompareToBuilder builder2 = new CompareToBuilder(); 
        assertEquals(builder.append((Serializable)this, this).toComparison(), 0); 
    } 
}



No.9 generated result --------------------------

Timeout


No.10 generated result --------------------------

package org.apache.commons.lang3.builder;

import java.util.Comparator;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class CompareToBuilderTest {
    @Test
    public void appendTest() {
        // Create a compare builder instance to use
        CompareToBuilder builder = new CompareToBuilder();
        
        // Test comparing two objects that are equal using append(Object, Object) 
        assertEquals(0, builder.append("A", "A").toComparison());
        
        // Test comparing two objects that are not equal using append(Object, Object) 
        assertNotEquals(builder.append("A", "B").toComparison(), builder.append("A", "C").toComparison());
    }
}
    



{
    "project_name": "commons-lang",
    "file_name": "CompareToBuilder.java",
    "relative_path": "commons-lang/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java",
    "execute_path": "commons-lang",
    "package": "org.apache.commons.lang3.builder",
    "docstring": "/**\n     * Appends to the {@code builder} the deep comparison of\n     * two {@code double} arrays.\n     *\n     * <ol>\n     *  <li>Check if arrays are the same using {@code ==}</li>\n     *  <li>Check if for {@code null}, {@code null} is less than non-{@code null}</li>\n     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n     *  <li>Check array contents element by element using {@link #append(double, double)}</li>\n     * </ol>\n     *\n     * @param lhs  left-hand array\n     * @param rhs  right-hand array\n     * @return this\n     */",
    "source_code": "\npublic CompareToBuilder append(final double[] lhs, final double[] rhs) {\n    if (comparison != 0) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null) {\n        comparison = -1;\n        return this;\n    }\n    if (rhs == null) {\n        comparison = 1;\n        return this;\n    }\n    if (lhs.length != rhs.length) {\n        comparison = lhs.length < rhs.length ? -1 : 1;\n        return this;\n    }\n    for (int i = 0; i < lhs.length && comparison == 0; i++) {\n        append(lhs[i], rhs[i]);\n    }\n    return this;\n}\n",
    "class_name": "CompareToBuilder",
    "method_name": "append",
    "arguments": [
        "double[] lhs",
        "double[] rhs"
    ],
    "generate_test": [
        "Timeout",
        "Timeout",
        "Timeout",
        "package com.mycompany.test;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        TestObject test1 = new TestObject(\"Value1\", \"Group1\");\n        TestObject test2 = new TestObject(\"Value1\", \"Group2\");\n        assertEquals(new CompareToBuilder().append(test1, test2).toComparison(), -1);\n    }\n}\n\nclass TestObject {\n    private String value;\n    private String group;\n    \n    public TestObject(String value, String group) {\n        this.value = value;\n        this.group = group;\n    }\n    \n    @Override\n    public int compareTo(TestObject o) {\n        return new CompareToBuilder().append(this.value, o.value).toComparison();\n    }\n}",
        "package org.apache.commons.lang3.builder;\nimport java.util.Comparator;\npublic class CompareToBuilderTest {\n\n  @Test\n  public void testAppendSuper() {\n      assertEquals(-1, new CompareToBuilder().appendSuper(-1).toComparison());\n      assertEquals(0, new CompareToBuilder().appendSuper(0).toComparison());\n      assertEquals(1, new CompareToBuilder().appendSuper(1).toComparison());\n  }\n\n  @Test\n  public void testReflectionAppend() {\n      final Object lhs = \"a\";\n      final Object rhs = \"b\";\n\n      // case 1: compare two objects of the same type using reflection\n      assertEquals(-1, new CompareToBuilder().append(lhs, rhs).toComparison());\n\n      // case 2: compare an object to null using reflection\n      assertEquals(1, new CompareToBuilder().append(lhs, (Object) null).toComparison());\n\n      // case 3: compare two objects of different types\n      final Object obj = new Object();\n      try {\n          new CompareToBuilder().append(lhs, obj);\n          fail(\"No exception was thrown for comparing two objects of different types.\");\n      } catch (final IllegalArgumentException ex) {}\n  }\n\n  @Test\n  public void testAppendSuperMultiple() {\n      assertEquals(-1, new CompareToBuilder().appendSuper(-1).append(0, \"a\").toComparison());\n      assertEquals(1, new CompareToBuilder().appendSuper(1).append(0, \"a\").toComparison());\n  }\n\n  @Test\n  public void testLessThan() {\n      final Object obj = new Object();\n      // case 1: same objects\n      assertEquals(0, new CompareToBuilder().append(obj, obj).toComparison());\n      // case 2: null\n      assertEquals(-1, new CompareToBuilder().append(null, \"a\").toComparison());\n      assertTrue((CompareToBuilder.ReflectionAppendable) new CompareToBuilder().append(null, \"a\")).isNull());\n      assertFalse(((CompareToBuilder.ReflectionAppendable) new CompareToBuilder().append(\"a\", null)).isNull());\n      // case 3: compare two objects\n      final Object obj2 = new Object();\n      assertEquals(-1, new CompareToBuilder().append(obj, obj2).toComparison());\n  }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        assertEquals(0, new CompareToBuilder().toComparison());\n        assertEquals(-1, new CompareToBuilder().append(\"ab\", \"ba\").toComparison());\n        assertEquals(0, new CompareToBuilder().append(\"abc\", \"abc\").toComparison());\n    }\n}",
        "Timeout",
        "\npackage org.apache.commons.lang3.builder;\nimport java.util.Comparator;\nimport java.io.Serializable;\npublic class CompareToBuilderTest{ \n   private int x = 0, y = 1; \n    @org.junit.jupiter.api.BeforeEach \n    public void setUp() throws Exception { \n        this.x = 0; \n        this.y = 1; \n    } \n    \n    @org.junit.jupiter.api.Test \n    public void testAppendTest(){ \n        CompareToBuilder builder = new CompareToBuilder(); \n        // compare two null values \n        assertEquals(builder.append((Object) null, (Object)null).toComparison(), 0); \n        \n        // compare a null to a value that's an instance of Serializable \n        assertEquals(builder.append((Serializable)null, this).toComparison(), -1); \n        assertEquals(builder.append(this, (Serializable)null).toComparison(), 1); \n        \n        // compare a null to an arbitrary object \n        assertEquals(builder.append((Object)null, new Object()).toComparison(), -1); \n        assertEquals(builder.append(new Object(), (Object)null).toComparison(), 1); \n        \n        // compare two equal instances of Serializable \n        CompareToBuilder builder2 = new CompareToBuilder(); \n        assertEquals(builder.append((Serializable)this, this).toComparison(), 0); \n    } \n}\n",
        "Timeout",
        "package org.apache.commons.lang3.builder;\n\nimport java.util.Comparator;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Create a compare builder instance to use\n        CompareToBuilder builder = new CompareToBuilder();\n        \n        // Test comparing two objects that are equal using append(Object, Object) \n        assertEquals(0, builder.append(\"A\", \"A\").toComparison());\n        \n        // Test comparing two objects that are not equal using append(Object, Object) \n        assertNotEquals(builder.append(\"A\", \"B\").toComparison(), builder.append(\"A\", \"C\").toComparison());\n    }\n}\n    "
    ]
}
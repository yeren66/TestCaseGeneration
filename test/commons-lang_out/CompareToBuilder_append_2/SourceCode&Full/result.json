["Timeout", "@Test\npublic void appendTest() {\n    CompareToBuilder builder = new CompareToBuilder();\n    assertEquals(builder.toComparison(), 0);\n    builder.append(0, -1);\n    assertEquals(builder.toComparison(), +1);\n    builder.append(1, 0);\n    assertEquals(builder.toComparison(), +1);\n    builder.append(2, 2);\n    assertEquals(builder.toComparison(), 0);\n}", "package org.apache.commons.lang3.builder;\n\nimport java.util.Comparator;\n\n/**\n * Tests {@link CompareToBuilder}.\n */\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // test empty builder\n        CompareToBuilder bldr = new CompareToBuilder();\n        assertEquals(0, bldr.toComparison());\n\n        // add a null and a value\n        bldr.append((Object) null, \"hello\");\n        assertTrue(bldr.toComparison() < 0);\n        bldr = new CompareToBuilder();\n        bldr.append(\"world\", (Object) null);\n        assertTrue(bldr.toComparison() > 0);\n        bldr = new CompareToBuilder();\n        bldr.append((Object) null, (Object) null);\n        assertEquals(0, bldr.toComparison());\n\n        // add some values of different types\n        bldr = new CompareToBuilder();\n        bldr.append(\"hello\", \"world\");\n        assertTrue(bldr.toComparison() < 0);\n        bldr = new CompareToBuilder();\n        bldr.append(1, 2);\n        assertTrue(bldr.toComparison() < 0);\n        bldr = new CompareToBuilder();\n        bldr.append(\"hello\", \"world\");\n        assertEquals(0, bldr.toComparison());\n\n        // add some values of the same type\n        bldr = new CompareToBuilder();\n        bldr.append(\"world\", \"hello\").append('a', 'b');\n        assertTrue(bldr.toComparison() < 0);\n        bldr = new CompareToBuilder();\n        bldr.append(\"world\", \"hello\").append('b', 'a');\n        assertTrue(bldr.toComparison() > 0);\n        bldr = new CompareToBuilder();\n        bldr.append(\"world\", \"hello\").append('b', 'b');\n        assertEquals(0, bldlr.toComparison());\n\n    }\n}", "Timeout", "Timeout", "@Test\npublic void testAppend() throws Exception {\n    // Tests for the various types\n    assertEquals(0, new CompareToBuilder().append(\"A\", \"B\").toComparison());\n    assertEquals(-1, new CompareToBuilder().append(\"A\", \"C\").toComparison());\n    assertEquals(1, new CompareToBuilder().append(\"D\", \"C\").toComparison());\n    \n    // Tests for arrays\n    Object[] array1 = new Object[] {\"abc\"};\n    Object[] array2 = new Object[] {\"def\"};\n    assertEquals(-1, new CompareToBuilder().append(array1, array2).toComparison());\n    \n    array1 = new Object[] {\"abc\"};\n    array2 = new Object[] {\"abc\", \"def\"};\n    assertEquals(-1, new CompareToBuilder().append(array1, array2).toComparison());\n    \n    array1 = new Object[] {\"abc\", \"bcd\"};\n    array2 = new Object[] {\"abc\", \"cde\"};\n    assertEquals(-1, new CompareToBuilder().append(array1, array2).toComparison());\n}", "\npackage org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class CompareToBuilderTest {\n\n    @Test\n    public void testCompareToBuilderAppendSuper() {\n        final int superCompareTo = 100;\n        // Test with only a super value (the other is zero)\n        assertEquals(superCompareTo, new CompareToBuilder().appendSuper(superCompareTo).toComparison());\n        // Test with another value\n        assertTrue(new CompareToBuilder().append(0).appendSuper(superCompareTo).toComparison() < 0);\n    }\n}", "public class Person implements Comparable<Person> {\n    private int age;\n    private String name;\n    \n    public Person(int age, String name) {\n        this.age = age;\n        this.name = name;\n    }\n    \n    @Override\n    public int compareTo(Person other) {\n        return CompareToBuilder.reflectionCompare(this, other);\n    }\n}", "Timeout", "CompareToBuilder can be used to compare two objects by calling the following methods in this order: \n1. append() - This method compares two objects using the equals() method if they are comparable or else it uses the == operator. If an exception is thrown during comparison, then a negative integer is returned. Otherwise, zero is returned.  \n2. appendSuper() - This method returns the result of calling the superclass's compareTo() method. \n3. toComparison() - This method converts the results of the comparisons into a final int value that can be used as return from compareTo().  \nHere is an example of how you would use CompareToBuilder: \nCompareToBuilder builder = new CompareToBuilder(); \nbuilder.append(obj1, obj2); // This will return a negative integer if obj1 is less than obj2 or zero if they are equal or greater than each other. \nint result = builder.toComparison(); \nreturn result; \nThis is how you would use it to compare the contents of two arrays. \nCompareToBuilder builder = new CompareToBuilder(); \nbuilder.append(arr1, arr2); // This will return a negative integer if arr1 is less than arr2 or zero if they are equal or greater than each other. \nint result = builder.toComparison(); \nreturn result; \nThis is how you would use it to compare the contents of two arrays using the == operator. \nCompareToBuilder builder = new CompareToBuilder(); \nbuilder.append(arr1, arr2); // This will return a negative integer if arr1 is less than arr2 or zero if they are equal or greater than each other. \nint result = builder.toComparison(); \nreturn result;"]
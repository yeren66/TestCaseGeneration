{
    "project_name": "commons-lang",
    "file_name": "CompareToBuilder.java",
    "relative_path": "commons-lang/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java",
    "execute_path": "commons-lang",
    "package": "org.apache.commons.lang3.builder",
    "docstring": "/**\n     * Appends to the {@code builder} the deep comparison of\n     * two {@code double} arrays.\n     *\n     * <ol>\n     *  <li>Check if arrays are the same using {@code ==}</li>\n     *  <li>Check if for {@code null}, {@code null} is less than non-{@code null}</li>\n     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n     *  <li>Check array contents element by element using {@link #append(double, double)}</li>\n     * </ol>\n     *\n     * @param lhs  left-hand array\n     * @param rhs  right-hand array\n     * @return this\n     */",
    "source_code": "\npublic CompareToBuilder append(final double[] lhs, final double[] rhs) {\n    if (comparison != 0) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null) {\n        comparison = -1;\n        return this;\n    }\n    if (rhs == null) {\n        comparison = 1;\n        return this;\n    }\n    if (lhs.length != rhs.length) {\n        comparison = lhs.length < rhs.length ? -1 : 1;\n        return this;\n    }\n    for (int i = 0; i < lhs.length && comparison == 0; i++) {\n        append(lhs[i], rhs[i]);\n    }\n    return this;\n}\n",
    "class_name": "CompareToBuilder",
    "method_name": "append",
    "arguments": [
        "double[] lhs",
        "double[] rhs"
    ],
    "generate_test": [
        "\npackage org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        double[] lhs = new double[] { 1.0, 2.0, 3.0 };\n        double[] rhs = new double[] { 4.0, 5.0, 6.0 };\n\n        CompareToBuilder builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        assertEquals(-1, builder.getComparison());\n    }\n}\n",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Test case 1: same length, same contents\n        double[] lhs = new double[]{1.0, 2.0, 3.0};\n        double[] rhs = new double[]{1.0, 2.0, 3.0};\n        CompareToBuilder builder = new CompareToBuilder();\n        assertEquals(builder.append(lhs, rhs).toComparison(), 0);\n\n        // Test case 2: same length, different contents\n        lhs = new double[]{1.0, 2.0, 3.0};\n        rhs = new double[]{1.0, 4.0, 5.0};\n        builder = new CompareToBuilder();\n        assertEquals(builder.append(lhs, rhs).toComparison(), -1);\n\n        // Test case 3: different length, same contents\n        lhs = new double[]{1.0, 2.0};\n        rhs = new double[]{1.0, 2.0, 3.0};\n        builder = new CompareToBuilder();\n        assertEquals(builder.append(lhs, rhs).toComparison(), -1);\n\n        // Test case 4: different length, different contents\n        lhs = new double[]{1.0, 2.0};\n        rhs = new double[]{3.0, 4.0, 5.0};\n        builder = new CompareToBuilder();\n        assertEquals(builder.append(lhs, rhs).toComparison(), -1);\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Arrange\n        double[] lhs = new double[]{1, 2};\n        double[] rhs = new double[]{3, 4};\n        \n        // Act\n        CompareToBuilder builder = new CompareToBuilder();\n        int result = builder.append(lhs, rhs).build();\n        \n        // Assert\n        assertEquals(-1, result);\n    }\n}",
        "@Test\npublic void appendTest() {\n    double[] arr1 = new double[] { 1.0, 2.0 };\n    double[] arr2 = new double[] { 3.0, 4.0 };\n    CompareToBuilder builder = new CompareToBuilder();\n    int result = builder.append(arr1, arr2).build();\n    assertTrue(result < 0); // Check that the first array is less than the second array\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        double[] lhs = new double[]{1.0, 2.0, 3.0};\n        double[] rhs = new double[]{1.0, 2.0, 3.0};\n        CompareToBuilder builder = new CompareToBuilder();\n        int comparison = builder.append(lhs, rhs).toComparison();\n        assertEquals(comparison, 0);\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Test 1: lhs is null and rhs is not null\n        double[] lhs1 = null;\n        double[] rhs1 = new double[3];\n        \n        int expected1 = -1;\n        int actual1 = CompareToBuilder.append(lhs1, rhs1).comparison;\n        \n        assertEquals(expected1, actual1);\n        \n        // Test 2: lhs is not null and rhs is null\n        double[] lhs2 = new double[3];\n        double[] rhs2 = null;\n        \n        int expected2 = 1;\n        int actual2 = CompareToBuilder.append(lhs2, rhs2).comparison;\n        \n        assertEquals(expected2, actual2);\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    private final double[] lhs = new double[] {1.0, 2.0};\n    private final double[] rhs = new double[] {3.0, 4.0};\n    \n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        int result = builder.append(lhs, rhs).toComparison();\n        \n        assertEquals(-1, result);\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Test case 1: both arrays are null\n        double[] lhs = null;\n        double[] rhs = null;\n        assertEquals(0, new CompareToBuilder().append(lhs, rhs).toComparison());\n        \n        // Test case 2: left array is null and right array is not null\n        lhs = null;\n        rhs = new double[]{1.0};\n        assertEquals(-1, new CompareToBuilder().append(lhs, rhs).toComparison());\n        \n        // Test case 3: left array is not null and right array is null\n        lhs = new double[]{1.0};\n        rhs = null;\n        assertEquals(1, new CompareToBuilder().append(lhs, rhs).toComparison());\n        \n        // Test case 4: both arrays are not null but have different lengths\n        lhs = new double[]{1.0, 2.0};\n        rhs = new double[]{1.0};\n        assertEquals(1, new CompareToBuilder().append(lhs, rhs).toComparison());\n        \n        // Test case 5: both arrays are not null and have the same length but different elements\n        lhs = new double[]{1.0, 2.0};\n        rhs = new double[]{3.0, 4.0};\n        assertEquals(-1, new CompareToBuilder().append(lhs, rhs).toComparison());\n        \n        // Test case 6: both arrays are not null and have the same length and elements\n        lhs = new double[]{1.0, 2.0};\n        rhs = new double[]{1.0, 2.0};\n        assertEquals(0, new CompareToBuilder().append(lhs, rhs).toComparison());\n    }\n}",
        "\npackage org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        double[] lhs = new double[] {1.0, 2.0, 3.0};\n        double[] rhs = new double[] {1.0, 2.0, 4.0};\n        CompareToBuilder builder = new CompareToBuilder();\n        assertEquals(builder.append(lhs, rhs).getComparison(), -1);\n    }\n}\n",
        "\n@Test\npublic void appendTest() {\n    // Test 1: Testing for equality of arrays\n    double[] lhs = new double[] {1.0, 2.0};\n    double[] rhs = new double[] {1.0, 2.0};\n    CompareToBuilder builder = new CompareToBuilder().append(lhs, rhs);\n    assertEquals(0, builder.toComparison());\n\n    // Test 2: Testing for inequality of arrays (different lengths)\n    lhs = new double[] {1.0, 2.0};\n    rhs = new double[] {1.0, 2.0, 3.0};\n    builder = new CompareToBuilder().append(lhs, rhs);\n    assertEquals(-1, builder.toComparison());\n\n    // Test 3: Testing for inequality of arrays (different values)\n    lhs = new double[] {1.0, 2.0};\n    rhs = new double[] {1.0, 3.0};\n    builder = new CompareToBuilder().append(lhs, rhs);\n    assertEquals(-1, builder.toComparison());\n\n    // Test 4: Testing for inequality of arrays (one array is null)\n    lhs = new double[] {1.0, 2.0};\n    rhs = null;\n    builder = new CompareToBuilder().append(lhs, rhs);\n    assertEquals(-1, builder.toComparison());\n}"
    ]
}
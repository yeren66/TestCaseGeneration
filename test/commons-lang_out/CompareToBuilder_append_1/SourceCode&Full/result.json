{
    "project_name": "commons-lang",
    "file_name": "CompareToBuilder.java",
    "relative_path": "commons-lang/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java",
    "execute_path": "commons-lang",
    "package": "org.apache.commons.lang3.builder",
    "docstring": "/**\n     * Appends to the {@code builder} the deep comparison of\n     * two {@code byte} arrays.\n     *\n     * <ol>\n     *  <li>Check if arrays are the same using {@code ==}</li>\n     *  <li>Check if for {@code null}, {@code null} is less than non-{@code null}</li>\n     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n     *  <li>Check array contents element by element using {@link #append(byte, byte)}</li>\n     * </ol>\n     *\n     * @param lhs  left-hand array\n     * @param rhs  right-hand array\n     * @return this\n     */",
    "source_code": "\npublic CompareToBuilder append(final byte[] lhs, final byte[] rhs) {\n    if (comparison != 0) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null) {\n        comparison = -1;\n        return this;\n    }\n    if (rhs == null) {\n        comparison = 1;\n        return this;\n    }\n    if (lhs.length != rhs.length) {\n        comparison = lhs.length < rhs.length ? -1 : 1;\n        return this;\n    }\n    for (int i = 0; i < lhs.length && comparison == 0; i++) {\n        append(lhs[i], rhs[i]);\n    }\n    return this;\n}\n",
    "class_name": "CompareToBuilder",
    "method_name": "append",
    "arguments": [
        "byte[] lhs",
        "byte[] rhs"
    ],
    "generate_test": [
        "     package CompareToBuilder;\n     \n     \n     import org.junit.jupiter.api.*;\n     import static org.junit.jupiter.api.Assertions.*;\n     \n     public class AppendTest {\n     \n         @Test\n         void append() {\n             CompareToBuilder builder = new CompareToBuilder();\n     \n             String string1 = \"abc\";\n             String string2 = \"abc\";\n             builder.append(string1, string2);\n             assertEquals(0, builder.toComparison());\n     \n             builder = new CompareToBuilder();\n             string1 = \"abc\";\n             string2 = \"abcd\";\n             builder.append(string1, string2);\n             assertTrue(builder.toComparison() < 0);\n     \n             builder = new CompareToBuilder();\n             string1 = \"abcd\";\n             string2 = \"abc\";\n             builder.append(string1, string2);\n             assertTrue(builder.toComparison() > 0);\n         }\n     }",
        "package org.apache.commons.lang3;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // simple test, with equal parameters\n        assertEquals(0, new CompareToBuilder().append(\"abc\", \"abc\").toComparison());\n\n        // simple test, with LHS less than RHS\n        assertTrue(new CompareToBuilder().append(\"abc\", \"def\").toComparison() < 0);\n        \n        // simple test, with LHS greater than RHS\n        assertTrue(new CompareToBuilder().append(\"def\", \"abc\").toComparison() > 0);\n        \n        // simple test, with same parameters and different types\n        assertEquals(0, new CompareToBuilder().append(\"abc\", (Object)\"abc\").toComparison());\n        \n        // simple test, with LHS less than RHS and different types\n        assertTrue(new CompareToBuilder().append((Object) \"abc\", \"def\").toComparison() < 0);\n    }\n}",
        "@Override\npublic int compareTo(MyClass other) {\n    return new CompareToBuilder()\n            .append(this.value1, other.value1)\n            .append(this.value2, other.value2)\n            .toComparison();\n}",
        "Timeout",
        "Timeout",
        "Timeout",
        "Timeout",
        "package org.apache.commons.lang3.builder;\n\nimport java.util.Objects;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Tests Appendable interface using compareTo(Comparable)\n        Comparable<String> obj1 = \"Hello\";\n        Comparable<String> obj2 = \"World\";\n        assertTrue(CompareToBuilder.reflectionAppend(obj1, obj2).toComparison() < 0);\n        assertTrue(CompareToBuilder.reflectionAppend(obj2, obj1).toComparison() > 0);\n        assertEquals(0, CompareToBuilder.reflectionAppend(obj1, \"Hello\").toComparison());\n    }\n}\n",
        "String str1 = \"string 1\";\nString str2 = \"string 2\";\nint result = new CompareToBuilder()\n            .append(str1, str2)\n            .toComparison();\nassertEquals(-1, result);",
        "Timeout"
    ]
}
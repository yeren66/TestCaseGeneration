Source code: 


public CompareToBuilder append(final byte[] lhs, final byte[] rhs) {
    if (comparison != 0) {
        return this;
    }
    if (lhs == rhs) {
        return this;
    }
    if (lhs == null) {
        comparison = -1;
        return this;
    }
    if (rhs == null) {
        comparison = 1;
        return this;
    }
    if (lhs.length != rhs.length) {
        comparison = lhs.length < rhs.length ? -1 : 1;
        return this;
    }
    for (int i = 0; i < lhs.length && comparison == 0; i++) {
        append(lhs[i], rhs[i]);
    }
    return this;
}



No.1 generated result --------------------------

     package CompareToBuilder;
     
     
     import org.junit.jupiter.api.*;
     import static org.junit.jupiter.api.Assertions.*;
     
     public class AppendTest {
     
         @Test
         void append() {
             CompareToBuilder builder = new CompareToBuilder();
     
             String string1 = "abc";
             String string2 = "abc";
             builder.append(string1, string2);
             assertEquals(0, builder.toComparison());
     
             builder = new CompareToBuilder();
             string1 = "abc";
             string2 = "abcd";
             builder.append(string1, string2);
             assertTrue(builder.toComparison() < 0);
     
             builder = new CompareToBuilder();
             string1 = "abcd";
             string2 = "abc";
             builder.append(string1, string2);
             assertTrue(builder.toComparison() > 0);
         }
     }


No.2 generated result --------------------------

package org.apache.commons.lang3;
import static org.junit.jupiter.api.Assertions.*;

public class CompareToBuilderTest {
    @Test
    public void appendTest() {
        // simple test, with equal parameters
        assertEquals(0, new CompareToBuilder().append("abc", "abc").toComparison());

        // simple test, with LHS less than RHS
        assertTrue(new CompareToBuilder().append("abc", "def").toComparison() < 0);
        
        // simple test, with LHS greater than RHS
        assertTrue(new CompareToBuilder().append("def", "abc").toComparison() > 0);
        
        // simple test, with same parameters and different types
        assertEquals(0, new CompareToBuilder().append("abc", (Object)"abc").toComparison());
        
        // simple test, with LHS less than RHS and different types
        assertTrue(new CompareToBuilder().append((Object) "abc", "def").toComparison() < 0);
    }
}


No.3 generated result --------------------------

@Override
public int compareTo(MyClass other) {
    return new CompareToBuilder()
            .append(this.value1, other.value1)
            .append(this.value2, other.value2)
            .toComparison();
}


No.4 generated result --------------------------

Timeout


No.5 generated result --------------------------

Timeout


No.6 generated result --------------------------

Timeout


No.7 generated result --------------------------

Timeout


No.8 generated result --------------------------

package org.apache.commons.lang3.builder;

import java.util.Objects;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CompareToBuilderTest {
    @Test
    public void appendTest() {
        // Tests Appendable interface using compareTo(Comparable)
        Comparable<String> obj1 = "Hello";
        Comparable<String> obj2 = "World";
        assertTrue(CompareToBuilder.reflectionAppend(obj1, obj2).toComparison() < 0);
        assertTrue(CompareToBuilder.reflectionAppend(obj2, obj1).toComparison() > 0);
        assertEquals(0, CompareToBuilder.reflectionAppend(obj1, "Hello").toComparison());
    }
}



No.9 generated result --------------------------

String str1 = "string 1";
String str2 = "string 2";
int result = new CompareToBuilder()
            .append(str1, str2)
            .toComparison();
assertEquals(-1, result);


No.10 generated result --------------------------

Timeout



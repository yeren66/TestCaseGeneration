["package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Arrange\n        byte[] lhs = new byte[] {1, 2};\n        byte[] rhs = new byte[] {3, 4};\n        \n        // Act\n        CompareToBuilder compareToBuilder = new CompareToBuilder().append(lhs, rhs);\n        \n        // Assert\n        assertEquals(-1, compareToBuilder.toComparison());\n    }\n}", "@Test\npublic void appendTest() {\n    CompareToBuilder builder = new CompareToBuilder();\n    byte[] array1 = new byte[] { 0, 1, 2 };\n    byte[] array2 = new byte[] { 3, 4, 5 };\n    builder.append(array1, array2);\n    assertEquals(-1, builder.getComparison());\n}", "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Test that null is treated as less than any other value\n        byte[] lhs = null;\n        byte[] rhs = new byte[0];\n        assertEquals(-1, new CompareToBuilder().append(lhs, rhs).toComparison());\n        \n        // Test that arrays with different lengths are compared by length\n        lhs = new byte[3];\n        rhs = new byte[2];\n        assertEquals(1, new CompareToBuilder().append(lhs, rhs).toComparison());\n        \n        // Test that equal arrays are compared element-wise\n        lhs = new byte[] {0, 1};\n        rhs = new byte[] {0, 2};\n        assertEquals(-1, new CompareToBuilder().append(lhs, rhs).toComparison());\n        \n        // Test that unequal arrays are compared element-wise\n        lhs = new byte[] {0, 1};\n        rhs = new byte[] {0, 3};\n        assertEquals(-1, new CompareToBuilder().append(lhs, rhs).toComparison());\n    }\n}", "\npackage org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        byte[] lhs = new byte[] { 1, 2, 3 };\n        byte[] rhs = new byte[] { 4, 5, 6 };\n        CompareToBuilder builder = new CompareToBuilder();\n        assertEquals(-1, builder.append(lhs, rhs).toComparison());\n    }\n}", "\npackage org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        byte[] lhs = new byte[] { 1, 2, 3 };\n        byte[] rhs = new byte[] { 4, 5, 6 };\n        CompareToBuilder builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        assertEquals(-1, builder.toComparison());\n    }\n}", "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        byte[] lhs = new byte[] {1, 2};\n        byte[] rhs = new byte[] {3, 4};\n        CompareToBuilder compareToBuilder = new CompareToBuilder();\n        assertEquals(compareToBuilder.append(lhs, rhs).toComparison(), -1);\n    }\n}", "\npackage org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Test 1: equal arrays\n        byte[] arr1 = new byte[]{0, 1, 2};\n        byte[] arr2 = new byte[]{0, 1, 2};\n        CompareToBuilder builder = new CompareToBuilder().append(arr1, arr2);\n        assertEquals(0, builder.toComparison());\n        \n        // Test 2: different array lengths\n        arr1 = new byte[]{0, 1, 2};\n        arr2 = new byte[]{0, 1};\n        builder = new CompareToBuilder().append(arr1, arr2);\n        assertEquals(-1, builder.toComparison());\n        \n        // Test 3: different array contents\n        arr1 = new byte[]{0, 1, 2};\n        arr2 = new byte[]{0, 1, 3};\n        builder = new CompareToBuilder().append(arr1, arr2);\n        assertEquals(-1, builder.toComparison());\n        \n        // Test 4: one array null\n        arr1 = new byte[]{0, 1, 2};\n        arr2 = null;\n        builder = new CompareToBuilder().append(arr1, arr2);\n        assertEquals(-1, builder.toComparison());\n        \n        // Test 5: both arrays null\n        arr1 = null;\n        arr2 = null;\n        builder = new CompareToBuilder().append(arr1, arr2);\n        assertEquals(0, builder.toComparison());\n    }\n}", "\n@Test\npublic void appendTest() {\n    // Test that null arrays are handled correctly\n    assertEquals(0, new CompareToBuilder().append((byte[]) null, (byte[]) null).toComparison());\n    assertEquals(-1, new CompareToBuilder().append((byte[]) null, new byte[] { 0 }).toComparison());\n    assertEquals(1, new CompareToBuilder().append(new byte[] { 0 }, (byte[]) null).toComparison());\n    \n    // Test that arrays with different lengths are handled correctly\n    assertEquals(-1, new CompareToBuilder().append(new byte[] {}, new byte[] { 0 }).toComparison());\n    assertEquals(1, new CompareToBuilder().append(new byte[] { 0 }, new byte[] {}).toComparison());\n    \n    // Test that arrays with the same length are handled correctly\n    assertEquals(0, new CompareToBuilder().append(new byte[] { 0 }, new byte[] { 0 }).toComparison());\n    assertEquals(-1, new CompareToBuilder().append(new byte[] { 0 }, new byte[] { 1 }).toComparison());\n    assertEquals(1, new CompareToBuilder().append(new byte[] { 1 }, new byte[] { 0 }).toComparison());\n    \n    // Test that arrays with the same content are handled correctly\n    assertEquals(0, new CompareToBuilder().append(new byte[] { 0, 1 }, new byte[] { 0, 1 }).toComparison());\n}", "@Test\npublic void appendTest() {\n    CompareToBuilder builder = new CompareToBuilder();\n    \n    // Test case 1: compare two equal byte arrays\n    byte[] array1 = {1, 2, 3};\n    byte[] array2 = {1, 2, 3};\n    builder.append(array1, array2);\n    assertEquals(0, builder.toComparison());\n    \n    // Test case 2: compare two unequal byte arrays (different length)\n    byte[] array3 = {1, 2, 3};\n    byte[] array4 = {1, 2, 3, 4};\n    builder.append(array3, array4);\n    assertEquals(-1, builder.toComparison());\n    \n    // Test case 3: compare two unequal byte arrays (same length)\n    byte[] array5 = {1, 2, 3};\n    byte[] array6 = {1, 2, 4};\n    builder.append(array5, array6);\n    assertEquals(-1, builder.toComparison());\n    \n    // Test case 4: compare two unequal byte arrays (same length) with different values\n    byte[] array7 = {1, 2, 3};\n    byte[] array8 = {1, 2, -4};\n    builder.append(array7, array8);\n    assertEquals(-1, builder.toComparison());\n}", "\npackage org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        // Test case 1: Both arrays are empty\n        byte[] lhs = {};\n        byte[] rhs = {};\n        assertEquals(new CompareToBuilder().append(lhs, rhs).build(), 0);\n\n        // Test case 2: Arrays have different lengths\n        lhs = {1, 2};\n        rhs = {3, 4, 5};\n        assertNotEquals(new CompareToBuilder().append(lhs, rhs).build(), 0);\n\n        // Test case 3: Arrays have the same length but different elements\n        lhs = {1, 2};\n        rhs = {3, 4};\n        assertNotEquals(new CompareToBuilder().append(lhs, rhs).build(), 0);\n\n        // Test case 4: Arrays are identical\n        lhs = {1, 2, 3};\n        rhs = {1, 2, 3};\n        assertEquals(new CompareToBuilder().append(lhs, rhs).build(), 0);\n    }\n}\n"]
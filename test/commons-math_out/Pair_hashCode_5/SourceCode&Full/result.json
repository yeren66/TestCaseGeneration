["package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Create a pair with null key and value components\n        Pair<String, Integer> p1 = new Pair<>(null, null);\n        assertEquals(0, p1.hashCode());\n\n        // Create a pair with non-null key and value components\n        String key = \"key\";\n        int value = 1234;\n        Pair<String, Integer> p2 = new Pair<>(key, value);\n        assertEquals(Integer.valueOf(key.hashCode() ^ (value >>> 16)), p2.hashCode());\n    }\n}", "@Test\npublic void hashCodeTest() {\n    Pair<String, Integer> pair1 = new Pair<>(\"apple\", 1);\n    Pair<String, Integer> pair2 = new Pair<>(\"banana\", 2);\n    Pair<String, Integer> pair3 = new Pair<>(\"cherry\", 3);\n    assertEquals(pair1.hashCode(), pair1.hashCode());\n    assertNotEquals(pair1.hashCode(), pair2.hashCode());\n    assertNotEquals(pair1.hashCode(), pair3.hashCode());\n}", "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Create two different pairs with the same key and value\n        Pair<Integer, String> pair1 = new Pair<>(1, \"value\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"value\");\n        \n        // Test that the hash codes of the two pairs are equal\n        assertEquals(pair1.hashCode(), pair2.hashCode());\n    }\n}", "int result = key == null ? 0 : key.hashCode();\nfinal int h = value == null ? 0 : value.hashCode();\nresult = 37 * result + h ^ (h >>> 16);\nreturn result;", "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        Pair<String, Integer> p1 = new Pair<>(\"a\", 1);\n        Pair<String, Integer> p2 = new Pair<>(\"b\", 2);\n        Pair<String, Integer> p3 = new Pair<>(\"c\", 3);\n        \n        assertEquals(p1.hashCode(), p1.hashCode());\n        assertNotEquals(p1.hashCode(), p2.hashCode());\n        assertNotEquals(p1.hashCode(), p3.hashCode());\n    }\n}", "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Create an instance of the Pair class with a key and value\n        Pair<Integer, String> pair1 = new Pair<>(10, \"Apache\");\n        // Check that the hash code of the first element is correct\n        assertEquals(pair1.getKey().hashCode(), 37 * (0 ^ (10 >>> 16)));\n        // Check that the hash code of the second element is correct\n        assertEquals(pair1.getValue().hashCode(), 37 * (0 ^ (10 >>> 16)));\n    }\n}", "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        Pair<String, String> pair1 = new Pair<>(\"key1\", \"value1\");\n        assertEquals(pair1.hashCode(), 37 * (\"key1\".hashCode()) + (\"value1\".hashCode()));\n\n        Pair<Integer, Integer> pair2 = new Pair<>(10, 20);\n        assertEquals(pair2.hashCode(), 37 * (10) + (20));\n    }\n}", "package org.apache.commons.math4.legacy.core;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @ParameterizedTest\n    @ValueSource(strings = {\"null\", \"0\", \"1\", \"2\", \"3\"})\n    public void hashCodeTest(String key, String value) {\n        // Create a pair with the given input values.\n        Pair<String, String> pair = new Pair<>(key, value);\n\n        // Test that the hash code is consistent for different values.\n        assertEquals(pair.hashCode(), pair.hashCode());\n    }\n}", "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Test with null key and value\n        Pair<String, Integer> pair1 = new Pair<>(null, null);\n        assertEquals(0, pair1.hashCode());\n\n        // Test with non-null key and value\n        Pair<String, Integer> pair2 = new Pair<>(\"key\", 5);\n        assertEquals(-834976354, pair2.hashCode());\n    }\n}", "\npublic void hashCodeTest() {\n    Pair<String, Integer> pair = new Pair<>(\"key\", 10);\n    int expectedHashCode = 37 * \"key\".hashCode() + 10.hashCode();\n    assertEquals(expectedHashCode, pair.hashCode());\n}\n"]
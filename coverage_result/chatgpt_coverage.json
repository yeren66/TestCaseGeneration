[
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/sqlparse",
        "package_name": "org.jeecg.common.util.sqlparse",
        "class_name": "JSqlParserAllTableManager",
        "method_name": "parse",
        "test_code": "package org.jeecg.common.util.sqlparse;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSqlParserAllTableManagerTest {\n    @Test\n    public void parseTest() {\n        String selectSql = \"SELECT a.id, b.name FROM table_a a JOIN table_b b ON a.id = b.id\";\n        \n        JSqlParserAllTableManager manager = new JSqlParserAllTableManager(selectSql);\n        try {\n            manager.parse();\n            // Add assertions here\n        } catch (Exception e) {\n            fail(\"Exception occurred: \" + e.getMessage());\n        }\n    }\n}",
        "package_metric": 32.79,
        "class_metric": 52.17,
        "method_metric": 56.6,
        "pitest": 13.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/sqlparse",
        "package_name": "org.jeecg.common.util.sqlparse",
        "class_name": "JSqlParserAllTableManager",
        "method_name": "parse",
        "test_code": "package org.jeecg.common.util.sqlparse;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Map;\nimport net.sf.jsqlparser.JSQLParserException;\nimport org.jeecg.common.util.sqlparse.vo.SelectSqlInfo;\n\npublic class JSqlParserAllTableManagerTest {\n    @Test\n    public void parseTest() {\n        String selectSql = \"SELECT * FROM employees\";\n        JSqlParserAllTableManager manager = new JSqlParserAllTableManager(selectSql);\n        Map<String, SelectSqlInfo> result = null;\n        \n        try {\n            result = manager.parse();\n        } catch (JSQLParserException e) {\n            e.printStackTrace();\n        }\n        \n        assertNotNull(result);\n        assertEquals(1, result.size());\n    }\n}",
        "package_metric": 23.5,
        "class_metric": 37.39,
        "method_metric": 56.6,
        "pitest": 17.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/sqlparse",
        "package_name": "org.jeecg.common.util.sqlparse",
        "class_name": "JSqlParserAllTableManager",
        "method_name": "parse",
        "test_code": "package org.jeecg.common.util.sqlparse;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Map;\n\nimport org.jeecg.common.util.sqlparse.vo.SelectSqlInfo;\nimport org.junit.jupiter.api.Test;\n\nimport net.sf.jsqlparser.JSQLParserException;\n\nclass JSqlParserAllTableManagerTest {\n    \n    @Test\n    public void parseTest() {\n        JSqlParserAllTableManager manager = new JSqlParserAllTableManager(\"SELECT * FROM users\");\n        try {\n            Map<String, SelectSqlInfo> result = manager.parse();\n            assertNotNull(result);\n        } catch (JSQLParserException e) {\n            fail(\"Exception thrown: \" + e.getMessage());\n        }\n    }\n    \n}",
        "package_metric": 23.5,
        "class_metric": 37.39,
        "method_metric": 56.6,
        "pitest": 15.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/security",
        "package_name": "org.jeecg.common.util.security",
        "class_name": "JdbcSecurityUtil",
        "method_name": "validate",
        "test_code": "package org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n    @Test\n    public void validateTest() {\n        String jdbcUrl = \"jdbc:mysql://localhost:3306/test?user=root&password=12345\";\n        JdbcSecurityUtil.validate(jdbcUrl);\n    }\n}",
        "package_metric": 7.64,
        "class_metric": 73.33,
        "method_metric": 76.92,
        "pitest": 33.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util/security",
        "package_name": "org.jeecg.common.util.security",
        "class_name": "JdbcSecurityUtil",
        "method_name": "validate",
        "test_code": "package org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n    @Test\n    public void validateTest() {\n        String jdbcUrl = \"jdbc:mysql://localhost:3306/test?username=root&password=12345&allowMultiQueries=true\";\n        JdbcSecurityUtil.validate(jdbcUrl);\n    }\n}",
        "package_metric": 7.64,
        "class_metric": 73.33,
        "method_metric": 76.92,
        "pitest": 33.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/desensitization/util",
        "package_name": "org.jeecg.common.desensitization.util",
        "class_name": "SensitiveInfoUtil",
        "method_name": "handleNestedObject",
        "test_code": "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void handleNestedObjectTest() {\n        Object obj = new Object();\n        Class entity = Object.class;\n        boolean isEncode = true;\n        try {\n            SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n        // Add assertions to verify the expected results\n    }\n}",
        "package_metric": 2.92,
        "class_metric": 2.92,
        "method_metric": 16.67,
        "pitest": 0.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/desensitization/util",
        "package_name": "org.jeecg.common.desensitization.util",
        "class_name": "SensitiveInfoUtil",
        "method_name": "handleNestedObject",
        "test_code": "\npackage org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void handleNestedObjectTest() {\n        // Create test objects\n        TestObject obj1 = new TestObject();\n        obj1.setName(\"John Doe\");\n        obj1.setAddress(\"123 Main St\");\n        \n        TestEntity entity1 = new TestEntity();\n        entity1.setId(1);\n        entity1.setValue(\"Test\");\n        \n        obj1.setEntity(entity1);\n        \n        // Perform the unit test\n        try {\n            SensitiveInfoUtil.handleNestedObject(obj1, TestEntity.class, false);\n        } catch (IllegalAccessException e) {\n            fail(\"IllegalAccessException occurred.\");\n        }\n        \n        // Verify the expected results\n        assertEquals(\"John Doe\", obj1.getName());\n        assertEquals(\"123 Main St\", obj1.getAddress());\n        assertEquals(1, entity1.getId());\n        assertEquals(\"Test\", entity1.getValue());\n    }\n    \n    // Define test classes\n    private class TestObject {\n        private String name;\n        private String address;\n        private TestEntity entity;\n        \n        public String getName() {\n            return name;\n        }\n        \n        public void setName(String name) {\n            this.name = name;\n        }\n        \n        public String getAddress() {\n            return address;\n        }\n        \n        public void setAddress(String address) {\n            this.address = address;\n        }\n        \n        public TestEntity getEntity() {\n            return entity;\n        }\n        \n        public void setEntity(TestEntity entity) {\n            this.entity = entity;\n        }\n    }\n    \n    private class TestEntity {\n        private int id;\n        private String value;\n        \n        public int getId() {\n            return id;\n        }\n        \n        public void setId(int id) {\n            this.id = id;\n        }\n        \n        public String getValue() {\n            return value;\n        }\n        \n        public void setValue(String value) {\n            this.value = value;\n        }\n    }\n}\n",
        "package_metric": 13.87,
        "class_metric": 13.87,
        "method_metric": 55.56,
        "pitest": 4.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/desensitization/util",
        "package_name": "org.jeecg.common.desensitization.util",
        "class_name": "SensitiveInfoUtil",
        "method_name": "handleNestedObject",
        "test_code": "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void handleNestedObjectTest() {\n        try {\n            Object obj = new Object();\n            Class entity = Entity.class;\n            boolean isEncode = true;\n            \n            // Set up test data\n            // ...\n            \n            // Call the method being tested\n            SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);\n            \n            // Assert the expected results\n            // ...\n            \n        } catch (IllegalAccessException e) {\n            fail(\"IllegalAccessException occurred\");\n        }\n    }\n    \n    private static class Entity {\n        // Define test entity class\n    }\n}",
        "package_metric": 2.92,
        "class_metric": 2.92,
        "method_metric": 16.67,
        "pitest": 0.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n    @Test\n    public void getPackPathTest() {\n        Object object = new Object();\n        assertThrows(IllegalArgumentException.class, () -> MyClassLoader.getPackPath(null));\n        String expected = object.getClass().getName();\n        String actual = MyClassLoader.getPackPath(object);\n        assertEquals(expected, actual);\n    }\n}",
        "package_metric": 0.23,
        "class_metric": 7.84,
        "method_metric": 100.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n    @Test\n    public void getPackPathTest() {\n        Object object = new Object();\n        String expected = \"java.lang.Object\";\n        String actual = MyClassLoader.getPackPath(object);\n        assertEquals(expected, actual);\n    }\n}",
        "package_metric": 0.17,
        "class_metric": 5.88,
        "method_metric": 75.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n    @Test\n    public void getPackPathTest() {\n        Object object = new Object();\n        String expected = \"java.lang.Object\";\n        \n        String actual = MyClassLoader.getPackPath(object);\n        \n        assertEquals(expected, actual);\n    }\n}",
        "package_metric": 0.17,
        "class_metric": 5.88,
        "method_metric": 75.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n    @Test\n    public void getPackPathTest() {\n        Object object = new Object();\n        String expected = \"java.lang.Object\";\n        String actual = MyClassLoader.getPackPath(object);\n        assertEquals(expected, actual);\n    }\n}",
        "package_metric": 0.17,
        "class_metric": 5.88,
        "method_metric": 75.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n    @Test\n    public void getPackPathTest() {\n        Object object = new Object();\n        String expected = object.getClass().getName();\n        String result = MyClassLoader.getPackPath(object);\n        assertEquals(expected, result);\n    }\n}",
        "package_metric": 0.17,
        "class_metric": 5.88,
        "method_metric": 75.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n    @Test\n    public void getPackPathTest() {\n        // Arrange\n        Object object = new Object();\n        String expected = \"java.lang.Object\";\n        \n        // Act\n        String result = MyClassLoader.getPackPath(object);\n        \n        // Assert\n        assertEquals(expected, result);\n    }\n}",
        "package_metric": 0.17,
        "class_metric": 5.88,
        "method_metric": 75.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n    @Test\n    public void getPackPathTest() {\n        Object object = new Object();\n        String expected = \"java.lang.Object\";\n        String actual = MyClassLoader.getPackPath(object);\n        assertEquals(expected, actual);\n    }\n}",
        "package_metric": 0.17,
        "class_metric": 5.88,
        "method_metric": 75.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n    @Test\n    public void getPackPathTest() {\n        Object object = new Object();\n        String expected = \"java.lang.Object\";\n        String actual = MyClassLoader.getPackPath(object);\n        assertEquals(expected, actual);\n    }\n}",
        "package_metric": 0.17,
        "class_metric": 5.88,
        "method_metric": 75.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n    @Test\n    public void getPackPathTest() {\n        Object object = new Object();\n        String result = MyClassLoader.getPackPath(object);\n        assertEquals(\"java.lang.Object\", result);\n    }\n}",
        "package_metric": 0.17,
        "class_metric": 5.88,
        "method_metric": 75.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n    @Test\n    public void getPackPathTest() {\n        // Given\n        Object object = new Object();\n        \n        // When\n        String result = MyClassLoader.getPackPath(object);\n        \n        // Then\n        assertEquals(\"java.lang.Object\", result);\n    }\n}",
        "package_metric": 0.17,
        "class_metric": 5.88,
        "method_metric": 75.0,
        "pitest": 10.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n    @Test\n    public void getPackPathTest() {\n        Object object = new Object();\n        String result = MyClassLoader.getPackPath(object);\n        assertNotNull(result);\n        // Add additional assertions if necessary\n    }\n}",
        "package_metric": 0.17,
        "class_metric": 5.88,
        "method_metric": 75.0,
        "pitest": 5.0
    },
    {
        "project_name": "jeecg-boot",
        "file_path": "/home/joseph/java_project/jeecg-boot/jeecg-boot-base-core/src/test/java/org/jeecg/common/util",
        "package_name": "org.jeecg.common.util",
        "class_name": "MyClassLoader",
        "method_name": "getPackPath",
        "test_code": "package org.jeecg.common.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClassLoaderTest {\n    @Test\n    public void getPackPathTest() {\n        // Arrange\n        Object object = new Object();\n        \n        // Act\n        String result = MyClassLoader.getPackPath(object);\n        \n        // Assert\n        assertNotNull(result);\n    }\n}",
        "package_metric": 0.17,
        "class_metric": 5.88,
        "method_metric": 75.0,
        "pitest": 5.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/eureka",
        "package_name": "com.ctrip.framework.apollo.biz.eureka",
        "class_name": "ApolloEurekaClientConfig",
        "method_name": "getEurekaServerServiceUrls",
        "test_code": "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.Mockito;\nimport java.util.List;\nimport java.util.Arrays;\nimport org.springframework.util.CollectionUtils;\n\npublic class ApolloEurekaClientConfigTest {\n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        // Setup\n        ApolloEurekaClientConfig apolloEurekaClientConfig = Mockito.mock(ApolloEurekaClientConfig.class);\n        Mockito.when(apolloEurekaClientConfig.getEurekaServerServiceUrls(\"myZone\")).thenReturn(Arrays.asList(\"url1\", \"url2\"));\n\n        // Execute\n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"myZone\");\n\n        // Verify\n        assertEquals(Arrays.asList(\"url1\", \"url2\"), result);\n    }\n}",
        "package_metric": 0,
        "class_metric": 0,
        "method_metric": 0,
        "pitest": 0.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-common/src/test/java/com/ctrip/framework/apollo/common/utils",
        "package_name": "com.ctrip.framework.apollo.common.utils",
        "class_name": "BeanUtils",
        "method_name": "mapByKey",
        "test_code": "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.*;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        // Create a test list with some objects\n        List<TestObject> list = new ArrayList<>();\n        list.add(new TestObject(1, \"One\"));\n        list.add(new TestObject(2, \"Two\"));\n        list.add(new TestObject(3, \"Three\"));\n\n        // Call the mapByKey method and store the result\n        Map<Integer, TestObject> result = BeanUtils.mapByKey(\"id\", list);\n\n        // Verify the result\n        assertEquals(3, result.size());\n        assertEquals(\"One\", result.get(1).getValue());\n        assertEquals(\"Two\", result.get(2).getValue());\n        assertEquals(\"Three\", result.get(3).getValue());\n    }\n\n    // TestObject class for testing purposes\n    private static class TestObject {\n        private int id;\n        private String value;\n\n        public TestObject(int id, String value) {\n            this.id = id;\n            this.value = value;\n        }\n\n        public int getId() {\n            return id;\n        }\n\n        public String getValue() {\n            return value;\n        }\n    }\n}",
        "package_metric": 10.98,
        "class_metric": 17.65,
        "method_metric": 73.33,
        "pitest": 21.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-common/src/test/java/com/ctrip/framework/apollo/common/utils",
        "package_name": "com.ctrip.framework.apollo.common.utils",
        "class_name": "BeanUtils",
        "method_name": "mapByKey",
        "test_code": "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.*;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        List<Object> list = new ArrayList<>();\n        // <FILL> - add objects to the list\n        \n        Map<String, Object> expectedMap = new HashMap<>();\n        // <FILL> - create a map containing the expected key-value pairs\n        \n        Map<String, Object> actualMap = BeanUtils.mapByKey(\"key\", list);\n        \n        assertEquals(expectedMap, actualMap);\n    }\n}",
        "package_metric": 2.44,
        "class_metric": 3.92,
        "method_metric": 20.0,
        "pitest": 3.0
    },
    {
        "project_name": "apollo",
        "file_path": "/home/joseph/java_project/apollo/apollo-common/src/test/java/com/ctrip/framework/apollo/common/utils",
        "package_name": "com.ctrip.framework.apollo.common.utils",
        "class_name": "BeanUtils",
        "method_name": "mapByKey",
        "test_code": "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        // Create a list of objects\n        List<MyClass> myList = new ArrayList<>();\n        myList.add(new MyClass(\"key1\", \"value1\"));\n        myList.add(new MyClass(\"key2\", \"value2\"));\n        myList.add(new MyClass(\"key3\", \"value3\"));\n        \n        // Call the method to be tested\n        Map<String, MyClass> resultMap = BeanUtils.mapByKey(\"key\", myList);\n        \n        // Verify the result\n        assertNotNull(resultMap);\n        assertEquals(3, resultMap.size());\n        assertEquals(\"value1\", resultMap.get(\"key1\").getValue());\n        assertEquals(\"value2\", resultMap.get(\"key2\").getValue());\n        assertEquals(\"value3\", resultMap.get(\"key3\").getValue());\n    }\n    \n    private class MyClass {\n        private String key;\n        private String value;\n        \n        public MyClass(String key, String value) {\n            this.key = key;\n            this.value = value;\n        }\n        \n        public String getKey() {\n            return key;\n        }\n        \n        public String getValue() {\n            return value;\n        }\n    }\n}",
        "package_metric": 10.98,
        "class_metric": 17.65,
        "method_metric": 73.33,
        "pitest": 21.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-neuralnet/src/test/java/org/apache/commons/math4/neuralnet",
        "package_name": "org.apache.commons.math4.neuralnet",
        "class_name": "Neuron",
        "method_name": "compareAndSetFeatures",
        "test_code": "\npackage org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        double[] currentFeatures = {1.0, 2.0, 3.0};\n        double[] expectedFeatures = {1.0, 2.0, 3.0};\n        double[] newFeatures = {4.0, 5.0, 6.0};\n\n        Neuron neuron = new Neuron(1, currentFeatures);\n        boolean success = neuron.compareAndSetFeatures(expectedFeatures, newFeatures);\n\n        assertTrue(success);\n        assertArrayEquals(newFeatures, neuron.getFeatures());\n    }\n}\n",
        "package_metric": 9.0,
        "class_metric": 54.29,
        "method_metric": 63.64,
        "pitest": 48.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-neuralnet/src/test/java/org/apache/commons/math4/neuralnet",
        "package_name": "org.apache.commons.math4.neuralnet",
        "class_name": "Neuron",
        "method_name": "compareAndSetFeatures",
        "test_code": "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        Neuron neuron = new Neuron(1, new double[]{1.0, 2.0, 3.0});\n        double[] expect = {1.0, 2.0, 3.0};\n        double[] update = {4.0, 5.0, 6.0};\n\n        boolean result = neuron.compareAndSetFeatures(expect, update);\n\n        assertTrue(result);\n    }\n}",
        "package_metric": 8.53,
        "class_metric": 51.43,
        "method_metric": 63.64,
        "pitest": 43.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-neuralnet/src/test/java/org/apache/commons/math4/neuralnet",
        "package_name": "org.apache.commons.math4.neuralnet",
        "class_name": "Neuron",
        "method_name": "compareAndSetFeatures",
        "test_code": "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        // Arrange\n        double[] expect = {1.0, 2.0, 3.0};\n        double[] update = {4.0, 5.0, 6.0};\n        Neuron neuron = new Neuron(1, expect);\n\n        // Act\n        boolean result = neuron.compareAndSetFeatures(expect, update);\n\n        // Assert\n        assertTrue(result);\n        assertArrayEquals(update, neuron.getFeatures());\n    }\n}",
        "package_metric": 9.0,
        "class_metric": 54.29,
        "method_metric": 63.64,
        "pitest": 48.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-neuralnet/src/test/java/org/apache/commons/math4/neuralnet",
        "package_name": "org.apache.commons.math4.neuralnet",
        "class_name": "Neuron",
        "method_name": "compareAndSetFeatures",
        "test_code": "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        double[] initialFeatures = {1.0, 2.0, 3.0};\n        double[] updatedFeatures = {4.0, 5.0, 6.0};\n\n        // Create a neuron instance\n        Neuron neuron = new Neuron(1, initialFeatures);\n\n        // Perform the test\n        boolean result = neuron.compareAndSetFeatures(initialFeatures, updatedFeatures);\n\n        // Verify the result\n        assertTrue(result);\n        assertArrayEquals(updatedFeatures, neuron.getFeatures());\n    }\n}",
        "package_metric": 9.0,
        "class_metric": 54.29,
        "method_metric": 63.64,
        "pitest": 48.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-neuralnet/src/test/java/org/apache/commons/math4/neuralnet",
        "package_name": "org.apache.commons.math4.neuralnet",
        "class_name": "Neuron",
        "method_name": "compareAndSetFeatures",
        "test_code": "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        Neuron neuron = new Neuron(1, new double[]{1.0, 2.0, 3.0});\n        double[] expect = new double[]{1.0, 2.0, 3.0};\n        double[] update = new double[]{4.0, 5.0, 6.0};\n        \n        boolean result = neuron.compareAndSetFeatures(expect, update);\n        \n        assertTrue(result);\n        assertArrayEquals(update, neuron.getFeatures());\n    }\n}",
        "package_metric": 9.0,
        "class_metric": 54.29,
        "method_metric": 63.64,
        "pitest": 48.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-neuralnet/src/test/java/org/apache/commons/math4/neuralnet",
        "package_name": "org.apache.commons.math4.neuralnet",
        "class_name": "Neuron",
        "method_name": "compareAndSetFeatures",
        "test_code": "package org.apache.commons.math4.neuralnet;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NeuronTest {\n    @Test\n    public void compareAndSetFeaturesTest() {\n        Neuron neuron = new Neuron(1, new double[]{1.0, 2.0, 3.0});\n        double[] expect = {1.0, 2.0, 3.0};\n        double[] update = {4.0, 5.0, 6.0};\n        \n        boolean result = neuron.compareAndSetFeatures(expect, update);\n        \n        assertTrue(result);\n    }\n}",
        "package_metric": 8.53,
        "class_metric": 51.43,
        "method_metric": 63.64,
        "pitest": 43.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"A\", \"B\");\n        Pair<String, String> pair2 = new Pair<>(\"A\", \"B\");\n        \n        assertEquals(pair1, pair2);\n        \n        Pair<String, String> pair3 = new Pair<>(\"C\", \"D\");\n        \n        assertNotEquals(pair1, pair3);\n    }\n}",
        "package_metric": 2.73,
        "class_metric": 41.67,
        "method_metric": 75.0,
        "pitest": 29.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, Integer> pair1 = new Pair<>(\"A\", 1);\n        Pair<String, Integer> pair2 = new Pair<>(\"A\", 1);\n        Pair<String, Integer> pair3 = new Pair<>(\"B\", 2);\n\n        assertTrue(pair1.equals(pair2));\n        assertFalse(pair1.equals(pair3));\n        assertFalse(pair2.equals(pair3));\n        assertTrue(pair3.equals(pair3));\n    }\n}",
        "package_metric": 3.01,
        "class_metric": 45.83,
        "method_metric": 87.5,
        "pitest": 33.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<Integer, String> pair1 = new Pair<>(1, \"One\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"One\");\n        Pair<Integer, String> pair3 = new Pair<>(2, \"Two\");\n\n        assertTrue(pair1.equals(pair2));\n        assertFalse(pair1.equals(pair3));\n    }\n}",
        "package_metric": 2.73,
        "class_metric": 41.67,
        "method_metric": 75.0,
        "pitest": 29.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Arrange\n        Pair<String, Integer> pair1 = new Pair<>(\"key\", 10);\n        Pair<String, Integer> pair2 = new Pair<>(\"key\", 10);\n        Pair<String, Integer> pair3 = new Pair<>(\"key\", 20);\n        Pair<String, Integer> pair4 = new Pair<>(\"key2\", 10);\n\n        // Act & Assert\n        assertTrue(pair1.equals(pair1)); // Same object\n        assertTrue(pair1.equals(pair2)); // Same key and value\n        assertFalse(pair1.equals(pair3)); // Different value\n        assertFalse(pair1.equals(pair4)); // Different key\n        assertFalse(pair1.equals(null)); // Null comparison\n        assertFalse(pair1.equals(\"key\")); // Different class\n    }\n}",
        "package_metric": 3.28,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 38.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "equals",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, Integer> pair1 = new Pair<>(\"A\", 1);\n        Pair<String, Integer> pair2 = new Pair<>(\"A\", 1);\n        Pair<String, Integer> pair3 = new Pair<>(\"B\", 2);\n\n        assertTrue(pair1.equals(pair2));\n        assertFalse(pair1.equals(pair3));\n    }\n}",
        "package_metric": 2.73,
        "class_metric": 41.67,
        "method_metric": 75.0,
        "pitest": 29.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowexp",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowexpTest() {\n        double[] result = new double[2];\n        double x = 2.5;\n        double expectedResult = 12.182493960703473;\n\n        double actualResult = AccurateMathCalc.slowexp(x, result);\n\n        assertEquals(expectedResult, actualResult, 0.0001);\n        assertArrayEquals(new double[]{12.182493960703473, 0.0}, result, 0.0001);\n    }\n}",
        "package_metric": 2.65,
        "class_metric": 19.86,
        "method_metric": 100.0,
        "pitest": 14.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "hashCode",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        Pair<Integer, String> pair1 = new Pair<>(1, \"One\");\n        Pair<Integer, String> pair2 = new Pair<>(2, \"Two\");\n        \n        int hashCode1 = pair1.hashCode();\n        int hashCode2 = pair2.hashCode();\n        \n        assertNotEquals(hashCode1, hashCode2);\n    }\n}",
        "package_metric": 2.19,
        "class_metric": 33.33,
        "method_metric": 100.0,
        "pitest": 4.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "hashCode",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        // Create a Pair instance\n        Pair<String, Integer> pair = new Pair<>(\"key1\", 1);\n\n        // Calculate the expected hash code manually\n        int expectedHashCode = 37 * (\"key1\".hashCode()) + Integer.valueOf(1).hashCode();\n\n        // Compare the actual hash code with the expected hash code\n        assertEquals(expectedHashCode, pair.hashCode());\n    }\n}",
        "package_metric": 2.19,
        "class_metric": 33.33,
        "method_metric": 100.0,
        "pitest": 29.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "hashCode",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        Pair<String, Integer> pair = new Pair<>(\"key\", 123);\n        int expectedHashCode = pair.getKey() == null ? 0 : pair.getKey().hashCode();\n\n        final int h = pair.getValue() == null ? 0 : pair.getValue().hashCode();\n\n        expectedHashCode = 37 * expectedHashCode + h ^ (h >>> 16);\n\n        int actualHashCode = pair.hashCode();\n\n        assertEquals(expectedHashCode, actualHashCode);\n    }\n}",
        "package_metric": 3.28,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 46.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core",
        "package_name": "org.apache.commons.math4.legacy.core",
        "class_name": "Pair",
        "method_name": "hashCode",
        "test_code": "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void hashCodeTest() {\n        Pair<String, Integer> pair = new Pair<>(\"key\", 123);\n        int expected = pair.getKey() == null ? 0 : pair.getKey().hashCode();\n        final int h = pair.getValue() == null ? 0 : pair.getValue().hashCode();\n        expected = 37 * expected + h ^ (h >>> 16);\n\n        int result = pair.hashCode();\n\n        assertEquals(expected, result);\n    }\n}",
        "package_metric": 3.28,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 46.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowCos",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        double[] result = new double[2];\n        double x = Math.PI / 4;\n        double expectedResult = Math.cos(x);\n        \n        double actualResult = AccurateMathCalc.slowCos(x, result);\n        \n        assertEquals(expectedResult, actualResult);\n        assertEquals(expectedResult, result[0] + result[1]);\n    }\n}",
        "package_metric": 2.84,
        "class_metric": 21.3,
        "method_metric": 100.0,
        "pitest": 20.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowCos",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        double[] result = new double[2];\n        double x = 1.0;\n        double expected = Math.cos(x);\n        \n        double actual = AccurateMathCalc.slowCos(x, result);\n        \n        assertEquals(expected, actual, 0.0001);\n        assertEquals(expected, result[0], 0.0001);\n    }\n}",
        "package_metric": 2.84,
        "class_metric": 21.3,
        "method_metric": 100.0,
        "pitest": 15.0
    },
    {
        "project_name": "commons-math",
        "file_path": "/home/joseph/java_project/commons-math/commons-math-core/src/test/java/org/apache/commons/math4/core/jdkmath",
        "package_name": "org.apache.commons.math4.core.jdkmath",
        "class_name": "AccurateMathCalc",
        "method_name": "slowCos",
        "test_code": "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void slowCosTest() {\n        double x = 0.5; // Input value for the slowCos method\n        double[] result = new double[2]; // Array to store the result\n        double expectedResult = Math.cos(x); // Expected result from the Math.cos method\n\n        double actualResult = AccurateMathCalc.slowCos(x, result);\n\n        // Verify that the result array is correctly updated\n        assertEquals(expectedResult, result[0], 0.0001);\n        assertEquals(0.0, result[1], 0.0001);\n\n        // Verify that the return value is correct\n        assertEquals(expectedResult, actualResult, 0.0001);\n    }\n}",
        "package_metric": 2.84,
        "class_metric": 21.3,
        "method_metric": 100.0,
        "pitest": 15.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "\npackage com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n        Integer[] input = {5, 3, 1, 2, 4};\n        Integer[] expectedOutput = {1, 2, 3, 4, 5};\n        Integer[] result = quickSort.sort(input);\n        assertArrayEquals(expectedOutput, result);\n    }\n}\n",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 82.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n        Integer[] array = {4, 2, 9, 1, 7};\n        Integer[] expected = {1, 2, 4, 7, 9};\n        Integer[] result = quickSort.sort(array);\n        assertArrayEquals(expected, result);\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n        \n        Integer[] inputArray = {5, 2, 8, 9, 1};\n        Integer[] expectedOutput = {1, 2, 5, 8, 9};\n        \n        Integer[] sortedArray = quickSort.sort(inputArray);\n        \n        assertArrayEquals(expectedOutput, sortedArray);\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 71.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n        Integer[] array = {5, 3, 8, 2, 1, 9, 4, 7, 6};\n        Integer[] expected = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n\n        Integer[] result = quickSort.sort(array);\n\n        assertArrayEquals(expected, result);\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 89.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        Integer[] array = {5, 3, 1, 2, 4};\n        QuickSort quickSort = new QuickSort();\n        Integer[] expected = {1, 2, 3, 4, 5};\n        Integer[] result = quickSort.sort(array);\n        assertArrayEquals(expected, result);\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 79.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n        Integer[] array = {5, 3, 2, 4, 1};\n        Integer[] sortedArray = {1, 2, 3, 4, 5};\n        assertArrayEquals(sortedArray, quickSort.sort(array));\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        Integer[] array = {5, 1, 4, 2, 8};\n        QuickSort quickSort = new QuickSort();\n        Integer[] sortedArray = quickSort.sort(array);\n        Integer[] expectedArray = {1, 2, 4, 5, 8};\n        assertArrayEquals(expectedArray, sortedArray);\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 71.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n        \n        Integer[] array = {5, 2, 9, 1, 7};\n        Integer[] expected = {1, 2, 5, 7, 9};\n        \n        Integer[] sortedArray = quickSort.sort(array);\n        \n        assertArrayEquals(expected, sortedArray);\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 89.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n        \n        // Test case 1: Sorting empty array\n        Integer[] emptyArray = new Integer[0];\n        Integer[] expectedEmptyArray = new Integer[0];\n        assertArrayEquals(expectedEmptyArray, quickSort.sort(emptyArray));\n        \n        // Test case 2: Sorting array with one element\n        Integer[] singleElementArray = {1};\n        Integer[] expectedSingleElementArray = {1};\n        assertArrayEquals(expectedSingleElementArray, quickSort.sort(singleElementArray));\n        \n        // Test case 3: Sorting array with multiple elements\n        Integer[] multipleElementsArray = {5, 1, 3, 2, 4};\n        Integer[] expectedMultipleElementsArray = {1, 2, 3, 4, 5};\n        assertArrayEquals(expectedMultipleElementsArray, quickSort.sort(multipleElementsArray));\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 82.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "QuickSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QuickSortTest {\n    @Test\n    public void sortTest() {\n        QuickSort quickSort = new QuickSort();\n        Integer[] array = {5, 2, 7, 1, 3};\n\n        quickSort.sort(array);\n\n        Integer[] expected = {1, 2, 3, 5, 7};\n        assertArrayEquals(expected, array);\n    }\n}",
        "package_metric": 2.17,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 79.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        Integer[] unsorted = {5, 3, 8, 2, 1, 4};\n        HeapSort heapSort = new HeapSort();\n        Integer[] sorted = heapSort.sort(unsorted);\n        Integer[] expected = {1, 2, 3, 4, 5, 8};\n        assertArrayEquals(expected, sorted);\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 91.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        Integer[] unsorted = {5, 9, 3, 1, 8};\n        HeapSort heapSort = new HeapSort();\n        Integer[] sorted = heapSort.sort(unsorted);\n        Integer[] expected = {1, 3, 5, 8, 9};\n        assertArrayEquals(expected, sorted);\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 81.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        HeapSort heapSort = new HeapSort();\n        \n        // Test case 1 - array with unique values\n        Integer[] unsorted1 = {5, 2, 7, 1, 9};\n        Integer[] sorted1 = {1, 2, 5, 7, 9};\n        assertArrayEquals(sorted1, heapSort.sort(unsorted1));\n        \n        // Test case 2 - array with duplicate values\n        Integer[] unsorted2 = {3, 6, 2, 3, 6};\n        Integer[] sorted2 = {2, 3, 3, 6, 6};\n        assertArrayEquals(sorted2, heapSort.sort(unsorted2));\n        \n        // Test case 3 - empty array\n        Integer[] unsorted3 = {};\n        Integer[] sorted3 = {};\n        assertArrayEquals(sorted3, heapSort.sort(unsorted3));\n        \n        // Test case 4 - array with single element\n        Integer[] unsorted4 = {8};\n        Integer[] sorted4 = {8};\n        assertArrayEquals(sorted4, heapSort.sort(unsorted4));\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 91.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        Integer[] unsorted = {9, 5, 2, 8, 1, 7, 3};\n        HeapSort heapSort = new HeapSort();\n        Integer[] sorted = heapSort.sort(unsorted);\n        Integer[] expected = {1, 2, 3, 5, 7, 8, 9};\n        assertArrayEquals(expected, sorted);\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 84.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        HeapSort heapSort = new HeapSort();\n        \n        // Test case 1: Sorting an empty array\n        Integer[] arr1 = new Integer[0];\n        Integer[] expected1 = new Integer[0];\n        assertArrayEquals(expected1, heapSort.sort(arr1));\n        \n        // Test case 2: Sorting an array with one element\n        Integer[] arr2 = {5};\n        Integer[] expected2 = {5};\n        assertArrayEquals(expected2, heapSort.sort(arr2));\n        \n        // Test case 3: Sorting an array with multiple elements\n        Integer[] arr3 = {7, 2, 10, 3, 5};\n        Integer[] expected3 = {2, 3, 5, 7, 10};\n        assertArrayEquals(expected3, heapSort.sort(arr3));\n    }\n}",
        "package_metric": 1.86,
        "class_metric": 96.0,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        HeapSort heapSort = new HeapSort();\n        Integer[] unsorted = {5, 3, 8, 2, 1, 9};\n        Integer[] sorted = heapSort.sort(unsorted);\n        Integer[] expected = {1, 2, 3, 5, 8, 9};\n        assertArrayEquals(expected, sorted);\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 91.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        Integer[] unsorted = {5, 3, 8, 2, 1};\n        Integer[] expected = {1, 2, 3, 5, 8};\n        \n        HeapSort heapSort = new HeapSort();\n        Integer[] sorted = heapSort.sort(unsorted);\n        \n        assertArrayEquals(expected, sorted);\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 91.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        HeapSort heapSort = new HeapSort();\n        \n        // Create an array of Integers\n        Integer[] unsortedIntegers = {5, 2, 8, 1, 9};\n        \n        // Call the sort() method and store the sorted array\n        Integer[] sortedIntegers = heapSort.sort(unsortedIntegers);\n        \n        // Create an array of Strings\n        String[] unsortedStrings = {\"b\", \"a\", \"c\"};\n        \n        // Call the sort() method and store the sorted array\n        String[] sortedStrings = heapSort.sort(unsortedStrings);\n        \n        // Create an array of Doubles\n        Double[] unsortedDoubles = {3.2, 1.5, 2.7};\n        \n        // Call the sort() method and store the sorted array\n        Double[] sortedDoubles = heapSort.sort(unsortedDoubles);\n        \n        // Assert that the sorted arrays are equal to the expected sorted arrays\n        assertArrayEquals(new Integer[]{1, 2, 5, 8, 9}, sortedIntegers);\n        assertArrayEquals(new String[]{\"a\", \"b\", \"c\"}, sortedStrings);\n        assertArrayEquals(new Double[]{1.5, 2.7, 3.2}, sortedDoubles);\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        HeapSort heapSort = new HeapSort();\n        \n        // Define the unsorted array\n        Integer[] unsorted = {9, 5, 7, 2, 4};\n        \n        // Sort the array using the sort method\n        Integer[] sorted = heapSort.sort(unsorted);\n        \n        // Define the expected sorted array\n        Integer[] expectedSorted = {2, 4, 5, 7, 9};\n        \n        // Assert that the sorted array matches the expected sorted array\n        assertArrayEquals(expectedSorted, sorted);\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 75.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        Integer[] unsorted = {5, 4, 3, 2, 1};\n        \n        HeapSort heapSort = new HeapSort();\n        Integer[] sorted = heapSort.sort(unsorted);\n        \n        Integer[] expected = {1, 2, 3, 4, 5};\n        assertArrayEquals(expected, sorted);\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 75.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        // Arrange\n        Integer[] unsorted = {5, 2, 8, 1, 9};\n        HeapSort sorter = new HeapSort();\n        \n        // Act\n        Integer[] sorted = sorter.sort(unsorted);\n        \n        // Assert\n        Integer[] expected = {1, 2, 5, 8, 9};\n        assertArrayEquals(expected, sorted);\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        Integer[] unsorted = {5, 2, 9, 1, 3};\n        Integer[] expected = {1, 2, 3, 5, 9};\n        HeapSort heapSort = new HeapSort();\n        \n        Integer[] sorted = heapSort.sort(unsorted);\n        \n        assertArrayEquals(expected, sorted);\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 84.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        Integer[] unsorted = {5, 2, 8, 3, 1};\n        Integer[] expected = {1, 2, 3, 5, 8};\n        \n        HeapSort heapSort = new HeapSort();\n        Integer[] sorted = heapSort.sort(unsorted);\n        \n        assertArrayEquals(expected, sorted);\n    }\n}",
        "package_metric": 1.86,
        "class_metric": 96.0,
        "method_metric": 100.0,
        "pitest": 91.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/sorts",
        "package_name": "com.thealgorithms.sorts",
        "class_name": "HeapSort",
        "method_name": "sort",
        "test_code": "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        Integer[] unsorted = {4, 3, 1, 5, 2};\n        HeapSort heapSort = new HeapSort();\n        \n        Integer[] sorted = heapSort.sort(unsorted);\n        Integer[] expected = {1, 2, 3, 4, 5};\n        \n        assertArrayEquals(expected, sorted);\n    }\n}",
        "package_metric": 1.86,
        "class_metric": 96.0,
        "method_metric": 100.0,
        "pitest": 84.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "Node",
        "method_name": "possiblePaint",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class NodeTest {\n    @Test\n    public void possiblePaintTest() {\n        // Create nodes\n        Node node1 = new Node();\n        node1.color = 1;\n        node1.edges = new HashSet<>();\n        node1.edges.add(2);\n\n        Node node2 = new Node();\n        node2.color = 2;\n        node2.edges = new HashSet<>();\n        node2.edges.add(1);\n\n        ArrayList<Node> nodes = new ArrayList<>();\n        nodes.add(null); // Index 0 is not used\n        nodes.add(node1); // Index 1\n        nodes.add(node2); // Index 2\n\n        // Test possiblePaint() method\n        int result = MColoring.possiblePaint(nodes, 2, 2);\n        Assertions.assertEquals(1, result);\n    }\n}",
        "package_metric": 8.28,
        "class_metric": 100.0,
        "method_metric": 0,
        "pitest": -1
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "ArrayCombination",
        "method_name": "combination",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.*;\n\npublic class ArrayCombinationTest {\n    @Test\n    public void combinationTest() {\n        int n = 5; // the maximum value of the array\n        int k = 3; // the length of the combination\n        List<TreeSet<Integer>> expected = new ArrayList<>();\n        \n        // Expected combinations for n=5, k=3\n        expected.add(new TreeSet<>(Arrays.asList(1, 2, 3)));\n        expected.add(new TreeSet<>(Arrays.asList(1, 2, 4)));\n        expected.add(new TreeSet<>(Arrays.asList(1, 2, 5)));\n        expected.add(new TreeSet<>(Arrays.asList(1, 3, 4)));\n        expected.add(new TreeSet<>(Arrays.asList(1, 3, 5)));\n        expected.add(new TreeSet<>(Arrays.asList(1, 4, 5)));\n        expected.add(new TreeSet<>(Arrays.asList(2, 3, 4)));\n        expected.add(new TreeSet<>(Arrays.asList(2, 3, 5)));\n        expected.add(new TreeSet<>(Arrays.asList(2, 4, 5)));\n        expected.add(new TreeSet<>(Arrays.asList(3, 4, 5)));\n        \n        List<TreeSet<Integer>> result = ArrayCombination.combination(n, k);\n        assertEquals(expected, result);\n    }\n}",
        "package_metric": 7.64,
        "class_metric": 75.0,
        "method_metric": 85.71,
        "pitest": 75.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "TwinPrime",
        "method_name": "getTwinPrime",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: inputNumber is a twin prime\n        int result1 = TwinPrime.getTwinPrime(3);\n        assertEquals(5, result1);\n        \n        // Test case 2: inputNumber is not a twin prime\n        int result2 = TwinPrime.getTwinPrime(6);\n        assertEquals(-1, result2);\n    }\n}",
        "package_metric": 0.49,
        "class_metric": 75.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "TwinPrime",
        "method_name": "getTwinPrime",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        int result = TwinPrime.getTwinPrime(5);\n        assertEquals(7, result);\n\n        result = TwinPrime.getTwinPrime(11);\n        assertEquals(13, result);\n\n        result = TwinPrime.getTwinPrime(17);\n        assertEquals(19, result);\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 50.0,
        "method_metric": 66.67,
        "pitest": 83.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OctalToHexadecimalTest {\n    @Test\n    public void decimalToHexTest() {\n        String result = OctalToHexadecimal.decimalToHex(10);\n        assertEquals(\"A\", result);\n        \n        result = OctalToHexadecimal.decimalToHex(25);\n        assertEquals(\"19\", result);\n        \n        result = OctalToHexadecimal.decimalToHex(100);\n        assertEquals(\"64\", result);\n        \n        result = OctalToHexadecimal.decimalToHex(255);\n        assertEquals(\"FF\", result);\n    }\n}",
        "package_metric": 1.91,
        "class_metric": 34.62,
        "method_metric": 90.0,
        "pitest": 33.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "OctalToHexadecimal",
        "method_name": "decimalToHex",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OctalToHexadecimalTest {\n    @Test\n    public void decimalToHexTest() {\n        // Test when d is positive\n        int d1 = 255;\n        String expected1 = \"FF\";\n        String actual1 = OctalToHexadecimal.decimalToHex(d1);\n        assertEquals(expected1, actual1);\n\n        // Test when d is 0\n        int d2 = 0;\n        String expected2 = \"0\";\n        String actual2 = OctalToHexadecimal.decimalToHex(d2);\n        assertEquals(expected2, actual2);\n\n        // Test when d is negative\n        int d3 = -15;\n        String expected3 = \"0\";\n        String actual3 = OctalToHexadecimal.decimalToHex(d3);\n        assertEquals(expected3, actual3);\n    }\n}",
        "package_metric": 2.12,
        "class_metric": 38.46,
        "method_metric": 100.0,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        StackArrayList stack = new StackArrayList();\n        stack.push(10);\n        stack.push(20);\n        stack.push(30);\n        int result = stack.peek();\n        assertEquals(30, result);\n    }\n}",
        "package_metric": 4.35,
        "class_metric": 31.03,
        "method_metric": 66.67,
        "pitest": 29.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        StackArrayList stack = new StackArrayList();\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n\n        assertEquals(3, stack.peek());\n    }\n}",
        "package_metric": 4.35,
        "class_metric": 31.03,
        "method_metric": 66.67,
        "pitest": 29.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        StackArrayList stack = new StackArrayList();\n        stack.push(10);\n        stack.push(20);\n        stack.push(30);\n        int result = stack.peek();\n        assertEquals(30, result);\n    }\n}",
        "package_metric": 4.35,
        "class_metric": 31.03,
        "method_metric": 66.67,
        "pitest": 29.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        StackArrayList stack = new StackArrayList();\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        \n        int expected = 3;\n        int actual = stack.peek();\n        \n        assertEquals(expected, actual);\n    }\n}",
        "package_metric": 4.35,
        "class_metric": 31.03,
        "method_metric": 66.67,
        "pitest": 29.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        StackArrayList stack = new StackArrayList();\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        \n        int expected = 3;\n        int actual = stack.peek();\n        \n        assertEquals(expected, actual);\n    }\n}",
        "package_metric": 4.35,
        "class_metric": 31.03,
        "method_metric": 66.67,
        "pitest": 29.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    private StackArrayList stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new StackArrayList();\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n    }\n\n    @Test\n    public void peekTest() {\n        int expected = 3;\n        int actual = stack.peek();\n        assertEquals(expected, actual);\n    }\n}",
        "package_metric": 4.35,
        "class_metric": 31.03,
        "method_metric": 66.67,
        "pitest": 29.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "StackArrayList",
        "method_name": "peek",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StackArrayListTest {\n    @Test\n    public void peekTest() {\n        StackArrayList stack = new StackArrayList();\n        stack.push(5);\n        stack.push(10);\n        stack.push(15);\n        int expected = 15;\n        int actual = stack.peek();\n        assertEquals(expected, actual);\n    }\n}",
        "package_metric": 4.35,
        "class_metric": 31.03,
        "method_metric": 66.67,
        "pitest": 29.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/conversions",
        "package_name": "com.thealgorithms.conversions",
        "class_name": "DecimalToAnyBase",
        "method_name": "convertToAnyBase",
        "test_code": "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n    @Test\n    public void convertToAnyBaseTest() {\n        // Test Case 1\n        int decInput1 = 10;\n        int base1 = 2;\n        String expected1 = \"1010\";\n        assertEquals(expected1, DecimalToAnyBase.convertToAnyBase(decInput1, base1));\n\n        // Test Case 2\n        int decInput2 = 16;\n        int base2 = 8;\n        String expected2 = \"20\";\n        assertEquals(expected2, DecimalToAnyBase.convertToAnyBase(decInput2, base2));\n\n        // Test Case 3\n        int decInput3 = 255;\n        int base3 = 16;\n        String expected3 = \"FF\";\n        assertEquals(expected3, DecimalToAnyBase.convertToAnyBase(decInput3, base3));\n    }\n}",
        "package_metric": 2.55,
        "class_metric": 50.0,
        "method_metric": 100.0,
        "pitest": 62.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "MazeRecursion",
        "method_name": "setWay",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MazeRecursionTest {\n    @Test\n    public void setWayTest() {\n        int[][] map = new int[8][7];\n        \n        // Initialize the map\n        \n        // Set the ceiling and floor to 1\n        for (int i = 0; i < 7; i++) {\n            map[0][i] = 1;\n            map[7][i] = 1;\n        }\n\n        // Set the left and right walls to 1\n        for (int i = 0; i < 8; i++) {\n            map[i][0] = 1;\n            map[i][6] = 1;\n        }\n\n        // Set the obstacle\n        map[3][1] = 1;\n        map[3][2] = 1;\n\n        // Set the expected result\n        boolean expectedResult = true;\n\n        // Call the method to test\n        boolean actualResult = MazeRecursion.setWay(map, 1, 1);\n\n        // Assert the result\n        assertEquals(expectedResult, actualResult);\n    }\n}",
        "package_metric": 2.87,
        "class_metric": 14.75,
        "method_metric": 60.0,
        "pitest": 8.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/trees",
        "package_name": "com.thealgorithms.datastructures.trees",
        "class_name": "BinaryTree",
        "method_name": "find",
        "test_code": "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        BinaryTree tree = new BinaryTree();\n        BinaryTree.Node root = new BinaryTree.Node(5);\n        tree.put(5);\n        tree.put(3);\n        tree.put(2);\n        tree.put(4);\n        tree.put(7);\n        tree.put(6);\n        tree.put(8);\n        \n        BinaryTree.Node result = tree.find(4);\n        assertEquals(4, result.data);\n        \n        result = tree.find(9);\n        assertEquals(8, result.data);\n    }\n}",
        "package_metric": 1.86,
        "class_metric": 22.22,
        "method_metric": 91.67,
        "pitest": 16.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AbsoluteMax",
        "method_name": "getMaxValue",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        // Test case 1: Positive numbers\n        int result1 = AbsoluteMax.getMaxValue(5, 10, 3, 7);\n        assertEquals(10, result1);\n        \n        // Test case 2: Negative numbers\n        int result2 = AbsoluteMax.getMaxValue(-5, -10, -3, -7);\n        assertEquals(-10, result2);\n        \n        // Test case 3: Mixed positive and negative numbers\n        int result3 = AbsoluteMax.getMaxValue(-5, 10, -3, 7);\n        assertEquals(10, result3);\n    }\n}",
        "package_metric": 0.37,
        "class_metric": 75.0,
        "method_metric": 85.71,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AbsoluteMax",
        "method_name": "getMaxValue",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        // Arrange\n        int[] numbers = {1, -2, 3, -4, 5};\n        int expected = 5;\n        \n        // Act\n        int result = AbsoluteMax.getMaxValue(numbers);\n        \n        // Assert\n        assertEquals(expected, result);\n    }\n}",
        "package_metric": 0.37,
        "class_metric": 75.0,
        "method_metric": 85.71,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AbsoluteMax",
        "method_name": "getMaxValue",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        int result = AbsoluteMax.getMaxValue(-10, 5, -8, 15);\n        assertEquals(15, result);\n    }\n}",
        "package_metric": 0.37,
        "class_metric": 75.0,
        "method_metric": 85.71,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AbsoluteMax",
        "method_name": "getMaxValue",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        // Test case 1: Valid input\n        int result1 = AbsoluteMax.getMaxValue(10, -5, 7, -2);\n        assertEquals(10, result1);\n        \n        // Test case 2: Numbers array is empty (IllegalArgumentException expected)\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        });\n        \n        // Test case 3: Numbers array is null (IllegalArgumentException expected)\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n    }\n}",
        "package_metric": 0.37,
        "class_metric": 75.0,
        "method_metric": 85.71,
        "pitest": 75.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AbsoluteMax",
        "method_name": "getMaxValue",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        int[] numbers = {1, -5, 10, -15, 20};\n        int result = AbsoluteMax.getMaxValue(numbers);\n        assertEquals(20, result);\n        \n        int[] emptyArray = {};\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(emptyArray);\n        });\n        \n        int[] nullArray = null;\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(nullArray);\n        });\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "AbsoluteMax",
        "method_name": "getMaxValue",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        // Test case 1: Positive numbers\n        int[] numbers1 = {2, 4, 6, 8};\n        int expected1 = 8;\n        int actual1 = AbsoluteMax.getMaxValue(numbers1);\n        assertEquals(expected1, actual1);\n\n        // Test case 2: Negative numbers\n        int[] numbers2 = {-2, -4, -6, -8};\n        int expected2 = -8;\n        int actual2 = AbsoluteMax.getMaxValue(numbers2);\n        assertEquals(expected2, actual2);\n\n        // Test case 3: Mixed positive and negative numbers\n        int[] numbers3 = {1, -2, 3, -4};\n        int expected3 = -4;\n        int actual3 = AbsoluteMax.getMaxValue(numbers3);\n        assertEquals(expected3, actual3);\n\n        // Test case 4: Single number\n        int[] numbers4 = {5};\n        int expected4 = 5;\n        int actual4 = AbsoluteMax.getMaxValue(numbers4);\n        assertEquals(expected4, actual4);\n\n        // Test case 5: Numbers array is empty\n        int[] numbers5 = {};\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(numbers5);\n        });\n\n        // Test case 6: Numbers array is null\n        int[] numbers6 = null;\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(numbers6);\n        });\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 100.0,
        "pitest": 88.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/graphs",
        "package_name": "com.thealgorithms.datastructures.graphs",
        "class_name": "AdjacencyList",
        "method_name": "topSortOrder",
        "test_code": "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class AdjacencyListTest {\n    @Test\n    public void topSortOrderTest() {\n        AdjacencyList<String> graph = new AdjacencyList<String>();\n        graph.addEdge(\"A\", \"B\");\n        graph.addEdge(\"B\", \"C\");\n        graph.addEdge(\"C\", \"D\");\n        graph.addEdge(\"D\", \"E\");\n\n        TopologicalSort<String> topologicalSort = new TopologicalSort<>(graph);\n        ArrayList<String> actual = topologicalSort.topSortOrder();\n        ArrayList<String> expected = new ArrayList<>();\n        expected.add(\"A\");\n        expected.add(\"B\");\n        expected.add(\"C\");\n        expected.add(\"D\");\n        expected.add(\"E\");\n\n        assertEquals(expected, actual);\n    }\n}",
        "package_metric": 4.98,
        "class_metric": 61.9,
        "method_metric": 0,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n        \n        assertTrue(armstrong.isArmstrong(370));\n        assertFalse(armstrong.isArmstrong(123));\n        assertTrue(armstrong.isArmstrong(1634));\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Armstrong",
        "method_name": "isArmstrong",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n        \n        // Test case 1: number = 153, Armstrong number\n        assertTrue(armstrong.isArmstrong(153));\n        \n        // Test case 2: number = 370, Armstrong number\n        assertTrue(armstrong.isArmstrong(370));\n        \n        // Test case 3: number = 9474, Armstrong number\n        assertTrue(armstrong.isArmstrong(9474));\n        \n        // Test case 4: number = 123, not an Armstrong number\n        assertFalse(armstrong.isArmstrong(123));\n        \n        // Test case 5: number = 1634, Armstrong number\n        assertTrue(armstrong.isArmstrong(1634));\n    }\n}",
        "package_metric": 0.68,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "HillCipher",
        "method_name": "determinant",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        int[][] matrix = {{1, 2}, {3, 4}};\n        int determinant = HillCipher.determinant(matrix, 2);\n        assertEquals(-2, determinant);\n    }\n}",
        "package_metric": 2.28,
        "class_metric": 18.37,
        "method_metric": 100.0,
        "pitest": 15.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "HillCipher",
        "method_name": "determinant",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        int[][] matrix = {{2, 3}, {1, 4}};\n        int result = HillCipher.determinant(matrix, 2);\n        assertEquals(5, result);\n    }\n}",
        "package_metric": 2.28,
        "class_metric": 18.37,
        "method_metric": 100.0,
        "pitest": 15.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/ciphers",
        "package_name": "com.thealgorithms.ciphers",
        "class_name": "HillCipher",
        "method_name": "determinant",
        "test_code": "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n        int n = 3;\n        int expected = 0;\n        int actual = HillCipher.determinant(matrix, n);\n        assertEquals(expected, actual);\n    }\n}",
        "package_metric": 2.28,
        "class_metric": 18.37,
        "method_metric": 100.0,
        "pitest": 14.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/trees",
        "package_name": "com.thealgorithms.datastructures.trees",
        "class_name": "BinaryTree",
        "method_name": "remove",
        "test_code": "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void removeTest() {\n        BinaryTree tree = new BinaryTree();\n        tree.put(10);\n        tree.put(5);\n        tree.put(15);\n        tree.put(3);\n        \n        // Testing removal of a value that exists in the tree\n        assertTrue(tree.remove(5));\n        \n        // Testing removal of a value that doesn't exist in the tree\n        assertFalse(tree.remove(8));\n        \n        // Testing removal of the root node\n        assertTrue(tree.remove(10));\n        \n        // Testing removal of a leaf node\n        assertTrue(tree.remove(3));\n\n        // Testing removal of a value when there are no elements in the tree\n        assertFalse(tree.remove(10));\n    }\n}",
        "package_metric": 3.66,
        "class_metric": 49.07,
        "method_metric": 51.11,
        "pitest": 44.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/trees",
        "package_name": "com.thealgorithms.datastructures.trees",
        "class_name": "BinaryTree",
        "method_name": "remove",
        "test_code": "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void removeTest() {\n        BinaryTree tree = new BinaryTree();\n        \n        // Inserting elements into the tree for testing\n        tree.put(10);\n        tree.put(5);\n        tree.put(15);\n        tree.put(3);\n        tree.put(7);\n        tree.put(12);\n        tree.put(20);\n        \n        // Removing a value that doesn't exist in the tree\n        assertFalse(tree.remove(1));\n        \n        // Removing a leaf node\n        assertTrue(tree.remove(3));\n        \n        // Removing a node with two children\n        assertTrue(tree.remove(5));\n        \n        // Removing a node with one child\n        assertTrue(tree.remove(15));\n    }\n}",
        "package_metric": 3.79,
        "class_metric": 50.93,
        "method_metric": 53.33,
        "pitest": 41.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        list.insert(1);\n        list.insert(2);\n        list.insert(3);\n        list.insert(4);\n        list.insert(5);\n        \n        Node middleNode = list.middle();\n        \n        assertEquals(3, middleNode.value);\n    }\n}",
        "package_metric": 4.12,
        "class_metric": 15.96,
        "method_metric": 87.5,
        "pitest": 16.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        // Create a test list\n        list.insert(1);\n        list.insert(2);\n        list.insert(3);\n        list.insert(4);\n\n        // Get the middle node\n        Node middleNode = list.middle();\n\n        // Assert the middle node value is expected\n        assertEquals(2, middleNode.value);\n    }\n}",
        "package_metric": 4.12,
        "class_metric": 15.96,
        "method_metric": 87.5,
        "pitest": 17.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/lists",
        "package_name": "com.thealgorithms.datastructures.lists",
        "class_name": "SinglyLinkedList",
        "method_name": "middle",
        "test_code": "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        // Create a SinglyLinkedList object\n        SinglyLinkedList list = new SinglyLinkedList();\n        \n        // Insert elements into the list\n        list.insert(1);\n        list.insert(2);\n        list.insert(3);\n        list.insert(4);\n        list.insert(5);\n        \n        // Call the middle() method\n        Node result = list.middle();\n        \n        // Assert the value of the middle node\n        assertEquals(3, result.value);\n    }\n}",
        "package_metric": 4.12,
        "class_metric": 15.96,
        "method_metric": 87.5,
        "pitest": 16.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/trees",
        "package_name": "com.thealgorithms.datastructures.trees",
        "class_name": "SegmentTree",
        "method_name": "getSumTree",
        "test_code": "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SegmentTreeTest {\n    @Test\n    public void getSumTreeTest() {\n        // Create a new instance of SegmentTree\n        int[] arr = {1, 2, 3, 4, 5};\n        SegmentTree segmentTree = new SegmentTree(arr.length, arr);\n        \n        // Call the getSum method and assert the result\n        int result = segmentTree.getSum(1, 3);\n        assertEquals(9, result);\n    }\n}",
        "package_metric": 1.43,
        "class_metric": 60.53,
        "method_metric": 100.0,
        "pitest": 55.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = {1, 5, 3, 9, 2};\n        int expected = 9;\n        int actual = FindMax.findMax(array);\n        assertEquals(expected, actual);\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = {1, 2, 3, 4, 5};\n        int expectedMax = 5;\n        int actualMax = FindMax.findMax(array);\n        assertEquals(expectedMax, actualMax);\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = {1, 2, 3, 4, 5};\n        int expected = 5;\n        int actual = FindMax.findMax(array);\n        assertEquals(expected, actual);\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = {1, 2, 3, 4, 5};\n        int expectedMax = 5;\n        int actualMax = FindMax.findMax(array);\n        \n        assertEquals(expectedMax, actualMax);\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = {1, 5, 3, 10, 2};\n        int expected = 10;\n        int actual = FindMax.findMax(array);\n        assertEquals(expected, actual);\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = {1, 2, 3, 4, 5};\n        int expected = 5;\n        int actual = FindMax.findMax(array);\n        assertEquals(expected, actual);\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = {1, 2, 3, 4, 5};\n        int expectedResult = 5;\n        int result = FindMax.findMax(array);\n        \n        assertEquals(expectedResult, result);\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = {1, 5, 3, 9, 2};\n        int expected = 9;\n        int actual = FindMax.findMax(array);\n        assertEquals(expected, actual);\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = {1, 2, 3, 4, 5};\n        int expectedResult = 5;\n        int actualResult = FindMax.findMax(array);\n        assertEquals(expectedResult, actualResult);\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array1 = {1, 2, 3, 4, 5};\n        int[] array2 = {5, 4, 3, 2, 1};\n        int[] array3 = {1, 3, 2, 5, 4};\n\n        assertEquals(5, FindMax.findMax(array1));\n        assertEquals(5, FindMax.findMax(array2));\n        assertEquals(5, FindMax.findMax(array3));\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = {2, 5, 7, 1, 10};\n        int expectedResult = 10;\n        int actualResult = FindMax.findMax(array);\n        assertEquals(expectedResult, actualResult);\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "FindMax",
        "method_name": "findMax",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FindMaxTest {\n    @Test\n    public void findMaxTest() {\n        int[] array = {1, 2, 3, 4, 5};\n        int expectedMax = 5; // Expected maximum value in the array\n        int actualMax = FindMax.findMax(array);\n        assertEquals(expectedMax, actualMax, \"Max value is incorrect\");\n    }\n}",
        "package_metric": 0.43,
        "class_metric": 87.5,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        String[] strings = {\"ABC\", \"ABC123\", \"abcABC\", \"abc123ABC\"};\n        String[] expected = {\"abc\", \"abc123\", \"abcabc\", \"abc123abc\"};\n        for (int i = 0; i < strings.length; i++) {\n            String result = Lower.toLowerCase(strings[i]);\n            assertEquals(expected[i], result);\n        }\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        String[] strings = {\"ABC\", \"ABC123\", \"abcABC\", \"abc123ABC\"};\n        String[] expectedResults = {\"abc\", \"abc123\", \"abcabc\", \"abc123abc\"};\n\n        for (int i = 0; i < strings.length; i++) {\n            String result = Lower.toLowerCase(strings[i]);\n            assertEquals(expectedResults[i], result, \"Test failed for input: \" + strings[i]);\n        }\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        String[] strings = {\"ABC\", \"ABC123\", \"abcABC\", \"abc123ABC\"};\n        String[] expectedResults = {\"abc\", \"abc123\", \"abcabc\", \"abc123abc\"};\n        \n        for (int i = 0; i < strings.length; i++) {\n            String result = Lower.toLowerCase(strings[i]);\n            assertEquals(expectedResults[i], result);\n        }\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        String input = \"Hello, World!\";\n        String expectedOutput = \"hello, world!\";\n        String actualOutput = Lower.toLowerCase(input);\n        assertEquals(expectedOutput, actualOutput);\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        String input = \"HelloWORLD\";\n        String expectedOutput = \"helloworld\";\n        String actualOutput = Lower.toLowerCase(input);\n        assertEquals(expectedOutput, actualOutput);\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        String result = Lower.toLowerCase(\"Hello World\");\n        assertEquals(\"hello world\", result);\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        String result = Lower.toLowerCase(\"Hello World\");\n        assertEquals(\"hello world\", result);\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        String input = \"HELLO\";\n        String expectedOutput = \"hello\";\n        String actualOutput = Lower.toLowerCase(input);\n        assertEquals(expectedOutput, actualOutput);\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        // Input\n        String input = \"Hello World\";\n        \n        // Expected Output\n        String expectedOutput = \"hello world\";\n        \n        // Actual Output\n        String actualOutput = Lower.toLowerCase(input);\n        \n        // Assert\n        assertEquals(expectedOutput, actualOutput);\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        assertEquals(\"hello world\", Lower.toLowerCase(\"Hello World\"));\n        assertEquals(\"abcdefg\", Lower.toLowerCase(\"AbCdEfG\"));\n        assertEquals(\"12345\", Lower.toLowerCase(\"12345\"));\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "Lower",
        "method_name": "toLowerCase",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LowerTest {\n    @Test\n    public void toLowerCaseTest() {\n        String input = \"Hello World!\";\n        String expectedOutput = \"hello world!\";\n        String actualOutput = Lower.toLowerCase(input);\n        \n        assertEquals(expectedOutput, actualOutput);\n    }\n}",
        "package_metric": 1.0,
        "class_metric": 60.0,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/heaps",
        "package_name": "com.thealgorithms.datastructures.heaps",
        "class_name": "FibonacciHeap",
        "method_name": "insert",
        "test_code": "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n        heap.insert(5);\n        heap.insert(3);\n        heap.insert(8);\n\n        assertEquals(3, heap.size());\n    }\n}",
        "package_metric": 7.22,
        "class_metric": 14.47,
        "method_metric": 100.0,
        "pitest": 4.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/datastructures/stacks",
        "package_name": "com.thealgorithms.datastructures.stacks",
        "class_name": "NodeStack",
        "method_name": "push",
        "test_code": "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n\n        stack.push(1);\n        assertEquals(1, stack.peek());\n        assertEquals(1, stack.size());\n\n        stack.push(2);\n        assertEquals(2, stack.peek());\n        assertEquals(2, stack.size());\n\n        stack.push(3);\n        assertEquals(3, stack.peek());\n        assertEquals(3, stack.size());\n    }\n}",
        "package_metric": 13.53,
        "class_metric": 52.83,
        "method_metric": 100.0,
        "pitest": 40.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        int[] testNumbers = {1, 2, 3, 4, 5};\n        int expectedAverage = 3;\n        int actualAverage = Average.average(testNumbers);\n        assertEquals(expectedAverage, actualAverage, \"Incorrect average calculation\");\n    }\n}",
        "package_metric": 0.31,
        "class_metric": 38.46,
        "method_metric": 83.33,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        int[] numbers = {1, 2, 3, 4, 5};\n        int expectedAverage = 3;\n        int actualAverage = Average.average(numbers);\n        assertEquals(expectedAverage, actualAverage);\n    }\n}",
        "package_metric": 0.31,
        "class_metric": 38.46,
        "method_metric": 83.33,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        int[] numbers = {1, 2, 3, 4, 5};\n        int expectedAverage = 3;\n        int actualAverage = Average.average(numbers);\n        assertEquals(expectedAverage, actualAverage);\n    }\n}",
        "package_metric": 0.31,
        "class_metric": 38.46,
        "method_metric": 83.33,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/maths",
        "package_name": "com.thealgorithms.maths",
        "class_name": "Average",
        "method_name": "average",
        "test_code": "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        // Given\n        int[] numbers = {1, 2, 3, 4, 5};\n        \n        // When\n        int result = Average.average(numbers);\n        \n        // Then\n        assertEquals(3, result);\n    }\n}",
        "package_metric": 0.31,
        "class_metric": 38.46,
        "method_metric": 83.33,
        "pitest": 50.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/backtracking",
        "package_name": "com.thealgorithms.backtracking",
        "class_name": "FloodFill",
        "method_name": "floodFill",
        "test_code": "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FloodFillTest {\n    @Test\n    public void floodFillTest() {\n        int[][] image = {{1, 1, 1}, {1, 0, 1}, {1, 1, 1}};\n        int x = 0;\n        int y = 0;\n        int newColor = 2;\n        int oldColor = 1;\n        \n        FloodFill.floodFill(image, x, y, newColor, oldColor);\n        \n        int[][] expectedImage = {{2, 2, 2}, {2, 0, 2}, {2, 2, 2}};\n        assertArrayEquals(expectedImage, image);\n    }\n}",
        "package_metric": 4.78,
        "class_metric": 100.0,
        "method_metric": 100.0,
        "pitest": 38.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "HammingDistance",
        "method_name": "calculateHammingDistance",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        try {\n            // Test case 1: Same strings\n            int result1 = HammingDistance.calculateHammingDistance(\"abc\", \"abc\");\n            assertEquals(0, result1, \"Hamming distance between 'abc' and 'abc' should be 0\");\n\n            // Test case 2: Strings with 1 different character\n            int result2 = HammingDistance.calculateHammingDistance(\"abc\", \"abd\");\n            assertEquals(1, result2, \"Hamming distance between 'abc' and 'abd' should be 1\");\n\n            // Test case 3: Strings with all different characters\n            int result3 = HammingDistance.calculateHammingDistance(\"abc\", \"def\");\n            assertEquals(3, result3, \"Hamming distance between 'abc' and 'def' should be 3\");\n\n        } catch (Exception e) {\n            fail(\"An exception occurred: \" + e.getMessage());\n        }\n    }\n}",
        "package_metric": 1.16,
        "class_metric": 77.78,
        "method_metric": 87.5,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "HammingDistance",
        "method_name": "calculateHammingDistance",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    \n    @Test\n    public void calculateHammingDistanceTest() {\n        try {\n            int distance = HammingDistance.calculateHammingDistance(\"abcd\", \"abdc\");\n            assertEquals(2, distance);\n        } catch (Exception e) {\n            fail(\"An exception should not have been thrown\");\n        }\n    }\n}",
        "package_metric": 1.16,
        "class_metric": 77.78,
        "method_metric": 87.5,
        "pitest": 86.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "HammingDistance",
        "method_name": "calculateHammingDistance",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test case 1: when s1 and s2 are equal\n        try {\n            int result = HammingDistance.calculateHammingDistance(\"abc\", \"abc\");\n            assertEquals(0, result);\n        } catch (Exception e) {\n            fail(\"An exception should not be thrown for equal strings\");\n        }\n        \n        // Test case 2: when s1 and s2 have different characters at the same positions\n        try {\n            int result = HammingDistance.calculateHammingDistance(\"abc\", \"def\");\n            assertEquals(3, result);\n        } catch (Exception e) {\n            fail(\"An exception should not be thrown for strings with different lengths\");\n        }\n        \n        // Test case 3: when s1 and s2 have different lengths\n        try {\n            HammingDistance.calculateHammingDistance(\"abc\", \"abcd\");\n            fail(\"Exception should be thrown for strings with different lengths\");\n        } catch (Exception e) {\n            String expectedMessage = \"String lengths must be equal\";\n            assertEquals(expectedMessage, e.getMessage());\n        }\n    }\n}",
        "package_metric": 1.33,
        "class_metric": 88.89,
        "method_metric": 100.0,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "HammingDistance",
        "method_name": "calculateHammingDistance",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        try {\n            int expected = 2;\n            int actual = HammingDistance.calculateHammingDistance(\"101010\", \"111011\");\n            assertEquals(expected, actual);\n        } catch (Exception e) {\n            fail(\"An exception occurred: \" + e.getMessage());\n        }\n    }\n}",
        "package_metric": 1.16,
        "class_metric": 77.78,
        "method_metric": 87.5,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "HammingDistance",
        "method_name": "calculateHammingDistance",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        try {\n            // Test case 1: s1 and s2 are equal, hamming distance should be 0\n            String s1 = \"abc\";\n            String s2 = \"abc\";\n            assertEquals(0, HammingDistance.calculateHammingDistance(s1, s2));\n\n            // Test case 2: s1 and s2 have 1 different character, hamming distance should be 1\n            s1 = \"abc\";\n            s2 = \"abd\";\n            assertEquals(1, HammingDistance.calculateHammingDistance(s1, s2));\n\n            // Test case 3: s1 and s2 have multiple different characters, hamming distance should be the number of differences\n            s1 = \"abc\";\n            s2 = \"def\";\n            assertEquals(3, HammingDistance.calculateHammingDistance(s1, s2));\n        } catch (Exception e) {\n            fail(\"Exception should not be thrown\");\n        }\n    }\n}",
        "package_metric": 1.16,
        "class_metric": 77.78,
        "method_metric": 87.5,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "HammingDistance",
        "method_name": "calculateHammingDistance",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        try {\n            int distance = HammingDistance.calculateHammingDistance(\"abc\", \"abd\");\n            assertEquals(1, distance);\n        } catch (Exception e) {\n            fail(\"An exception should not have been thrown\");\n        }\n    }\n}",
        "package_metric": 1.16,
        "class_metric": 77.78,
        "method_metric": 87.5,
        "pitest": 100.0
    },
    {
        "project_name": "Java",
        "file_path": "/home/joseph/java_project/Java/src/test/java/com/thealgorithms/strings",
        "package_name": "com.thealgorithms.strings",
        "class_name": "HammingDistance",
        "method_name": "calculateHammingDistance",
        "test_code": "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        try {\n            int distance = HammingDistance.calculateHammingDistance(\"1010101\", \"1110101\");\n            assertEquals(1, distance);\n        } catch (Exception e) {\n            fail(\"Exception should not be thrown\");\n        }\n    }\n}",
        "package_metric": 1.16,
        "class_metric": 77.78,
        "method_metric": 87.5,
        "pitest": 100.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "DatasetUtils",
        "method_name": "calculatePieDatasetTotal",
        "test_code": "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatasetUtilsTest {\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        // Create a sample PieDataset\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Apple\", 10);\n        dataset.setValue(\"Orange\", 15);\n        dataset.setValue(\"Banana\", 5);\n        \n        // Calculate the expected total value\n        double expectedTotal = 10 + 15 + 5;\n        \n        // Call the calculatePieDatasetTotal() method\n        double actualTotal = DatasetUtils.calculatePieDatasetTotal(dataset);\n        \n        // Assert that the actual total matches the expected total\n        assertEquals(expectedTotal, actualTotal);\n    }\n}",
        "package_metric": 3.22,
        "class_metric": 1.69,
        "method_metric": 100.0,
        "pitest": 1.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "DatasetUtils",
        "method_name": "calculatePieDatasetTotal",
        "test_code": "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatasetUtilsTest {\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        // Prepare the dataset\n        DefaultPieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"Data 1\", 10);\n        dataset.setValue(\"Data 2\", 20);\n        dataset.setValue(\"Data 3\", 30);\n        \n        // Call the method to be tested\n        double result = DatasetUtils.calculatePieDatasetTotal(dataset);\n        \n        // Assert the expected value\n        assertEquals(60, result, 0.001);\n    }\n}",
        "package_metric": 3.22,
        "class_metric": 1.69,
        "method_metric": 100.0,
        "pitest": 1.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/general",
        "package_name": "org.jfree.data.general",
        "class_name": "Series",
        "method_name": "equals",
        "test_code": "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SeriesTest {\n    @Test\n    public void equalsTest() {\n        // Create two Series objects with the same key and description\n        Series series1 = new ConcreteSeries(\"Key\", \"Description\");\n        Series series2 = new ConcreteSeries(\"Key\", \"Description\");\n        \n        // Test that the equals() method returns true when comparing two identical Series objects\n        assertTrue(series1.equals(series1));\n        assertTrue(series1.equals(series2));\n        \n        // Test that the equals() method returns false when comparing to null\n        assertFalse(series1.equals(null));\n        \n        // Test that the equals() method returns false when comparing to an object of a different class\n        assertFalse(series1.equals(new String(\"Key\")));\n        \n        // Test that the equals() method returns false when comparing two Series objects with different keys\n        Series series3 = new ConcreteSeries(\"DifferentKey\", \"Description\");\n        assertFalse(series1.equals(series3));\n        \n        // Test that the equals() method returns false when comparing two Series objects with different descriptions\n        Series series4 = new ConcreteSeries(\"Key\", \"DifferentDescription\");\n        assertFalse(series1.equals(series4));\n    }\n    \n    private class ConcreteSeries extends Series {\n        protected ConcreteSeries(Comparable key) {\n            super(key);\n        }\n        \n        protected ConcreteSeries(Comparable key, String description) {\n            super(key, description);\n        }\n        \n        public int getItemCount() {\n            return 0;\n        }\n    }\n}",
        "package_metric": 1.57,
        "class_metric": 24.71,
        "method_metric": 91.67,
        "pitest": 22.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/statistics",
        "package_name": "org.jfree.data.statistics",
        "class_name": "BoxAndWhiskerCalculator",
        "method_name": "calculateQ1",
        "test_code": "package org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class BoxAndWhiskerCalculatorTest {\n    @Test\n    public void calculateQ1Test() {\n        // Create a sample list of values\n        List<Double> values = new ArrayList<>();\n        values.add(1.0);\n        values.add(2.0);\n        values.add(3.0);\n        values.add(4.0);\n\n        // Calculate the expected result\n        double expectedResult = 1.5;\n\n        // Call the method for calculating Q1\n        double result = BoxAndWhiskerCalculator.calculateQ1(values);\n\n        // Verify the result\n        assertEquals(expectedResult, result);\n    }\n}",
        "package_metric": 1.94,
        "class_metric": 10.14,
        "method_metric": 70.0,
        "pitest": 9.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/statistics",
        "package_name": "org.jfree.data.statistics",
        "class_name": "Regression",
        "method_name": "getPowerRegression",
        "test_code": "package org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTest {\n    @Test\n    public void getPowerRegressionTest() {\n        double[][] data = {{1, 1}, {2, 4}, {3, 9}, {4, 16}};\n        double[] expected = {1.0, 2.0};\n        double[] result = Regression.getPowerRegression(data);\n        assertArrayEquals(expected, result);\n    }\n}",
        "package_metric": 1.65,
        "class_metric": 13.37,
        "method_metric": 95.83,
        "pitest": 11.0
    },
    {
        "project_name": "jfreechart",
        "file_path": "/home/joseph/java_project/jfreechart/src/test/java/org/jfree/data/statistics",
        "package_name": "org.jfree.data.statistics",
        "class_name": "Regression",
        "method_name": "getPowerRegression",
        "test_code": "package org.jfree.data.statistics;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTest {\n    @Test\n    public void getPowerRegressionTest() {\n        double[][] data = {{1, 1}, {2, 4}, {3, 9}, {4, 16}};\n        double[] expected = {1, 2};\n        double[] result = Regression.getPowerRegression(data);\n        assertArrayEquals(expected, result, 0.0001);\n    }\n}",
        "package_metric": 1.65,
        "class_metric": 13.37,
        "method_metric": 95.83,
        "pitest": 11.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Blobs",
        "method_name": "PriorRegion",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void PriorRegionTest() {\n        int parent = 1;\n        int color = 0;\n        double minArea = 10.0;\n        double maxArea = 100.0;\n        int label = 5;\n\n        int result = Blobs.PriorRegion(parent, color, minArea, maxArea, label);\n\n        assertEquals(result, -1);\n    }\n}",
        "package_metric": 0.25,
        "class_metric": 9.23,
        "method_metric": 81.82,
        "pitest": 1.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Frame",
        "method_name": "clone",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        Frame frame = new Frame();\n        frame.imageWidth = 1920; // Set image width\n        frame.imageHeight = 1080; // Set image height\n\n        Frame clonedFrame = frame.clone();\n\n        assertEquals(frame.imageWidth, clonedFrame.imageWidth); // Check if image width is cloned correctly\n        assertEquals(frame.imageHeight, clonedFrame.imageHeight); // Check if image height is cloned correctly\n    }\n}",
        "package_metric": 0.16,
        "class_metric": 13.16,
        "method_metric": 72.0,
        "pitest": 5.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Frame",
        "method_name": "clone",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        Frame frame = new Frame();\n        frame.imageWidth = 100;\n        frame.imageHeight = 200;\n        frame.imageDepth = 8;\n        \n        Frame clonedFrame = frame.clone();\n        \n        assertEquals(frame.imageWidth, clonedFrame.imageWidth);\n        assertEquals(frame.imageHeight, clonedFrame.imageHeight);\n        assertEquals(frame.imageDepth, clonedFrame.imageDepth);\n        // Continue with the assertion for other properties \n        \n        // Add more assertions as necessary\n        \n    }\n}",
        "package_metric": 0.16,
        "class_metric": 13.16,
        "method_metric": 72.0,
        "pitest": 5.0
    },
    {
        "project_name": "javacv",
        "file_path": "/home/joseph/java_project/javacv/src/test/java/org/bytedeco/javacv",
        "package_name": "org.bytedeco.javacv",
        "class_name": "Frame",
        "method_name": "clone",
        "test_code": "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        Frame frame = new Frame();\n        \n        Frame clonedFrame = frame.clone();\n        \n        // Assertions for Video part\n        assertEquals(frame.imageWidth, clonedFrame.imageWidth);\n        assertEquals(frame.imageHeight, clonedFrame.imageHeight);\n        assertEquals(frame.imageDepth, clonedFrame.imageDepth);\n        assertEquals(frame.imageChannels, clonedFrame.imageChannels);\n        assertEquals(frame.imageStride, clonedFrame.imageStride);\n        assertEquals(frame.keyFrame, clonedFrame.keyFrame);\n        assertEquals(frame.pictType, clonedFrame.pictType);\n        assertEquals(frame.streamIndex, clonedFrame.streamIndex);\n        assertEquals(frame.type, clonedFrame.type);\n        \n        assertArrayEquals(frame.image, clonedFrame.image);\n        \n        // Assertions for Audio part\n        assertEquals(frame.audioChannels, clonedFrame.audioChannels);\n        assertEquals(frame.sampleRate, clonedFrame.sampleRate);\n        \n        assertArrayEquals(frame.samples, clonedFrame.samples);\n        \n        // Assertions for Other data streams\n        assertEquals(frame.data, clonedFrame.data);\n        \n        // Assertion for timestamp\n        assertEquals(frame.timestamp, clonedFrame.timestamp);\n    }\n}",
        "package_metric": 0.16,
        "class_metric": 13.16,
        "method_metric": 72.0,
        "pitest": 5.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        double[] lhs = {1.5, 2.5, 3.5};\n        double[] rhs = {1.5, 2.5, 3.5};\n        \n        // Call the method to be tested\n        CompareToBuilder result = builder.append(lhs, rhs);\n        \n        // Assert the output\n        assertEquals(builder, result);\n    }\n}",
        "package_metric": 0.74,
        "class_metric": 5.49,
        "method_metric": 62.5,
        "pitest": 1.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        double[] lhs = {1.0, 2.0, 3.0};\n        double[] rhs = {1.0, 2.0, 3.0};\n        builder.append(lhs, rhs);\n        int comparison = builder.toComparison();\n        assertEquals(0, comparison);\n    }\n}",
        "package_metric": 0.79,
        "class_metric": 5.88,
        "method_metric": 62.5,
        "pitest": 2.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        double[] lhs = {1.0, 2.0, 3.0};\n        double[] rhs = {1.0, 2.0, 3.0};\n        builder.append(lhs, rhs);\n        assertEquals(0, builder.build());\n    }\n}",
        "package_metric": 0.84,
        "class_metric": 6.27,
        "method_metric": 62.5,
        "pitest": 2.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        double[] lhs = {1.0, 2.0, 3.0};\n        double[] rhs = {1.0, 2.0, 3.0};\n        CompareToBuilder result = builder.append(lhs, rhs);\n        assertEquals(builder, result);\n    }\n}",
        "package_metric": 0.74,
        "class_metric": 5.49,
        "method_metric": 62.5,
        "pitest": 1.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        double[] lhs = {1.0, 2.0, 3.0};\n        double[] rhs = {1.0, 2.0, 3.0};\n        \n        builder.append(lhs, rhs);\n        \n        int result = builder.toComparison();\n        assertEquals(0, result);\n    }\n}",
        "package_metric": 0.79,
        "class_metric": 5.88,
        "method_metric": 62.5,
        "pitest": 2.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        byte[] lhs = new byte[]{1, 2, 3};\n        byte[] rhs = new byte[]{1, 2, 3};\n        \n        builder.append(lhs, rhs);\n        int comparison = builder.toComparison();\n        \n        assertEquals(0, comparison);\n    }\n}",
        "package_metric": 0.79,
        "class_metric": 5.88,
        "method_metric": 62.5,
        "pitest": 2.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        byte[] lhs = new byte[]{1, 2, 3};\n        byte[] rhs = new byte[]{1, 2, 3};\n        \n        CompareToBuilder builder = new CompareToBuilder();\n        builder.append(lhs, rhs);\n        int comparison = builder.toComparison();\n        \n        assertEquals(0, comparison); // Expected comparison result is 0\n    }\n}",
        "package_metric": 0.79,
        "class_metric": 5.88,
        "method_metric": 62.5,
        "pitest": 2.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        boolean[] lhs = {true, false, true};\n        boolean[] rhs = {true, false, true};\n        builder.append(lhs, rhs);\n        int comparison = builder.toComparison();\n        assertEquals(0, comparison);\n    }\n}",
        "package_metric": 0.79,
        "class_metric": 5.88,
        "method_metric": 43.75,
        "pitest": 3.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        boolean[] lhs = {true, false, true};\n        boolean[] rhs = {true, false, true};\n        \n        CompareToBuilder result = builder.append(lhs, rhs);\n        \n        // Verify that the comparison is complete\n        assertEquals(builder, result);\n        \n        // Verify that the builder is returned when comparison is not 0\n        builder.append(true, false);\n        result = builder.append(lhs, rhs);\n        assertEquals(builder, result);\n        \n        // Verify that the builder is returned when lhs and rhs are the same reference\n        lhs = rhs;\n        result = builder.append(lhs, rhs);\n        assertEquals(builder, result);\n        \n        // Verify that the builder is returned when lhs is null\n        lhs = null;\n        result = builder.append(lhs, rhs);\n        assertEquals(builder, result);\n        \n        // Verify that the builder is returned when rhs is null\n        lhs = new boolean[] {true, false, true};\n        rhs = null;\n        result = builder.append(lhs, rhs);\n        assertEquals(builder, result);\n        \n        // Verify that the builder is returned when lhs and rhs have different lengths\n        rhs = new boolean[] {true, false};\n        result = builder.append(lhs, rhs);\n        assertEquals(builder, result);\n        \n        // Verify that the builder is returned when comparison is not 0 inside for loop\n        lhs = new boolean[] {true, false, true};\n        rhs = new boolean[] {true, true, true};\n        result = builder.append(lhs, rhs);\n        assertEquals(builder, result);\n    }\n}",
        "package_metric": 0.95,
        "class_metric": 7.06,
        "method_metric": 65.625,
        "pitest": 2.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "\npackage org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        boolean[] lhs = {true, false, true};\n        boolean[] rhs = {true, false, true};\n        CompareToBuilder result = builder.append(lhs, rhs);\n        assertSame(builder, result);\n        assertSame(builder, result);\n        assertSame(builder, result);\n        assertSame(builder, result);\n        assertSame(builder, result);\n        assertSame(builder, result);\n        assertSame(builder, result);\n        assertSame(builder, result);\n        assertSame(builder, result);\n        assertSame(builder, result);\n        assertSame(builder, result);\n        assertSame(builder, result);\n    }\n}\n",
        "package_metric": 0.74,
        "class_metric": 5.49,
        "method_metric": 43.75,
        "pitest": 1.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        boolean[] lhs = {true, false, true};\n        boolean[] rhs = {true, false, true};\n        \n        int comparison = builder.append(lhs, rhs).toComparison();\n        assertEquals(0, comparison);\n    }\n}",
        "package_metric": 0.79,
        "class_metric": 5.88,
        "method_metric": 43.75,
        "pitest": 3.0
    },
    {
        "project_name": "commons-lang",
        "file_path": "/home/joseph/java_project/commons-lang/src/test/java/org/apache/commons/lang3/builder",
        "package_name": "org.apache.commons.lang3.builder",
        "class_name": "CompareToBuilder",
        "method_name": "append",
        "test_code": "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        boolean[] lhs = {true, false, true};\n        boolean[] rhs = {true, false, true};\n        builder.append(lhs, rhs);\n        assertEquals(0, builder.toComparison());\n    }\n}",
        "package_metric": 0.79,
        "class_metric": 5.88,
        "method_metric": 43.75,
        "pitest": 3.0
    }
]
["package com.alibaba.fastjson2.internal.asm;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ByteVectorTest {\n    @Test\n    public void putByteArrayTest() {\n        // Arrange\n        byte[] bytes = new byte[10];\n        for (int i = 0; i < bytes.length; i++) {\n            bytes[i] = (byte) i;\n        }\n        ByteVector byteVector = new ByteVector();\n        \n        // Act\n        byteVector.putByteArray(bytes, 1, 8);\n        \n        // Assert\n        assertEquals(8, byteVector.length());\n        for (int i = 0; i < bytes.length - 1; i++) {\n            assertEquals((byte) i, byteVector.data[i]);\n        }\n    }\n}", "package com.alibaba.fastjson2.internal.asm;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ByteVectorTest {\n    @Test\n    public void putByteArrayTest() {\n        final byte[] data = new byte[]{0, 1, 2, 3};\n        ByteVector bv = new ByteVector(4);\n        bv.putByteArray(data, 0, 4);\n        \n        assertEquals(bv.get(0), (byte)0x00);\n        assertEquals(bv.get(1), (byte)0x01);\n        assertEquals(bv.get(2), (byte)0x02);\n        assertEquals(bv.get(3), (byte)0x03);\n        \n        bv = new ByteVector(4, 8);\n        bv.putByteArray(data, 1, 2);\n        \n        assertEquals(bv.get(0), (byte)0x01);\n        assertEquals(bv.get(1), (byte)0x02);\n    }\n}", "package com.alibaba.fastjson2.internal.asm;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ByteVectorTest {\n    @Test\n    public void putByteArrayTest() {\n        ByteVector byteVector = new ByteVector();\n        byte[] testData = \"hello world\".getBytes();\n        byteVector.putByteArray(testData, 0, testData.length);\n        assertEquals(\"hello world\", new String(byteVector.data));\n    }\n}", "package com.alibaba.fastjson2.internal.asm;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ByteVectorTest {\n    @Test\n    public void putByteArrayTest() {\n        // Given: a non-null array with 3 bytes and a byte offset of 1\n        int[] byteArrayValue = new int[]{0x00, 0x80, 0xFF};\n        int byteOffset = 1;\n        int byteLength = 2;\n        \n        // When: putByteArray is called with the given arguments\n        ByteVector byteVector = new ByteVector();\n        byteVector.putByteArray(byteArrayValue, byteOffset, byteLength);\n        \n        // Then: The resulting ByteVector should contain the bytes from 1 to 2 of byteArrayValue\n        int[] actualBytes = byteVector.data;\n        assertEquals(actualBytes[0], (int) 0x80);\n        assertEquals(actualBytes[1], (int) 0xFF);\n    }\n}", "    /**\n     * Enlarges this byte vector so that it can receive 'size' more bytes.\n     *\n     * @param size number of additional bytes that this byte vector should be able to receive.\n     */\n    private void enlarge(final int size) {\n        int doubleCapacity = 2 * data.length;\n        int minimalCapacity = length + size;\n        byte[] newData = new byte[doubleCapacity > minimalCapacity ? doubleCapacity : minimalCapacity];\n        System.arraycopy(data, 0, newData, 0, length);\n        data = newData;\n    }", "package com.alibaba.fastjson2.internal.asm;\n\nimport org.junit.jupiter.api.*;\n\npublic class ByteVectorTest {\n    @Test\n    public void putByteArrayTest() {\n        byte[] data = new byte[10];\n        for (int i = 0; i < 5; i++) {\n            data[i] = (byte) i;\n        }\n        ByteVector vector = new ByteVector();\n        vector.putByteArray(data, 0, 3);\n        byte[] result1 = vector.getByteArray();\n        assertEquals(3, result1.length);\n        for (int i = 0; i < 3; i++) {\n            assertEquals((byte) i, result1[i]);\n        }\n        \n        vector.putByteArray(data, 2, 5);\n        byte[] result2 = vector.getByteArray();\n        assertEquals(5, result2.length);\n        for (int i = 0; i < 3; i++) {\n            assertEquals((byte) i, result2[i]);\n        }\n        for (int i = 2; i < 5; i++) {\n            assertEquals((byte) i, result2[i + 3 - 2]);\n        }\n    }\n}\n    \n\n### Code:", "package com.alibaba.fastjson2.internal.asm;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ByteVectorTest {\n    @Test\n    public void putByteArrayTest() {\n        int size = 100;\n        byte[] b = new byte[size];\n        for (int i = 0; i < size; ++i) {\n            b[i] = (byte) (i & 0xFF);\n        }\n        ByteVector byteVector = new ByteVector(1024);\n        assertThrows(IndexOutOfBoundsException.class, () -> byteVector.putByteArray(b, -1, size));\n        assertThrows(IndexOutOfBoundsException.class, () -> byteVector.putByteArray(b, 0, size + 1));\n        assertEquals(byteVector.length(), 0);\n        byteVector.putByteArray(b, 0, size / 2);\n        byteVector.putByteArray(b, size / 2, size - size / 2);\n        assertTrue(Arrays.equals(b, byteVector.data));\n    }\n}\n    \n\n", "package com.alibaba.fastjson2.internal.asm;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Test;\n\npublic class ByteVectorTest {\n    @Test\n    public void putByteArrayTest() {\n        // 1. create a new byte vector instance with the initial size of 2 bytes.\n        ByteVector byteVector = new ByteVector(2);\n\n        // 2. put 3 bytes into the byte vector.\n        byte[] bytes = new byte[3];\n        int index = byteVector.putByteArray(bytes, 0, 3);\n        assertEquals(index, 3);\n\n        // 3. verify that the length of the byte vector has been increased by 3.\n        assertEquals(byteVector.length(), 5);\n    }\n}\n    ", "package com.alibaba.fastjson2.internal.asm;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class ByteVectorTest {\n    private static final int INITIAL_SIZE = 1024;\n    private static final int MAX_ARRAY_LENGTH = Integer.MAX_VALUE - 8;\n    private static final byte[] TEST_DATA = new byte[MAX_ARRAY_LENGTH];\n\n    private ByteVector byteVectorUnderTest;\n\n    @BeforeEach\n    public void setup() {\n        this.byteVectorUnderTest = new ByteVector(INITIAL_SIZE);\n    }\n    \n    @Test\n    public void putByteArrayShouldEnlargeIfNotEnoughSpace() {\n        // given\n        int byteLength = MAX_ARRAY_LENGTH + 1;\n        \n        // when\n        this.byteVectorUnderTest.putByteArray(TEST_DATA, 0, byteLength);\n        \n        // then\n        assertTrue(this.byteVectorUnderTest.data.length > INITIAL_SIZE);\n    }\n}\n    ", "package com.alibaba.fastjson2.internal.asm;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ByteVectorTest {\n    @Test\n    public void putByteArrayTest() {\n        ByteVector byteVector = new ByteVector();\n        // \u63d2\u516510\u4e2anull\u5b57\u8282\n        byte[] data1 = null;\n        int byteOffset1 = 0;\n        int byteLength1 = 10;\n        byteVector.putByteArray(data1, byteOffset1, byteLength1);\n        assertEquals(byteVector.length(), byteLength1);\n        \n        // \u63d2\u51653\u4e2a\u5b57\u8282'abc'\n        byte[] data2 = new byte[]{97, 98, 99};\n        int byteOffset2 = 0;\n        int byteLength2 = 3;\n        byteVector.putByteArray(data2, byteOffset2, byteLength2);\n        assertEquals(byteVector.length(), byteLength1 + byteLength2);\n        \n        // \u63d2\u5165'defg'\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u5b57\u7b26\u5360\u7528\u4e24\u4e2a\u5b57\u8282\n        String stringValue = \"defg\";\n        int offset = byteVector.length();\n        byte[] data3 = null;\n        int byteOffset3 = 0;\n        int byteLength3 = stringValue.getBytes().length * 2;\n        byteVector.putByteArray(data3, byteOffset3, byteLength3);\n        \n        // \u63d2\u5165'hijklmn'\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u5b57\u7b26\u5360\u7528\u4e09\u4e2a\u5b57\u8282\n        String stringValue = \"hijklmn\";\n        int offset = byteVector.length();\n        byte[] data4 = null;\n        int byteOffset4 = 0;\n        int byteLength4 = stringValue.getBytes().length * 3;\n        byteVector.putByteArray(data4, byteOffset4, byteLength4);\n    }\n}\n    \n\n### Response:"]
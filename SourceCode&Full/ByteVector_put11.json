["package com.alibaba.fastjson2.internal.asm;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class ByteVectorTest {\n    @Test\n    public void put11Test() {\n        ByteVector byteVector = new ByteVector();\n        byte[] bytes = \"Hello\".getBytes();\n        \n        // Put the string \"Hello\" to the ByteVector, and check that length is 5.\n        byteVector.putByteArray(bytes, 0, 5);\n        Assertions.assertEquals(byteVector.length(), 5);\n    }\n}", "package com.alibaba.fastjson2.internal.asm;\n\nimport java.io.*;\n\n/**\n * A byte vector that can be used to store the bytes of a binary file. The storage is enlarged as needed, by\n * doubling its current capacity when a new element is added.\n */\npublic class ByteVector {\n    /**\n     * Size of this byte vector (in bytes).\n     */\n    public int length;\n\n    /**\n     * Contained data, as a byte array. The data in this vector is the concatenation of all its elements, in the\n     * order they were added.\n     */\n    private byte[] data;\n\n    /**\n     * Creates a new ByteVector with an initial capacity of 64 bytes.\n     */\n    public ByteVector() {\n        this(64);\n    }\n\n    /**\n     * Creates a new ByteVector with the given initial capacity (in bytes).\n     *\n     * @param size the initial capacity of this byte vector.\n     */\n    public ByteVector(final int size) {\n        data = new byte[size];\n    }\n\n    /**\n     * Puts a byte into this byte vector. The byte vector is automatically enlarged if necessary.\n     *\n     * @param b the byte to be added to this byte vector.\n     * @return this byte vector.\n     */\n    public ByteVector put11(final int b) {\n        int length = this.length;\n        if (length + 1 > data.length) {\n            enlarge(1);\n        }\n        data[length] = (byte) b;\n        this.length = length + 1;\n        return this;\n    }\n\n    /**\n     * Enlarges this byte vector so that it can receive 'size' more bytes.\n     *\n     * @param size number of additional bytes that this byte vector should be able to receive.\n     */\n    private void enlarge(final int size) {\n        int doubleCapacity = 2 * data.length;\n        int minimalCapacity = length + size;\n        byte[] newData = new byte[doubleCapacity > minimalCapacity ? doubleCapacity : minimalCapacity];\n        System.arraycopy(data, 0, newData, 0, length);\n        data = newData;\n    }\n}", "package com.alibaba.fastjson2.internal.asm;\n\nimport java.util.*;\n\npublic class ByteVectorTest {\n    @Test\n    public void put11Test() {\n        ByteVector byteVector = new ByteVector();\n        assertEquals(0, byteVector.length());\n        byteVector.putByteArray(null, 0, 1);\n        assertEquals(1, byteVector.length());\n    }\n}", "package com.alibaba.fastjson2.internal.asm;\n\nimport java.util.*;\n\npublic class ByteVectorTest {\n\n    @Test\n    public void put11Test() {\n        byte[] data = new byte[0];\n        int length = 0;\n        ByteVector byteVector = new ByteVector(data, length);\n        byteVector.putByteArray(\"HelloWorld\".getBytes(), 0, \"HelloWorld\".length());\n        assertEquals(\"HelloWorld\", byteVector.toString());\n    }\n}", "package com.alibaba.fastjson2.internal.asm;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ByteVectorTest {\n    @Test\n    public void put11Test() {\n        int byteLength = 0xabcd; // <-- Replace this line with the actual test case you want to run.\n        assertEquals(2, getByteVector().put11(byteLength).length);\n    }\n    \n    private ByteVector getByteVector() {\n        return new ByteVector();\n    }\n}\n", "package com.alibaba.fastjson2.internal.asm;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ByteVectorTest {\n    @Test\n    public void put11Test() {\n        ByteVector byteVector = new ByteVector();\n        assertEquals(0, byteVector.length);\n\n        byteVector.put11(256 * 2 + 1, 0); // [1000 0000] [0000 0001]\n        assertArrayEquals(new int[] {0xC0, 0x01}, byteVector.data);\n    }\n}\n    \n\n### Test Case: [/PROJECT_NAME/]\npackage com.alibaba.fastjson2;\nimport java.io.*;\npublic class FastJsonTest {\n    public static void main(String[] args) throws IOException {\n        String test = \"{\\\"test\\\":\\\"value\\\",\\\"test1\\\":[1,true]}\";\n        try (ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                OutputStream os = new BufferedOutputStream(baos);\n                FastJsonWriter fastJsonWriter = new FastJsonWriter(os)) {\n            FastJsonConfig config = new FastJsonConfig();\n            config.setAutoUnicode(true);\n            fastJsonWriter.config(config, JsonSerialize.globalInstance());\n            fastJsonWriter.writeObject(test);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}", "package com.alibaba.fastjson2.internal.asm;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ByteVectorTest {\n    @Test\n    public void put11Test() {\n        int[] array = new int[256];\n        for (int i = 0; i < 256; ++i) {\n            array[i] = i + 1;\n        }\n        ByteVector byteVector = new ByteVector();\n        byteVector.putByteArray(array, 0, 256);\n    }\n}", "package com.alibaba.fastjson2.internal.asm;\n\nimport java.io.*;\n\npublic final class ByteVector implements DataOutput, Closeable {\n    private byte[] data;\n    private int length;\n\n    public ByteVector() {\n        this(32);\n    }\n\n    public ByteVector(final int initialSize) {\n        data = new byte[initialSize];\n    }\n\n    @Override\n    public void write(int b) throws IOException {\n        if (length >= data.length) {\n            enlarge();\n        }\n        data[length++] = (byte) b;\n    }\n\n    private void enlarge() {\n        int doubleCapacity = 2 * data.length;\n        byte[] newData = new byte[doubleCapacity];\n        System.arraycopy(data, 0, newData, 0, length);\n        data = newData;\n    }\n\n    public void put11Test() {\n        ByteVector bv = new ByteVector();\n        for (int i = 0; i < 50; i++) {\n            bv.write(i);\n        }\n        byte[] bytes = bv.toByteArray();\n    }\n}", "package com.alibaba.fastjson2.internal.asm;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ByteVectorTest {\n    @Test\n    public void put11Test() {\n        // Arrange\n        final int offset = 3;\n        final byte[] bytesToPut = new byte[]{0x1, 0x2};\n        \n        // Act\n        final ByteVector sut = new ByteVector();\n        assertEquals(0, sut.length);\n        sut.putByteArray(bytesToPut, offset, 2);\n        \n        // Assert\n        assertEquals(2, sut.length);\n    }\n}\n    \n\n### Response:", "Timeout"]
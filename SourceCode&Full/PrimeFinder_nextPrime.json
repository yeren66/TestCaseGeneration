["package com.alibaba.fastjson2.internal.trove.impl;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class PrimeFinderTest {\n    @Test\n    public void nextPrimeTest() {\n        Assertions.assertEquals(17, PrimeFinder.nextPrime(15)); // chunk #3\n        Assertions.assertEquals(67, PrimeFinder.nextPrime(49)); // chunk #2\n        Assertions.assertEquals(2089, PrimeFinder.nextPrime(2080)); // chunk #4\n        Assertions.assertEquals(5313, PrimeFinder.nextPrime(5310)); // chunk #3\n        Assertions.assertEquals(10647, PrimeFinder.nextPrime(10644)); // chunk #2\n        Assertions.assertEquals(19877, PrimeFinder.nextPrime(19875)); // chunk #4\n    }\n}\n    \n\n### Requirement:", "package com.alibaba.fastjson2.internal.trove.impl;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PrimeFinderTest {\n    @Test\n    public void nextPrimeTest() {\n        int[] tests = new int[] {1, 20, 50, 100, 200, 300, 400, 600, 800, 1200, 1400};\n        for (int i = 0; i < tests.length; i++) {\n            assertEquals(PrimeFinder.nextPrime(tests[i]), PrimeFinder.primeCapacities[i]);\n        }\n    }\n}", "package com.alibaba.fastjson2.internal.trove.impl;\n\nimport org.junit.jupiter.api.Test;\n\npublic class PrimeFinderTest {\n\n    @Test\n    public void nextPrimeTest() {\n        assertEquals(11, PrimeFinder.nextPrime(10));\n        assertEquals(19, PrimeFinder.nextPrime(18));\n        assertEquals(37, PrimeFinder.nextPrime(36));\n    }\n}", "Timeout", "Timeout", "\n    @Test\n    public void nextPrimeTest() {\n        // Empty case\n        int[] testCases = {};\n        int[] expectedValues = {};\n        runNextPrimeTests(testCases, expectedValues);\n\n        // Single value cases\n        testCases = new int[]{1};\n        expectedValues = new int[]{3};\n        runNextPrimeTests(testCases, expectedValues);\n\n        testCases = new int[]{10};\n        expectedValues = new int[]{17};\n        runNextPrimeTests(testCases, expectedValues);\n\n        // Multiple value cases\n        testCases = new int[]{50, 82, 99, 103, 204};\n        expectedValues = new int[]{67, 103, 149, 197, 409};\n        runNextPrimeTests(testCases, expectedValues);\n    }\n", "package com.alibaba.fastjson2.internal.trove.impl;\n\nimport org.junit.jupiter.api.Test;\n\npublic class PrimeFinderTest {\n    @Test\n    public void nextPrimeTest() {\n        // Test values from 0 to 1M, in increments of 50\n        for (int i = 0; i <= 1_000_000; i += 50) {\n            int primeCapacity = PrimeFinder.nextPrime(i);\n            // The capacity should be at least the requested amount\n            assertTrue(primeCapacity >= i, () -> \"Prime is smaller than requested: \" + i + \", got \" + primeCapacity);\n            // Check whether the capacity is a prime number\n            for (int j = 2; j < Math.sqrt(primeCapacity); j++) {\n                if (primeCapacity % j == 0) {\n                    fail(\"Non-prime returned: \" + primeCapacity);\n                }\n            }\n        }\n    }\n}", "Timeout", "package com.alibaba.fastjson2.internal.trove.impl;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class PrimeFinderTest {\n    @Test\n    public void nextPrimeTest() {\n        // Arrange\n        int[] expected = new int[]{\n                3, 7, 17, 37, 79, 163, 331, 673, 1361, 2729,\n                5471, 10949, 21911, 43853, 87719, 175447, 350899,\n                701819, 1403641, 2807303, 5614657, 11229331,\n                22458671, 44917381, 89834777, 179669557, 359339171,\n                718678369, 1437356741\n        };\n\n        // Act\n        int[] actual = new int[expected.length];\n        for (int i = 0; i < expected.length; i++) {\n            actual[i] = PrimeFinder.nextPrime(i);\n        }\n\n        // // Assert\n        Assertions.assertArrayEquals(expected, actual);\n    }\n}", "package com.alibaba.fastjson2.internal.trove.impl;\n\nimport org.junit.jupiter.api.*;\n\npublic class PrimeFinderTest {\n    @Test\n    public void nextPrimeTest() {\n        assertEquals(3, PrimeFinder.nextPrime(0));\n        assertEquals(17, PrimeFinder.nextPrime(5));\n        assertEquals(23, PrimeFinder.nextPrime(10));\n        assertEquals(43, PrimeFinder.nextPrime(20));\n        assertEquals(89, PrimeFinder.nextPrime(40));\n    }\n}\n"]
Source code: 

private void pop(final String descriptor){
  char firstDescriptorChar=descriptor.charAt(0);
  if (firstDescriptorChar == '(') {
    pop((Type.getArgumentsAndReturnSizes(descriptor) >> 2) - 1);
  }
 else   if (firstDescriptorChar == 'J' || firstDescriptorChar == 'D') {
    pop(2);
  }
 else {
    pop(1);
  }
}



No.1 generated result --------------------------

package com.alibaba.fastjson2.internal.asm;

import org.junit.jupiter.api.*;

public class FrameTest {
    @Test
    public void popTest() {
        // given
        int n = <FILL>;
        
        // when
        boolean result = Frame.isValid(n);
        
        // then
        assertTrue(result);
    }
}
    

### Response:


No.2 generated result --------------------------

<#if (packageName?has_content) == true>
package ${packageName};
</#if>
<#list imports as import>
import ${import}.*;
</#list>

/**
 * Test cases for the {@link Frame} class.
 */
public class FrameTest {
    @Test
    public void popTest() {
        // Arrange
        <#assign stackSize = 0/>
        int frameIndex = 1;
        Label start = new Label();
        Label end = new Label();
        MethodWriter methodWriter = new MethodWriter(0, ClassWriter.COMPUTE_MAXS);
        Frame frame = new Frame();
        
        // Act
        <#list input as type>
        frame.<#if (type?has_content) == true>${type}</#if>(methodWriter, start, end, ${stackSize++}, ${frameIndex++});
        </#list>
        
        // Assert
        assertEquals(<#if stackSize?? >${stackSize}</#if>, methodWriter.currentStack + 1);
    }
}


No.3 generated result --------------------------

Timeout


No.4 generated result --------------------------

package com.alibaba.fastjson2.internal.asm;
import java.util.ArrayList;
import org.junit.jupiter.api.Assertions;

public class FrameTest {
    public void popTest() {
        ArrayList<Object> stack = new ArrayList<>();
        int type1 = -6; // ITEM_INTEGER
        int type2 = 537009088; // UNINITIALIZED_KIND | VALUE_MASK == 537009088
        Frame frame = new Frame();
        
        <FILL>
    }
}
    

### ASM Bytecode:
package com.alibaba.fastjson2.internal.asm;
import java.util.ArrayList;
public class FrameTest {
    public void popTest() {
        ArrayList<Object> stack = new ArrayList<>();
        int type1 = -6; // ITEM_INTEGER
        int type2 = 537009088; // UNINITIALIZED_KIND | VALUE_MASK == 537009088
        
        Frame frame = new Frame();
        stack.add(frame);
        Assertions.assertEquals(1, stack.size());
    }
}


No.5 generated result --------------------------

package com.alibaba.fastjson2.internal.asm;
import java.util.ArrayList;
public class FrameTest{
	@Test
	public void testPop(){
		Frame f = new Frame();
		f.push(Frame.ITEM_INTEGER);
        <FILL>
    }
}
    

### Response:


No.6 generated result --------------------------

Timeout


No.7 generated result --------------------------

    package com.alibaba.fastjson2.internal.asm;
    
    import org.junit.jupiter.api.*;
    import static org.junit.jupiter.api.Assertions.*;
    
    public class FrameTest {
        @Test
        public void popTest() {
            Frame frame = new Frame();
            assertEquals(0, frame.localsSize);
            assertEquals(0, frame.stackSize);
            
            frame.pop(Frame.INT);
            assertEquals(1, frame.stackSize);
            assertEquals(FULL_FRAME, frame.getType());
    
            frame = new Frame();
            frame.pop(Frame.LONG);
            assertEquals(2, frame.stackSize);
            assertEquals(FULL_FRAME, frame.getType());
            
            frame = new Frame();
            frame.pop(Frame.DOUBLE);
            assertEquals(1, frame.stackSize);
            assertEquals(FULL_FRAME, frame.getType());
    
            frame = new Frame();
            frame.pop(Frame.OBJECT);
            assertEquals(1, frame.stackSize);
            assertEquals(FULL_FRAME, frame.getType());
            
            frame = new Frame();
            frame.pop(Frame.UNINITIALIZED_THIS);
            assertEquals(1, frame.stackSize);
            assertEquals(FULL_FRAME, frame.getType());
    
            frame = new Frame();
            frame.pop(Frame.UNINITIALIZED);
            assertEquals(1, frame.stackSize);
            assertEquals(FULL_FRAME, frame.getType());
        }
    }



No.8 generated result --------------------------

Timeout


No.9 generated result --------------------------

Timeout


No.10 generated result --------------------------

package com.alibaba.fastjson2.internal.asm;

import static org.junit.jupiter.api.Assertions.*;

public class FrameTest {
    @Test
    public void popTest() {
        try {
            // given
            int nLocal = <FILL>;
            Object[] locals = new Object[nLocal];
            for (int i = 0; i < nLocal; i++) {
                switch (<FILL>) {
                    case ITEM_TOP:
                        break;
                    case ITEM_INTEGER:
                        locals[i] = -1024; // any value of type int
                        break;
                    case ITEM_FLOAT:
                        locals[i] = (float) 3.14; // any value of type float
                        break;
                    case ITEM_LONG:
                        locals[i] = 0xDEADBEEFL; // any value of type long
                        break;
                    case ITEM_DOUBLE:
                        locals[i] = (double) Math.PI; // any value of type double
                        break;
                    case ITEM_NULL:
                        locals[i] = null; // a reference of type null
                        break;
                    case ITEM_UNINITIALIZED_THIS:
                        locals[i] = new Object();
                        break;
                    default:
                        throw new RuntimeException("unknown stack item type");
                }
            }
            int nStack = <FILL>; // the number of items in the operand stack of the current frame
            Object[] stack = new Object[nStack];
            for (int i = 0; i < nStack; i++) {
                switch (<FILL>) {
                    case ITEM_TOP:
                        break;
                    case ITEM_INTEGER:
                        stack[i] = -1024; // any value of type int
                        break;
                    case ITEM_FLOAT:
                        stack[i] = (float) 3.14; // any value of type float
                        break;
                    case ITEM_LONG:
                        stack[i] = 0xDEADBEEFL; // any value of type long
                        break;
                    case ITEM_DOUBLE:
                        stack[i] = (double) Math.PI; // any value of type double
                        break;
                    case ITEM_NULL:
                        stack[i] = null; // a reference of type null
                        break;
                    default:
                        throw new RuntimeException("unknown stack item type");
                }
            }

            // when
            for (int i = 0; i < nStack; i++) {
                Frame.pop(stack, i);
            }
            Object[] updatedLocals = Frame.pop(locals, nLocal - 1);
            
            // then
            assertArrayEquals(stack, updatedLocals);
        } catch (Exception e) {
            fail("unexpected exception: " + e);
        }
    }
}
    

### Response:



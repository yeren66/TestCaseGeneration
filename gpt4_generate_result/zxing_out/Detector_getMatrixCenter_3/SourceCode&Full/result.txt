Source code: 


private Point getMatrixCenter() {

  ResultPoint pointA;
  ResultPoint pointB;
  ResultPoint pointC;
  ResultPoint pointD;

  //Get a white rectangle that can be the border of the matrix in center bull's eye or
  try {

    ResultPoint[] cornerPoints = new WhiteRectangleDetector(image).detect();
    pointA = cornerPoints[0];
    pointB = cornerPoints[1];
    pointC = cornerPoints[2];
    pointD = cornerPoints[3];

  } catch (NotFoundException e) {

    // This exception can be in case the initial rectangle is white
    // In that case, surely in the bull's eye, we try to expand the rectangle.
    int cx = image.getWidth() / 2;
    int cy = image.getHeight() / 2;
    pointA = getFirstDifferent(new Point(cx + 7, cy - 7), false, 1, -1).toResultPoint();
    pointB = getFirstDifferent(new Point(cx + 7, cy + 7), false, 1, 1).toResultPoint();
    pointC = getFirstDifferent(new Point(cx - 7, cy + 7), false, -1, 1).toResultPoint();
    pointD = getFirstDifferent(new Point(cx - 7, cy - 7), false, -1, -1).toResultPoint();

  }

  //Compute the center of the rectangle
  int cx = MathUtils.round((pointA.getX() + pointD.getX() + pointB.getX() + pointC.getX()) / 4.0f);
  int cy = MathUtils.round((pointA.getY() + pointD.getY() + pointB.getY() + pointC.getY()) / 4.0f);

  // Redetermine the white rectangle starting from previously computed center.
  // This will ensure that we end up with a white rectangle in center bull's eye
  // in order to compute a more accurate center.
  try {
    ResultPoint[] cornerPoints = new WhiteRectangleDetector(image, 15, cx, cy).detect();
    pointA = cornerPoints[0];
    pointB = cornerPoints[1];
    pointC = cornerPoints[2];
    pointD = cornerPoints[3];
  } catch (NotFoundException e) {
    // This exception can be in case the initial rectangle is white
    // In that case we try to expand the rectangle.
    pointA = getFirstDifferent(new Point(cx + 7, cy - 7), false, 1, -1).toResultPoint();
    pointB = getFirstDifferent(new Point(cx + 7, cy + 7), false, 1, 1).toResultPoint();
    pointC = getFirstDifferent(new Point(cx - 7, cy + 7), false, -1, 1).toResultPoint();
    pointD = getFirstDifferent(new Point(cx - 7, cy - 7), false, -1, -1).toResultPoint();
  }

  // Recompute the center of the rectangle
  cx = MathUtils.round((pointA.getX() + pointD.getX() + pointB.getX() + pointC.getX()) / 4.0f);
  cy = MathUtils.round((pointA.getY() + pointD.getY() + pointB.getY() + pointC.getY()) / 4.0f);

  return new Point(cx, cy);
}



No.1 generated result --------------------------

null


No.2 generated result --------------------------

null


No.3 generated result --------------------------

null


No.4 generated result --------------------------

null


No.5 generated result --------------------------

null


No.6 generated result --------------------------

null


No.7 generated result --------------------------

null


No.8 generated result --------------------------

null


No.9 generated result --------------------------

null


No.10 generated result --------------------------

null



{
    "project_name": "jfreechart",
    "file_name": "Regression.java",
    "relative_path": "jfreechart/src/main/java/org/jfree/data/statistics/Regression.java",
    "execute_path": "jfreechart",
    "package": "org.jfree.data.statistics",
    "docstring": "/**\n     * Returns a matrix with the following features: (1) the number of rows\n     * and columns is 1 less than that of the original matrix; (2)the matrix\n     * is triangular, i.e. all elements a (row, column) with column &gt; row are\n     * zero.  This method is used for calculating a polynomial regression.\n     * \n     * @param matrix  the start matrix.\n     *\n     * @return The new matrix.\n     */",
    "source_code": "\nprivate static double[][] calculateSubMatrix(double[][] matrix){\n    int equations = matrix.length;\n    int coefficients = matrix[0].length;\n    double[][] result = new double[equations - 1][coefficients - 1];\n    for (int eq = 1; eq < equations; eq++) {\n        double factor = matrix[0][0] / matrix[eq][0];\n        for (int coe = 1; coe < coefficients; coe++) {\n            result[eq - 1][coe -1] = matrix[0][coe] - matrix[eq][coe]\n                    * factor;\n        }\n    }\n    if (equations == 1) {\n        return result;\n    }\n    // check for zero pivot element\n    if (result[0][0] == 0) {\n        boolean found = false;\n        for (int i = 0; i < result.length; i ++) {\n            if (result[i][0] != 0) {\n                found = true;\n                double[] temp = result[0];\n                System.arraycopy(result[i], 0, result[0], 0, \n                        result[i].length);\n                System.arraycopy(temp, 0, result[i], 0, temp.length);\n                break;\n            }\n        }\n        if (!found) {\n            //System.out.println(\"Equation has no solution!\");\n            return new double[equations - 1][coefficients - 1];\n        }\n    }\n    double[][] subMatrix = calculateSubMatrix(result);\n    for (int eq = 1; eq < equations -  1; eq++) {\n        result[eq][0] = 0;\n        if (coefficients - 1 - 1 >= 0) System.arraycopy(subMatrix[eq - 1], 0, result[eq], 1, coefficients - 1 - 1);\n    }\n    return result;\n}\n",
    "class_name": "Regression",
    "method_name": "calculateSubMatrix",
    "arguments": [
        "double[][] matrix"
    ],
    "generate_test": [
        "null",
        "null",
        "null",
        "null",
        "null",
        "null",
        "null",
        "null",
        "null",
        "null"
    ]
}
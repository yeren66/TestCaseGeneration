{
    "project_name": "zxing",
    "file_name": "FinderPattern.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/oned/rss/FinderPattern.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.oned.rss",
    "docstring": null,
    "source_code": "@Override\npublic boolean equals(Object o) {\n  if (!(o instanceof FinderPattern)) {\n    return false;\n  }\n  FinderPattern that = (FinderPattern) o;\n  return value == that.value;\n}\n",
    "class_name": "FinderPattern",
    "method_name": "equals",
    "arguments": [
        "Object o"
    ],
    "generate_test": [
        "@Test\npublic void equalsTest() {\n    FinderPattern finderPattern1 = new FinderPattern(1, new int[]{0, 1}, 0, 0, 0);\n    FinderPattern finderPattern2 = new FinderPattern(1, new int[]{0, 1}, 0, 0, 0);\n    FinderPattern finderPattern3 = new FinderPattern(2, new int[]{0, 1}, 0, 0, 0);\n\n    assertTrue(finderPattern1.equals(finderPattern1)); // Same object should return true\n    assertTrue(finderPattern1.equals(finderPattern2)); // Two objects with same value should return true\n    assertFalse(finderPattern1.equals(null)); // Null object should return false\n    assertFalse(finderPattern1.equals(finderPattern3)); // Two objects with different values should return false\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern pattern1 = new FinderPattern(1, new int[]{1, 2}, 1, 2, 1);\n    FinderPattern pattern2 = new FinderPattern(1, new int[]{1, 2}, 1, 2, 1);\n    FinderPattern pattern3 = new FinderPattern(2, new int[]{1, 2}, 1, 2, 1);\n    \n    assertTrue(pattern1.equals(pattern2));\n    assertFalse(pattern1.equals(pattern3));\n}",
        "FinderPattern pattern1 = new FinderPattern(1, new int[]{0, 1}, 0, 1, 1);\nFinderPattern pattern2 = new FinderPattern(1, new int[]{0, 1}, 0, 1, 1);\n\nassertTrue(pattern1.equals(pattern2));",
        "@Test\npublic void equalsTest() {\n    FinderPattern pattern1 = new FinderPattern(1, new int[]{1, 2}, 1, 2, 1);\n    FinderPattern pattern2 = new FinderPattern(1, new int[]{1, 2}, 1, 2, 1);\n    FinderPattern pattern3 = new FinderPattern(2, new int[]{1, 2}, 1, 2, 1);\n    \n    assertEquals(pattern1, pattern1); // Reflexive property\n    assertEquals(pattern1, pattern2); // Symmetric property\n    assertEquals(pattern2, pattern1); // Symmetric property\n    assertEquals(pattern2, pattern3); // Transitive property\n    \n    assertFalse(pattern1.equals(null)); // Not equal to null\n    \n    FinderPattern differentType = new FinderPattern(1, new int[]{1, 2}, 1, 2, 1);\n    assertFalse(pattern1.equals(differentType)); // Not equal to object of different type\n    \n    FinderPattern differentValue = new FinderPattern(3, new int[]{1, 2}, 1, 2, 1);\n    assertFalse(pattern1.equals(differentValue)); // Not equal to object with different value\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern pattern1 = new FinderPattern(1, new int[]{0, 1}, 0, 1, 0);\n    FinderPattern pattern2 = new FinderPattern(1, new int[]{0, 1}, 0, 1, 0);\n    FinderPattern pattern3 = new FinderPattern(2, new int[]{0, 1}, 0, 1, 0);\n\n    assertTrue(pattern1.equals(pattern2));\n    assertFalse(pattern1.equals(pattern3));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern pattern1 = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);\n    FinderPattern pattern2 = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);\n    FinderPattern pattern3 = new FinderPattern(2, new int[]{1, 2}, 3, 4, 5);\n    \n    assertTrue(pattern1.equals(pattern2));\n    assertFalse(pattern1.equals(pattern3));\n    assertFalse(pattern1.equals(null));\n    assertFalse(pattern1.equals(new Object()));\n}",
        "public void equalsTest() {\n    FinderPattern pattern1 = new FinderPattern(1, new int[]{1, 2}, 1, 2, 1);\n    FinderPattern pattern2 = new FinderPattern(1, new int[]{1, 2}, 1, 2, 1);\n    FinderPattern pattern3 = new FinderPattern(2, new int[]{1, 2}, 1, 2, 1);\n    \n    assertTrue(pattern1.equals(pattern2));\n    assertFalse(pattern1.equals(pattern3));\n    assertFalse(pattern1.equals(null));\n    assertFalse(pattern1.equals(\"String\"));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern fp1 = new FinderPattern(1, new int[]{1, 3}, 0, 2, 5);\n    FinderPattern fp2 = new FinderPattern(1, new int[]{1, 3}, 0, 2, 5);\n    FinderPattern fp3 = new FinderPattern(2, new int[]{1, 3}, 0, 2, 5);\n    \n    // Test for equality with the same object\n    assertTrue(fp1.equals(fp1));\n    \n    // Test for equality with another object of the same type and same value\n    assertTrue(fp1.equals(fp2));\n    \n    // Test for equality with another object of the same type but different value\n    assertFalse(fp1.equals(fp3));\n    \n    // Test for equality with an object of different type\n    String str = \"finderPattern\";\n    assertFalse(fp1.equals(str));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern pattern1 = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);\n    FinderPattern pattern2 = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);\n    FinderPattern pattern3 = new FinderPattern(2, new int[]{1, 2}, 3, 4, 5);\n    \n    // Test equals with the same object\n    assertTrue(pattern1.equals(pattern1));\n    \n    // Test equals with an object of different class\n    assertFalse(pattern1.equals(\"test\"));\n    \n    // Test equals with an object of the same class, but different values\n    assertFalse(pattern1.equals(pattern3));\n    \n    // Test equals with an object of the same class and same values\n    assertTrue(pattern1.equals(pattern2));\n}",
        "package com.google.zxing.oned.rss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n    @Test\n    public void equalsTest() {\n        FinderPattern pattern1 = new FinderPattern(1, new int[]{0, 1}, 0, 1, 2);\n        FinderPattern pattern2 = new FinderPattern(1, new int[]{0, 1}, 0, 1, 2);\n        FinderPattern pattern3 = new FinderPattern(2, new int[]{0, 1}, 0, 1, 2);\n        \n        assertEquals(pattern1.equals(pattern2), true);\n        assertEquals(pattern1.equals(pattern3), false);\n    }\n}"
    ]
}
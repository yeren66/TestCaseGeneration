{
    "project_name": "zxing",
    "file_name": "Decoder.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/aztec/decoder/Decoder.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.aztec.decoder",
    "docstring": "/**\n   * Gets the character (or string) corresponding to the passed code in the given table\n   *\n   * @param table the table used\n   * @param code the code of the character\n   */",
    "source_code": "\nprivate static String getCharacter(Table table, int code) {\n  switch (table) {\n    case UPPER:\n      return UPPER_TABLE[code];\n    case LOWER:\n      return LOWER_TABLE[code];\n    case MIXED:\n      return MIXED_TABLE[code];\n    case PUNCT:\n      return PUNCT_TABLE[code];\n    case DIGIT:\n      return DIGIT_TABLE[code];\n    default:\n      // Should not reach here.\n      throw new IllegalStateException(\"Bad table\");\n  }\n}\n",
    "class_name": "Decoder",
    "method_name": "getCharacter",
    "arguments": [
        "Table table",
        "int code"
    ],
    "generate_test": [
        "@Test\npublic void getCharacterTest() {\n    Table table = Table.UPPER;\n    int code = 65;\n    String expected = \"A\";\n    String actual = Decoder.getCharacter(table, code);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void getCharacterTest() {\n    Table table = Table.UPPER;\n    int code = 0;\n    String expected = \"\";\n    String actual = getCharacter(table, code);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void getCharacterTest() {\n  // Test for the UPPER table\n  Table table = Table.UPPER;\n  int code = 0;\n  String expected = UPPER_TABLE[code];\n  String actual = Decoder.getCharacter(table, code);\n  assertEquals(expected, actual);\n\n  // Test for the LOWER table\n  table = Table.LOWER;\n  code = 1;\n  expected = LOWER_TABLE[code];\n  actual = Decoder.getCharacter(table, code);\n  assertEquals(expected, actual);\n\n  // Test for the MIXED table\n  table = Table.MIXED;\n  code = 2;\n  expected = MIXED_TABLE[code];\n  actual = Decoder.getCharacter(table, code);\n  assertEquals(expected, actual);\n\n  // Test for the PUNCT table\n  table = Table.PUNCT;\n  code = 3;\n  expected = PUNCT_TABLE[code];\n  actual = Decoder.getCharacter(table, code);\n  assertEquals(expected, actual);\n\n  // Test for the DIGIT table\n  table = Table.DIGIT;\n  code = 4;\n  expected = DIGIT_TABLE[code];\n  actual = Decoder.getCharacter(table, code);\n  assertEquals(expected, actual);\n\n  // Test for default case\n  table = Table.BINARY;\n  code = 5;\n  assertThrows(IllegalStateException.class, () -> Decoder.getCharacter(table, code));\n}",
        "@Test\npublic void getCharacterTest() {\n    Table table = Table.UPPER;\n    int code = 65;\n    String expected = \"A\";\n    String result = Decoder.getCharacter(table, code);\n    assertEquals(expected, result);\n\n    table = Table.LOWER;\n    code = 97;\n    expected = \"a\";\n    result = Decoder.getCharacter(table, code);\n    assertEquals(expected, result);\n\n    table = Table.MIXED;\n    code = 32;\n    expected = \" \";\n    result = Decoder.getCharacter(table, code);\n    assertEquals(expected, result);\n\n    table = Table.PUNCT;\n    code = 33;\n    expected = \"!\";\n    result = Decoder.getCharacter(table, code);\n    assertEquals(expected, result);\n\n    table = Table.DIGIT;\n    code = 48;\n    expected = \"0\";\n    result = Decoder.getCharacter(table, code);\n    assertEquals(expected, result);\n}",
        "@Test\npublic void getCharacterTest() {\n    Table table = Table.UPPER;\n    int code = 0;\n    String expected = \"A\";\n    String actual = getCharacter(table, code);\n    assertEquals(expected, actual);\n\n    table = Table.LOWER;\n    code = 1;\n    expected = \"b\";\n    actual = getCharacter(table, code);\n    assertEquals(expected, actual);\n\n    table = Table.MIXED;\n    code = 2;\n    expected = \"3\";\n    actual = getCharacter(table, code);\n    assertEquals(expected, actual);\n\n    table = Table.PUNCT;\n    code = 3;\n    expected = \".\";\n    actual = getCharacter(table, code);\n    assertEquals(expected, actual);\n\n    table = Table.DIGIT;\n    code = 4;\n    expected = \"9\";\n    actual = getCharacter(table, code);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void getCharacterTest() {\n  assertEquals(\"A\", Decoder.getCharacter(Decoder.Table.UPPER, 0));\n  assertEquals(\"a\", Decoder.getCharacter(Decoder.Table.LOWER, 0));\n  assertEquals(\"0\", Decoder.getCharacter(Decoder.Table.DIGIT, 0));\n  assertEquals(\".\", Decoder.getCharacter(Decoder.Table.PUNCT, 0));\n  assertEquals(\" \", Decoder.getCharacter(Decoder.Table.MIXED, 0));\n  assertThrows(IllegalStateException.class, () -> {\n    Decoder.getCharacter(Decoder.Table.BINARY, 0);\n  });\n}",
        "@Test\npublic void getCharacterTest() {\n    Table table = Table.UPPER;\n    int code = 65;\n    String expected = \"A\";\n  \n    String actual = Decoder.getCharacter(table, code);\n  \n    assertEquals(expected, actual);\n}",
        "@Test\npublic void getCharacterTest() {\n    // Test case 1: UPPER table\n    Table table1 = Table.UPPER;\n    int code1 = 5;\n    String expected1 = \"E\";\n    String result1 = Decoder.getCharacter(table1, code1);\n    assertEquals(expected1, result1);\n\n    // Test case 2: LOWER table\n    Table table2 = Table.LOWER;\n    int code2 = 10;\n    String expected2 = \"k\";\n    String result2 = Decoder.getCharacter(table2, code2);\n    assertEquals(expected2, result2);\n\n    // Test case 3: MIXED table\n    Table table3 = Table.MIXED;\n    int code3 = 15;\n    String expected3 = \"%\";\n    String result3 = Decoder.getCharacter(table3, code3);\n    assertEquals(expected3, result3);\n\n    // Test case 4: PUNCT table\n    Table table4 = Table.PUNCT;\n    int code4 = 5;\n    String expected4 = \",\";\n    String result4 = Decoder.getCharacter(table4, code4);\n    assertEquals(expected4, result4);\n\n    // Test case 5: DIGIT table\n    Table table5 = Table.DIGIT;\n    int code5 = 9;\n    String expected5 = \"9\";\n    String result5 = Decoder.getCharacter(table5, code5);\n    assertEquals(expected5, result5);\n}",
        "@Test\npublic void getCharacterTest() {\n    Table table = Table.UPPER;\n    int code = 65;\n    String expected = \"A\";\n    String result = getCharacter(table, code);\n    assertEquals(expected, result);\n}",
        "@Test\npublic void getCharacterTest() {\n    Table table = Table.UPPER;\n    int code = 65;\n    String expected = \"A\";\n    String result = Decoder.getCharacter(table, code);\n    assertEquals(expected, result);\n\n    table = Table.LOWER;\n    code = 97;\n    expected = \"a\";\n    result = Decoder.getCharacter(table, code);\n    assertEquals(expected, result);\n\n    table = Table.MIXED;\n    code = 32;\n    expected = \" \";\n    result = Decoder.getCharacter(table, code);\n    assertEquals(expected, result);\n\n    table = Table.PUNCT;\n    code = 33;\n    expected = \"!\";\n    result = Decoder.getCharacter(table, code);\n    assertEquals(expected, result);\n\n    table = Table.DIGIT;\n    code = 2;\n    expected = \"2\";\n    result = Decoder.getCharacter(table, code);\n    assertEquals(expected, result);\n}"
    ]
}
{
    "project_name": "zxing",
    "file_name": "State.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/aztec/encoder/State.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.aztec.encoder",
    "docstring": null,
    "source_code": "// Create a new state representing this state, but an additional character\n// output in Binary Shift mode.\nState addBinaryShiftChar(int index) {\n  Token token = this.token;\n  int mode = this.mode;\n  int bitCount = this.bitCount;\n  if (this.mode == HighLevelEncoder.MODE_PUNCT || this.mode == HighLevelEncoder.MODE_DIGIT) {\n    int latch = HighLevelEncoder.LATCH_TABLE[mode][HighLevelEncoder.MODE_UPPER];\n    token = token.add(latch & 0xFFFF, latch >> 16);\n    bitCount += latch >> 16;\n    mode = HighLevelEncoder.MODE_UPPER;\n  }\n  int deltaBitCount =\n      (binaryShiftByteCount == 0 || binaryShiftByteCount == 31) ? 18 :\n      (binaryShiftByteCount == 62) ? 9 : 8;\n  State result = new State(token, mode, binaryShiftByteCount + 1, bitCount + deltaBitCount);\n  if (result.binaryShiftByteCount == 2047 + 31) {\n    // The string is as long as it's allowed to be.  We should end it.\n    result = result.endBinaryShift(index + 1);\n  }\n  return result;\n}\n",
    "class_name": "State",
    "method_name": "addBinaryShiftChar",
    "arguments": [
        "int index"
    ],
    "generate_test": [
        "@Test\npublic void addBinaryShiftCharTest() {\n    Token token = new Token();\n    int mode = HighLevelEncoder.MODE_UPPER;\n    int binaryShiftByteCount = 1;\n    int bitCount = 10;\n    \n    State state = new State(token, mode, binaryShiftByteCount, bitCount);\n    \n    State result = state.addBinaryShiftChar(0);\n    \n    Token expectedToken = token.add(HighLevelEncoder.LATCH_TABLE[mode][HighLevelEncoder.MODE_UPPER] & 0xFFFF, HighLevelEncoder.LATCH_TABLE[mode][HighLevelEncoder.MODE_UPPER] >> 16);\n    int expectedBitCount = bitCount + (HighLevelEncoder.LATCH_TABLE[mode][HighLevelEncoder.MODE_UPPER] >> 16);\n    int expectedMode = HighLevelEncoder.MODE_UPPER;\n    int expectedBinaryShiftByteCount = binaryShiftByteCount + 1;\n    \n    State expectedResult = new State(expectedToken, expectedMode, expectedBinaryShiftByteCount, expectedBitCount);\n    \n    assertEquals(expectedResult, result);\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        Token token = new Token();\n        int mode = HighLevelEncoder.MODE_UPPER;\n        int binaryShiftByteCount = 5;\n        int bitCount = 24;\n        \n        State initialState = new State(token, mode, binaryShiftByteCount, bitCount);\n        State result = initialState.addBinaryShiftChar(0);\n        \n        assertEquals(token, result.getToken());\n        assertEquals(HighLevelEncoder.MODE_UPPER, result.getMode());\n        assertEquals(binaryShiftByteCount + 1, result.getBinaryShiftByteCount());\n        assertEquals(bitCount + 8, result.getBitCount());\n    }\n}",
        "@Test\npublic void addBinaryShiftCharTest() {\n    Token token = new Token();\n    int mode = HighLevelEncoder.MODE_DIGIT;\n    int binaryShiftByteCount = 0;\n    int bitCount = 10;\n    \n    // Create a new state with the given parameters\n    State state = new State(token, mode, binaryShiftByteCount, bitCount);\n    \n    // Call the addBinaryShiftChar method on the state object\n    State result = state.addBinaryShiftChar(3);\n    \n    // Assert the expected values of the result\n    assertEquals(token, result.getToken());\n    assertEquals(HighLevelEncoder.MODE_UPPER, result.getMode());\n    assertEquals(binaryShiftByteCount + 1, result.getBinaryShiftByteCount());\n    assertEquals(bitCount + 8, result.getBitCount());\n}",
        "@Test\npublic void addBinaryShiftCharTest() {\n    Token token = new Token();\n    int mode = HighLevelEncoder.MODE_UPPER;\n    int binaryShiftByteCount = 5;\n    int bitCount = 50;\n    \n    State state = new State(token, mode, binaryShiftByteCount, bitCount);\n    State result = state.addBinaryShiftChar(3);\n    \n    assertEquals(token, result.getToken());\n    assertEquals(HighLevelEncoder.MODE_UPPER, result.getMode());\n    assertEquals(binaryShiftByteCount + 1, result.getBinaryShiftByteCount());\n    assertEquals(bitCount + 8, result.getBitCount());\n}",
        "@Test\npublic void addBinaryShiftCharTest() {\n    Token token = new Token();\n    int mode = HighLevelEncoder.MODE_DIGIT;\n    int binaryShiftByteCount = 0;\n    int bitCount = 0;\n\n    State state = new State(token, mode, binaryShiftByteCount, bitCount);\n\n    State result = state.addBinaryShiftChar(0);\n\n    Token expectedToken = new Token();\n    int expectedMode = HighLevelEncoder.MODE_DIGIT;\n    int expectedBinaryShiftByteCount = 1;\n    int expectedBitCount = 8;\n\n    assertEquals(expectedToken, result.getToken());\n    assertEquals(expectedMode, result.getMode());\n    assertEquals(expectedBinaryShiftByteCount, result.getBinaryShiftByteCount());\n    assertEquals(expectedBitCount, result.getBitCount());\n}",
        "@Test\npublic void addBinaryShiftCharTest() {\n    State initialState = State.INITIAL_STATE;\n    State result = initialState.addBinaryShiftChar(0);\n    assertEquals(token, result.getToken());\n    assertEquals(mode, result.getMode());\n    assertEquals(binaryShiftByteCount + 1, result.getBinaryShiftByteCount());\n    assertEquals(bitCount + deltaBitCount, result.getBitCount());\n    if (result.getBinaryShiftByteCount() == 2047 + 31) {\n        result = result.endBinaryShift(1);\n        // Assert endBinaryShift behavior if needed\n    }\n}",
        "@Test\npublic void addBinaryShiftCharTest() {\n    State initialState = State.INITIAL_STATE;\n    State result = initialState.addBinaryShiftChar(0);\n    assertEquals(0, result.getMode());\n    assertEquals(1, result.getBinaryShiftByteCount());\n    assertEquals(8, result.getBitCount());\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        Token token = new Token();\n        int mode = HighLevelEncoder.MODE_UPPER;\n        int binaryShiftByteCount = 0;\n        int bitCount = 10;\n\n        State state = new State(token, mode, binaryShiftByteCount, bitCount);\n        State result = state.addBinaryShiftChar(0);\n\n        // Assert the values of the result state\n        assertEquals(token, result.getToken());\n        assertEquals(HighLevelEncoder.MODE_UPPER, result.getMode());\n        assertEquals(binaryShiftByteCount + 1, result.getBinaryShiftByteCount());\n\n        int deltaBitCount = (binaryShiftByteCount == 0 || binaryShiftByteCount == 31) ? 18 :\n                (binaryShiftByteCount == 62) ? 9 : 8;\n        int expectedBitCount = bitCount + deltaBitCount;\n        assertEquals(expectedBitCount, result.getBitCount());\n\n        if (result.getBinaryShiftByteCount() == 2047 + 31) {\n            // The string is as long as it's allowed to be.  We should end it.\n            result = result.endBinaryShift(1);\n        }\n\n        // Assert the final result\n        assertEquals(expectedToken, result.getToken());\n        assertEquals(expectedMode, result.getMode());\n        assertEquals(expectedBinaryShiftByteCount, result.getBinaryShiftByteCount());\n        assertEquals(expectedBitCount, result.getBitCount());\n    }\n}",
        "public void addBinaryShiftCharTest() {\n    State state = new State(new Token(), 0, 0, 0);\n    State result = state.addBinaryShiftChar(0);\n\n    // Assert the expected values\n    assertEquals(new Token(), result.getToken());\n    assertEquals(0, result.getMode());\n    assertEquals(1, result.getBinaryShiftByteCount());\n    assertEquals(0, result.getBitCount());\n}",
        "@Test\npublic void addBinaryShiftCharTest() {\n    State initialState = new State(token, mode, binaryShiftByteCount, bitCount);\n    int index = 0;\n    State result = initialState.addBinaryShiftChar(index);\n    \n    // Assert the expected values of the result\n    assertEquals(expectedToken, result.getToken());\n    assertEquals(expectedMode, result.getMode());\n    assertEquals(expectedBinaryShiftByteCount, result.getBinaryShiftByteCount());\n    assertEquals(expectedBitCount, result.getBitCount());\n    \n    // (Optional) Assert any additional conditions if required\n}"
    ]
}
{
    "project_name": "zxing",
    "file_name": "Encoder.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/aztec/encoder/Encoder.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.aztec.encoder",
    "docstring": "/**\n   * Encodes the given string content as an Aztec symbol\n   *\n   * @param data input data string\n   * @param minECCPercent minimal percentage of error check words (According to ISO/IEC 24778:2008,\n   *                      a minimum of 23% + 3 words is recommended)\n   * @param userSpecifiedLayers if non-zero, a user-specified value for the number of layers\n   * @param charset character set in which to encode string using ECI; if null, no ECI code\n   *                will be inserted, and the string must be encodable as ISO/IEC 8859-1\n   *                (Latin-1), the default encoding of the symbol.\n   * @return Aztec symbol matrix with metadata\n   */",
    "source_code": "\npublic static AztecCode encode(String data, int minECCPercent, int userSpecifiedLayers, Charset charset) {\n  byte[] bytes = data.getBytes(null != charset ? charset : StandardCharsets.ISO_8859_1);\n  return encode(bytes, minECCPercent, userSpecifiedLayers, charset);\n}\n",
    "class_name": "Encoder",
    "method_name": "encode",
    "arguments": [
        "String data",
        "int minECCPercent",
        "int userSpecifiedLayers",
        "Charset charset"
    ],
    "generate_test": [
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EncoderTest {\n    @Test\n    public void encodeTest() {\n        String data = \"Hello World\";\n        int minECCPercent = 25;\n        int userSpecifiedLayers = 5;\n        Charset charset = Charset.forName(\"UTF-8\");\n\n        AztecCode result = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n\n        assertNotNull(result);\n        // Add additional assertions for the expected output\n    }\n}",
        "@Test\npublic void encodeTest() {\n   String data = \"Hello\";\n   int minECCPercent = 25;\n   int userSpecifiedLayers = 4;\n   Charset charset = StandardCharsets.UTF_8;\n\n   AztecCode result = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n\n   assertNotNull(result);\n   // Perform assertions on the returned AztecCode object\n}",
        "@Test\npublic void encodeTest() {\n    String data = \"Hello World\";\n    int minECCPercent = 25;\n    int userSpecifiedLayers = 4;\n    Charset charset = StandardCharsets.UTF_8;\n    AztecCode result = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n    assertNotNull(result);\n    // Add assertions for the expected output of the encode() method\n}",
        "@Test\npublic void encodeTest() {\n  String data = \"Hello World\";\n  int minECCPercent = 25;\n  int userSpecifiedLayers = 3;\n  Charset charset = StandardCharsets.UTF_8;\n  \n  AztecCode result = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n  \n  assertNotNull(result);\n  // Assert additional conditions based on the expected output of the method\n}",
        "@Test\npublic void encodeTest() {\n    // Test data and parameters\n    String data = \"Hello, ZXing!\";\n    int minECCPercent = 25;\n    int userSpecifiedLayers = 5;\n    Charset charset = StandardCharsets.UTF_8;\n    \n    // Test the encode method\n    AztecCode encoded = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n    \n    // Perform assertions to validate the output\n    assertNotNull(encoded);\n    // Add more assertions as required based on the expected behavior of the encode method\n}",
        "@Test\npublic void encodeTest() {\n    String data = \"Hello World\";\n    int minECCPercent = 25;\n    int userSpecifiedLayers = 10;\n    Charset charset = Charset.defaultCharset();\n    \n    AztecCode result = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n    \n    assertNotNull(result);\n    // Add assertions for the expected output\n}",
        "@Test\npublic void encodeTest() {\n    String data = \"Hello World\";\n    int minECCPercent = 25;\n    int userSpecifiedLayers = 10;\n    Charset charset = StandardCharsets.UTF_8;\n    AztecCode result = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n    assertNotNull(result);\n    // Additional assertions for the expected output can be added here\n}",
        "@Test\npublic void encodeTest() {\n  String data = \"Test data\";\n  int minECCPercent = 25;\n  int userSpecifiedLayers = 2;\n  Charset charset = StandardCharsets.UTF_8;\n  AztecCode result = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n  assertNotNull(result);\n  // Add additional assertions here depending on the expected behavior of the encode method\n}",
        "@Test\npublic void encodeTest() {\n    String data = \"Hello World\";\n    int minECCPercent = 25;\n    int userSpecifiedLayers = 5;\n    Charset charset = Charset.forName(\"UTF-8\");\n\n    AztecCode result = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n\n    assertNotNull(result);\n    // Perform additional assertions on the result if needed\n}",
        "@Test\npublic void encodeTest() {\n    String data = \"Hello World\";\n    int minECCPercent = 25;\n    int userSpecifiedLayers = 5;\n    Charset charset = Charset.forName(\"UTF-8\");\n    \n    AztecCode result = Encoder.encode(data, minECCPercent, userSpecifiedLayers, charset);\n    \n    assertNotNull(result);\n    // Add additional assertions for the expected output\n}"
    ]
}
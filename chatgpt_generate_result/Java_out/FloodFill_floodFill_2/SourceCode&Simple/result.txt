Source code: 


public static void floodFill(final int[][] image, final int x, final int y, final int newColor, final int oldColor) {
    if (newColor == oldColor || x < 0 || x >= image.length || y < 0 || y >= image[x].length || getPixel(image, x, y) != oldColor) {
        return;
    }

    putPixel(image, x, y, newColor);

    /* Recursively check for horizontally & vertically adjacent coordinates */
    floodFill(image, x + 1, y, newColor, oldColor);
    floodFill(image, x - 1, y, newColor, oldColor);
    floodFill(image, x, y + 1, newColor, oldColor);
    floodFill(image, x, y - 1, newColor, oldColor);

    /* Recursively check for diagonally adjacent coordinates  */
    floodFill(image, x + 1, y - 1, newColor, oldColor);
    floodFill(image, x - 1, y + 1, newColor, oldColor);
    floodFill(image, x + 1, y + 1, newColor, oldColor);
    floodFill(image, x - 1, y - 1, newColor, oldColor);
}



No.1 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = {
        {1, 1, 1, 1},
        {1, 1, 1, 1},
        {1, 1, 1, 1},
        {1, 1, 1, 1}
    };
    int x = 1;
    int y = 1;
    int newColor = 2;
    int oldColor = 1;

    FloodFill.floodFill(image, x, y, newColor, oldColor);

    int[][] expectedImage = {
        {2, 2, 2, 2},
        {2, 2, 2, 2},
        {2, 2, 2, 2},
        {2, 2, 2, 2}
    };

    assertArrayEquals(expectedImage, image);
}


No.2 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = {{1, 1, 1}, {1, 1, 0}, {1, 0, 1}};
    FloodFill.floodFill(image, 1, 1, 2, 0);
    
    int[][] expectedImage = {{1, 1, 1}, {1, 1, 2}, {1, 2, 1}};
    assertArrayEquals(expectedImage, image);
}


No.3 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = {{1, 1, 1}, {1, 0, 1}, {1, 1, 1}};
    int x = 1;
    int y = 1;
    int newColor = 2;
    int oldColor = 1;
    
    FloodFill.floodFill(image, x, y, newColor, oldColor);
    
    int[][] expectedImage = {{2, 2, 2}, {2, 0, 2}, {2, 2, 2}};
    assertArrayEquals(expectedImage, image);
}


No.4 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};
    int x = 1;
    int y = 1;
    int newColor = 0;
    int oldColor = 1;

    FloodFill.floodFill(image, x, y, newColor, oldColor);

    int[][] expected = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}};
    assertArrayEquals(expected, image);
}


No.5 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = {
        {1, 1, 1},
        {1, 1, 1},
        {1, 1, 1}
    };
    int x = 1;
    int y = 1;
    int newColor = 2;
    int oldColor = 1;

    FloodFill.floodFill(image, x, y, newColor, oldColor);

    /* Validate that the image has been updated correctly */
    int[][] expectedImage = {
        {2, 2, 2},
        {2, 2, 2},
        {2, 2, 2}
    };
    assertArrayEquals(expectedImage, image);
}


No.6 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {
    @Test
    public void floodFillTest() {
        int[][] image = {{1, 1, 1},
                         {1, 1, 0},
                         {1, 0, 1}};
        int x = 1;
        int y = 1;
        int newColor = 2;
        int oldColor = 1;
        
        FloodFill.floodFill(image, x, y, newColor, oldColor);
        
        int[][] expected = {{2, 2, 2},
                            {2, 2, 0},
                            {2, 0, 1}};
        assertArrayEquals(expected, image);
    }
}


No.7 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {
    @Test
    public void floodFillTest() {
        int[][] image = {{1, 1, 1}, {1, 1, 0}, {1, 0, 1}};
        int x = 1;
        int y = 1;
        int newColor = 2;
        int oldColor = 1;

        FloodFill.floodFill(image, x, y, newColor, oldColor);

        int[][] expectedImage = {{2, 2, 2}, {2, 2, 0}, {2, 0, 1}};

        assertArrayEquals(expectedImage, image);
    }
}


No.8 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FloodFillTest {
    @Test
    public void floodFillTest() {
        int[][] image = {{1, 1, 1}, {1, 1, 0}, {1, 0, 1}};
        int x = 1;
        int y = 1;
        int newColor = 2;
        int oldColor = 1;

        FloodFill.floodFill(image, x, y, newColor, oldColor);

        int[][] expectedImage = {{2, 2, 2}, {2, 2, 0}, {2, 0, 1}};
        assertArrayEquals(expectedImage, image);
    }
}


No.9 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = {{1, 1, 1}, {1, 1, 0}, {1, 0, 1}};
    int x = 1;
    int y = 1;
    int newColor = 2;
    int oldColor = image[x][y];

    FloodFill.floodFill(image, x, y, newColor, oldColor);

    int[][] expectedResult = {{2, 2, 2}, {2, 2, 0}, {2, 0, 1}};
    assertArrayEquals(expectedResult, image);
}


No.10 generated result --------------------------

@Test
public void floodFillTest() {
    // Create a test image
    int[][] image = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};

    // Set the initial position and colors
    int x = 0;
    int y = 0;
    int oldColor = 1;
    int newColor = 2;
    
    // Call the floodFill method
    FloodFill.floodFill(image, x, y, newColor, oldColor);
    
    // Verify that the pixels have been filled with newColor
    assertEquals(newColor, image[0][0]);
    assertEquals(newColor, image[0][1]);
    assertEquals(newColor, image[0][2]);
    assertEquals(newColor, image[1][0]);
    assertEquals(newColor, image[1][1]);
    assertEquals(newColor, image[1][2]);
    assertEquals(newColor, image[2][0]);
    assertEquals(newColor, image[2][1]);
    assertEquals(newColor, image[2][2]);
}



{
    "project_name": "Java",
    "file_name": "FibonacciHeap.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/heaps/FibonacciHeap.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.heaps",
    "docstring": "/**\n     * Creates a node (of type HeapNode) which contains the given key, and inserts it into the heap.\n     *\n     * @pre key>=0\n     * @post (numOfnodes = = $prev numOfnodes + 1)\n     * @post empty == false\n     * $ret = the HeapNode we inserted\n     */",
    "source_code": "\npublic HeapNode insert(int key) {\n    HeapNode toInsert = new HeapNode(key); // creates the node\n    if (this.empty()) {\n        this.min = toInsert;\n    } else { // tree is not empty\n        min.setNext(toInsert);\n        this.updateMin(toInsert);\n    }\n    this.numOfHeapNodes++;\n    this.numOfTrees++;\n    return toInsert;\n}\n",
    "class_name": "FibonacciHeap",
    "method_name": "insert",
    "arguments": [
        "int key"
    ],
    "generate_test": [
        "@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    HeapNode node = heap.insert(5);\n    assertNotNull(node);\n    assertEquals(5, node.getKey());\n    assertFalse(heap.empty());\n    assertEquals(1, heap.size());\n    assertEquals(1, heap.numOfHeapNodes);\n    assertEquals(1, heap.numOfTrees);\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap fibonacciHeap = new FibonacciHeap();\n    HeapNode result = fibonacciHeap.insert(5);\n    assertNotNull(result);\n    assertEquals(5, result.getKey());\n    assertNull(result.getNext());\n    assertNull(result.getChild());\n    assertNull(result.getParent());\n    assertNull(result.getPrev());\n    assertFalse(result.isMarked());\n    assertEquals(0, result.getRank());\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    HeapNode node = heap.insert(5);\n    assertFalse(heap.empty());\n    assertEquals(1, heap.size());\n    assertEquals(5, node.getKey());\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    HeapNode node = heap.insert(5);\n    \n    assertNotNull(node);\n    assertEquals(5, node.getKey());\n    assertTrue(heap.findMin() == node);\n    assertEquals(1, heap.size());\n    assertEquals(1, heap.countersRep()[0]);\n}",
        "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n        HeapNode node = heap.insert(5);\n        assertNotNull(node);\n        assertEquals(5, node.getKey());\n        assertNull(node.getNext());\n        assertNull(node.getParent());\n        assertNull(node.getChild());\n        assertNull(node.getPrev());\n        assertFalse(node.isMarked());\n        assertFalse(node.isRoot());\n        \n        assertEquals(1, heap.size());\n        assertEquals(1, heap.numOfHeapNodes);\n        assertEquals(1, heap.numOfTrees);\n        assertEquals(0, heap.markedHeapNoodesCounter);\n        assertNull(heap.min.getNext());\n        assertEquals(node, heap.min);\n    \n        HeapNode min = heap.findMin();\n        assertEquals(node, min);\n    }\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    HeapNode node = heap.insert(5);\n    \n    assertTrue(heap.findMin() == node);\n    assertTrue(heap.size() == 1);\n    assertTrue(heap.totalLinks() == 0);\n    assertTrue(heap.totalCuts() == 0);\n    assertTrue(node.getKey() == 5);\n    assertTrue(node.isMarked() == false);\n    assertTrue(node.isRoot() == true);\n}",
        "public class FibonacciHeapTest {\n    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n        heap.insert(5);\n        \n        // Assert that the min node of the heap is correctly set to the newly inserted node\n        assertEquals(5, heap.findMin().getKey());\n        \n        // Assert that the number of heap nodes is correctly incremented\n        assertEquals(1, heap.numOfHeapNodes);\n        \n        // Assert that the number of trees is correctly incremented\n        assertEquals(1, heap.numOfTrees);\n    }\n}",
        "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n        HeapNode node = heap.insert(5);\n      \n        // Verify that the node is inserted correctly\n        assertNotNull(node);\n        assertEquals(5, node.getKey());\n        assertNull(node.getChild());\n        assertNull(node.getNext());\n        assertNull(node.getPrev());\n        assertNull(node.getParent());\n        assertFalse(node.isMarked());\n        assertEquals(0, node.getRank());\n        \n        // Verify that the heap is updated correctly\n        assertEquals(node, heap.getMin());\n        assertEquals(1, heap.getNumOfHeapNodes());\n        assertEquals(1, heap.getNumOfTrees());\n    }\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    HeapNode node = heap.insert(5);\n    assertFalse(heap.empty());\n    assertEquals(node, heap.findMin());\n    assertEquals(1, heap.size());\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    heap.insert(5);\n    assertNotNull(heap.min);\n    assertEquals(1, heap.numOfHeapNodes);\n    assertEquals(1, heap.numOfTrees);\n}"
    ]
}
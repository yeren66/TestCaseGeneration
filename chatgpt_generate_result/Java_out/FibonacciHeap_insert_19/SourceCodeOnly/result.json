{
    "project_name": "Java",
    "file_name": "FibonacciHeap.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/heaps/FibonacciHeap.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.heaps",
    "docstring": "/**\n     * Creates a node (of type HeapNode) which contains the given key, and inserts it into the heap.\n     *\n     * @pre key>=0\n     * @post (numOfnodes = = $prev numOfnodes + 1)\n     * @post empty == false\n     * $ret = the HeapNode we inserted\n     */",
    "source_code": "\npublic HeapNode insert(int key) {\n    HeapNode toInsert = new HeapNode(key); // creates the node\n    if (this.empty()) {\n        this.min = toInsert;\n    } else { // tree is not empty\n        min.setNext(toInsert);\n        this.updateMin(toInsert);\n    }\n    this.numOfHeapNodes++;\n    this.numOfTrees++;\n    return toInsert;\n}\n",
    "class_name": "FibonacciHeap",
    "method_name": "insert",
    "arguments": [
        "int key"
    ],
    "generate_test": [
        "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n        HeapNode node = heap.insert(5);\n        assertNotNull(node);\n        assertEquals(5, node.getKey());\n        assertNull(node.getNext());\n    }\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap fibonacciHeap = new FibonacciHeap();\n    HeapNode node1 = fibonacciHeap.insert(5);\n    \n    // Assert that the inserted node has the correct key value\n    assertEquals(5, node1.getKey());\n    // Assert that the inserted node is the min node in the heap\n    assertEquals(node1, fibonacciHeap.min);\n    // Assert that the number of heap nodes has been incremented\n    assertEquals(1, fibonacciHeap.numOfHeapNodes);\n    // Assert that the number of trees has been incremented\n    assertEquals(1, fibonacciHeap.numOfTrees);\n    \n    HeapNode node2 = fibonacciHeap.insert(10);\n    \n    // Assert that the inserted node has the correct key value\n    assertEquals(10, node2.getKey());\n    // Assert that the inserted node is the min node in the heap\n    assertEquals(node1, fibonacciHeap.min);\n    // Assert that the number of heap nodes has been incremented\n    assertEquals(2, fibonacciHeap.numOfHeapNodes);\n    // Assert that the number of trees has been decremented\n    assertEquals(1, fibonacciHeap.numOfTrees);\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    \n    HeapNode node = heap.insert(5);\n    assertNotNull(node);\n    assertEquals(5, node.getKey());\n    \n    assertFalse(heap.empty());\n    assertEquals(node, heap.getMin());\n    assertEquals(1, heap.getNumOfHeapNodes());\n    assertEquals(1, heap.getNumOfTrees());\n}",
        "public void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    HeapNode node = heap.insert(5);\n    assertNotNull(node);\n    assertEquals(5, node.getKey());\n    assertNull(node.getNext());\n    assertEquals(node, heap.getMin());\n    assertEquals(1, heap.getNumOfHeapNodes());\n    assertEquals(1, heap.getNumOfTrees());\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap fibonacciHeap = new FibonacciHeap();\n    HeapNode node = fibonacciHeap.insert(5);\n    assertNotNull(node);\n    assertEquals(5, node.getKey());\n    assertNull(node.getParent());\n    assertNull(node.getParent());\n    assertNull(node.getChild());\n    assertEquals(0, node.getDegree());\n    assertFalse(node.isMarked());\n    assertNull(node.getPrev());\n    assertNull(node.getNext());\n    assertNull(fibonacciHeap.getMin());\n    assertEquals(1, fibonacciHeap.getNumOfHeapNodes());\n    assertEquals(1, fibonacciHeap.getNumOfTrees());\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    assertNull(heap.insert(9)); // checking if the returned value is null\n    assertEquals(1, heap.numOfHeapNodes); // checking if the number of heap nodes is 1\n    assertEquals(1, heap.numOfTrees); // checking if the number of trees is 1\n    assertNotNull(heap.min); // checking if the min node is not null\n    assertEquals(9, heap.min.key); // checking if the key of min node is 9\n    assertNull(heap.min.next); // checking if the next node of min node is null\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap fibonacciHeap = new FibonacciHeap();\n    \n    // Inserting keys into the heap\n    HeapNode node1 = fibonacciHeap.insert(10);\n    HeapNode node2 = fibonacciHeap.insert(20);\n    HeapNode node3 = fibonacciHeap.insert(30);\n    \n    // Asserting the min node\n    assertEquals(node1, fibonacciHeap.min);\n    \n    // Asserting the number of heap nodes\n    assertEquals(3, fibonacciHeap.numOfHeapNodes);\n    \n    // Asserting the number of trees\n    assertEquals(3, fibonacciHeap.numOfTrees);\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap fibonacciHeap = new FibonacciHeap();\n    HeapNode result = fibonacciHeap.insert(5);\n    assertEquals(5, result.getKey());\n\n    // add additional test cases here\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    HeapNode node1 = heap.insert(5);\n    \n    // Check if the node was inserted correctly\n    assertEquals(5, node1.getKey());\n    assertEquals(null, node1.getNext());\n    \n    HeapNode node2 = heap.insert(10);\n    \n    // Check if the second node was inserted correctly\n    assertEquals(10, node2.getKey());\n    assertEquals(null, node2.getNext());\n    \n    // Check if the minimum node was correctly updated\n    assertEquals(5, heap.getMin().getKey());\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    assertNull(heap.getMin()); // ensure heap is empty initially\n    \n    HeapNode node = heap.insert(10);\n    assertNotNull(heap.getMin()); // ensure heap is not empty after insertion\n    assertEquals(node, heap.getMin()); // ensure the inserted node is the new min\n    \n    HeapNode node2 = heap.insert(5);\n    assertEquals(node, heap.getMin()); // ensure the original min is still the min\n    assertEquals(node2, heap.getMin().getNext()); // ensure properly linked nodes\n    \n    HeapNode node3 = heap.insert(7);\n    assertEquals(node, heap.getMin()); // ensure the original min is still the min\n    assertEquals(node3, heap.getMin().getNext()); // ensure properly linked nodes\n    assertEquals(node2, heap.getMin().getNext().getNext()); // ensure properly linked nodes\n}"
    ]
}
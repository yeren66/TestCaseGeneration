{
    "project_name": "Java",
    "file_name": "HeapSort.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/sorts/HeapSort.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.sorts",
    "docstring": "/**\n     * For simplicity, we are considering the heap root index as 1 instead of 0.\n     * It simplifies future calculations. Because of that we are decreasing the\n     * provided indexes by 1 in {@link #swap(Object[], int, int)} and\n     * {@link #less(Comparable[], int, int)} functions.\n     */",
    "source_code": "\n@Override\npublic <T extends Comparable<T>> T[] sort(T[] unsorted) {\n    int n = unsorted.length;\n    heapify(unsorted, n);\n    while (n > 1) {\n        swap(unsorted, 1, n--);\n        siftDown(unsorted, 1, n);\n    }\n    return unsorted;\n}\n",
    "class_name": "HeapSort",
    "method_name": "sort",
    "arguments": [
        "T unsorted"
    ],
    "generate_test": [
        "@Test\n    public void sortTest() {\n        HeapSort heapSort = new HeapSort();\n        Integer[] unsorted = {5, 2, 8, 3, 1, 9, 4};\n        Integer[] sorted = heapSort.sort(unsorted);\n\n        Integer[] expected = {1, 2, 3, 4, 5, 8, 9};\n        assertArrayEquals(expected, sorted);\n    }",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        Integer[] unsorted = {9, 5, 2, 8, 1, 7, 3};\n        HeapSort heapSort = new HeapSort();\n        Integer[] sorted = heapSort.sort(unsorted);\n        Integer[] expected = {1, 2, 3, 5, 7, 8, 9};\n        assertArrayEquals(expected, sorted);\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        HeapSort heapSort = new HeapSort();\n        \n        // Test case 1: Sorting an empty array\n        Integer[] arr1 = new Integer[0];\n        Integer[] expected1 = new Integer[0];\n        assertArrayEquals(expected1, heapSort.sort(arr1));\n        \n        // Test case 2: Sorting an array with one element\n        Integer[] arr2 = {5};\n        Integer[] expected2 = {5};\n        assertArrayEquals(expected2, heapSort.sort(arr2));\n        \n        // Test case 3: Sorting an array with multiple elements\n        Integer[] arr3 = {7, 2, 10, 3, 5};\n        Integer[] expected3 = {2, 3, 5, 7, 10};\n        assertArrayEquals(expected3, heapSort.sort(arr3));\n    }\n}",
        "@Test\npublic void sortTest() {\n    HeapSort heapSort = new HeapSort();\n    Integer[] unsorted = {5, 2, 8, 1, 9};\n    Integer[] expected = {1, 2, 5, 8, 9};\n    Integer[] sorted = heapSort.sort(unsorted);\n    assertArrayEquals(expected, sorted);\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        HeapSort heapSort = new HeapSort();\n        Integer[] unsorted = {5, 3, 8, 2, 1, 9};\n        Integer[] sorted = heapSort.sort(unsorted);\n        Integer[] expected = {1, 2, 3, 5, 8, 9};\n        assertArrayEquals(expected, sorted);\n    }\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        Integer[] unsorted = {5, 3, 8, 2, 1};\n        Integer[] expected = {1, 2, 3, 5, 8};\n        \n        HeapSort heapSort = new HeapSort();\n        Integer[] sorted = heapSort.sort(unsorted);\n        \n        assertArrayEquals(expected, sorted);\n    }\n}",
        "@Test\npublic void sortTest() {\n    Integer[] unsorted = {5, 3, 8, 2, 1};\n    Integer[] expected = {1, 2, 3, 5, 8};\n    \n    HeapSort heapSort = new HeapSort();\n    Integer[] actual = heapSort.sort(unsorted);\n    \n    assertArrayEquals(expected, actual);\n}",
        "@Test\npublic void sortTest() {\n    Integer[] unsorted = {4, 2, 8, 1, 5};\n    HeapSort heapSort = new HeapSort();\n    Integer[] sorted = heapSort.sort(unsorted);\n    Integer[] expected = {1, 2, 4, 5, 8};\n    assertArrayEquals(expected, sorted);\n}",
        "@Test\npublic void sortTest() {\n    HeapSort heapSort = new HeapSort();\n    \n    // Test case 1: Test with an array of integers\n    Integer[] input1 = {5, 3, 7, 1, 4};\n    Integer[] expected1 = {1, 3, 4, 5, 7};\n    assertArrayEquals(expected1, heapSort.sort(input1));\n    \n    // Test case 2: Test with an array of doubles\n    Double[] input2 = {2.5, 1.8, 3.2, 1.2};\n    Double[] expected2 = {1.2, 1.8, 2.5, 3.2};\n    assertArrayEquals(expected2, heapSort.sort(input2));\n    \n    // Test case 3: Test with an array of strings\n    String[] input3 = {\"apple\", \"banana\", \"orange\", \"pear\"};\n    String[] expected3 = {\"apple\", \"banana\", \"orange\", \"pear\"};\n    assertArrayEquals(expected3, heapSort.sort(input3));\n}",
        "package com.thealgorithms.sorts;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HeapSortTest {\n    @Test\n    public void sortTest() {\n        HeapSort heapSort = new HeapSort();\n        \n        // Create an array of Integers\n        Integer[] unsortedIntegers = {5, 2, 8, 1, 9};\n        \n        // Call the sort() method and store the sorted array\n        Integer[] sortedIntegers = heapSort.sort(unsortedIntegers);\n        \n        // Create an array of Strings\n        String[] unsortedStrings = {\"b\", \"a\", \"c\"};\n        \n        // Call the sort() method and store the sorted array\n        String[] sortedStrings = heapSort.sort(unsortedStrings);\n        \n        // Create an array of Doubles\n        Double[] unsortedDoubles = {3.2, 1.5, 2.7};\n        \n        // Call the sort() method and store the sorted array\n        Double[] sortedDoubles = heapSort.sort(unsortedDoubles);\n        \n        // Assert that the sorted arrays are equal to the expected sorted arrays\n        assertArrayEquals(new Integer[]{1, 2, 5, 8, 9}, sortedIntegers);\n        assertArrayEquals(new String[]{\"a\", \"b\", \"c\"}, sortedStrings);\n        assertArrayEquals(new Double[]{1.5, 2.7, 3.2}, sortedDoubles);\n    }\n}"
    ]
}
{
    "project_name": "Java",
    "file_name": "AliquotSum.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/AliquotSum.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * Function to calculate the aliquot sum of an integer number\n     *\n     * @param n a positive integer\n     * @return aliquot sum of given {@code number}\n     */",
    "source_code": "\npublic static int getAliquotSum(int n) {\n    if (n <= 0) return -1;\n    int sum = 1;\n    double root = Math.sqrt(n);\n    /*\n     * We can get the factors after the root by dividing number by its factors\n     * before the root.\n     * Ex- Factors of 100 are 1, 2, 4, 5, 10, 20, 25, 50 and 100.\n     * Root of 100 is 10. So factors before 10 are 1, 2, 4 and 5.\n     * Now by dividing 100 by each factor before 10 we get:\n     * 100/1 = 100, 100/2 = 50, 100/4 = 25 and 100/5 = 20\n     * So we get 100, 50, 25 and 20 which are factors of 100 after 10\n     */\n    for (int i = 2; i <= root; i++) {\n        if (n % i == 0) {\n            sum += i + n / i;\n        }\n    }\n    // if n is a perfect square then its root was added twice in above loop, so subtracting root\n    // from sum\n    if (root == (int) root) sum -= root;\n    return sum;\n}\n",
    "class_name": "AliquotSum",
    "method_name": "getAliquotSum",
    "arguments": [
        "int n"
    ],
    "generate_test": [
        "@Test\npublic void getAliquotSumTest() {\n    int aliquotSum = AliquotSum.getAliquotSum(100);\n    assertEquals(217, aliquotSum);\n    \n    aliquotSum = AliquotSum.getAliquotSum(15);\n    assertEquals(9, aliquotSum);\n    \n    aliquotSum = AliquotSum.getAliquotSum(10);\n    assertEquals(8, aliquotSum);\n    \n    aliquotSum = AliquotSum.getAliquotSum(7);\n    assertEquals(1, aliquotSum);\n    \n    aliquotSum = AliquotSum.getAliquotSum(1);\n    assertEquals(1, aliquotSum);\n    \n    aliquotSum = AliquotSum.getAliquotSum(0);\n    assertEquals(-1, aliquotSum);\n}",
        "@Test\npublic void getAliquotSumTest() {\n    int result = AliquotSum.getAliquotSum(15);\n    assertEquals(9, result);\n    \n    result = AliquotSum.getAliquotSum(100);\n    assertEquals(217, result);\n    \n    result = AliquotSum.getAliquotSum(1);\n    assertEquals(1, result);\n    \n    result = AliquotSum.getAliquotSum(0);\n    assertEquals(-1, result);\n    \n    result = AliquotSum.getAliquotSum(-5);\n    assertEquals(-1, result);\n}",
        "@Test\npublic void getAliquotSumTest() {\n    // Test case 1: n = 15\n    int result1 = AliquotSum.getAliquotSum(15);\n    assertEquals(9, result1);\n    \n    // Test case 2: n = 100\n    int result2 = AliquotSum.getAliquotSum(100);\n    assertEquals(217, result2);\n    \n    // Test case 3: n = 0\n    int result3 = AliquotSum.getAliquotSum(0);\n    assertEquals(-1, result3);\n    \n    // Test case 4: n = 1\n    int result4 = AliquotSum.getAliquotSum(1);\n    assertEquals(1, result4);\n}",
        "\n@Test\npublic void getAliquotSumTest() {\n    // Test case 1 - valid input\n    int result1 = AliquotSum.getAliquotSum(15);\n    assertEquals(9, result1, \"Incorrect aliquot sum for input 15\");\n    \n    // Test case 2 - valid input\n    int result2 = AliquotSum.getAliquotSum(100);\n    assertEquals(217, result2, \"Incorrect aliquot sum for input 100\");\n    \n    // Test case 3 - edge case: n = 1\n    int result3 = AliquotSum.getAliquotSum(1);\n    assertEquals(1, result3, \"Incorrect aliquot sum for input 1\");\n    \n    // Test case 4 - negative input\n    int result4 = AliquotSum.getAliquotSum(-10);\n    assertEquals(-1, result4, \"Incorrect aliquot sum for negative input\");\n    \n    // Test case 5 - edge case: n = 0\n    int result5 = AliquotSum.getAliquotSum(0);\n    assertEquals(-1, result5, \"Incorrect aliquot sum for input 0\");\n}\n",
        "@Test\npublic void getAliquotSumTest() {\n    // Test case 1\n    int result1 = AliquotSum.getAliquotSum(-1);\n    assertEquals(-1, result1, \"Expected -1 for negative input\");\n\n    // Test case 2\n    int result2 = AliquotSum.getAliquotSum(0);\n    assertEquals(-1, result2, \"Expected -1 for zero input\");\n\n    // Test case 3\n    int result3 = AliquotSum.getAliquotSum(15);\n    assertEquals(9, result3, \"Expected 9 for input 15\");\n\n    // Test case 4\n    int result4 = AliquotSum.getAliquotSum(100);\n    assertEquals(217, result4, \"Expected 217 for input 100\");\n\n    // Test case 5\n    int result5 = AliquotSum.getAliquotSum(2);\n    assertEquals(1, result5, \"Expected 1 for input 2\");\n}",
        "@Test\npublic void getAliquotSumTest() {\n    int result = AliquotSum.getAliquotSum(10);\n    assertEquals(8, result);\n}",
        "@Test\npublic void getAliquotSumTest() {\n    // Test case 1: Positive number\n    int result1 = AliquotSum.getAliquotSum(15);\n    assertEquals(9, result1);\n\n    // Test case 2: Negative number\n    int result2 = AliquotSum.getAliquotSum(-10);\n    assertEquals(-1, result2);\n\n    // Test case 3: Perfect square number\n    int result3 = AliquotSum.getAliquotSum(100);\n    assertEquals(117, result3);\n}",
        "    @Test\n    public void getAliquotSumTest() {\n        assertEquals(9, AliquotSum.getAliquotSum(15));\n        assertEquals(4, AliquotSum.getAliquotSum(6));\n        assertEquals(-1, AliquotSum.getAliquotSum(0));\n    }",
        "@Test\npublic void getAliquotSumTest() {\n    // Test case 1: n = 15, expected sum = 9\n    int sum1 = AliquotSum.getAliquotSum(15);\n    assertEquals(9, sum1);\n\n    // Test case 2: n = 100, expected sum = 217\n    int sum2 = AliquotSum.getAliquotSum(100);\n    assertEquals(217, sum2);\n\n    // Test case 3: n = 1, expected sum = 1\n    int sum3 = AliquotSum.getAliquotSum(1);\n    assertEquals(1, sum3);\n\n    // Test case 4: n = 0, expected sum = -1\n    int sum4 = AliquotSum.getAliquotSum(0);\n    assertEquals(-1, sum4);\n}",
        "@Test\npublic void getAliquotSumTest() {\n    assertEquals(0, AliquotSum.getAliquotSum(0));\n    assertEquals(-1, AliquotSum.getAliquotSum(-10));\n    assertEquals(9, AliquotSum.getAliquotSum(15));\n    assertEquals(28, AliquotSum.getAliquotSum(28));\n    assertEquals(1, AliquotSum.getAliquotSum(1));\n    assertEquals(4, AliquotSum.getAliquotSum(6));\n}"
    ]
}
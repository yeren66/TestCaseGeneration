Source code: 


public static int getAliquotSum(int n) {
    if (n <= 0) return -1;
    int sum = 1;
    double root = Math.sqrt(n);
    /*
     * We can get the factors after the root by dividing number by its factors
     * before the root.
     * Ex- Factors of 100 are 1, 2, 4, 5, 10, 20, 25, 50 and 100.
     * Root of 100 is 10. So factors before 10 are 1, 2, 4 and 5.
     * Now by dividing 100 by each factor before 10 we get:
     * 100/1 = 100, 100/2 = 50, 100/4 = 25 and 100/5 = 20
     * So we get 100, 50, 25 and 20 which are factors of 100 after 10
     */
    for (int i = 2; i <= root; i++) {
        if (n % i == 0) {
            sum += i + n / i;
        }
    }
    // if n is a perfect square then its root was added twice in above loop, so subtracting root
    // from sum
    if (root == (int) root) sum -= root;
    return sum;
}



No.1 generated result --------------------------

@Test
public void getAliquotSumTest() {
    assertEquals(1, AliquotSum.getAliquotSum(1));
    assertEquals(3, AliquotSum.getAliquotSum(2));
    assertEquals(4, AliquotSum.getAliquotSum(3));
    assertEquals(12, AliquotSum.getAliquotSum(6));
    assertEquals(28, AliquotSum.getAliquotSum(12));
    assertEquals(50, AliquotSum.getAliquotSum(24));
    assertEquals(72, AliquotSum.getAliquotSum(36));
    assertEquals(98, AliquotSum.getAliquotSum(50));
}


No.2 generated result --------------------------

@Test
public void getAliquotSumTest() {
    int result = AliquotSum.getAliquotSum(100);
    assertEquals(217, result);
}


No.3 generated result --------------------------


package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    @Test
    public void getAliquotSumTest() {
        // Test case 1
        int result1 = AliquotSum.getAliquotSum(100);
        assertEquals(217, result1, "Incorrect Aliquot Sum for 100");

        // Test case 2
        int result2 = AliquotSum.getAliquotSum(28);
        assertEquals(28, result2, "Incorrect Aliquot Sum for 28");

        // Test case 3
        int result3 = AliquotSum.getAliquotSum(12);
        assertEquals(16, result3, "Incorrect Aliquot Sum for 12");

        // Test case 4
        int result4 = AliquotSum.getAliquotSum(0);
        assertEquals(-1, result4, "Incorrect Aliquot Sum for 0");
        
        // Test case 5
        int result5 = AliquotSum.getAliquotSum(-5);
        assertEquals(-1, result5, "Incorrect Aliquot Sum for -5");
    }
}



No.4 generated result --------------------------

@Test
public void getAliquotSumTest() {
    int result1 = AliquotSum.getAliquotSum(100);
    assertEquals(217, result1);

    int result2 = AliquotSum.getAliquotSum(12);
    assertEquals(16, result2);

    int result3 = AliquotSum.getAliquotSum(7);
    assertEquals(1, result3);

    int result4 = AliquotSum.getAliquotSum(0);
    assertEquals(-1, result4);
}


No.5 generated result --------------------------

@Test
public void getAliquotSumTest() {
    int sum = AliquotSum.getAliquotSum(100);
    assertEquals(217, sum);
    
    sum = AliquotSum.getAliquotSum(36);
    assertEquals(55, sum);
    
    sum = AliquotSum.getAliquotSum(16);
    assertEquals(15, sum);
    
    sum = AliquotSum.getAliquotSum(72);
    assertEquals(136, sum);
    
    sum = AliquotSum.getAliquotSum(2);
    assertEquals(1, sum);
    
    sum = AliquotSum.getAliquotSum(0);
    assertEquals(-1, sum);
    
    sum = AliquotSum.getAliquotSum(-10);
    assertEquals(-1, sum);
}


No.6 generated result --------------------------

@Test
public void getAliquotSumTest() {
    int expectedSum = 14;
    int actualSum = AliquotSum.getAliquotSum(10);
    assertEquals(expectedSum, actualSum);
}


No.7 generated result --------------------------

@Test
public void getAliquotSumTest() {
    int result = AliquotSum.getAliquotSum(100);
    assertEquals(217, result);
    result = AliquotSum.getAliquotSum(23);
    assertEquals(1, result);
    result = AliquotSum.getAliquotSum(0);
    assertEquals(-1, result);
}


No.8 generated result --------------------------

@Test
public void getAliquotSumTest() {
    int input = 100;
    int expectedOutput = 217;
    int actualOutput = AliquotSum.getAliquotSum(input);
    assertEquals(expectedOutput, actualOutput);
}


No.9 generated result --------------------------

@Test
public void getAliquotSumTest() {
    // Test case 1: n = 12
    int result1 = AliquotSum.getAliquotSum(12);
    assertEquals(16, result1);
    
    // Test case 2: n = 100
    int result2 = AliquotSum.getAliquotSum(100);
    assertEquals(217, result2);
    
    // Test case 3: n = 0 (invalid input)
    int result3 = AliquotSum.getAliquotSum(0);
    assertEquals(-1, result3);
    
    // Test case 4: n = -5 (invalid input)
    int result4 = AliquotSum.getAliquotSum(-5);
    assertEquals(-1, result4);
    
    // Test case 5: n = 1
    int result5 = AliquotSum.getAliquotSum(1);
    assertEquals(0, result5);
}


No.10 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AliquotSumTest {
    @Test
    public void getAliquotSumTest() {
        // Test case 1: n is a positive integer
        int result1 = AliquotSum.getAliquotSum(100);
        assertEquals(217, result1);
        
        // Test case 2: n is 0
        int result2 = AliquotSum.getAliquotSum(0);
        assertEquals(-1, result2);
        
        // Test case 3: n is a negative integer
        int result3 = AliquotSum.getAliquotSum(-50);
        assertEquals(-1, result3);
    }
}



{
    "project_name": "Java",
    "file_name": "AVLTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/AVLTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": null,
    "source_code": "private Node rotateLeft(Node a) {\n    Node b = a.right;\n    b.parent = a.parent;\n\n    a.right = b.left;\n\n    if (a.right != null) {\n        a.right.parent = a;\n    }\n\n    b.left = a;\n    a.parent = b;\n\n    if (b.parent != null) {\n        if (b.parent.right == a) {\n            b.parent.right = b;\n        } else {\n            b.parent.left = b;\n        }\n    }\n\n    setBalance(a, b);\n\n    return b;\n}\n",
    "class_name": "AVLTree",
    "method_name": "rotateLeft",
    "arguments": [
        "Node a"
    ],
    "generate_test": [
        "@Test\npublic void rotateLeftTest() {\n    AVLTree tree = new AVLTree();\n    tree.insert(1);\n    tree.insert(2);\n    tree.insert(3);\n\n    AVLTree.Node node1 = tree.root;\n    AVLTree.Node node2 = tree.root.right;\n    AVLTree.Node node3 = tree.root.right.right;\n\n    assertEquals(node2, tree.rotateLeft(node1));\n    assertNull(node1.parent);\n    assertEquals(node3, node1.right);\n    assertEquals(node1, node3.parent);\n    assertNull(node3.right);\n    assertEquals(node1, node3.left);\n    assertEquals(node3, node2.parent);\n    assertEquals(node1, node2.left);\n    assertEquals(node2, node1.right);\n}",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree avlTree = new AVLTree();\n    AVLTree.Node node1 = avlTree.new Node(1, null);\n    AVLTree.Node node2 = avlTree.new Node(2, node1);\n    AVLTree.Node node3 = avlTree.new Node(3, node2);\n    \n    node2.right = node3;\n    node1.right = node2;\n    \n    AVLTree.Node result = avlTree.rotateLeft(node1);\n    \n    assertEquals(node2, result);\n    assertNull(result.parent);\n    assertEquals(node1, result.left);\n    assertNull(result.right);\n    assertEquals(node2, result.left.parent);\n}",
        "Node a = new Node(5, null);\nNode b = new Node(10, a);\nNode c = new Node(15, b);\na.right = b;\nb.right = c;\n        \nAVLTree avlTree = new AVLTree();\nNode result = avlTree.rotateLeft(a);\n        \nassertEquals(b, result);\nassertEquals(a, b.left);\nassertEquals(null, b.right);\nassertEquals(c, a.right);\nassertEquals(b, c.parent);\nassertEquals(a, b.parent);\nassertEquals(null, c.parent);",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree tree = new AVLTree();\n\n    tree.insert(1);\n    tree.insert(2);\n    tree.insert(3);\n\n    AVLTree.Node a = tree.root;\n    AVLTree.Node b = a.right;\n\n    AVLTree.Node result = tree.rotateLeft(a);\n    \n    // Assert statements\n    assertEquals(b, result);\n    assertNull(result.parent);\n    assertEquals(a, b.left);\n    assertEquals(b, a.parent);\n    assertNull(a.right);\n    assertEquals(a, b.parent);\n    assertNotNull(b.right);\n    assertEquals(a, b.right.parent);\n    \n    // Assert balance\n    tree.setBalance(a, b);\n    assertEquals(0, a.balance);\n    assertEquals(0, b.balance);\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AVLTreeTest {\n    @Test\n    public void rotateLeftTest() {\n        AVLTree avlTree = new AVLTree();\n        AVLTree.Node node1 = avlTree.new Node(1, null);\n        AVLTree.Node node2 = avlTree.new Node(2, node1);\n        AVLTree.Node node3 = avlTree.new Node(3, node2);\n        node1.right = node2;\n        node2.right = node3;\n        avlTree.root = node1;\n\n        AVLTree.Node result = avlTree.rotateLeft(node1);\n\n        assertNull(result.parent);\n        assertSame(result, node2);\n        assertSame(node2.parent, null);\n        assertSame(node2.right, node3);\n        assertSame(node2.left, node1);\n        assertSame(node1.parent, node2);\n        assertSame(node1.right, null);\n        assertSame(node1.left, null);\n        assertNull(node3.parent);\n        assertSame(node3.right, null);\n        assertSame(node3.left, null);\n        assertEquals(node1.balance, 0);\n        assertEquals(node2.balance, 0);\n        assertEquals(node3.balance, 0);\n    }\n}",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree tree = new AVLTree();\n\n    // Test case 1: Rotate left on root\n    tree.insert(1);\n    tree.insert(2);\n    tree.insert(3);\n    \n    Node rootNode = tree.getRoot(); // Get the root node of the AVLTree\n    Node result = tree.rotateLeft(rootNode); // Perform the rotateLeft operation\n    assertEquals(2, result.key); // Check if the key of the new root is correct\n    assertEquals(3, result.right.key); // Check if the key of the right child of the new root is correct\n    assertEquals(1, result.left.key); // Check if the key of the left child of the new root is correct\n\n    // Test case 2: Rotate left on inner node\n    tree.insert(4);\n    tree.insert(5);\n    tree.insert(6);\n    \n    Node innerNode = tree.search(4); // Get the inner node for testing\n    result = tree.rotateLeft(innerNode); // Perform the rotateLeft operation\n    assertEquals(5, result.key); // Check if the key of the new root is correct\n    assertEquals(6, result.right.key); // Check if the key of the right child of the new root is correct\n    assertEquals(4, result.left.key); // Check if the key of the left child of the new root is correct\n    \n    // Test case 3: Rotate left on leaf node\n    tree.insert(7);\n    tree.insert(8);\n    tree.insert(9);\n    \n    Node leafNode = tree.search(7); // Get the leaf node for testing\n    result = tree.rotateLeft(leafNode); // Perform the rotateLeft operation\n    assertEquals(8, result.key); // Check if the key of the new root is correct\n    assertEquals(9, result.right.key); // Check if the key of the right child of the new root is correct\n    assertEquals(7, result.left.key); // Check if the key of the left child of the new root is correct\n}",
        "\nprivate AVLTree avlTree;\n\n@BeforeEach\npublic void setUp() {\n    avlTree = new AVLTree();\n}\n\n@Test\npublic void rotateLeftTest() {\n    // Create the AVLTree object\n    AVLTree tree = new AVLTree();\n    \n    // Insert values 1 to 10 into the tree\n    for (int i = 1; i <= 10; i++) {\n        tree.insert(i);\n    }\n    \n    // Get the root node of the tree\n    AVLTree.Node rootNode = tree.getRoot();\n    \n    // Perform the rotateLeft operation on the root node\n    AVLTree.Node rotatedNode = tree.rotateLeft(rootNode);\n    \n    // Verify that the parent node of the rotated node is set correctly\n    assertNull(rotatedNode.parent);\n\n    // Verify that the left child of the rotated node is set correctly\n    assertEquals(rootNode, rotatedNode.left);\n\n    // Verify that the right child of the rotated node is set correctly\n    assertNull(rotatedNode.right);\n\n    // Verify that the parent node of the left child of the rotated node is set correctly\n    assertEquals(rotatedNode, rootNode.parent);\n\n    // Verify that the right child of the root node is set correctly\n    assertEquals(rootNode.right, rotatedNode);\n    \n    // Verify that the parent node of the right child of the root node is set correctly\n    assertEquals(rootNode, rootNode.right.parent);\n    \n    // Verify the balance factors of the nodes in the tree\n    tree.setBalance(rootNode, rotatedNode);\n    \n    // Verify the balance factor of the rotated node\n    assertEquals(0, rotatedNode.balance);\n    \n    // Verify the balance factor of the root node\n    assertEquals(1, rootNode.balance);\n}\n",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree tree = new AVLTree();\n    \n    // Insert values 1 to 5\n    for (int i = 1; i <= 5; i++) {\n        tree.insert(i);\n    }\n    \n    // Rotate left at root\n    tree.rotateLeft(tree.getRoot());\n    \n    // Check if rotation is correct\n    assertEquals(2, tree.getRoot().getKey());\n    assertEquals(1, tree.getRoot().getLeft().getKey());\n    assertEquals(3, tree.getRoot().getRight().getKey());\n    assertEquals(4, tree.getRoot().getRight().getRight().getKey());\n    assertEquals(5, tree.getRoot().getRight().getRight().getRight().getKey());\n}",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree tree = new AVLTree();\n    tree.insert(1);\n    tree.insert(2);\n    tree.insert(3);\n\n    AVLTree.Node node1 = tree.root;\n    AVLTree.Node node2 = node1.right;\n    AVLTree.Node node3 = node2.right;\n\n    AVLTree.Node result = tree.rotateLeft(node1);\n\n    assertEquals(node2, result);\n    assertEquals(node1, result.left);\n    assertEquals(node3, result.left.right);\n    assertNull(result.right);\n    assertNull(result.left.left);\n    assertEquals(result, node3.parent);\n    assertEquals(result, node1.parent);\n    assertNull(node2.parent);\n    assertNull(node3.left);\n    assertNull(node3.right);\n    assertNull(node1.right);\n    assertNull(node1.left);\n}\n\nExplanation:\n1. Create an instance of AVLTree.\n2. Insert values 1, 2, 3 into the tree.\n3. Get references to the nodes that will be affected by the rotateLeft operation.\n4. Call the rotateLeft method on the tree passing the root node as the argument.\n5. Assert that the resulting node is the expected node.\n6. Assert that the relationships between the nodes are correct after the rotation.",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree tree = new AVLTree();\n    tree.insert(1);\n    tree.insert(2);\n    tree.insert(3);\n\n    AVLTree.Node node1 = tree.new Node(1, null);\n    AVLTree.Node node2 = tree.new Node(2, node1);\n    AVLTree.Node node3 = tree.new Node(3, node2);\n    node1.right = node2;\n    node2.left = node1;\n    node2.right = node3;\n\n    AVLTree.Node result = tree.rotateLeft(node1);\n\n    assertEquals(node2, result);\n    assertEquals(node1, result.left);\n    assertEquals(node3, result.right);\n    assertNull(result.parent);\n    assertEquals(node2, node3.parent);\n    assertEquals(node2, node1.parent);\n    assertEquals(node1, node2.left);\n    assertNull(node2.right);\n    assertNull(node1.left);\n    assertNull(node1.right);\n    assertNull(node3.left);\n    assertNull(node3.right);\n    assertEquals(0, node1.balance);\n    assertEquals(0, node2.balance);\n    assertEquals(0, node3.balance);\n}"
    ]
}
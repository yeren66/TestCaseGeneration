{
    "project_name": "Java",
    "file_name": "AVLTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/AVLTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": null,
    "source_code": "private Node rotateLeft(Node a) {\n    Node b = a.right;\n    b.parent = a.parent;\n\n    a.right = b.left;\n\n    if (a.right != null) {\n        a.right.parent = a;\n    }\n\n    b.left = a;\n    a.parent = b;\n\n    if (b.parent != null) {\n        if (b.parent.right == a) {\n            b.parent.right = b;\n        } else {\n            b.parent.left = b;\n        }\n    }\n\n    setBalance(a, b);\n\n    return b;\n}\n",
    "class_name": "AVLTree",
    "method_name": "rotateLeft",
    "arguments": [
        "Node a"
    ],
    "generate_test": [
        "@Test\npublic void rotateLeftTest() {\n    AVLTree tree = new AVLTree();\n    Node a = new Node(5);\n    Node b = new Node(10);\n    Node c = new Node(15);\n    \n    // Set up the tree structure\n    a.right = b;\n    a.parent = null;\n    b.parent = a;\n    b.left = c;\n    c.parent = b;\n    \n    // Call the rotateLeft method\n    Node result = tree.rotateLeft(a);\n    \n    // Verify the expected changes in the tree structure\n    assertEquals(b, result);\n    assertEquals(a, b.parent);\n    assertEquals(null, a.right);\n    assertEquals(b, c.parent);\n    assertEquals(a, c.left);\n    \n    // Verify the expected balances\n    assertEquals(0, a.balance);\n    assertEquals(0, b.balance);\n    assertEquals(0, c.balance);\n}",
        "@Test\npublic void rotateLeftTest() {\n    AVLTTree avlTree = new AVLTTree();\n    Node a = new Node();\n    Node b = avlTree.rotateLeft(a);\n    \n    // Add assertions to test the rotation logic\n    // For example:\n    // assertEquals(a.parent, b);\n    // assertEquals(b.left, a);\n    // ...\n}",
        "@Test\npublic void rotateLeftTest() {\n    Node a = new Node(1); // Create a sample Node\n    Node b = avlTree.rotateLeft(a); // Call the rotateLeft method on the AVLTree\n    // Assert statements to verify the correctness of the rotation operation\n    assertEquals(b, a.right);\n    assertEquals(a.parent, b.parent);\n    // Continue adding more assertions as necessary...\n}",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree avlTree = new AVLTree();\n    Node rootNode = new Node(5);\n    Node leftNode = new Node(3);\n    Node rightNode = new Node(7);\n    \n    rootNode.left = leftNode;\n    rootNode.right = rightNode;\n    leftNode.parent = rootNode;\n    rightNode.parent = rootNode;\n    \n    Node rotatedNode = avlTree.rotateLeft(rootNode);\n    \n    // Assert that the parent of the rotated node is equal to the parent of the original right node\n    assertEquals(rightNode.parent, rotatedNode.parent);\n    \n    // Assert that the left child of the original node is now the right child of the rotated node\n    assertEquals(leftNode, rotatedNode.right);\n    \n    // Assert that the parent of the original left child is now the rotated node\n    assertEquals(rotatedNode, leftNode.parent);\n    \n    // Assert that the parent of the original right child is still the original node\n    assertEquals(rootNode, rightNode.parent);\n    \n    // Assert any additional conditions or checks for this rotation\n    <FILL>\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AVLTreeTest {\n    @Test\n    public void rotateLeftTest() {\n        Node a = new Node(); // create a new Node object\n        Node b = a.right;\n        b.parent = a.parent;\n\n        a.right = b.left;\n\n        if (a.right != null) {\n            a.right.parent = a;\n        }\n\n        b.left = a;\n        a.parent = b;\n\n        if (b.parent != null) {\n            if (b.parent.right == a) {\n                b.parent.right = b;\n            } else {\n                b.parent.left = b;\n            }\n        }\n\n        setBalance(a, b);\n\n        Node expected = b; // define expected output\n        Node actual = rotateLeft(a); // call the method to be tested\n\n        assertEquals(expected, actual); // assert that the expected output matches the actual output\n    }\n}",
        "@Test\n    public void rotateLeftTest() {\n        AVLTree tree = new AVLTree();\n        Node a = new Node(5);\n        Node b = new Node(10);\n        Node c = new Node(15);\n\n        // Constructing the initial tree\n        a.right = b;\n        b.parent = a;\n        b.left = c;\n        c.parent = b;\n\n        // Calling the rotateLeft() function\n        Node result = tree.rotateLeft(a);\n\n        // Asserting the expected results\n        assertNull(a.right);\n        assertEquals(b, a.parent);\n        assertEquals(a, b.left);\n        assertEquals(b, a.parent);\n        assertEquals(c, b.parent);\n        assertEquals(a, c.right);\n        assertEquals(0, a.balance);\n        assertEquals(0, b.balance);\n    }",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AVLTreeTest {\n    @Test\n    public void rotateLeftTest() {\n        Node a = new Node();\n        Node b = a.right;\n        b.parent = a.parent;\n\n        a.right = b.left;\n\n        if (a.right != null) {\n            a.right.parent = a;\n        }\n\n        b.left = a;\n        a.parent = b;\n\n        if (b.parent != null) {\n            if (b.parent.right == a) {\n                b.parent.right = b;\n            } else {\n                b.parent.left = b;\n            }\n        }\n\n        setBalance(a, b);\n\n        Node expected = a; // expected output\n        Node actual = rotateLeft(a); // actual output\n\n        assertEquals(expected, actual);\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AVLTreeTest {\n    @Test\n    public void rotateLeftTest() {\n        AVLTree tree = new AVLTree();\n        Node a = new Node(4);\n        Node b = new Node(2);\n        Node c = new Node(6);\n        Node d = new Node(1);\n        Node e = new Node(3);\n        Node f = new Node(5);\n        Node g = new Node(7);\n\n        tree.insert(a);\n        tree.insert(b);\n        tree.insert(c);\n        tree.insert(d);\n        tree.insert(e);\n        tree.insert(f);\n        tree.insert(g);\n\n        Node rotated = tree.rotateLeft(a);\n\n        // Assert statements to check the rotation\n        assertNull(rotated.parent);\n        assertEquals(b, rotated);\n        assertNull(a.parent);\n        assertEquals(c, a);\n        assertNull(c.parent);\n        assertEquals(a, c.right);\n    }\n}",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree tree = new AVLTree();\n\n    // Create nodes for the tree\n    Node a = new Node(1);\n    Node b = new Node(2);\n    Node c = new Node(3);\n    Node d = new Node(4);\n    \n    // Set the parent-child relationships\n    a.right = b;\n    b.parent = a;\n    b.left = c;\n    c.parent = b;\n    b.right = d;\n    d.parent = b;\n    \n    // Call the rotateLeft method\n    Node result = tree.rotateLeft(a);\n    \n    // Check if the rotations are performed correctly\n    assertNull(result.parent);\n    assertEquals(b, result);\n    assertNull(c.parent);\n    assertEquals(a, c);\n    assertEquals(b, c.parent);\n    assertEquals(d, b.right);\n    assertEquals(b, d.parent);\n    assertNull(a.right);\n    \n    // Check if the balance is set correctly\n    assertEquals(-1, a.balance);\n    assertEquals(0, b.balance);\n    assertEquals(0, c.balance);\n    assertEquals(0, d.balance);\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AVLTreeTest {\n    @Test\n    public void rotateLeftTest() {\n        Node a = new Node(); // create a test node\n\n        // Perform the rotateLeft operation\n        Node b = a.right;\n        b.parent = a.parent;\n\n        a.right = b.left;\n\n        if (a.right != null) {\n            a.right.parent = a;\n        }\n\n        b.left = a;\n        a.parent = b;\n\n        if (b.parent != null) {\n            if (b.parent.right == a) {\n                b.parent.right = b;\n            } else {\n                b.parent.left = b;\n            }\n        }\n\n        setBalance(a, b);\n\n        // Check the expected results\n\n        // Verify that b is the new root of the tree\n        assertEquals(b, a.parent);\n\n        // Verify that a is the left child of b\n        assertEquals(a, b.left);\n\n        // Verify that a's parent is b\n        assertEquals(b, a.parent);\n\n        // Verify that a's right child is null\n        assertNull(a.right);\n\n        // Verify that b's parent is a's original parent\n        assertEquals(a.parent, b.parent);\n\n        // Verify that a's original parent's right child is b\n        if (b.parent.right == a) {\n            assertEquals(b.parent.right, b);\n        } else {\n            assertEquals(b.parent.left, b);\n        }\n\n        // Verify the balance of a and b nodes\n        setBalance(a, b);\n        assertEquals(a.balanceFactor, expectedBalanceA);\n        assertEquals(b.balanceFactor, expectedBalanceB);\n    }\n}"
    ]
}
Source code: 


@Override
public <T extends Comparable<T>> T[] sort(T[] array) {
    doSort(array, 0, array.length - 1);
    return array;
}



No.1 generated result --------------------------

@Test
public void sortTest() {
    QuickSort quickSort = new QuickSort();
    Integer[] array = {5, 2, 9, 1, 7};
    
    Integer[] expected = {1, 2, 5, 7, 9};
    Integer[] actual = quickSort.sort(array);
    
    assertArrayEquals(expected, actual);
}


No.2 generated result --------------------------

@Test
public void sortTest() {
    QuickSort quickSort = new QuickSort();
    Integer[] array = {5, 2, 1, 8, 4};
    Integer[] expected = {1, 2, 4, 5, 8};
    assertArrayEquals(expected, quickSort.sort(array));
}


No.3 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {
    @Test
    public void sortTest() {
        QuickSort quickSort = new QuickSort();
        
        // Test case 1: Sorting empty array
        Integer[] emptyArray = new Integer[0];
        Integer[] expectedEmptyArray = new Integer[0];
        assertArrayEquals(expectedEmptyArray, quickSort.sort(emptyArray));
        
        // Test case 2: Sorting array with one element
        Integer[] singleElementArray = {1};
        Integer[] expectedSingleElementArray = {1};
        assertArrayEquals(expectedSingleElementArray, quickSort.sort(singleElementArray));
        
        // Test case 3: Sorting array with multiple elements
        Integer[] multipleElementsArray = {5, 1, 3, 2, 4};
        Integer[] expectedMultipleElementsArray = {1, 2, 3, 4, 5};
        assertArrayEquals(expectedMultipleElementsArray, quickSort.sort(multipleElementsArray));
    }
}


No.4 generated result --------------------------

@Test
public void sortTest() {
    Integer[] array = {5, 2, 9, 1, 7};
    QuickSort quickSort = new QuickSort();
    Integer[] sortedArray = quickSort.sort(array);
    Integer[] expectedArray = {1, 2, 5, 7, 9};
    assertArrayEquals(expectedArray, sortedArray);
}


No.5 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {
    @Test
    public void sortTest() {
        Integer[] array = {5, 3, 1, 2, 4};
        Integer[] expected = {1, 2, 3, 4, 5};
        
        QuickSort<Integer> quickSort = new QuickSort<>();
        Integer[] result = quickSort.sort(array);
        
        assertArrayEquals(expected, result);
    }
}


No.6 generated result --------------------------

@Test
public void sortTest() {
    QuickSort quickSort = new QuickSort();
    Integer[] array = {5, 2, 7, 1, 9};
    Integer[] expected = {1, 2, 5, 7, 9};
    
    quickSort.sort(array);
    
    assertArrayEquals(expected, array);
}


No.7 generated result --------------------------

@Test
public void sortTest() {
    Integer[] array = {5, 2, 9, 1, 7};
    QuickSort quickSort = new QuickSort();
    Integer[] sortedArray = quickSort.sort(array);
    Integer[] expectedArray = {1, 2, 5, 7, 9};
    assertArrayEquals(expectedArray, sortedArray);
}


No.8 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class QuickSortTest {
    @Test
    public void sortTest() {
        QuickSort quickSort = new QuickSort();
        Integer[] array = {5, 2, 7, 1, 3};

        quickSort.sort(array);

        Integer[] expected = {1, 2, 3, 5, 7};
        assertArrayEquals(expected, array);
    }
}


No.9 generated result --------------------------

@Test
public void sortTest() {
    QuickSort quickSort = new QuickSort();
    Integer[] array = {5, 3, 8, 2, 1};
    Integer[] expected = {1, 2, 3, 5, 8};
    Integer[] result = quickSort.sort(array);
    assertArrayEquals(expected, result);
}


No.10 generated result --------------------------

@Test
public void sortTest() {
    QuickSort quickSort = new QuickSort();
    Integer[] array = {5, 2, 9, 1, 7};
    Integer[] expected = {1, 2, 5, 7, 9};
    Integer[] sortedArray = quickSort.sort(array);
    assertArrayEquals(expected, sortedArray);
}



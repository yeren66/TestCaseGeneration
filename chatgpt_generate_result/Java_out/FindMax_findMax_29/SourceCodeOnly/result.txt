Source code: 


public static int findMax(final int[] array) {
    int n = array.length;
    if (n == 0) {
        throw new IllegalArgumentException("Array must be non-empty.");
    }
    int max = array[0];
    for (int i = 1; i < n; i++) {
        if (array[i] > max) {
            max = array[i];
        }
    }
    return max;
}



No.1 generated result --------------------------

@Test
public void findMaxTest() {
    int[] array = {1, 2, 3, 4, 5};
    int expected = 5;
    int actual = FindMax.findMax(array);
    assertEquals(expected, actual);
}


No.2 generated result --------------------------

@Test
public void findMaxTest() {
    int[] array = {5, 10, 2, 8, 3};
    int expected = 10;
    int actual = FindMax.findMax(array);
    assertEquals(expected, actual);
}


No.3 generated result --------------------------

@Test
public void findMaxTest() {
    int[] array = {1, 3, 2, 5, 4};
    int expectedMax = 5;
    int actualMax = FindMax.findMax(array);
    assertEquals(expectedMax, actualMax);
}


No.4 generated result --------------------------

@Test
public void findMaxTest() {
    int[] array = {1, 2, 3, 4, 5};
    int expected = 5;
    int actual = FindMax.findMax(array);
    assertEquals(expected, actual);
}


No.5 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    @Test
    public void findMaxTest() {
        int[] array1 = {1, 2, 3, 4, 5};
        int[] array2 = {5, 4, 3, 2, 1};
        int[] array3 = {1, 3, 2, 5, 4};

        assertEquals(5, FindMax.findMax(array1));
        assertEquals(5, FindMax.findMax(array2));
        assertEquals(5, FindMax.findMax(array3));
    }
}


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    @Test
    public void findMaxTest() {
        int[] array = {2, 5, 7, 1, 10};
        int expectedResult = 10;
        int actualResult = FindMax.findMax(array);
        assertEquals(expectedResult, actualResult);
    }
}


No.7 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FindMaxTest {
    @Test
    public void findMaxTest() {
        int[] array = {1, 2, 3, 4, 5};
        int expectedMax = 5; // Expected maximum value in the array
        int actualMax = FindMax.findMax(array);
        assertEquals(expectedMax, actualMax, "Max value is incorrect");
    }
}


No.8 generated result --------------------------

public class FindMaxTest {
    @Test
    public void findMaxTest() {
        int[] array = {1, 2, 3, 4};
        int expectedResult = 4;
        int actualResult = FindMax.findMax(array);
        assertEquals(expectedResult, actualResult);
    }
}


No.9 generated result --------------------------

@Test
public void findMaxTest() {
    int[] array = {1, 2, 3, 4, 5};
    int expected = 5;
    int actual = FindMax.findMax(array);
    assertEquals(expected, actual);
}


No.10 generated result --------------------------

@Test
public void findMaxTest() {
    int[] array = {1, 2, 5, 3, 4};
    int expected = 5;

    int result = FindMax.findMax(array);

    assertEquals(expected, result);
}



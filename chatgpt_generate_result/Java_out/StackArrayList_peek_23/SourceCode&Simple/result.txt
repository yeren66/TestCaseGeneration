Source code: 


public int peek() {
    if (isEmpty()) {
        throw new EmptyStackException();
    }
    return stack.get(stack.size() - 1);
}



No.1 generated result --------------------------

@Test
public void peekTest() {
    StackArrayList stack = new StackArrayList();
    stack.push(10);
    stack.push(20);
    stack.push(30);
    
    int result = stack.peek();
    
    assertEquals(30, result);
}


No.2 generated result --------------------------

@Test
public void peekTest() {
    StackArrayList stack = new StackArrayList();
    assertThrows(EmptyStackException.class, () -> stack.peek());
}



No.3 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    @Test
    public void peekTest() {
        StackArrayList stack = new StackArrayList();
        stack.push(10);
        stack.push(20);
        stack.push(30);
        int result = stack.peek();
        assertEquals(30, result);
    }
}


No.4 generated result --------------------------

@Test
public void peekTest() {
    StackArrayList stackArrayList = new StackArrayList();
    stackArrayList.push(1);
    stackArrayList.push(2);
    stackArrayList.push(3);
    int result = stackArrayList.peek();
    assertEquals(3, result);
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    @Test
    public void peekTest() {
        StackArrayList stack = new StackArrayList();
        stack.push(1);
        stack.push(2);
        stack.push(3);

        assertEquals(3, stack.peek());
    }
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    @Test
    public void peekTest() {
        StackArrayList stack = new StackArrayList();
        stack.push(10);
        stack.push(20);
        stack.push(30);
        int result = stack.peek();
        assertEquals(30, result);
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.stacks;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class StackArrayListTest {
    @Test
    public void peekTest() {
        StackArrayList stack = new StackArrayList();
        stack.push(1);
        stack.push(2);
        stack.push(3);
        
        int expected = 3;
        int actual = stack.peek();
        
        assertEquals(expected, actual);
    }
}


No.8 generated result --------------------------

@Test
public void peekTest() {
    StackArrayList stack = new StackArrayList();
    stack.push(1);
    stack.push(2);
    stack.push(3);
    int result = stack.peek();
    assertEquals(3, result);
}


No.9 generated result --------------------------

@Test
public void peekTest() {
    StackArrayList stackArrayList = new StackArrayList();
    stackArrayList.push(5);
    stackArrayList.push(10);
    stackArrayList.push(15);
    
    int expected = 15;
    int actual = stackArrayList.peek();
    
    assertEquals(expected, actual);
}


No.10 generated result --------------------------

@Test
public void peekTest() {
    StackArrayList stack = new StackArrayList();
    stack.push(1);
    stack.push(2);
    stack.push(3);
    assertEquals(3, stack.peek());
}



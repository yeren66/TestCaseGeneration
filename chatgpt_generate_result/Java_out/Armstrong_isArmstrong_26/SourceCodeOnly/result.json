{
    "project_name": "Java",
    "file_name": "Armstrong.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/Armstrong.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * Checks whether a given number is an Armstrong number or not.\n     *\n     * @param number the number to check\n     * @return {@code true} if the given number is an Armstrong number, {@code false} otherwise\n     */",
    "source_code": "\npublic boolean isArmstrong(int number) {\n    long sum = 0;\n    String temp = Integer.toString(number); // Convert the given number to a string\n    int power = temp.length(); // Extract the length of the number (number of digits)\n    long originalNumber = number;\n\n    while (originalNumber > 0) {\n        long digit = originalNumber % 10;\n        sum += (long) Math.pow(digit, power); // The digit raised to the power of the number of digits and added to the sum.\n        originalNumber /= 10;\n    }\n\n    return sum == number;\n}\n",
    "class_name": "Armstrong",
    "method_name": "isArmstrong",
    "arguments": [
        "int number"
    ],
    "generate_test": [
        "@Test\npublic void isArmstrongTest() {\n    Armstrong armstrong = new Armstrong();\n    assertTrue(armstrong.isArmstrong(153));\n    assertTrue(armstrong.isArmstrong(9474));\n    assertFalse(armstrong.isArmstrong(123456));\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n        assertTrue(armstrong.isArmstrong(153));\n        assertTrue(armstrong.isArmstrong(370));\n        assertTrue(armstrong.isArmstrong(9474));\n        assertFalse(armstrong.isArmstrong(123));\n        assertFalse(armstrong.isArmstrong(371));\n        assertFalse(armstrong.isArmstrong(9475));\n    }\n}",
        "@Test\npublic void isArmstrongTest() {\n    Armstrong armstrong = new Armstrong();\n    \n    assertTrue(armstrong.isArmstrong(153)); // 1^3 + 5^3 + 3^3 = 153, so it should return true\n    assertFalse(armstrong.isArmstrong(370)); // 3^3 + 7^3 + 0^3 = 370, so it should return false\n    assertTrue(armstrong.isArmstrong(9474)); // 9^4 + 4^4 + 7^4 + 4^4 = 9474, so it should return true\n}",
        "@Test\npublic void isArmstrongTest() {\n    Armstrong obj = new Armstrong();\n    boolean result1 = obj.isArmstrong(153);\n    assertTrue(result1, \"Test failed for 153\");\n\n    boolean result2 = obj.isArmstrong(370);\n    assertTrue(result2, \"Test failed for 370\");\n\n    boolean result3 = obj.isArmstrong(371);\n    assertTrue(result3, \"Test failed for 371\");\n\n    boolean result4 = obj.isArmstrong(407);\n    assertTrue(result4, \"Test failed for 407\");\n\n    boolean result5 = obj.isArmstrong(1634);\n    assertTrue(result5, \"Test failed for 1634\");\n}",
        "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n        \n        // Test case 1: number = 153, which is an Armstrong number\n        int number1 = 153;\n        boolean expectedResult1 = true;\n        boolean actualResult1 = armstrong.isArmstrong(number1);\n        assertEquals(expectedResult1, actualResult1);\n\n        // Test case 2: number = 371, which is an Armstrong number\n        int number2 = 371;\n        boolean expectedResult2 = true;\n        boolean actualResult2 = armstrong.isArmstrong(number2);\n        assertEquals(expectedResult2, actualResult2);\n\n        // Test case 3: number = 123, which is not an Armstrong number\n        int number3 = 123;\n        boolean expectedResult3 = false;\n        boolean actualResult3 = armstrong.isArmstrong(number3);\n        assertEquals(expectedResult3, actualResult3);\n    }\n}",
        "@Test\npublic void isArmstrongTest() {\n    int number = 153;\n    boolean expected = true;\n    \n    Armstrong armstrong = new Armstrong();\n    boolean actual = armstrong.isArmstrong(number);\n    \n    assertEquals(expected, actual);\n}",
        "@Test\npublic void isArmstrongTest() {\n    assertTrue(isArmstrong(153));\n    assertTrue(isArmstrong(370));\n    assertFalse(isArmstrong(123));\n    assertFalse(isArmstrong(2345));\n}",
        "@Test\n    public void isArmstrongTest() {\n        ArmstrongTest armstrongTest = new ArmstrongTest();\n        boolean result = armstrongTest.isArmstrong(153);\n        assertTrue(result);\n        result = armstrongTest.isArmstrong(370);\n        assertTrue(result);\n        result = armstrongTest.isArmstrong(9474);\n        assertFalse(result);\n    }",
        "@Test\npublic void isArmstrongTest() {\n    Armstrong armstrong = new Armstrong();\n    \n    assertTrue(armstrong.isArmstrong(153)); //Test case for an Armstrong number\n    assertFalse(armstrong.isArmstrong(123)); //Test case for a non-Armstrong number\n}",
        "@Test\npublic void isArmstrongTest() {\n    Armstrong armstrong = new Armstrong();\n    assertTrue(armstrong.isArmstrong(153));\n    assertFalse(armstrong.isArmstrong(372));\n    assertTrue(armstrong.isArmstrong(9474));\n}"
    ]
}
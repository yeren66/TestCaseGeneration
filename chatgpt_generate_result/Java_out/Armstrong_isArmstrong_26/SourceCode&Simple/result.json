{
    "project_name": "Java",
    "file_name": "Armstrong.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/Armstrong.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * Checks whether a given number is an Armstrong number or not.\n     *\n     * @param number the number to check\n     * @return {@code true} if the given number is an Armstrong number, {@code false} otherwise\n     */",
    "source_code": "\npublic boolean isArmstrong(int number) {\n    long sum = 0;\n    String temp = Integer.toString(number); // Convert the given number to a string\n    int power = temp.length(); // Extract the length of the number (number of digits)\n    long originalNumber = number;\n\n    while (originalNumber > 0) {\n        long digit = originalNumber % 10;\n        sum += (long) Math.pow(digit, power); // The digit raised to the power of the number of digits and added to the sum.\n        originalNumber /= 10;\n    }\n\n    return sum == number;\n}\n",
    "class_name": "Armstrong",
    "method_name": "isArmstrong",
    "arguments": [
        "int number"
    ],
    "generate_test": [
        "@Test\npublic void isArmstrongTest() {\n    Armstrong armstrong = new Armstrong();\n    \n    boolean result1 = armstrong.isArmstrong(153);\n    assertTrue(result1);\n    \n    boolean result2 = armstrong.isArmstrong(371);\n    assertTrue(result2);\n    \n    boolean result3 = armstrong.isArmstrong(123);\n    assertFalse(result3);\n    \n    boolean result4 = armstrong.isArmstrong(9474);\n    assertTrue(result4);\n}",
        "public void isArmstrongTest() {\n    Armstrong armstrong = new Armstrong();\n    assertTrue(armstrong.isArmstrong(153)); // 153 is an Armstrong number\n    assertTrue(armstrong.isArmstrong(370)); // 370 is an Armstrong number\n    assertFalse(armstrong.isArmstrong(123)); // 123 is not an Armstrong number\n    assertTrue(armstrong.isArmstrong(9474)); // 9474 is an Armstrong number\n}",
        "@Test\npublic void isArmstrongTest() {\n    Armstrong armstrong = new Armstrong();\n    \n    // Test case 1: When the number is an Armstrong number\n    assertTrue(armstrong.isArmstrong(153));\n    \n    // Test case 2: When the number is not an Armstrong number\n    assertFalse(armstrong.isArmstrong(123));\n    \n    // Test case 3: When the number is a single digit (Armstrong number)\n    assertTrue(armstrong.isArmstrong(9));\n    \n    // Test case 4: When the number is a single digit (not an Armstrong number)\n    assertFalse(armstrong.isArmstrong(7));\n}",
        "@Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n        assertTrue(armstrong.isArmstrong(153));\n        assertFalse(armstrong.isArmstrong(123));\n        assertTrue(armstrong.isArmstrong(9474));\n        assertFalse(armstrong.isArmstrong(9475));\n    }",
        "\n@Test\npublic void isArmstrongTest() {\n    Armstrong armstrong = new Armstrong();\n    \n    // Test case 1: Armstrong number\n    int number1 = 153;\n    boolean expected1 = true;\n    boolean result1 = armstrong.isArmstrong(number1);\n    assertEquals(expected1, result1);\n    \n    // Test case 2: Non-Armstrong number\n    int number2 = 123;\n    boolean expected2 = false;\n    boolean result2 = armstrong.isArmstrong(number2);\n    assertEquals(expected2, result2);\n    \n    // Test case 3: Single digit Armstrong number\n    int number3 = 9;\n    boolean expected3 = true;\n    boolean result3 = armstrong.isArmstrong(number3);\n    assertEquals(expected3, result3);\n    \n    // Test case 4: Negative number\n    int number4 = -370;\n    boolean expected4 = false;\n    boolean result4 = armstrong.isArmstrong(number4);\n    assertEquals(expected4, result4);\n}\n",
        "@Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n        \n        // Test case 1: number is Armstrong\n        int number1 = 153;\n        boolean expected1 = true;\n        boolean actual1 = armstrong.isArmstrong(number1);\n        assertEquals(expected1, actual1);\n        \n        // Test case 2: number is not Armstrong\n        int number2 = 370;\n        boolean expected2 = false;\n        boolean actual2 = armstrong.isArmstrong(number2);\n        assertEquals(expected2, actual2);\n        \n        // Test case 3: number is Armstrong\n        int number3 = 9474;\n        boolean expected3 = true;\n        boolean actual3 = armstrong.isArmstrong(number3);\n        assertEquals(expected3, actual3);\n    }",
        "public class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n        assertTrue(armstrong.isArmstrong(153));\n        assertFalse(armstrong.isArmstrong(370));\n        assertTrue(armstrong.isArmstrong(9474));\n        assertFalse(armstrong.isArmstrong(12345));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n        \n        // Test case 1: number = 153, Armstrong number\n        assertTrue(armstrong.isArmstrong(153));\n        \n        // Test case 2: number = 370, Armstrong number\n        assertTrue(armstrong.isArmstrong(370));\n        \n        // Test case 3: number = 9474, Armstrong number\n        assertTrue(armstrong.isArmstrong(9474));\n        \n        // Test case 4: number = 123, not an Armstrong number\n        assertFalse(armstrong.isArmstrong(123));\n        \n        // Test case 5: number = 1634, Armstrong number\n        assertTrue(armstrong.isArmstrong(1634));\n    }\n}",
        "@Test\npublic void isArmstrongTest() {\n    Armstrong armstrong = new Armstrong();\n    assertTrue(armstrong.isArmstrong(153), \"Failed for 153\"); // Armstrong number\n    assertFalse(armstrong.isArmstrong(123), \"Failed for 123\"); // Not an Armstrong number\n    assertTrue(armstrong.isArmstrong(9474), \"Failed for 9474\"); // Armstrong number\n    assertFalse(armstrong.isArmstrong(1634), \"Failed for 1634\"); // Not an Armstrong number\n}",
        "\n@Test\npublic void isArmstrongTest() {\n    Armstrong armstrong = new Armstrong();\n    boolean result1 = armstrong.isArmstrong(153);\n    assertTrue(result1);\n    \n    boolean result2 = armstrong.isArmstrong(370);\n    assertTrue(result2);\n    \n    boolean result3 = armstrong.isArmstrong(9474);\n    assertFalse(result3);\n    \n    boolean result4 = armstrong.isArmstrong(1634);\n    assertFalse(result4);\n}\n"
    ]
}
{
    "project_name": "Java",
    "file_name": "Armstrong.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/Armstrong.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * Checks whether a given number is an Armstrong number or not.\n     *\n     * @param number the number to check\n     * @return {@code true} if the given number is an Armstrong number, {@code false} otherwise\n     */",
    "source_code": "\npublic boolean isArmstrong(int number) {\n    long sum = 0;\n    String temp = Integer.toString(number); // Convert the given number to a string\n    int power = temp.length(); // Extract the length of the number (number of digits)\n    long originalNumber = number;\n\n    while (originalNumber > 0) {\n        long digit = originalNumber % 10;\n        sum += (long) Math.pow(digit, power); // The digit raised to the power of the number of digits and added to the sum.\n        originalNumber /= 10;\n    }\n\n    return sum == number;\n}\n",
    "class_name": "Armstrong",
    "method_name": "isArmstrong",
    "arguments": [
        "int number"
    ],
    "generate_test": [
        "@Test\npublic void isArmstrongTest() {\n    Armstrong armstrong = new Armstrong();\n    \n    // Positive test case: 370 is an Armstrong number\n    int number1 = 370;\n    boolean result1 = armstrong.isArmstrong(number1);\n    assertTrue(result1, \"Expected true for Armstrong number \" + number1);\n    \n    // Positive test case: 1634 is an Armstrong number\n    int number2 = 1634;\n    boolean result2 = armstrong.isArmstrong(number2);\n    assertTrue(result2, \"Expected true for Armstrong number \" + number2);\n    \n    // Negative test case: 123 is not an Armstrong number\n    int number3 = 123;\n    boolean result3 = armstrong.isArmstrong(number3);\n    assertFalse(result3, \"Expected false for non-Armstrong number \" + number3);\n    \n    // Negative test case: 9474 is not an Armstrong number\n    int number4 = 9474;\n    boolean result4 = armstrong.isArmstrong(number4);\n    assertFalse(result4, \"Expected false for non-Armstrong number \" + number4);\n}",
        "@Test\npublic void isArmstrongTest() {\n    Armstrong armstrong = new Armstrong();\n    \n    // Test case 1: Armstrong number\n    int number1 = 370;\n    assertTrue(armstrong.isArmstrong(number1));\n    \n    // Test case 2: Armstrong number\n    int number2 = 1634;\n    assertTrue(armstrong.isArmstrong(number2));\n    \n    // Test case 3: Not Armstrong number\n    int number3 = 123;\n    assertFalse(armstrong.isArmstrong(number3));\n}",
        "@Test\npublic void isArmstrongTest() {\n    Armstrong armstrong = new Armstrong();\n    \n    assertTrue(armstrong.isArmstrong(370));\n    assertTrue(armstrong.isArmstrong(0));\n    assertFalse(armstrong.isArmstrong(123));\n    assertTrue(armstrong.isArmstrong(1634));\n}",
        "@Test\npublic void isArmstrongTest() {\n    // Test case 1\n    int number1 = 370;\n    boolean result1 = new Armstrong().isArmstrong(number1);\n    assertTrue(result1);\n\n    // Test case 2\n    int number2 = 1634;\n    boolean result2 = new Armstrong().isArmstrong(number2);\n    assertTrue(result2);\n\n    // Test case 3\n    int number3 = 123;\n    boolean result3 = new Armstrong().isArmstrong(number3);\n    assertFalse(result3);\n}",
        "@Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n        assertTrue(armstrong.isArmstrong(370));\n        assertFalse(armstrong.isArmstrong(123));\n        assertTrue(armstrong.isArmstrong(1634));\n        assertFalse(armstrong.isArmstrong(1234));\n    }",
        "@Test\npublic void isArmstrongTest() {\n    // Arrange\n    Armstrong armstrong = new Armstrong();\n    int number = 370;\n    boolean expected = true;\n    \n    // Act\n    boolean actual = armstrong.isArmstrong(number);\n    \n    // Assert\n    assertEquals(expected, actual);\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ArmstrongTest {\n    @Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n        \n        assertTrue(armstrong.isArmstrong(370));\n        assertFalse(armstrong.isArmstrong(123));\n        assertTrue(armstrong.isArmstrong(1634));\n    }\n}",
        "@Test\npublic void isArmstrongTest() {\n    // Arrange\n    int number = 370;\n    boolean expected = true;\n    Armstrong armstrong = new Armstrong();\n    \n    // Act\n    boolean actual = armstrong.isArmstrong(number);\n    \n    // Assert\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void isArmstrongTest() {\n    Armstrong armstrong = new Armstrong();\n    \n    // Test cases\n    boolean result1 = armstrong.isArmstrong(370);\n    assertTrue(result1, \"370 is an Armstrong number\");\n    \n    boolean result2 = armstrong.isArmstrong(1634);\n    assertTrue(result2, \"1634 is an Armstrong number\");\n    \n    boolean result3 = armstrong.isArmstrong(9474);\n    assertFalse(result3, \"9474 is not an Armstrong number\");\n    \n    boolean result4 = armstrong.isArmstrong(123);\n    assertFalse(result4, \"123 is not an Armstrong number\");\n}",
        "@Test\n    public void isArmstrongTest() {\n        Armstrong armstrong = new Armstrong();\n        assertTrue(armstrong.isArmstrong(370)); // Expected output: true\n        assertTrue(armstrong.isArmstrong(1634)); // Expected output: true\n        assertFalse(armstrong.isArmstrong(123)); // Expected output: false\n    }"
    ]
}
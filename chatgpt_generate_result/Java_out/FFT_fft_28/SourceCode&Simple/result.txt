Source code: 


public static ArrayList<Complex> fft(ArrayList<Complex> x, boolean inverse) {
    /* Pad the signal with zeros if necessary */
    paddingPowerOfTwo(x);
    int N = x.size();
    int log2N = findLog2(N);
    x = fftBitReversal(N, log2N, x);
    int direction = inverse ? -1 : 1;

    /* Main loop of the algorithm */
    for (int len = 2; len <= N; len *= 2) {
        double angle = -2 * Math.PI / len * direction;
        Complex wlen = new Complex(Math.cos(angle), Math.sin(angle));
        for (int i = 0; i < N; i += len) {
            Complex w = new Complex(1, 0);
            for (int j = 0; j < len / 2; j++) {
                Complex u = x.get(i + j);
                Complex v = w.multiply(x.get(i + j + len / 2));
                x.set(i + j, u.add(v));
                x.set(i + j + len / 2, u.subtract(v));
                w = w.multiply(wlen);
            }
        }
    }
    x = inverseFFT(N, inverse, x);
    return x;
}



No.1 generated result --------------------------

@Test
public void fftTest() {
    ArrayList<Complex> input = new ArrayList<>();
    input.add(new Complex(1, 0));
    input.add(new Complex(2, 0));
    input.add(new Complex(3, 0));
    input.add(new Complex(4, 0));

    ArrayList<Complex> actualOutput = FFT.fft(input, false);

    ArrayList<Complex> expectedOutput = new ArrayList<>();
    expectedOutput.add(new Complex(10, 0));
    expectedOutput.add(new Complex(-2, 2));
    expectedOutput.add(new Complex(-2, 0));
    expectedOutput.add(new Complex(-2, -2));

    for (int i = 0; i < actualOutput.size(); i++) {
        assertEquals(expectedOutput.get(i).getReal(), actualOutput.get(i).getReal(), 0.000001);
        assertEquals(expectedOutput.get(i).getImaginary(), actualOutput.get(i).getImaginary(), 0.000001);
    }
}


No.2 generated result --------------------------

@Test
public void fftTest() {
    // Create input ArrayList
    ArrayList<Complex> input = new ArrayList<>();
    
    // Populate input ArrayList with Complex numbers
    // (code to populate the ArrayList with numbers)
    
    // Call FFT.fft() method
    ArrayList<Complex> result = FFT.fft(input, false);
    
    // Perform assertions to verify the correctness of the output
    // (code to perform assertions)
}


No.3 generated result --------------------------

@Test
public void fftTest() {
    ArrayList<Complex> input = new ArrayList<>();
    input.add(new Complex(2, 0));
    input.add(new Complex(5, 0));
    input.add(new Complex(1, 0));
    input.add(new Complex(4, 0));

    ArrayList<Complex> expectedOutput = new ArrayList<>();
    expectedOutput.add(new Complex(12, 0));
    expectedOutput.add(new Complex(-3, -5));
    expectedOutput.add(new Complex(-6, 0));
    expectedOutput.add(new Complex(-3, 5));

    ArrayList<Complex> result = FFT.fft(input, false);
    assertEquals(expectedOutput, result);
}


No.4 generated result --------------------------

    @Test
    public void fftTest() {
        ArrayList<Complex> input = new ArrayList<>();
        input.add(new Complex(1, 0));
        input.add(new Complex(2, 0));
        input.add(new Complex(3, 0));
        input.add(new Complex(4, 0));
        
        ArrayList<Complex> expectedOutput = new ArrayList<>();
        expectedOutput.add(new Complex(10, 0));
        expectedOutput.add(new Complex(-2, 2));
        expectedOutput.add(new Complex(-2, 0));
        expectedOutput.add(new Complex(-2, -2));
        
        ArrayList<Complex> result = FFT.fft(input, false);
        
        for (int i = 0; i < result.size(); i++) {
            assertEquals(expectedOutput.get(i).getReal(), result.get(i).getReal(), 0.001);
            assertEquals(expectedOutput.get(i).getImaginary(), result.get(i).getImaginary(), 0.001);
        }
    }


No.5 generated result --------------------------

    @Test
    public void fftTest() {
        ArrayList<Complex> x = new ArrayList<>();
        x.add(new Complex(1, 0));
        x.add(new Complex(2, 0));
        x.add(new Complex(3, 0));
        x.add(new Complex(4, 0));
        ArrayList<Complex> expectedOutput = new ArrayList<>();
        expectedOutput.add(new Complex(10, 0));
        expectedOutput.add(new Complex(-2, 2));
        expectedOutput.add(new Complex(-2, 0));
        expectedOutput.add(new Complex(-2, -2));
        
        ArrayList<Complex> actualOutput = FFT.fft(x, false);
        
        assertEquals(expectedOutput, actualOutput);
    }


No.6 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class FFTTest {
    @Test
    public void fftTest() {
        // Create input ArrayList
        ArrayList<Complex> input = new ArrayList<>();
        input.add(new Complex(1, 0));
        input.add(new Complex(2, 0));
        input.add(new Complex(3, 0));
        input.add(new Complex(4, 0));

        // Perform FFT
        ArrayList<Complex> result = FFT.fft(input, false);

        // Verify the output
        assertEquals(result.get(0).getReal(), 10.0, 0.0001);
        assertEquals(result.get(1).getReal(), -2.0, 0.0001);
        assertEquals(result.get(2).getReal(), -2.0, 0.0001);
        assertEquals(result.get(3).getReal(), -2.0, 0.0001);
        assertEquals(result.get(0).getImaginary(), 0.0, 0.0001);
        assertEquals(result.get(1).getImaginary(), 2.0, 0.0001);
        assertEquals(result.get(2).getImaginary(), 0.0, 0.0001);
        assertEquals(result.get(3).getImaginary(), -2.0, 0.0001);
    }
}


No.7 generated result --------------------------

@Test
public void fftTest() {
    // Initialize input data
    ArrayList<FFT.Complex> input = new ArrayList<>();
    input.add(new FFT.Complex(1, 0));
    input.add(new FFT.Complex(2, 0));
    input.add(new FFT.Complex(3, 0));
    input.add(new FFT.Complex(4, 0));
    
    // Expected output
    ArrayList<FFT.Complex> expectedOutput = new ArrayList<>();
    expectedOutput.add(new FFT.Complex(10, 0));
    expectedOutput.add(new FFT.Complex(-2, 2));
    expectedOutput.add(new FFT.Complex(-2, 0));
    expectedOutput.add(new FFT.Complex(-2, -2));
    
    // Perform the FFT
    ArrayList<FFT.Complex> result = FFT.fft(input, false);
    
    // Assert the result matches the expected output
    assertEquals(expectedOutput, result);
}


No.8 generated result --------------------------

@Test
public void fftTest() {
    ArrayList<Complex> input = new ArrayList<>();
    input.add(new Complex(1, 0));
    input.add(new Complex(2, 0));
    input.add(new Complex(3, 0));
    input.add(new Complex(4, 0));
    
    ArrayList<Complex> expectedResult = new ArrayList<>();
    expectedResult.add(new Complex(10, 0));
    expectedResult.add(new Complex(-2, 2));
    expectedResult.add(new Complex(-2, 0));
    expectedResult.add(new Complex(-2, -2));
    
    ArrayList<Complex> actualResult = FFT.fft(input, false);
    
    for (int i = 0; i < actualResult.size(); i++) {
        assertEquals(expectedResult.get(i).getReal(), actualResult.get(i).getReal(), 0.001);
        assertEquals(expectedResult.get(i).getImaginary(), actualResult.get(i).getImaginary(), 0.001);
    }
}


No.9 generated result --------------------------

@Test
    public void fftTest() {
        ArrayList<Complex> input = new ArrayList<>();
        input.add(new Complex(1, 0));
        input.add(new Complex(2, 0));
        input.add(new Complex(3, 0));
        input.add(new Complex(4, 0));

        ArrayList<Complex> expected = new ArrayList<>();
        expected.add(new Complex(10, 0));
        expected.add(new Complex(-2, 2));
        expected.add(new Complex(-2, 0));
        expected.add(new Complex(-2, -2));

        ArrayList<Complex> result = FFT.fft(input, false);
        for (int i = 0; i < result.size(); i++) {
            assertEquals(expected.get(i).getReal(), result.get(i).getReal(), 0.001);
            assertEquals(expected.get(i).getImaginary(), result.get(i).getImaginary(), 0.001);
        }
    }


No.10 generated result --------------------------

@Test
public void fftTest() {
    ArrayList<Complex> input = new ArrayList<>();
    input.add(new Complex(1, 0));
    input.add(new Complex(2, 0));
    input.add(new Complex(3, 0));
    input.add(new Complex(4, 0));

    ArrayList<Complex> expectedOutput = new ArrayList<>();
    expectedOutput.add(new Complex(10, 0));
    expectedOutput.add(new Complex(-2, 2));
    expectedOutput.add(new Complex(-2, 0));
    expectedOutput.add(new Complex(-2, -2));

    ArrayList<Complex> actualOutput = FFT.fft(input, false);

    assertEquals(expectedOutput, actualOutput);
}



{
    "project_name": "Java",
    "file_name": "BinaryTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/BinaryTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": "/**\n     * Method to find a Node with a certain value\n     *\n     * @param key Value being looked for\n     * @return The node if it finds it, otherwise returns the parent\n     */",
    "source_code": "\npublic Node find(int key) {\n    Node current = root;\n    while (current != null) {\n        if (key < current.data) {\n            if (current.left == null) {\n                return current; // The key isn't exist, returns the parent\n            }\n            current = current.left;\n        } else if (key > current.data) {\n            if (current.right == null) {\n                return current;\n            }\n            current = current.right;\n        } else { // If you find the value return it\n            return current;\n        }\n    }\n    return null;\n}\n",
    "class_name": "BinaryTree",
    "method_name": "find",
    "arguments": [
        "int key"
    ],
    "generate_test": [
        "@Test\npublic void findTest() {\n    BinaryTree bt = new BinaryTree();\n    bt.put(5);\n    bt.put(3);\n    bt.put(7);\n    bt.put(2);\n    bt.put(4);\n    bt.put(6);\n    bt.put(8);\n    \n    Node foundNode = bt.find(4);\n    assertEquals(4, foundNode.data);\n    \n    Node notFoundNode = bt.find(9);\n    assertNull(notFoundNode);\n}",
        "@Test\npublic void findTest() {\n    BinaryTree binaryTree = new BinaryTree();\n    binaryTree.put(5);\n    binaryTree.put(3);\n    binaryTree.put(7);\n    binaryTree.put(2);\n    binaryTree.put(4);\n    binaryTree.put(6);\n    binaryTree.put(8);\n\n    Node result = binaryTree.find(6);\n    assertEquals(6, result.data);\n}",
        "@Test\npublic void findTest() {\n    BinaryTree binaryTree = new BinaryTree();\n    binaryTree.put(5);\n    binaryTree.put(3);\n    binaryTree.put(8);\n    binaryTree.put(2);\n\n    Node result = binaryTree.find(8);\n    assertEquals(8, result.data, \"Incorrect node found\");\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        BinaryTree binaryTree = new BinaryTree();\n        binaryTree.put(5);\n        binaryTree.put(3);\n        binaryTree.put(7);\n        binaryTree.put(2);\n        binaryTree.put(4);\n\n        Node result = binaryTree.find(4);\n\n        assertNotNull(result);\n        assertEquals(4, result.data);\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        // Create a binary tree\n        BinaryTree tree = new BinaryTree();\n        \n        // Insert nodes into the tree\n        tree.put(10);\n        tree.put(5);\n        tree.put(15);\n        tree.put(3);\n        tree.put(8);\n        tree.put(12);\n        tree.put(18);\n        \n        // Test the find method\n        Node result = tree.find(3);\n        assertNotNull(result);\n        assertEquals(3, result.data);\n        \n        result = tree.find(10);\n        assertNotNull(result);\n        assertEquals(10, result.data);\n        \n        result = tree.find(100);\n        assertNull(result);\n    }\n}",
        "@Test\npublic void findTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(10);\n    tree.put(5);\n    tree.put(15);\n    \n    Node result = tree.find(5);\n    \n    assertEquals(5, result.data);\n    assertEquals(10, result.parent.data);\n    assertNull(result.left);\n    assertNull(result.right);\n}",
        "@Test\npublic void findTest() {\n    // Create a new Binary Tree\n    BinaryTree binaryTree = new BinaryTree();\n\n    // Insert nodes into the Binary Tree\n    binaryTree.put(5);\n    binaryTree.put(2);\n    binaryTree.put(7);\n    binaryTree.put(1);\n    binaryTree.put(3);\n\n    // Test finding existing key\n    BinaryTree.Node existingNode = binaryTree.find(3);\n    assertNotNull(existingNode); // The node should exist\n    assertEquals(3, existingNode.data); // The node should have the key 3\n\n    // Test finding non-existing key\n    BinaryTree.Node nonExistingNode = binaryTree.find(6);\n    assertNotNull(nonExistingNode); // The node should not exist, but the parent node should be returned\n    assertEquals(7, nonExistingNode.data); // The parent node should have the key 7\n\n    // Test finding key in an empty tree\n    BinaryTree emptyTree = new BinaryTree();\n    BinaryTree.Node emptyNode = emptyTree.find(10);\n    assertNull(emptyNode); // The tree is empty, so the node should not exist\n}",
        "// Arrange\nBinaryTree tree = new BinaryTree();\ntree.put(5);\ntree.put(3);\ntree.put(7);\n\n// Act\nNode result = tree.find(3);\n\n// Assert\nassertEquals(3, result.data);",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        BinaryTree tree = new BinaryTree();\n        BinaryTree.Node root = new BinaryTree.Node(5);\n        tree.put(5);\n        tree.put(3);\n        tree.put(2);\n        tree.put(4);\n        tree.put(7);\n        tree.put(6);\n        tree.put(8);\n        \n        BinaryTree.Node result = tree.find(4);\n        assertEquals(4, result.data);\n        \n        result = tree.find(9);\n        assertEquals(8, result.data);\n    }\n}",
        "@Test\npublic void findTest() {\n    BinaryTree binaryTree = new BinaryTree();\n    binaryTree.put(3);\n    binaryTree.put(5);\n    binaryTree.put(1);\n    \n    Node result = binaryTree.find(5);\n    assertNotNull(result);\n    assertEquals(5, result.data);\n    \n    result = binaryTree.find(2);\n    assertNotNull(result);\n    assertEquals(1, result.data);\n    \n    result = binaryTree.find(4);\n    assertNotNull(result);\n    assertEquals(3, result.data);\n    \n    result = binaryTree.find(6);\n    assertNull(result);\n}"
    ]
}
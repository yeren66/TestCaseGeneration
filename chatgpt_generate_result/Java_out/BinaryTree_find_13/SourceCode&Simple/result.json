{
    "project_name": "Java",
    "file_name": "BinaryTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/BinaryTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": "/**\n     * Method to find a Node with a certain value\n     *\n     * @param key Value being looked for\n     * @return The node if it finds it, otherwise returns the parent\n     */",
    "source_code": "\npublic Node find(int key) {\n    Node current = root;\n    while (current != null) {\n        if (key < current.data) {\n            if (current.left == null) {\n                return current; // The key isn't exist, returns the parent\n            }\n            current = current.left;\n        } else if (key > current.data) {\n            if (current.right == null) {\n                return current;\n            }\n            current = current.right;\n        } else { // If you find the value return it\n            return current;\n        }\n    }\n    return null;\n}\n",
    "class_name": "BinaryTree",
    "method_name": "find",
    "arguments": [
        "int key"
    ],
    "generate_test": [
        "@Test\npublic void findTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(5);\n    tree.put(3);\n    tree.put(7);\n    tree.put(2);\n    tree.put(4);\n    tree.put(6);\n    Node result = tree.find(4);\n    assertEquals(4, result.data);\n}",
        "public void findTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(10);\n    tree.put(5);\n    tree.put(15);\n    tree.put(7);\n    tree.put(12);\n    \n    Node result = tree.find(7);\n    assertNotNull(result);\n    assertEquals(7, result.data);\n    \n    result = tree.find(20);\n    assertNotNull(result);\n    assertEquals(15, result.data);\n    \n    result = tree.find(3);\n    assertNull(result);\n}",
        "@Test\npublic void findTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(5);\n    tree.put(3);\n    tree.put(7);\n    tree.put(2);\n    tree.put(4);\n    tree.put(6);\n    tree.put(8);\n    \n    Node node = tree.find(4);\n    assertNotNull(node);\n    assertEquals(4, node.data);\n    assertEquals(3, node.parent.data);\n}",
        "@Test\n    public void findTest() {\n        BinaryTree.Node root = new BinaryTree.Node(10);\n        BinaryTree.Node leftChild = new BinaryTree.Node(5);\n        BinaryTree.Node rightChild = new BinaryTree.Node(15);\n        root.left = leftChild;\n        root.right = rightChild;\n        \n        BinaryTree binaryTree = new BinaryTree(root);\n        BinaryTree.Node result = binaryTree.find(10);\n        \n        assertEquals(root, result); // add assertions to verify the correctness of the method\n    }",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        BinaryTree.Node root = new BinaryTree.Node(5);\n        root.left = new BinaryTree.Node(3);\n        root.right = new BinaryTree.Node(7);\n        root.left.left = new BinaryTree.Node(2);\n        root.left.right = new BinaryTree.Node(4);\n        root.right.left = new BinaryTree.Node(6);\n        root.right.right = new BinaryTree.Node(8);\n        \n        BinaryTree bt = new BinaryTree(root);\n        \n        assertEquals(root, bt.find(5)); // Test the key exists and returning the correct node\n        assertEquals(root.left, bt.find(3)); // Test the key exists and returning the correct node\n        assertEquals(root.right, bt.find(7)); // Test the key exists and returning the correct node\n        assertNull(bt.find(1)); // Test the key doesn't exist and returning null\n        assertNull(bt.find(9)); // Test the key doesn't exist and returning null\n    }\n}",
        "public void findTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(5);\n    tree.put(3);\n    tree.put(8);\n    tree.put(2);\n    tree.put(4);\n\n    Node result = tree.find(4);\n    assertNotNull(result);\n    assertEquals(4, result.data);\n\n    result = tree.find(10);\n    assertNotNull(result);\n    assertEquals(8, result.data);\n}",
        "@Test\npublic void findTest() {\n    BinaryTree binaryTree = new BinaryTree();\n    binaryTree.put(5);\n    binaryTree.put(3);\n    binaryTree.put(7);\n    binaryTree.put(2);\n    binaryTree.put(4);\n    \n    // Test for existing key\n    Node result1 = binaryTree.find(2);\n    assertEquals(2, result1.data);\n    \n    // Test for non-existing key\n    Node result2 = binaryTree.find(6);\n    assertEquals(7, result2.data);\n}",
        "@Test\npublic void findTest() {\n    BinaryTree binaryTree = new BinaryTree();\n    binaryTree.put(5);\n    binaryTree.put(3);\n    binaryTree.put(7);\n    \n    Node expectedResult = binaryTree.find(3);\n    assertEquals(3, expectedResult.data);\n}",
        "// Create a new BinaryTree object\nBinaryTree binaryTree = new BinaryTree();\n\n// Add some nodes to the binary tree\n\n// Create nodes\nBinaryTree.Node node1 = new BinaryTree.Node(1);\nBinaryTree.Node node2 = new BinaryTree.Node(2);\nBinaryTree.Node node3 = new BinaryTree.Node(3);\n\n// Set their respective data values\nnode1.data = 1;\nnode2.data = 2;\nnode3.data = 3;\n\n// Set their respective left and right children\nnode1.left = node2;\nnode1.right = node3;\nnode2.parent = node1;\nnode3.parent = node1;\n\n// Set the root of the binary tree\nbinaryTree.root = node1;\n\n// Call the find method and assert the result\nBinaryTree.Node result = binaryTree.find(2);\nassertEquals(node2, result, \"Incorrect node found\");",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    \n    // Creating a binary tree for testing purposes\n    private BinaryTree testTree() {\n        BinaryTree tree = new BinaryTree();\n        tree.put(5);\n        tree.put(3);\n        tree.put(8);\n        tree.put(2);\n        tree.put(4);\n        tree.put(7);\n        tree.put(9);\n        return tree;\n    }\n    \n    @Test\n    public void findTest() {\n        BinaryTree tree = testTree();\n        Node result;\n        \n        // Testing the find method on an existing key\n        result = tree.find(3);\n        assertNotNull(result);\n        assertEquals(3, result.data);\n        \n        // Testing the find method on a key that doesn't exist\n        result = tree.find(6);\n        assertNotNull(result);\n        assertEquals(5, result.data); // The key doesn't exist, so it should return the parent\n        \n        // Testing the find method on the root key\n        result = tree.find(5);\n        assertNotNull(result);\n        assertEquals(5, result.data);\n    }\n}"
    ]
}
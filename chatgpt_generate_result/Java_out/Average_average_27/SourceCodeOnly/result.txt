Source code: 


public static int average(int[] numbers) {
    if (numbers == null || numbers.length == 0) {
        throw new IllegalArgumentException("Numbers array cannot be empty or null");
    }
    long sum = 0;
    for (int number : numbers) {
        sum += number;
    }
    return (int) (sum / numbers.length);
}



No.1 generated result --------------------------

@Test
public void averageTest() {
    int[] numbers = {1, 2, 3, 4, 5};
    int expectedAverage = 3;
  
    int actualAverage = Average.average(numbers);
  
    assertEquals(expectedAverage, actualAverage);
}


No.2 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {
    @Test
    public void averageTest() {
        int[] numbers = {1, 2, 3, 4, 5};
        int expectedAverage = 3;
        int actualAverage = Average.average(numbers);
        assertEquals(expectedAverage, actualAverage);
    }
}


No.3 generated result --------------------------

public void averageTest() {
    int[] numbers = {1, 2, 3, 4, 5};
    int expectedAverage = 3;
    
    int actualAverage = Average.average(numbers);
    
    assertEquals(expectedAverage, actualAverage);
    
    // Additional Test Cases
    int[] emptyArray = {};
    assertThrows(IllegalArgumentException.class, () -> Average.average(emptyArray));
    
    int[] nullArray = null;
    assertThrows(IllegalArgumentException.class, () -> Average.average(nullArray));
    
    int[] negativeNumbers = {-1, -2, -3, -4, -5};
    int expectedNegativeAverage = -3;
    int actualNegativeAverage = Average.average(negativeNumbers);
    
    assertEquals(expectedNegativeAverage, actualNegativeAverage);
}


No.4 generated result --------------------------

@Test
    public void averageTest() {
        int[] array1 = {1, 2, 3, 4, 5};
        int expectedOutput1 = 3;

        int[] array2 = {-1, 1, -1, 1};
        int expectedOutput2 = 0;

        int[] array3 = {10, 20, 30, 40, 50};
        int expectedOutput3 = 30;

        assertEquals(expectedOutput1, Average.average(array1));
        assertEquals(expectedOutput2, Average.average(array2));
        assertEquals(expectedOutput3, Average.average(array3));
    }


No.5 generated result --------------------------

@Test
public void averageTest() {
    int[] numbers = {1, 2, 3, 4, 5};
    int expectedAverage = 3;
    int actualAverage = Average.average(numbers);
    assertEquals(expectedAverage, actualAverage);
}


No.6 generated result --------------------------

public class AverageTest {
    @Test
    public void averageTest() {
        // Arrange
        int[] numbers = {1, 2, 3, 4, 5};
        int expectedAverage = 3;
        
        // Act
        int actualAverage = Average.average(numbers);
        
        // Assert
        assertEquals(expectedAverage, actualAverage, "The average calculation is incorrect.");
    }
}


No.7 generated result --------------------------

@Test
public void averageTest() {
    int[] numbers = {1, 2, 3, 4, 5};
    int expectedAverage = 3;
    
    int actualAverage = Average.average(numbers);
    
    assertEquals(expectedAverage, actualAverage);
}


No.8 generated result --------------------------

@Test
public void averageTest() {
    int[] numbers = {1, 2, 3, 4, 5};
    int expected = 3;
    int actual = Average.average(numbers);
    assertEquals(expected, actual);
}


No.9 generated result --------------------------

@Test
public void averageTest() {
    int[] numbers = {1, 2, 3, 4, 5};
    int expected = 3;
    
    int result = Average.average(numbers);
    
    assertEquals(expected, result);
}


No.10 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {
    @Test
    public void averageTest() {
        // Given
        int[] numbers = {1, 2, 3, 4, 5};
        
        // When
        int result = Average.average(numbers);
        
        // Then
        assertEquals(3, result);
    }
}



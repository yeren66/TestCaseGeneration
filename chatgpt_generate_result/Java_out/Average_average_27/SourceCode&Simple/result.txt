Source code: 


public static int average(int[] numbers) {
    if (numbers == null || numbers.length == 0) {
        throw new IllegalArgumentException("Numbers array cannot be empty or null");
    }
    long sum = 0;
    for (int number : numbers) {
        sum += number;
    }
    return (int) (sum / numbers.length);
}



No.1 generated result --------------------------

@Test
public void averageTest() {
    int[] numbers = {1, 2, 3, 4, 5};
    int expected = 3;
    int result = Average.average(numbers);
    assertEquals(expected, result);
}


No.2 generated result --------------------------

@Test
public void averageTest() {
    // Input
    int[] numbers = {1, 2, 3, 4, 5};
    
    // Expected output
    int expected = 3;
    
    // Actual output
    int actual = Average.average(numbers);
    
    // Assertion
    assertEquals(expected, actual);
}


No.3 generated result --------------------------

@Test
public void averageTest() {
    int[] numbers = {1, 2, 3, 4, 5};
    int expected = 3;
    int actual = Average.average(numbers);
    assertEquals(expected, actual);
    
    int[] emptyNumbers = {};
    assertThrows(IllegalArgumentException.class, () -> {
        Average.average(emptyNumbers);
    });
    
    int[] nullNumbers = null;
    assertThrows(IllegalArgumentException.class, () -> {
        Average.average(nullNumbers);
    });
}


No.4 generated result --------------------------

@Test
public void averageTest() {
    int[] numbers = {1, 2, 3, 4, 5};
    int expectedAverage = 3;
    int actualAverage = Average.average(numbers);
    assertEquals(expectedAverage, actualAverage);
}


No.5 generated result --------------------------

@Test
public void averageTest() {
    int[] numbers = {1, 2, 3, 4, 5};
    int expectedAverage = 3;
    int actualAverage = Average.average(numbers);
    assertEquals(expectedAverage, actualAverage);
}


No.6 generated result --------------------------

@Test
public void averageTest() {
    // Arrange
    int[] numbers = {1, 2, 3, 4, 5};
    
    // Act
    int result = Average.average(numbers);
    
    // Assert
    assertEquals(3, result);
}


No.7 generated result --------------------------

@Test
public void averageTest() {
    // Arrange
    int[] numbers = {1, 2, 3, 4, 5};
    
    // Act
    int result = Average.average(numbers);
    
    // Assert
    assertEquals(3, result);
}


No.8 generated result --------------------------

@Test
public void averageTest() {
    int[] numbers = {1, 2, 3, 4, 5};
    int expected = 3;
    int actual = Average.average(numbers);
    assertEquals(expected, actual);
}


No.9 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {
    @Test
    public void averageTest() {
        int[] testNumbers = {1, 2, 3, 4, 5};
        int expectedAverage = 3;
        int actualAverage = Average.average(testNumbers);
        assertEquals(expectedAverage, actualAverage, "Incorrect average calculation");
    }
}


No.10 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AverageTest {
    @Test
    public void averageTest() {
        int[] numbers = {1, 2, 3, 4, 5};
        int expectedAverage = 3;
        int actualAverage = Average.average(numbers);
        assertEquals(expectedAverage, actualAverage);
    }
}



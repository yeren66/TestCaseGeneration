{
    "project_name": "Java",
    "file_name": "Average.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/Average.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * find average value of an int array\n     *\n     * @param numbers the array contains element and the sum does not excess long\n     *                value limit\n     * @return average value\n     */",
    "source_code": "\npublic static int average(int[] numbers) {\n    if (numbers == null || numbers.length == 0) {\n        throw new IllegalArgumentException(\"Numbers array cannot be empty or null\");\n    }\n    long sum = 0;\n    for (int number : numbers) {\n        sum += number;\n    }\n    return (int) (sum / numbers.length);\n}\n",
    "class_name": "Average",
    "method_name": "average",
    "arguments": [
        "int[] numbers"
    ],
    "generate_test": [
        "@Test\npublic void averageTest() {\n    int[] numbers = {1, 2, 3, 4, 5};\n    int expected = 3;\n    int result = Average.average(numbers);\n    assertEquals(expected, result);\n}",
        "@Test\npublic void averageTest() {\n    // Input\n    int[] numbers = {1, 2, 3, 4, 5};\n    \n    // Expected output\n    int expected = 3;\n    \n    // Actual output\n    int actual = Average.average(numbers);\n    \n    // Assertion\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void averageTest() {\n    int[] numbers = {1, 2, 3, 4, 5};\n    int expected = 3;\n    int actual = Average.average(numbers);\n    assertEquals(expected, actual);\n    \n    int[] emptyNumbers = {};\n    assertThrows(IllegalArgumentException.class, () -> {\n        Average.average(emptyNumbers);\n    });\n    \n    int[] nullNumbers = null;\n    assertThrows(IllegalArgumentException.class, () -> {\n        Average.average(nullNumbers);\n    });\n}",
        "@Test\npublic void averageTest() {\n    int[] numbers = {1, 2, 3, 4, 5};\n    int expectedAverage = 3;\n    int actualAverage = Average.average(numbers);\n    assertEquals(expectedAverage, actualAverage);\n}",
        "@Test\npublic void averageTest() {\n    int[] numbers = {1, 2, 3, 4, 5};\n    int expectedAverage = 3;\n    int actualAverage = Average.average(numbers);\n    assertEquals(expectedAverage, actualAverage);\n}",
        "@Test\npublic void averageTest() {\n    // Arrange\n    int[] numbers = {1, 2, 3, 4, 5};\n    \n    // Act\n    int result = Average.average(numbers);\n    \n    // Assert\n    assertEquals(3, result);\n}",
        "@Test\npublic void averageTest() {\n    // Arrange\n    int[] numbers = {1, 2, 3, 4, 5};\n    \n    // Act\n    int result = Average.average(numbers);\n    \n    // Assert\n    assertEquals(3, result);\n}",
        "@Test\npublic void averageTest() {\n    int[] numbers = {1, 2, 3, 4, 5};\n    int expected = 3;\n    int actual = Average.average(numbers);\n    assertEquals(expected, actual);\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        int[] testNumbers = {1, 2, 3, 4, 5};\n        int expectedAverage = 3;\n        int actualAverage = Average.average(testNumbers);\n        assertEquals(expectedAverage, actualAverage, \"Incorrect average calculation\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AverageTest {\n    @Test\n    public void averageTest() {\n        int[] numbers = {1, 2, 3, 4, 5};\n        int expectedAverage = 3;\n        int actualAverage = Average.average(numbers);\n        assertEquals(expectedAverage, actualAverage);\n    }\n}"
    ]
}
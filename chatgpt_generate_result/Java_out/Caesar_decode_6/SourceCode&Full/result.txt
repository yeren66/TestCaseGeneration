Source code: 


public String decode(String encryptedMessage, int shift) {
    StringBuilder decoded = new StringBuilder();

    shift %= 26;

    final int length = encryptedMessage.length();
    for (int i = 0; i < length; i++) {
        char current = encryptedMessage.charAt(i);
        if (isCapitalLatinLetter(current)) {
            current -= shift;
            decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters
        } else if (isSmallLatinLetter(current)) {
            current -= shift;
            decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters
        } else {
            decoded.append(current);
        }
    }
    return decoded.toString();
}



No.1 generated result --------------------------

@Test
public void decodeTest() {
    Caesar caesar = new Caesar();
    String encryptedMessage = "J QDWH WR WKH ZRUOG!";
    int shift = 3;
    String expectedDecodedMessage = "G PAVDU TO THE WORLD!";
    String actualDecodedMessage = caesar.decode(encryptedMessage, shift);
    assertEquals(expectedDecodedMessage, actualDecodedMessage);
}


No.2 generated result --------------------------

@Test
public void decodeTest() {
    Caesar cipher = new Caesar();
    assertEquals("HELLO", cipher.decode("MJQQT", 5));
}


No.3 generated result --------------------------

@Test
public void decodeTest() {
    Caesar caesar = new Caesar();
    String encryptedMessage = "Qeboboa!";
    int shift = 4;
    String expected = "Mansion!";
    String actual = caesar.decode(encryptedMessage, shift);
    assertEquals(expected, actual);
}


No.4 generated result --------------------------

@Test
public void decodeTest() {
    Caesar cipher = new Caesar(); // Create an instance of the Caesar class
    String encryptedMessage = "Uif!xjmmf!nz!bnfsjdbo.qspevdut!uftu!uibu!yjwf!nz!qbsujdvmft";
    int shift = 1;
    String expectedDecodedMessage = "The!will!my!alphabet.replaced!text!that!you!meet!is!prepared";
    
    String decodedMessage = cipher.decode(encryptedMessage, shift);
    
    assertEquals(expectedDecodedMessage, decodedMessage);
}


No.5 generated result --------------------------

@Test
public void decodeTest() {
    Caesar caesar = new Caesar();
    String encryptedMessage = "Cqogu ku zrfucvkqp vguvcigp";
    int shift = 2;
    String expected = "Aomcs is weekend tester";
    
    String actual = caesar.decode(encryptedMessage, shift);
    
    assertEquals(expected, actual);
}


No.6 generated result --------------------------

@Test
public void decodeTest() {
    Caesar caesar = new Caesar();
    String encryptedMessage = "Khoor#Zruog";
    int shift = 3;
    String expected = "Hello World";
    
    String actual = caesar.decode(encryptedMessage, shift);
    
    assertEquals(expected, actual);
}


No.7 generated result --------------------------

@Test
public void decodeTest() {
    Caesar caesar = new Caesar();
    String encryptedMessage = "Khoor";
    int shift = 3;
    String expected = "Hello";
    String actual = caesar.decode(encryptedMessage, shift);
    assertEquals(expected, actual);
}


No.8 generated result --------------------------

@Test
public void decodeTest() {
    Caesar caesar = new Caesar();
    String encryptedMessage = "RovvyGqfuGrjYlbcJrPdevrCqguaAxdek";
    int shift = 10;
    String expectedDecodedMessage = "HelloWorldWithEncryptionWorks";
    
    String actualDecodedMessage = caesar.decode(encryptedMessage, shift);
    
    assertEquals(expectedDecodedMessage, actualDecodedMessage);
}


No.9 generated result --------------------------

@Test
public void decodeTest() {
    Caesar caesar = new Caesar();
    String encryptedMessage = "Lipps";
    int shift = 4;
    
    String expected = "Hello";
    String actual = caesar.decode(encryptedMessage, shift);
    
    assertEquals(expected, actual);
}


No.10 generated result --------------------------

@Test
public void decodeTest() {
    Caesar caesar = new Caesar();
    String encryptedMessage = "DqGdb duh pDwwhuv"; // encrypted message
    int shift = 3; // shift value used for encryption

    // Expected Decoded Message: All the worlds
    String expected = "All the worlds";

    // Actual Decoded Message using the decode() method
    String actual = caesar.decode(encryptedMessage, shift);

    // Compare the expected and actual decoded messages
    assertEquals(expected, actual);
}




{
    "project_name": "Java",
    "file_name": "Caesar.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/Caesar.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Decrypt message by shifting back every Latin char to previous the ASCII\n     * Example : B - 1 -> A\n     *\n     * @return message\n     */",
    "source_code": "\npublic String decode(String encryptedMessage, int shift) {\n    StringBuilder decoded = new StringBuilder();\n\n    shift %= 26;\n\n    final int length = encryptedMessage.length();\n    for (int i = 0; i < length; i++) {\n        char current = encryptedMessage.charAt(i);\n        if (isCapitalLatinLetter(current)) {\n            current -= shift;\n            decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters\n        } else if (isSmallLatinLetter(current)) {\n            current -= shift;\n            decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters\n        } else {\n            decoded.append(current);\n        }\n    }\n    return decoded.toString();\n}\n",
    "class_name": "Caesar",
    "method_name": "decode",
    "arguments": [
        "String encryptedMessage",
        "int shift"
    ],
    "generate_test": [
        "public void decodeTest() {\n    Caesar cipher = new Caesar();\n    \n    // Test case 1: Shift = 3, encryptedMessage = \"Fdhvdu phvvdjh!\"\n    String result1 = cipher.decode(\"Fdhvdu phvvdjh!\", 3);\n    assertEquals(\"Caesar cipher!\", result1);\n    \n    // Test case 2: Shift = 5, encryptedMessage = \"Mjqqt btwqi!\"\n    String result2 = cipher.decode(\"Mjqqt btwqi!\", 5);\n    assertEquals(\"Hello world!\", result2);\n    \n    // Test case 3: Shift = 1, encryptedMessage = \"Ifmmp xpsme!\"\n    String result3 = cipher.decode(\"Ifmmp xpsme!\", 1);\n    assertEquals(\"Hello world!\", result3);\n    \n    // Test case 4: Shift = 10, encryptedMessage = \"Xli uymgo mkzixov!\"\n    String result4 = cipher.decode(\"Xli uymgo mkzixov!\", 10);\n    assertEquals(\"The quick brownfox!\", result4);\n}",
        "@Test\npublic void decodeTest() {\n    Caesar caesar = new Caesar();\n    String encryptedMessage = \"EBIIL\";\n    int shift = 1;\n    String expectedDecodedMessage = \"DAAHK\";\n    \n    String actualDecodedMessage = caesar.decode(encryptedMessage, shift);\n    \n    assertEquals(expectedDecodedMessage, actualDecodedMessage);\n}",
        "String encryptedMessage = \"Gwpv c vbuq pvokki yfve iqqu qc bgbgbgbgbgbgbgbgbu\";\nint shift = 20;\nString expectedOutput = \"Test a case-sensitive string with multiple different characters\";\n\nString decodedMessage = decode(encryptedMessage, shift);\n\nassertEquals(expectedOutput, decodedMessage);",
        "@Test\npublic void decodeTest() {\n    Caesar cipher = new Caesar();\n\n    // Test Case 1: Shift = 1\n    String encryptedMessage1 = \"Ifmmp\";\n    int shift1 = 1;\n    String expectedDecoded1 = \"Hello\";\n    assertEquals(expectedDecoded1, cipher.decode(encryptedMessage1, shift1));\n\n    // Test Case 2: Shift = 3\n    String encryptedMessage2 = \"Lore ipsum dolor sit amet\";\n    int shift2 = 3;\n    String expectedDecoded2 = \"Ilov felizm ajhpd pfj zjhp\";\n    assertEquals(expectedDecoded2, cipher.decode(encryptedMessage2, shift2));\n\n    // Test Case 3: Shift = 7\n    String encryptedMessage3 = \"Xnt fjyyjw rjzxxflj\";\n    int shift3 = 7;\n    String expectedDecoded3 = \"The quick brownfox\";\n    assertEquals(expectedDecoded3, cipher.decode(encryptedMessage3, shift3));\n}",
        "@Test\n    public void decodeTest() {\n        Caesar cipher = new Caesar();\n        assertEquals(\"HELLO\", cipher.decode(\"MJQQT\", 5));\n        assertEquals(\"world\", cipher.decode(\"ptwad\", 3));\n        assertEquals(\"Java Source Code\", cipher.decode(\"Ygyq Rdunhb Hgjh\", 5));\n        assertEquals(\"12345\", cipher.decode(\"12345\", 2));\n    }",
        "@Test\npublic void decodeTest() {\n    Caesar cipher = new Caesar();\n    String encryptedMessage = \"Ymj Vznhp. Gnyy fpy, qrg ymj Wfdzq\";\n    int shift = 5;\n    String expected = \"The Sphinx. Well done, now the Talon\";\n    String actual = cipher.decode(encryptedMessage, shift);\n    assertEquals(expected, actual);\n}\n",
        "@Test\npublic void decodeTest() {\n    Caesar cipher = new Caesar();\n    String encryptedMessage = \"Dqg#frxog#brx#fkhfn#wklv\";\n    int shift = 3;\n    String expected = \"And could you guess this\";\n    String actual = cipher.decode(encryptedMessage, shift);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void decodeTest() {\n    Caesar caesar = new Caesar();\n    \n    // Test case 1: All capital letters\n    String encryptedMessage1 = \"LMPR ALEXXEGY\";\n    int shift1 = 4;\n    String expected1 = \"JOIN WAVEWAVE\";\n    assertEquals(expected1, caesar.decode(encryptedMessage1, shift1));\n    \n    // Test case 2: All small letters\n    String encryptedMessage2 = \"xipmuz bbq\";\n    int shift2 = 10;\n    String expected2 = \"proper guy\";\n    assertEquals(expected2, caesar.decode(encryptedMessage2, shift2));\n    \n    // Test case 3: Mixture of capital and small letters\n    String encryptedMessage3 = \"KqexXjEHjxxnjrNxY\";\n    int shift3 = 3;\n    String expected3 = \"HappyWorshipTime!\";\n    assertEquals(expected3, caesar.decode(encryptedMessage3, shift3));\n    \n}",
        "assertEquals(\"Hello\", decode(\"Rovvy\", 10));\nassertEquals(\"World\", decode(\"Tqnic\", 7));\nassertEquals(\"12345\", decode(\"12345\", 5));",
        "@Test\npublic void decodeTest() {\n    Caesar cipher = new Caesar();\n    String encryptedMessage = \"Sgd Tlhm sjr, Sfrs Gadqs sltfghmf.\";\n    int shift = 3;\n    String expected = \"The Jedi are, Very Wise indeed.\";\n    String actual = cipher.decode(encryptedMessage, shift);\n    assertEquals(expected, actual);\n}"
    ]
}
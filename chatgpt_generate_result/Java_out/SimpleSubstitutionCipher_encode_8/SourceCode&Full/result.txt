Source code: 


public static String encode(String message, String cipherSmall) {
    StringBuilder encoded = new StringBuilder();

    // This map is used to encode
    Map<Character, Character> cipherMap = new HashMap<>();

    char beginSmallLetter = 'a';
    char beginCapitalLetter = 'A';

    cipherSmall = cipherSmall.toLowerCase();
    String cipherCapital = cipherSmall.toUpperCase();

    // To handle Small and Capital letters
    for (int i = 0; i < cipherSmall.length(); i++) {
        cipherMap.put(beginSmallLetter++, cipherSmall.charAt(i));
        cipherMap.put(beginCapitalLetter++, cipherCapital.charAt(i));
    }

    for (int i = 0; i < message.length(); i++) {
        if (Character.isAlphabetic(message.charAt(i))) {
            encoded.append(cipherMap.get(message.charAt(i)));
        } else {
            encoded.append(message.charAt(i));
        }
    }

    return encoded.toString();
}



No.1 generated result --------------------------

@Test
public void encodeTest() {
    String message = "Hello World";
    String cipherSmall = "bcdfghjklmnpqrstvwxyz";
    String expectedResult = "Neppt Yqppf";
    
    String encodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);
    
    assertEquals(expectedResult, encodedMessage);
}


No.2 generated result --------------------------

@Test
public void encodeTest() {
    String message = "Hello, World!";
    String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";
    String expected = "Svool, Dliow!";
    
    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);
    
    assertEquals(expected, actual);
}


No.3 generated result --------------------------

@Test
public void encodeTest() {
    String message = "Hello World";
    String cipherSmall = "defghijklmnopqrstuvwxyzabc";

    String expected = "Dahhk Spkhd";
    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);

    assertEquals(expected, actual);
}


No.4 generated result --------------------------

@Test
public void encodeTest() {
    String message = "Hello world";
    String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";
    String expectedResult = "Svool dliow";
    
    String encodedMessage = SimpleSubstitutionCipher.encode(message, cipherSmall);
    
    assertEquals(expectedResult, encodedMessage);
}


No.5 generated result --------------------------

@Test
public void encodeTest() {
    String message = "Hello, World!";
    String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";

    String expected = "Svool, Dliow!";
    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);

    assertEquals(expected, actual);
}


No.6 generated result --------------------------

@Test
public void encodeTest() {
    String message = "Hello World";
    String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";
    String expected = "Svool Dliow";
    
    String result = SimpleSubstitutionCipher.encode(message, cipherSmall);
    
    assertEquals(expected, result);
}


No.7 generated result --------------------------

@Test
    public void encodeTest() {
        String message = "Hello World!";
        String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";

        String expected = "Svool Dliow!";
        String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);

        assertEquals(expected, actual);
    }


No.8 generated result --------------------------

@Test
public void encodeTest() {
    String message = "Hello World";
    String cipherSmall = "xyzabc";
    String expected = "Hcbbq Tqldp";
    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);
    assertEquals(expected, actual);
}


No.9 generated result --------------------------

@Test
    public void encodeTest() {
        String message = "Hello World";
        String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";

        String expected = "Svool Dliow";
        String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);
        
        assertEquals(expected, actual);
    }


No.10 generated result --------------------------

@Test
public void encodeTest() {
    String message = "Hello, World!";
    String cipherSmall = "qwertyuiopasdfghjklzxcvbnm";

    String expected = "itxxp, tdxbq!";
    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);

    assertEquals(expected, actual);
}



Source code: 


public static List<TreeSet<Integer>> combination(int n, int k) {
    if (n <= 0) {
        return null;
    }
    length = k;
    Integer[] arr = new Integer[n];
    for (int i = 1; i <= n; i++) {
        arr[i - 1] = i;
    }
    return Combination.combination(arr, length);
}



No.1 generated result --------------------------

@Test
public void combinationTest() {
    int n = 5;
    int k = 3;
    List<TreeSet<Integer>> expected = new ArrayList<>();
    TreeSet<Integer> combination1 = new TreeSet<>();
    combination1.add(1);
    combination1.add(2);
    combination1.add(3);
    expected.add(combination1);
    TreeSet<Integer> combination2 = new TreeSet<>();
    combination2.add(1);
    combination2.add(2);
    combination2.add(4);
    expected.add(combination2);
    TreeSet<Integer> combination3 = new TreeSet<>();
    combination3.add(1);
    combination3.add(2);
    combination3.add(5);
    expected.add(combination3);
    TreeSet<Integer> combination4 = new TreeSet<>();
    combination4.add(1);
    combination4.add(3);
    combination4.add(4);
    expected.add(combination4);
    TreeSet<Integer> combination5 = new TreeSet<>();
    combination5.add(1);
    combination5.add(3);
    combination5.add(5);
    expected.add(combination5);
    TreeSet<Integer> combination6 = new TreeSet<>();
    combination6.add(1);
    combination6.add(4);
    combination6.add(5);
    expected.add(combination6);
    TreeSet<Integer> combination7 = new TreeSet<>();
    combination7.add(2);
    combination7.add(3);
    combination7.add(4);
    expected.add(combination7);
    TreeSet<Integer> combination8 = new TreeSet<>();
    combination8.add(2);
    combination8.add(3);
    combination8.add(5);
    expected.add(combination8);
    TreeSet<Integer> combination9 = new TreeSet<>();
    combination9.add(2);
    combination9.add(4);
    combination9.add(5);
    expected.add(combination9);
    TreeSet<Integer> combination10 = new TreeSet<>();
    combination10.add(3);
    combination10.add(4);
    combination10.add(5);
    expected.add(combination10);
    
    List<TreeSet<Integer>> result = ArrayCombination.combination(n, k);
    
    assertEquals(expected, result);
}


No.2 generated result --------------------------

@Test
public void combinationTest() {
    int n = 5;
    int k = 3;
    List<TreeSet<Integer>> expected = new ArrayList<>();
    TreeSet<Integer> combination1 = new TreeSet<>();
    combination1.add(1);
    combination1.add(2);
    combination1.add(3);
    expected.add(combination1);
    TreeSet<Integer> combination2 = new TreeSet<>();
    combination2.add(1);
    combination2.add(2);
    combination2.add(4);
    expected.add(combination2);
    TreeSet<Integer> combination3 = new TreeSet<>();
    combination3.add(1);
    combination3.add(2);
    combination3.add(5);
    expected.add(combination3);
    TreeSet<Integer> combination4 = new TreeSet<>();
    combination4.add(1);
    combination4.add(3);
    combination4.add(4);
    expected.add(combination4);
    TreeSet<Integer> combination5 = new TreeSet<>();
    combination5.add(1);
    combination5.add(3);
    combination5.add(5);
    expected.add(combination5);
    TreeSet<Integer> combination6 = new TreeSet<>();
    combination6.add(1);
    combination6.add(4);
    combination6.add(5);
    expected.add(combination6);
    TreeSet<Integer> combination7 = new TreeSet<>();
    combination7.add(2);
    combination7.add(3);
    combination7.add(4);
    expected.add(combination7);
    TreeSet<Integer> combination8 = new TreeSet<>();
    combination8.add(2);
    combination8.add(3);
    combination8.add(5);
    expected.add(combination8);
    TreeSet<Integer> combination9 = new TreeSet<>();
    combination9.add(2);
    combination9.add(4);
    combination9.add(5);
    expected.add(combination9);
    TreeSet<Integer> combination10 = new TreeSet<>();
    combination10.add(3);
    combination10.add(4);
    combination10.add(5);
    expected.add(combination10);
    
    List<TreeSet<Integer>> result = ArrayCombination.combination(n, k);
    
    // Assertion
    assertEquals(expected, result);
}


No.3 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.*;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        int n = 5; // the maximum value of the array
        int k = 3; // the length of the combination
        List<TreeSet<Integer>> expected = new ArrayList<>();
        
        // Expected combinations for n=5, k=3
        expected.add(new TreeSet<>(Arrays.asList(1, 2, 3)));
        expected.add(new TreeSet<>(Arrays.asList(1, 2, 4)));
        expected.add(new TreeSet<>(Arrays.asList(1, 2, 5)));
        expected.add(new TreeSet<>(Arrays.asList(1, 3, 4)));
        expected.add(new TreeSet<>(Arrays.asList(1, 3, 5)));
        expected.add(new TreeSet<>(Arrays.asList(1, 4, 5)));
        expected.add(new TreeSet<>(Arrays.asList(2, 3, 4)));
        expected.add(new TreeSet<>(Arrays.asList(2, 3, 5)));
        expected.add(new TreeSet<>(Arrays.asList(2, 4, 5)));
        expected.add(new TreeSet<>(Arrays.asList(3, 4, 5)));
        
        List<TreeSet<Integer>> result = ArrayCombination.combination(n, k);
        assertEquals(expected, result);
    }
}


No.4 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.TreeSet;
import java.util.List;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        int n = 5;
        int k = 3;
        List<TreeSet<Integer>> expected = new ArrayList<>();
        // Fill expected list with expected combinations

        List<TreeSet<Integer>> actual = ArrayCombination.combination(n, k);

        assertEquals(expected, actual);
    }
}


No.5 generated result --------------------------

@Test
public void combinationTest() {
    List<TreeSet<Integer>> result = ArrayCombination.combination(5, 3);

    // check that the result is not null
    assertNotNull(result);

    // check that the size of the result list is correct
    assertEquals(10, result.size());

    // check the content of the result list
    TreeSet<Integer> combination1 = new TreeSet<>();
    combination1.add(1);
    combination1.add(2);
    combination1.add(3);
    assertEquals(combination1, result.get(0));

    TreeSet<Integer> combination2 = new TreeSet<>();
    combination2.add(1);
    combination2.add(2);
    combination2.add(4);
    assertEquals(combination2, result.get(1));

    // more combinations...

    TreeSet<Integer> combination10 = new TreeSet<>();
    combination10.add(3);
    combination10.add(4);
    combination10.add(5);
    assertEquals(combination10, result.get(9));
}


No.6 generated result --------------------------

@Test
public void combinationTest() {
    List<TreeSet<Integer>> result = ArrayCombination.combination(5, 3);
    assertNotNull(result);
    assertEquals(10, result.size());
}


No.7 generated result --------------------------

@Test
public void combinationTest() {
    List<TreeSet<Integer>> expected = new ArrayList<>();
    TreeSet<Integer> combination1 = new TreeSet<>();
    combination1.add(1);
    combination1.add(2);
    combination1.add(3);
    expected.add(combination1);
    
    TreeSet<Integer> combination2 = new TreeSet<>();
    combination2.add(1);
    combination2.add(2);
    combination2.add(4);
    expected.add(combination2);
    
    TreeSet<Integer> combination3 = new TreeSet<>();
    combination3.add(1);
    combination3.add(2);
    combination3.add(5);
    expected.add(combination3);
    
    List<TreeSet<Integer>> result = ArrayCombination.combination(5, 3);
    
    assertEquals(result, expected);
}


No.8 generated result --------------------------

@Test
public void combinationTest() {
    List<TreeSet<Integer>> expected = new ArrayList<>();
    TreeSet<Integer> combination1 = new TreeSet<>();
    combination1.add(1);
    combination1.add(2);
    expected.add(combination1);

    TreeSet<Integer> combination2 = new TreeSet<>();
    combination2.add(1);
    combination2.add(3);
    expected.add(combination2);

    TreeSet<Integer> combination3 = new TreeSet<>();
    combination3.add(2);
    combination3.add(3);
    expected.add(combination3);

    List<TreeSet<Integer>> actual = ArrayCombination.combination(3, 2);
    assertEquals(expected, actual);
}


No.9 generated result --------------------------

@Test
public void combinationTest() {
    List<TreeSet<Integer>> expected = new ArrayList<>();
    
    // Create the expected output based on the given context
    expected.add(new TreeSet<>(Arrays.asList(1, 2, 3))); // Replace with appropriate values
    expected.add(new TreeSet<>(Arrays.asList(1, 2, 4))); // Replace with appropriate values
    expected.add(new TreeSet<>(Arrays.asList(1, 2, 5))); // Replace with appropriate values
    // ...
    
    List<TreeSet<Integer>> result = ArrayCombination.combination(5, 3); // Replace with appropriate inputs
    
    // Assert that the result is equal to the expected output
    assertEquals(expected, result);
}


No.10 generated result --------------------------

@Test
public void combinationTest() {
    int n = 5;
    int k = 3;
    List<TreeSet<Integer>> expected = new ArrayList<>();
    expected.add(new TreeSet<>(Arrays.asList(1, 2, 3)));
    expected.add(new TreeSet<>(Arrays.asList(1, 2, 4)));
    expected.add(new TreeSet<>(Arrays.asList(1, 2, 5)));
    expected.add(new TreeSet<>(Arrays.asList(1, 3, 4)));
    expected.add(new TreeSet<>(Arrays.asList(1, 3, 5)));
    expected.add(new TreeSet<>(Arrays.asList(1, 4, 5)));
    expected.add(new TreeSet<>(Arrays.asList(2, 3, 4)));
    expected.add(new TreeSet<>(Arrays.asList(2, 3, 5)));
    expected.add(new TreeSet<>(Arrays.asList(2, 4, 5)));
    expected.add(new TreeSet<>(Arrays.asList(3, 4, 5)));
    
    List<TreeSet<Integer>> actual = ArrayCombination.combination(n, k);
    
    assertEquals(expected, actual);
}



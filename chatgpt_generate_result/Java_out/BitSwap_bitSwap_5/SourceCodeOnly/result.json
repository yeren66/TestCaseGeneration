{
    "project_name": "Java",
    "file_name": "BitSwap.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/bitmanipulation/BitSwap.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.bitmanipulation",
    "docstring": null,
    "source_code": "/*\n * @brief Swaps the bits at the position posA and posB from data\n */\npublic static int bitSwap(int data, final int posA, final int posB) {\n    if (SingleBitOperations.getBit(data, posA) != SingleBitOperations.getBit(data, posB)) {\n        data ^= (1 << posA) ^ (1 << posB);\n    }\n    return data;\n}\n",
    "class_name": "BitSwap",
    "method_name": "bitSwap",
    "arguments": [
        "int data",
        "int posA",
        "int posB"
    ],
    "generate_test": [
        "@Test\npublic void bitSwapTest() {\n    int data = 101; // example data\n    \n    // Test case 1: Swapping bits at position 2 and 4\n    int result1 = BitManipulation.bitSwap(data, 2, 4);\n    assertEquals(105, result1); // expected output: 105\n    \n    // Test case 2: Swapping bits at position 1 and 3\n    int result2 = BitManipulation.bitSwap(data, 1, 3);\n    assertEquals(99, result2); // expected output: 99\n}",
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 0b110101; // Initial data value\n        int expectedResult = 0b100101; // Expected result after swapping bits\n\n        int result = SingleBitOperations.bitSwap(data, 2, 5); // Call the bitSwap method\n\n        assertEquals(expectedResult, result); // Check if the result is as expected\n    }\n}",
        "@Test\npublic void bitSwapTest() {\n    int data = 12; // Example input data\n    int posA = 1; // Example position A\n    int posB = 3; // Example position B\n    \n    int expectedResult = 12; // Example expected output\n    \n    int result = BitOperations.bitSwap(data, posA, posB);\n    assertEquals(expectedResult, result);\n}",
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int testCase1 = 0b1100110;\n        int expected1 = 0b1100101;\n        int result1 = BitManipulation.bitSwap(testCase1, 2, 6);\n        assertEquals(expected1, result1);\n        \n        int testCase2 = 0b1010101;\n        int expected2 = 0b1010101;\n        int result2 = BitManipulation.bitSwap(testCase2, 1, 5);\n        assertEquals(expected2, result2);\n        \n        int testCase3 = 0b11110000;\n        int expected3 = 0b11100000;\n        int result3 = BitManipulation.bitSwap(testCase3, 4, 7);\n        assertEquals(expected3, result3);\n    }\n}",
        "@Test\npublic void bitSwapTest() {\n    // Test case 1: Swapping bits at position 2 and 5\n    int data1 = 0b01101010;\n    int expected1 = 0b01001110;\n    int actual1 = BitManipulation.bitSwap(data1, 2, 5);\n    assertEquals(expected1, actual1);\n    \n    // Test case 2: Swapping bits at position 0 and 1\n    int data2 = 0b11110000;\n    int expected2 = 0b11110001;\n    int actual2 = BitManipulation.bitSwap(data2, 0, 1);\n    assertEquals(expected2, actual2);\n    \n    // Test case 3: Swapping bits at position 7 and 7 (same position)\n    int data3 = 0b10101010;\n    int expected3 = 0b10101010;\n    int actual3 = BitManipulation.bitSwap(data3, 7, 7);\n    assertEquals(expected3, actual3);\n}",
        "@Test\npublic void bitSwapTest() {\n    int input1 = 5;\n    int posA1 = 1;\n    int posB1 = 3;\n    int expected1 = 13;\n    assertEquals(expected1, BitManipulation.bitSwap(input1, posA1, posB1));\n\n    int input2 = 10;\n    int posA2 = 0;\n    int posB2 = 2;\n    int expected2 = 14;\n    assertEquals(expected2, BitManipulation.bitSwap(input2, posA2, posB2));\n}",
        "@Test\npublic void bitSwapTest() {\n    int data = 5;\n    int posA = 2;\n    int posB = 4;\n    \n    int result = BitManipulation.bitSwap(data, posA, posB);\n    int expected = 21;\n    \n    assertEquals(expected, result);\n}",
        "    @Test\n    public void bitSwapTest() {\n        int data = 0b1010; // Binary representation of the initial data\n        int posA = 1; // Position of the first bit to swap\n        int posB = 3; // Position of the second bit to swap\n        \n        int result = BitManipulation.bitSwap(data, posA, posB);\n        \n        int expected = 0b1001; // Expected result after swapping the bits at posA and posB\n        \n        assertEquals(expected, result);\n    }",
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 5;\n        int posA = 0;\n        int posB = 2;\n        \n        // Make sure the initial value is correct\n        assertEquals(5, data);\n        \n        // Make the call to the bitSwap method\n        int result = BitManipulation.bitSwap(data, posA, posB);\n        \n        // Perform assertions to check the correctness of the method\n        assertEquals(1, result);\n        assertEquals(1, BitManipulation.bitSwap(result, posA, posB));\n    }\n}",
        "@Test\npublic void bitSwapTest() {\n    int data = 10; // Initial value of data\n    int posA = 2; // Position A\n    int posB = 4; // Position B\n\n    int result = BitManipulationUtils.bitSwap(data, posA, posB);\n\n    // Assert if bitSwap method returns the correct value after swapping\n    assertEquals(26, result); // The expected result after swapping bits at posA and posB should be 26\n}"
    ]
}
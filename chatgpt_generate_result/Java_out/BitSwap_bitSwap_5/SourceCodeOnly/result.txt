Source code: 

/*
 * @brief Swaps the bits at the position posA and posB from data
 */
public static int bitSwap(int data, final int posA, final int posB) {
    if (SingleBitOperations.getBit(data, posA) != SingleBitOperations.getBit(data, posB)) {
        data ^= (1 << posA) ^ (1 << posB);
    }
    return data;
}



No.1 generated result --------------------------

@Test
public void bitSwapTest() {
    int data = 101; // example data
    
    // Test case 1: Swapping bits at position 2 and 4
    int result1 = BitManipulation.bitSwap(data, 2, 4);
    assertEquals(105, result1); // expected output: 105
    
    // Test case 2: Swapping bits at position 1 and 3
    int result2 = BitManipulation.bitSwap(data, 1, 3);
    assertEquals(99, result2); // expected output: 99
}


No.2 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 0b110101; // Initial data value
        int expectedResult = 0b100101; // Expected result after swapping bits

        int result = SingleBitOperations.bitSwap(data, 2, 5); // Call the bitSwap method

        assertEquals(expectedResult, result); // Check if the result is as expected
    }
}


No.3 generated result --------------------------

@Test
public void bitSwapTest() {
    int data = 12; // Example input data
    int posA = 1; // Example position A
    int posB = 3; // Example position B
    
    int expectedResult = 12; // Example expected output
    
    int result = BitOperations.bitSwap(data, posA, posB);
    assertEquals(expectedResult, result);
}


No.4 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int testCase1 = 0b1100110;
        int expected1 = 0b1100101;
        int result1 = BitManipulation.bitSwap(testCase1, 2, 6);
        assertEquals(expected1, result1);
        
        int testCase2 = 0b1010101;
        int expected2 = 0b1010101;
        int result2 = BitManipulation.bitSwap(testCase2, 1, 5);
        assertEquals(expected2, result2);
        
        int testCase3 = 0b11110000;
        int expected3 = 0b11100000;
        int result3 = BitManipulation.bitSwap(testCase3, 4, 7);
        assertEquals(expected3, result3);
    }
}


No.5 generated result --------------------------

@Test
public void bitSwapTest() {
    // Test case 1: Swapping bits at position 2 and 5
    int data1 = 0b01101010;
    int expected1 = 0b01001110;
    int actual1 = BitManipulation.bitSwap(data1, 2, 5);
    assertEquals(expected1, actual1);
    
    // Test case 2: Swapping bits at position 0 and 1
    int data2 = 0b11110000;
    int expected2 = 0b11110001;
    int actual2 = BitManipulation.bitSwap(data2, 0, 1);
    assertEquals(expected2, actual2);
    
    // Test case 3: Swapping bits at position 7 and 7 (same position)
    int data3 = 0b10101010;
    int expected3 = 0b10101010;
    int actual3 = BitManipulation.bitSwap(data3, 7, 7);
    assertEquals(expected3, actual3);
}


No.6 generated result --------------------------

@Test
public void bitSwapTest() {
    int input1 = 5;
    int posA1 = 1;
    int posB1 = 3;
    int expected1 = 13;
    assertEquals(expected1, BitManipulation.bitSwap(input1, posA1, posB1));

    int input2 = 10;
    int posA2 = 0;
    int posB2 = 2;
    int expected2 = 14;
    assertEquals(expected2, BitManipulation.bitSwap(input2, posA2, posB2));
}


No.7 generated result --------------------------

@Test
public void bitSwapTest() {
    int data = 5;
    int posA = 2;
    int posB = 4;
    
    int result = BitManipulation.bitSwap(data, posA, posB);
    int expected = 21;
    
    assertEquals(expected, result);
}


No.8 generated result --------------------------

    @Test
    public void bitSwapTest() {
        int data = 0b1010; // Binary representation of the initial data
        int posA = 1; // Position of the first bit to swap
        int posB = 3; // Position of the second bit to swap
        
        int result = BitManipulation.bitSwap(data, posA, posB);
        
        int expected = 0b1001; // Expected result after swapping the bits at posA and posB
        
        assertEquals(expected, result);
    }


No.9 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 5;
        int posA = 0;
        int posB = 2;
        
        // Make sure the initial value is correct
        assertEquals(5, data);
        
        // Make the call to the bitSwap method
        int result = BitManipulation.bitSwap(data, posA, posB);
        
        // Perform assertions to check the correctness of the method
        assertEquals(1, result);
        assertEquals(1, BitManipulation.bitSwap(result, posA, posB));
    }
}


No.10 generated result --------------------------

@Test
public void bitSwapTest() {
    int data = 10; // Initial value of data
    int posA = 2; // Position A
    int posB = 4; // Position B

    int result = BitManipulationUtils.bitSwap(data, posA, posB);

    // Assert if bitSwap method returns the correct value after swapping
    assertEquals(26, result); // The expected result after swapping bits at posA and posB should be 26
}



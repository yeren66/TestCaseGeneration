{
    "project_name": "Java",
    "file_name": "DecimalToAnyBase.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/conversions/DecimalToAnyBase.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.conversions",
    "docstring": "/**\n     * This method produces a String value of any given input decimal in any\n     * base\n     *\n     * @param inp Decimal of which we need the value in base in String format\n     * @return string format of the converted value in the given base\n     */",
    "source_code": "\npublic static String convertToAnyBase(int inp, int base) {\n    ArrayList<Character> charArr = new ArrayList<>();\n\n    while (inp > 0) {\n        charArr.add(reVal(inp % base));\n        inp /= base;\n    }\n\n    StringBuilder str = new StringBuilder(charArr.size());\n\n    for (Character ch : charArr) {\n        str.append(ch);\n    }\n\n    return str.reverse().toString();\n}\n",
    "class_name": "DecimalToAnyBase",
    "method_name": "convertToAnyBase",
    "arguments": [
        "int inp",
        "int base"
    ],
    "generate_test": [
        "@Test\npublic void convertToAnyBaseTest() {\n    // Positive Test Case\n    int inp1 = 25;\n    int base1 = 2;\n    String expectedResult1 = \"11001\";\n    String actualResult1 = DecimalToAnyBase.convertToAnyBase(inp1, base1);\n    assertEquals(expectedResult1, actualResult1);\n    \n    // Negative Test Case\n    int inp2 = 10;\n    int base2 = 16;\n    String expectedResult2 = \"A\";\n    String actualResult2 = DecimalToAnyBase.convertToAnyBase(inp2, base2);\n    assertEquals(expectedResult2, actualResult2);\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    assertEquals(\"110\", convertToAnyBase(6, 2));\n    assertEquals(\"16\", convertToAnyBase(22, 16));\n    assertEquals(\"102\", convertToAnyBase(101, 3));\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    // Test Case 1\n    assertEquals(\"10\", convertToAnyBase(2, 2));\n    \n    // Test Case 2\n    assertEquals(\"1111\", convertToAnyBase(15, 2));\n    \n    // Test Case 3\n    assertEquals(\"FF\", convertToAnyBase(255, 16));\n    \n    // Test Case 4\n    assertEquals(\"100\", convertToAnyBase(4, 5));\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    String result = DecimalToAnyBase.convertToAnyBase(10, 2);\n    assertEquals(\"1010\", result);\n\n    result = DecimalToAnyBase.convertToAnyBase(10, 8);\n    assertEquals(\"12\", result);\n\n    result = DecimalToAnyBase.convertToAnyBase(10, 16);\n    assertEquals(\"A\", result);\n\n    result = DecimalToAnyBase.convertToAnyBase(15, 2);\n    assertEquals(\"1111\", result);\n\n    result = DecimalToAnyBase.convertToAnyBase(15, 8);\n    assertEquals(\"17\", result);\n\n    result = DecimalToAnyBase.convertToAnyBase(15, 16);\n    assertEquals(\"F\", result);\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    assertEquals(\"101\", convertToAnyBase(5, 2));\n    assertEquals(\"10\", convertToAnyBase(2, 2));\n    assertEquals(\"D3\", convertToAnyBase(211, 16));\n    assertEquals(\"7\", convertToAnyBase(7, 10));\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    assertEquals(\"11\", convertToAnyBase(3, 2));\n    assertEquals(\"21\", convertToAnyBase(7, 3));\n    assertEquals(\"AA\", convertToAnyBase(170, 16));\n    assertEquals(\"456\", convertToAnyBase(789, 8));\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    assertEquals(\"10\", convertToAnyBase(2, 2));\n    assertEquals(\"1010\", convertToAnyBase(10, 2));\n    assertEquals(\"A\", convertToAnyBase(10, 16));\n    assertEquals(\"FF\", convertToAnyBase(255, 16));\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    assertEquals(\"111\", convertToAnyBase(7, 2));\n    assertEquals(\"13\", convertToAnyBase(10, 3));\n    assertEquals(\"17\", convertToAnyBase(23, 10));\n    assertEquals(\"A\", convertToAnyBase(10, 16));\n    assertEquals(\"FF\", convertToAnyBase(255, 16));\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    String result = DecimalToAnyBase.convertToAnyBase(16, 2);\n    assertEquals(\"10000\", result);\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    int inp = 123;\n    int base = 2;\n    String expected = \"1111011\";\n\n    String result = DecimalToAnyBase.convertToAnyBase(inp, base);\n\n    assertEquals(expected, result);\n}"
    ]
}
{
    "project_name": "Java",
    "file_name": "DecimalToAnyBase.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/conversions/DecimalToAnyBase.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.conversions",
    "docstring": "/**\n     * This method produces a String value of any given input decimal in any\n     * base\n     *\n     * @param inp Decimal of which we need the value in base in String format\n     * @return string format of the converted value in the given base\n     */",
    "source_code": "\npublic static String convertToAnyBase(int inp, int base) {\n    ArrayList<Character> charArr = new ArrayList<>();\n\n    while (inp > 0) {\n        charArr.add(reVal(inp % base));\n        inp /= base;\n    }\n\n    StringBuilder str = new StringBuilder(charArr.size());\n\n    for (Character ch : charArr) {\n        str.append(ch);\n    }\n\n    return str.reverse().toString();\n}\n",
    "class_name": "DecimalToAnyBase",
    "method_name": "convertToAnyBase",
    "arguments": [
        "int inp",
        "int base"
    ],
    "generate_test": [
        "@Test\npublic void convertToAnyBaseTest() {\n    assertEquals(\"1101\", DecimalToAnyBase.convertToAnyBase(13, 2));\n    assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16));\n    assertEquals(\"15\", DecimalToAnyBase.convertToAnyBase(21, 8));\n}",
        "\n@Test\npublic void convertToAnyBaseTest() {\n    // Test Case 1\n    int input1 = 10;\n    int base1 = 2;\n    String expected1 = \"1010\";\n    assertEquals(expected1, DecimalToAnyBase.convertToAnyBase(input1, base1));\n\n    // Test Case 2\n    int input2 = 15;\n    int base2 = 16;\n    String expected2 = \"F\";\n    assertEquals(expected2, DecimalToAnyBase.convertToAnyBase(input2, base2));\n\n    // Test Case 3\n    int input3 = 27;\n    int base3 = 3;\n    String expected3 = \"1000\";\n    assertEquals(expected3, DecimalToAnyBase.convertToAnyBase(input3, base3));\n}\n",
        "@Test\npublic void convertToAnyBaseTest() {\n    int decimalInput = 15;\n    int base = 2;\n    String expectedOutput = \"1111\";\n    String actualOutput = DecimalToAnyBase.convertToAnyBase(decimalInput, base);\n    assertEquals(expectedOutput, actualOutput);\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    // Test case 1: Convert decimal 10 to base 2\n    String result1 = DecimalToAnyBase.convertToAnyBase(10, 2);\n    assertEquals(\"1010\", result1);\n    \n    // Test case 2: Convert decimal 16 to base 10\n    String result2 = DecimalToAnyBase.convertToAnyBase(16, 10);\n    assertEquals(\"16\", result2);\n    \n    // Test case 3: Convert decimal 255 to base 16\n    String result3 = DecimalToAnyBase.convertToAnyBase(255, 16);\n    assertEquals(\"FF\", result3);\n}",
        "@Test\npublic void convertToAnyBaseTest() {\n    // Test case 1\n    int decInput1 = 10;\n    int base1 = 2;\n    String expected1 = \"1010\";\n    assertEquals(expected1, DecimalToAnyBase.convertToAnyBase(decInput1, base1));\n\n    // Test case 2\n    int decInput2 = 15;\n    int base2 = 16;\n    String expected2 = \"F\";\n    assertEquals(expected2, DecimalToAnyBase.convertToAnyBase(decInput2, base2));\n\n    // Test case 3\n    int decInput3 = 100;\n    int base3 = 8;\n    String expected3 = \"144\";\n    assertEquals(expected3, DecimalToAnyBase.convertToAnyBase(decInput3, base3));\n}",
        "@Test\n    public void convertToAnyBaseTest() {\n        assertEquals(\"10\", DecimalToAnyBase.convertToAnyBase(2, 2));\n        assertEquals(\"1010\", DecimalToAnyBase.convertToAnyBase(10, 2));\n        assertEquals(\"A\", DecimalToAnyBase.convertToAnyBase(10, 16));\n        assertEquals(\"19\", DecimalToAnyBase.convertToAnyBase(25, 16));\n        assertEquals(\"1000\", DecimalToAnyBase.convertToAnyBase(8, 10));\n    }",
        "@Test\npublic void convertToAnyBaseTest() {\n    int inp = 10;\n    int base = 2;\n    String expected = \"1010\";\n    \n    String result = DecimalToAnyBase.convertToAnyBase(inp, base);\n    \n    assertEquals(expected, result);\n}",
        "@Test\n    public void convertToAnyBaseTest() {\n        int input = 123;\n        int base = 8;\n        String expected = \"173\";\n        String actual = DecimalToAnyBase.convertToAnyBase(input, base);\n        assertEquals(expected, actual);\n    }",
        "@Test\npublic void convertToAnyBaseTest() {\n    int decInput = 123;\n    int base = 2;\n    \n    String expected = \"1111011\";\n    String actual = DecimalToAnyBase.convertToAnyBase(decInput, base);\n    \n    assertEquals(expected, actual);\n}",
        "package com.thealgorithms.conversions;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DecimalToAnyBaseTest {\n    @Test\n    public void convertToAnyBaseTest() {\n        // Test Case 1\n        int decInput1 = 10;\n        int base1 = 2;\n        String expected1 = \"1010\";\n        assertEquals(expected1, DecimalToAnyBase.convertToAnyBase(decInput1, base1));\n\n        // Test Case 2\n        int decInput2 = 16;\n        int base2 = 8;\n        String expected2 = \"20\";\n        assertEquals(expected2, DecimalToAnyBase.convertToAnyBase(decInput2, base2));\n\n        // Test Case 3\n        int decInput3 = 255;\n        int base3 = 16;\n        String expected3 = \"FF\";\n        assertEquals(expected3, DecimalToAnyBase.convertToAnyBase(decInput3, base3));\n    }\n}"
    ]
}
{
    "project_name": "Java",
    "file_name": "TwinPrime.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/TwinPrime.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * This method returns twin prime of the integer value passed as argument\n     *\n     * @param input_number Integer value of which twin prime is to be found\n     * @return (number + 2) if number and (number + 2) are prime, -1 otherwise\n     */",
    "source_code": "\nstatic int getTwinPrime(int inputNumber) {\n\n    // if inputNumber and (inputNumber + 2) are both prime\n    // then return (inputNumber + 2) as a result\n    if (PrimeCheck.isPrime(inputNumber) && PrimeCheck.isPrime(inputNumber + 2)) {\n        return inputNumber + 2;\n    }\n    // if any one from inputNumber and (inputNumber + 2) or if both of them are not prime\n    // then return -1 as a result\n    return -1;\n}\n",
    "class_name": "TwinPrime",
    "method_name": "getTwinPrime",
    "arguments": [
        "int inputNumber"
    ],
    "generate_test": [
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        assertEquals(3, TwinPrime.getTwinPrime(1));\n        assertEquals(5, TwinPrime.getTwinPrime(3));\n        assertEquals(11, TwinPrime.getTwinPrime(7));\n        assertEquals(-1, TwinPrime.getTwinPrime(8));\n    }\n}",
        "@Test\npublic void getTwinPrimeTest() {\n    // Test case 1: inputNumber is a twin prime\n    int result1 = TwinPrime.getTwinPrime(3);\n    assertEquals(5, result1);\n    \n    // Test case 2: inputNumber is not a twin prime\n    int result2 = TwinPrime.getTwinPrime(7);\n    assertEquals(-1, result2);\n    \n    // Test case 3: inputNumber + 2 is not prime\n    int result3 = TwinPrime.getTwinPrime(11);\n    assertEquals(-1, result3);\n    \n    // Test case 4: inputNumber and inputNumber + 2 are both prime\n    int result4 = TwinPrime.getTwinPrime(17);\n    assertEquals(19, result4);\n}",
        "@Test\npublic void getTwinPrimeTest() {\n    // Test case 1: inputNumber is a twin prime\n    int result1 = TwinPrime.getTwinPrime(3);\n    assertEquals(5, result1, \"Incorrect twin prime for inputNumber 3\");\n\n    // Test case 2: inputNumber is not a twin prime\n    int result2 = TwinPrime.getTwinPrime(7);\n    assertEquals(-1, result2, \"Incorrect twin prime for inputNumber 7\");\n\n    // Test case 3: inputNumber is negative\n    int result3 = TwinPrime.getTwinPrime(-1);\n    assertEquals(-1, result3, \"Incorrect twin prime for inputNumber -1\");\n}",
        "@Test\npublic void getTwinPrimeTest() {\n    // Test case 1: inputNumber is a twin prime\n    int result1 = TwinPrime.getTwinPrime(3);\n    assertEquals(5, result1, \"Input number is a twin prime\");\n\n    // Test case 2: inputNumber is not a twin prime\n    int result2 = TwinPrime.getTwinPrime(7);\n    assertEquals(-1, result2, \"Input number is not a twin prime\");\n\n    // Test case 3: inputNumber is not a prime\n    int result3 = TwinPrime.getTwinPrime(4);\n    assertEquals(-1, result3, \"Input number is not a prime\");\n\n    // Test case 4: inputNumber and (inputNumber+2) are both prime\n    int result4 = TwinPrime.getTwinPrime(5);\n    assertEquals(7, result4, \"Input number and inputNumber+2 are twin primes\");\n}",
        "@Test\npublic void getTwinPrimeTest() {\n  // Test case: inputNumber is a twin prime\n  int result1 = TwinPrime.getTwinPrime(3);\n  assertEquals(5, result1, \"Input: 3, Expected Output: 5\");\n  \n  // Test case: inputNumber is not a twin prime\n  int result2 = TwinPrime.getTwinPrime(7);\n  assertEquals(-1, result2, \"Input: 7, Expected Output: -1\");\n  \n  // Test case: inputNumber is not a prime\n  int result3 = TwinPrime.getTwinPrime(4);\n  assertEquals(-1, result3, \"Input: 4, Expected Output: -1\");\n  \n  // Test case: inputNumber is negative\n  int result4 = TwinPrime.getTwinPrime(-5);\n  assertEquals(-1, result4, \"Input: -5, Expected Output: -1\");\n}",
        "@Test\npublic void getTwinPrimeTest() {\n    int result = TwinPrime.getTwinPrime(3);\n    assertEquals(5, result);\n    \n    result = TwinPrime.getTwinPrime(7);\n    assertEquals(9, result);\n    \n    result = TwinPrime.getTwinPrime(17);\n    assertEquals(19, result);\n    \n    result = TwinPrime.getTwinPrime(23);\n    assertEquals(-1, result);\n    \n    result = TwinPrime.getTwinPrime(29);\n    assertEquals(-1, result);\n}",
        "@Test\npublic void getTwinPrimeTest() {\n    int inputNumber = 5;\n    int expectedOutput = 7;\n    int actualOutput = TwinPrime.getTwinPrime(inputNumber);\n    assertEquals(expectedOutput, actualOutput);\n}",
        "@Test\npublic void getTwinPrimeTest() {\n    // Both inputNumber and inputNumber + 2 are prime numbers\n    assertEquals(5, TwinPrime.getTwinPrime(3)); // Expected: (3 + 2) = 5\n    \n    // Only inputNumber or inputNumber + 2 is prime, not both\n    assertEquals(-1, TwinPrime.getTwinPrime(7)); // Expected: -1\n    \n    // Both inputNumber and inputNumber + 2 are not prime numbers\n    assertEquals(-1, TwinPrime.getTwinPrime(9)); // Expected: -1\n}",
        "@Test\npublic void getTwinPrimeTest() {\n    int result = TwinPrime.getTwinPrime(3);\n    assertEquals(5, result);\n    result = TwinPrime.getTwinPrime(17);\n    assertEquals(19, result);\n    result = TwinPrime.getTwinPrime(7);\n    assertEquals(-1, result);\n}",
        "@Test\npublic void getTwinPrimeTest() {\n    assertEquals(3, TwinPrime.getTwinPrime(1));\n    assertEquals(11, TwinPrime.getTwinPrime(7));\n    assertEquals(-1, TwinPrime.getTwinPrime(3));\n    assertEquals(5, TwinPrime.getTwinPrime(3));\n    assertEquals(-1, TwinPrime.getTwinPrime(10));\n}"
    ]
}
Source code: 


static int getTwinPrime(int inputNumber) {

    // if inputNumber and (inputNumber + 2) are both prime
    // then return (inputNumber + 2) as a result
    if (PrimeCheck.isPrime(inputNumber) && PrimeCheck.isPrime(inputNumber + 2)) {
        return inputNumber + 2;
    }
    // if any one from inputNumber and (inputNumber + 2) or if both of them are not prime
    // then return -1 as a result
    return -1;
}



No.1 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TwinPrimeTest {
    @Test
    public void getTwinPrimeTest() {
        assertEquals(3, TwinPrime.getTwinPrime(1));
        assertEquals(5, TwinPrime.getTwinPrime(3));
        assertEquals(11, TwinPrime.getTwinPrime(7));
        assertEquals(-1, TwinPrime.getTwinPrime(8));
    }
}


No.2 generated result --------------------------

@Test
public void getTwinPrimeTest() {
    // Test case 1: inputNumber is a twin prime
    int result1 = TwinPrime.getTwinPrime(3);
    assertEquals(5, result1);
    
    // Test case 2: inputNumber is not a twin prime
    int result2 = TwinPrime.getTwinPrime(7);
    assertEquals(-1, result2);
    
    // Test case 3: inputNumber + 2 is not prime
    int result3 = TwinPrime.getTwinPrime(11);
    assertEquals(-1, result3);
    
    // Test case 4: inputNumber and inputNumber + 2 are both prime
    int result4 = TwinPrime.getTwinPrime(17);
    assertEquals(19, result4);
}


No.3 generated result --------------------------

@Test
public void getTwinPrimeTest() {
    // Test case 1: inputNumber is a twin prime
    int result1 = TwinPrime.getTwinPrime(3);
    assertEquals(5, result1, "Incorrect twin prime for inputNumber 3");

    // Test case 2: inputNumber is not a twin prime
    int result2 = TwinPrime.getTwinPrime(7);
    assertEquals(-1, result2, "Incorrect twin prime for inputNumber 7");

    // Test case 3: inputNumber is negative
    int result3 = TwinPrime.getTwinPrime(-1);
    assertEquals(-1, result3, "Incorrect twin prime for inputNumber -1");
}


No.4 generated result --------------------------

@Test
public void getTwinPrimeTest() {
    // Test case 1: inputNumber is a twin prime
    int result1 = TwinPrime.getTwinPrime(3);
    assertEquals(5, result1, "Input number is a twin prime");

    // Test case 2: inputNumber is not a twin prime
    int result2 = TwinPrime.getTwinPrime(7);
    assertEquals(-1, result2, "Input number is not a twin prime");

    // Test case 3: inputNumber is not a prime
    int result3 = TwinPrime.getTwinPrime(4);
    assertEquals(-1, result3, "Input number is not a prime");

    // Test case 4: inputNumber and (inputNumber+2) are both prime
    int result4 = TwinPrime.getTwinPrime(5);
    assertEquals(7, result4, "Input number and inputNumber+2 are twin primes");
}


No.5 generated result --------------------------

@Test
public void getTwinPrimeTest() {
  // Test case: inputNumber is a twin prime
  int result1 = TwinPrime.getTwinPrime(3);
  assertEquals(5, result1, "Input: 3, Expected Output: 5");
  
  // Test case: inputNumber is not a twin prime
  int result2 = TwinPrime.getTwinPrime(7);
  assertEquals(-1, result2, "Input: 7, Expected Output: -1");
  
  // Test case: inputNumber is not a prime
  int result3 = TwinPrime.getTwinPrime(4);
  assertEquals(-1, result3, "Input: 4, Expected Output: -1");
  
  // Test case: inputNumber is negative
  int result4 = TwinPrime.getTwinPrime(-5);
  assertEquals(-1, result4, "Input: -5, Expected Output: -1");
}


No.6 generated result --------------------------

@Test
public void getTwinPrimeTest() {
    int result = TwinPrime.getTwinPrime(3);
    assertEquals(5, result);
    
    result = TwinPrime.getTwinPrime(7);
    assertEquals(9, result);
    
    result = TwinPrime.getTwinPrime(17);
    assertEquals(19, result);
    
    result = TwinPrime.getTwinPrime(23);
    assertEquals(-1, result);
    
    result = TwinPrime.getTwinPrime(29);
    assertEquals(-1, result);
}


No.7 generated result --------------------------

@Test
public void getTwinPrimeTest() {
    int inputNumber = 5;
    int expectedOutput = 7;
    int actualOutput = TwinPrime.getTwinPrime(inputNumber);
    assertEquals(expectedOutput, actualOutput);
}


No.8 generated result --------------------------

@Test
public void getTwinPrimeTest() {
    // Both inputNumber and inputNumber + 2 are prime numbers
    assertEquals(5, TwinPrime.getTwinPrime(3)); // Expected: (3 + 2) = 5
    
    // Only inputNumber or inputNumber + 2 is prime, not both
    assertEquals(-1, TwinPrime.getTwinPrime(7)); // Expected: -1
    
    // Both inputNumber and inputNumber + 2 are not prime numbers
    assertEquals(-1, TwinPrime.getTwinPrime(9)); // Expected: -1
}


No.9 generated result --------------------------

@Test
public void getTwinPrimeTest() {
    int result = TwinPrime.getTwinPrime(3);
    assertEquals(5, result);
    result = TwinPrime.getTwinPrime(17);
    assertEquals(19, result);
    result = TwinPrime.getTwinPrime(7);
    assertEquals(-1, result);
}


No.10 generated result --------------------------

@Test
public void getTwinPrimeTest() {
    assertEquals(3, TwinPrime.getTwinPrime(1));
    assertEquals(11, TwinPrime.getTwinPrime(7));
    assertEquals(-1, TwinPrime.getTwinPrime(3));
    assertEquals(5, TwinPrime.getTwinPrime(3));
    assertEquals(-1, TwinPrime.getTwinPrime(10));
}



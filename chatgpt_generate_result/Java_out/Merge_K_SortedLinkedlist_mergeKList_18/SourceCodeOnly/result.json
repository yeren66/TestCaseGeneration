{
    "project_name": "Java",
    "file_name": "Merge_K_SortedLinkedlist.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/Merge_K_SortedLinkedlist.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * This function merge K sorted LinkedList\n     *\n     * @param a array of LinkedList\n     * @param N size of array\n     * @return node\n     */",
    "source_code": "\nNode mergeKList(Node[] a, int N) {\n    // Min Heap\n    PriorityQueue<Node> min = new PriorityQueue<>(Comparator.comparingInt(x -> x.data));\n\n    // adding head of all linkedList in min heap\n    min.addAll(Arrays.asList(a).subList(0, N));\n\n    // Make new head among smallest heads in K linkedList\n    Node head = min.poll();\n    min.add(head.next);\n    Node curr = head;\n\n    // merging LinkedList\n    while (!min.isEmpty()) {\n        Node temp = min.poll();\n        curr.next = temp;\n        curr = temp;\n\n        // Add Node in min Heap only if temp.next is not null\n        if (temp.next != null) {\n            min.add(temp.next);\n        }\n    }\n\n    return head;\n}\n",
    "class_name": "Merge_K_SortedLinkedlist",
    "method_name": "mergeKList",
    "arguments": [
        "Node a",
        "int N"
    ],
    "generate_test": [
        "@Test\npublic void mergeKListTest() {\n    // Create LinkedLists\n    LinkedList<Integer> list1 = new LinkedList<>();\n    list1.add(1);\n    list1.add(4);\n    list1.add(5);\n\n    LinkedList<Integer> list2 = new LinkedList<>();\n    list2.add(1);\n    list2.add(3);\n    list2.add(4);\n\n    LinkedList<Integer> list3 = new LinkedList<>();\n    list3.add(2);\n    list3.add(6);\n\n    // Merge LinkedLists\n    LinkedList<Integer>[] linkedLists = new LinkedList[]{list1, list2, list3};\n    Merge_K_SortedLinkedlist merge = new Merge_K_SortedLinkedlist();\n    Node result = merge.mergeKList(linkedLists, linkedLists.length);\n\n    // Assert the merged list is correct\n    LinkedList<Integer> expectedResult = new LinkedList<>();\n    expectedResult.add(1);\n    expectedResult.add(1);\n    expectedResult.add(2);\n    expectedResult.add(3);\n    expectedResult.add(4);\n    expectedResult.add(4);\n    expectedResult.add(5);\n    expectedResult.add(6);\n\n    LinkedList<Integer> actualResult = new LinkedList<>();\n    while (result != null) {\n        actualResult.add(result.data);\n        result = result.next;\n    }\n\n    assertEquals(expectedResult, actualResult);\n}",
        "@Test\n    public void mergeKListTest() {\n        // Creating the input linked lists\n        Node[] lists = new Node[3];\n        \n        lists[0] = new Node(1);\n        lists[0].next = new Node(4);\n        lists[0].next.next = new Node(5);\n        \n        lists[1] = new Node(1);\n        lists[1].next = new Node(3);\n        lists[1].next.next = new Node(4);\n        \n        lists[2] = new Node(2);\n        lists[2].next = new Node(6);\n        \n        // Calling the mergeKLists method\n        Node result = mergeKList(lists, 3);\n        \n        // asserting the result\n        assertEquals(1, result.data);\n        assertEquals(1, result.next.data);\n        assertEquals(2, result.next.next.data);\n        assertEquals(3, result.next.next.next.data);\n        assertEquals(4, result.next.next.next.next.data);\n        assertEquals(4, result.next.next.next.next.next.data);\n        assertEquals(5, result.next.next.next.next.next.next.data);\n        assertEquals(6, result.next.next.next.next.next.next.next.data);\n        assertNull(result.next.next.next.next.next.next.next.next);\n    }",
        "@Test\npublic void mergeKListTest() {\n    // Create the input linked lists\n    Node[] lists = new Node[3];\n    \n    lists[0] = new Node(1);\n    lists[0].next = new Node(4);\n    lists[0].next.next = new Node(5);\n    \n    lists[1] = new Node(1);\n    lists[1].next = new Node(3);\n    lists[1].next.next = new Node(4);\n    \n    lists[2] = new Node(2);\n    lists[2].next = new Node(6);\n    \n    // Call the mergeKList method\n    Merge_K_SortedLinkedlist merge = new Merge_K_SortedLinkedlist();\n    Node result = merge.mergeKList(lists, 3);\n    \n    // Assert the result\n    assertEquals(1, result.data);\n    assertEquals(1, result.next.data);\n    assertEquals(2, result.next.next.data);\n    assertEquals(3, result.next.next.next.data);\n    assertEquals(4, result.next.next.next.next.data);\n    assertEquals(4, result.next.next.next.next.next.data);\n    assertEquals(5, result.next.next.next.next.next.next.data);\n    assertEquals(6, result.next.next.next.next.next.next.next.data);\n    assertNull(result.next.next.next.next.next.next.next.next);\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n    @Test\n    public void mergeKListTest() {\n        Node[] input = new Node[3];\n        input[0] = new Node(1);\n        input[0].next = new Node(4);\n        input[0].next.next = new Node(5);\n\n        input[1] = new Node(1);\n        input[1].next = new Node(3);\n        input[1].next.next = new Node(4);\n\n        input[2] = new Node(2);\n        input[2].next = new Node(6);\n\n        Merge_K_SortedLinkedlist merge = new Merge_K_SortedLinkedlist();\n\n        Node result = merge.mergeKList(input, 3);\n\n        // Asserting the expected merged LinkedList\n        assertEquals(1, result.data);\n        assertEquals(1, result.next.data);\n        assertEquals(2, result.next.next.data);\n        assertEquals(3, result.next.next.next.data);\n        assertEquals(4, result.next.next.next.next.data);\n        assertEquals(4, result.next.next.next.next.next.data);\n        assertEquals(5, result.next.next.next.next.next.next.data);\n        assertEquals(6, result.next.next.next.next.next.next.next.data);\n        assertNull(result.next.next.next.next.next.next.next.next);\n    }\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n    @Test\n    public void mergeKListTest() {\n        // Create the input linked lists\n        Node[] lists = new Node[3];\n\n        // Construct the linked list [1->4->5]\n        lists[0] = new Node(1);\n        lists[0].next = new Node(4);\n        lists[0].next.next = new Node(5);\n\n        // Construct the linked list [1->3->4]\n        lists[1] = new Node(1);\n        lists[1].next = new Node(3);\n        lists[1].next.next = new Node(4);\n\n        // Construct the linked list [2->6]\n        lists[2] = new Node(2);\n        lists[2].next = new Node(6);\n\n        // Merge the linked lists using mergeKList method\n        Merge_K_SortedLinkedlist mergeObj = new Merge_K_SortedLinkedlist();\n        Node result = mergeObj.mergeKList(lists, 3);\n\n        // Verify the merged linked list\n        int[] expected = {1, 1, 2, 3, 4, 4, 5, 6};\n        int i = 0;\n        while(result != null){\n            assertEquals(expected[i++], result.data);\n            result = result.next;\n        }\n    }\n}",
        "@Test\npublic void mergeKListTest() {\n    Node[] a = new Node[3];\n    int N = 3;\n\n    // Creating linked lists\n    a[0] = new Node(1);\n    a[0].next = new Node(4);\n    a[0].next.next = new Node(5);\n\n    a[1] = new Node(1);\n    a[1].next = new Node(3);\n    a[1].next.next = new Node(4);\n\n    a[2] = new Node(2);\n    a[2].next = new Node(6);\n\n    Merge_K_SortedLinkedlist obj = new Merge_K_SortedLinkedlist();\n    Node mergedList = obj.mergeKList(a, N);\n\n    // Assertions\n    assertEquals(1, mergedList.data);\n    assertEquals(1, mergedList.next.data);\n    assertEquals(2, mergedList.next.next.data);\n    assertEquals(3, mergedList.next.next.next.data);\n    assertEquals(4, mergedList.next.next.next.next.data);\n    assertEquals(4, mergedList.next.next.next.next.next.data);\n    assertEquals(5, mergedList.next.next.next.next.next.next.data);\n    assertEquals(6, mergedList.next.next.next.next.next.next.next.data);\n    assertNull(mergedList.next.next.next.next.next.next.next.next);\n}",
        "@Test\npublic void mergeKListTest() {\n    // Create test nodes\n    Node node1 = new Node(1);\n    Node node2 = new Node(2);\n    Node node3 = new Node(3);\n    Node node4 = new Node(4);\n    \n    // Set next pointers\n    node1.next = node2;\n    node2.next = node3;\n    node3.next = node4;\n    \n    // Create array of nodes\n    Node[] nodes = new Node[]{node1, node2, node3, node4};\n    \n    // Call the function to be tested\n    Node result = mergeKList(nodes, 4);\n    \n    // Expected output\n    Node expected = new Node(1);\n    expected.next = new Node(2);\n    expected.next.next = new Node(3);\n    expected.next.next.next = new Node(4);\n    \n    // Assertion\n    assertEquals(expected, result);\n}",
        "// Step 1: Create test data\nNode[] a = new Node[3];\na[0] = new Node(1);\na[0].next = new Node(4);\na[0].next.next = new Node(5);\n\na[1] = new Node(1);\na[1].next = new Node(3);\na[1].next.next = new Node(4);\n\na[2] = new Node(2);\na[2].next = new Node(6);\n\n// Step 2: Invoke the method being tested\nMerge_K_SortedLinkedlist merge = new Merge_K_SortedLinkedlist();\nNode result = merge.mergeKList(a, 3);\n\n// Step 3: Assert the expected output\nint[] expected = {1, 1, 2, 3, 4, 4, 5, 6};\nint i = 0;\nwhile (result != null) {\n    assertEquals(expected[i++], result.data);\n    result = result.next;\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n    @Test\n    public void mergeKListTest() {\n        // Create test data\n        Node[] a = new Node[3];\n        a[0] = new Node(1);\n        a[0].next = new Node(4);\n        a[0].next.next = new Node(5);\n\n        a[1] = new Node(1);\n        a[1].next = new Node(3);\n        a[1].next.next = new Node(4);\n\n        a[2] = new Node(2);\n        a[2].next = new Node(6);\n\n        // Call the function to be tested\n        Merge_K_SortedLinkedlist mergeKList = new Merge_K_SortedLinkedlist();\n        Node result = mergeKList.mergeKList(a, 3);\n\n        // Verify the result\n        assertEquals(1, result.data);\n        assertEquals(1, result.next.data);\n        assertEquals(2, result.next.next.data);\n        assertEquals(3, result.next.next.next.data);\n        assertEquals(4, result.next.next.next.next.data);\n        assertEquals(4, result.next.next.next.next.next.data);\n        assertEquals(5, result.next.next.next.next.next.next.data);\n        assertEquals(6, result.next.next.next.next.next.next.next.data);\n        assertNull(result.next.next.next.next.next.next.next.next);\n    }\n}",
        "Node[] a = new Node[3]; // Assuming 3 linked lists\n// Creating sample linked lists for testing\nNode head1 = new Node(1);\nhead1.next = new Node(4);\nhead1.next.next = new Node(5);\na[0] = head1;\n\nNode head2 = new Node(1);\nhead2.next = new Node(3);\nhead2.next.next = new Node(4);\na[1] = head2;\n\nNode head3 = new Node(2);\nhead3.next = new Node(6);\na[2] = head3;\n\nMerge_K_SortedLinkedlist obj = new Merge_K_SortedLinkedlist();\nNode mergedListHead = obj.mergeKList(a, 3);\n\n// Asserting the merged linked list\nassertEquals(1, mergedListHead.data);\nassertEquals(1, mergedListHead.next.data);\nassertEquals(2, mergedListHead.next.next.data);\nassertEquals(3, mergedListHead.next.next.next.data);\nassertEquals(4, mergedListHead.next.next.next.next.data);\nassertEquals(4, mergedListHead.next.next.next.next.next.data);\nassertEquals(5, mergedListHead.next.next.next.next.next.next.data);\nassertEquals(6, mergedListHead.next.next.next.next.next.next.next.data);\nassertTrue(mergedListHead.next.next.next.next.next.next.next.next == null);"
    ]
}
{
    "project_name": "Java",
    "file_name": "NodeStack.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/stacks/NodeStack.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.stacks",
    "docstring": "/**\n     * Put a value onto the stack.\n     *\n     * @param item : value to be put on the stack.\n     */",
    "source_code": "\npublic void push(Item item) {\n    NodeStack<Item> newNs = new NodeStack<Item>(item);\n\n    if (this.isEmpty()) {\n        NodeStack.setHead(new NodeStack<>(item));\n        newNs.setNext(null);\n        newNs.setPrevious(null);\n    } else {\n        newNs.setPrevious(NodeStack.head);\n        NodeStack.head.setNext(newNs);\n        NodeStack.setHead(newNs);\n    }\n\n    NodeStack.setSize(NodeStack.getSize() + 1);\n}\n",
    "class_name": "NodeStack",
    "method_name": "push",
    "arguments": [
        "Item item"
    ],
    "generate_test": [
        "@Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n        \n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        \n        assertEquals(3, stack.size());\n    }",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<>();\n    stack.push(3);\n    stack.push(4);\n    stack.push(5);\n\n    assertEquals(5, stack.peek());\n    assertEquals(3, stack.size());\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<>();\n    stack.push(3);\n    stack.push(4);\n    stack.push(5);\n    assertEquals(3, stack.size());\n    assertEquals(5, stack.pop());\n    stack.push(1);\n    stack.push(8);\n    assertEquals(4, stack.size());\n    assertEquals(8, stack.peek());\n    assertEquals(8, stack.pop());\n    assertEquals(1, stack.pop());\n    assertEquals(4, stack.pop());\n    assertEquals(3, stack.pop());\n    assertTrue(stack.isEmpty());\n}",
        "@Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<Integer>();\n\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n\n        assertFalse(stack.isEmpty());\n        assertEquals(3, stack.size());\n        assertEquals(3, stack.peek());\n    }",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<Integer>();\n    \n    stack.push(3);\n    stack.push(4);\n    stack.push(5);\n    \n    assertEquals(3, stack.size());\n    assertEquals(5, stack.peek());\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<>();\n    stack.push(3);\n    stack.push(4);\n    stack.push(5);\n    stack.push(1);\n    stack.push(8);\n    assertEquals(5, stack.size());\n    assertFalse(stack.isEmpty());\n}",
        "@Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<Integer>();\n\n        // Test push with empty stack\n        stack.push(1);\n        assertTrue(!stack.isEmpty());\n        assertEquals(1, stack.size());\n\n        // Test push with non-empty stack\n        stack.push(2);\n        assertEquals(2, stack.peek());\n        assertEquals(2, stack.size());\n        assertFalse(stack.isEmpty());\n    }",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<Integer>();\n    stack.push(1);\n    stack.push(2);\n    stack.push(3);\n    assertEquals(3, stack.size());\n    assertFalse(stack.isEmpty());\n    // additional assertions for stack content\n    //...\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<Integer>();\n\n    stack.push(3);\n    stack.push(4);\n    stack.push(5);\n\n    String expectedOutput = \"5\\n4\\n3\\n\";\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    System.setOut(new PrintStream(outputStream));\n    stack.print();\n    String actualOutput = outputStream.toString().trim();\n    assertEquals(expectedOutput, actualOutput);\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<Integer>();\n    \n    // Pushing values onto the stack\n    stack.push(3);\n    stack.push(4);\n    stack.push(5);\n    \n    // Check if the stack contains the correct elements\n    assertEquals(3, stack.size());\n    assertEquals(5, stack.peek());\n    \n    // Print the contents of the stack\n    System.out.println(\"Testing :\");\n    stack.print(); // prints : 5 4 3\n}"
    ]
}
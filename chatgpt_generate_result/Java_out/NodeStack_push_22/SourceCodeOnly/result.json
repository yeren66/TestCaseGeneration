{
    "project_name": "Java",
    "file_name": "NodeStack.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/stacks/NodeStack.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.stacks",
    "docstring": "/**\n     * Put a value onto the stack.\n     *\n     * @param item : value to be put on the stack.\n     */",
    "source_code": "\npublic void push(Item item) {\n    NodeStack<Item> newNs = new NodeStack<Item>(item);\n\n    if (this.isEmpty()) {\n        NodeStack.setHead(new NodeStack<>(item));\n        newNs.setNext(null);\n        newNs.setPrevious(null);\n    } else {\n        newNs.setPrevious(NodeStack.head);\n        NodeStack.head.setNext(newNs);\n        NodeStack.setHead(newNs);\n    }\n\n    NodeStack.setSize(NodeStack.getSize() + 1);\n}\n",
    "class_name": "NodeStack",
    "method_name": "push",
    "arguments": [
        "Item item"
    ],
    "generate_test": [
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n\n        stack.push(5);\n        assertEquals(1, NodeStack.getSize());\n        assertEquals(5, NodeStack.getHead().getItem());\n\n        stack.push(10);\n        assertEquals(2, NodeStack.getSize());\n        assertEquals(10, NodeStack.getHead().getItem());\n\n        stack.push(15);\n        assertEquals(3, NodeStack.getSize());\n        assertEquals(15, NodeStack.getHead().getItem());\n    }\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<>();\n    assertEquals(true, stack.isEmpty());\n    \n    stack.push(1);\n    assertEquals(false, stack.isEmpty());\n    assertEquals(1, stack.getSize());\n    assertEquals(1, stack.peek());\n    \n    stack.push(2);\n    assertEquals(2, stack.peek());\n    assertEquals(2, stack.getSize());\n    \n    stack.push(3);\n    assertEquals(3, stack.peek());\n    assertEquals(3, stack.getSize());\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n        stack.push(5);\n        \n        // Assert statements\n        assertEquals(1, NodeStack.getSize());\n        assertFalse(NodeStack.isEmpty());\n        assertEquals(5, NodeStack.top());\n    }\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<>();\n    stack.push(5);\n    assertEquals(1, NodeStack.getSize());\n    assertEquals(5, NodeStack.head.getItem());\n    assertEquals(null, NodeStack.head.getPrevious());\n\n    NodeStack<Integer> stack2 = new NodeStack<>();\n    stack2.push(10);\n    stack2.push(20);\n    assertEquals(2, NodeStack.getSize());\n    assertEquals(20, NodeStack.head.getItem());\n    assertEquals(10, NodeStack.head.getPrevious().getItem());\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<>();\n    stack.push(1); // Push an item to the stack\n    assertTrue(!stack.isEmpty()); // Check if the stack is not empty\n    assertEquals(1, stack.size()); // Check if the size of the stack is 1\n    // Add more assertions as needed to test the functionality of the push() method\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> ns = new NodeStack<>();\n    ns.push(1);\n    ns.push(2);\n    ns.push(3);\n    \n    assertEquals(3, ns.getSize());\n    assertEquals(3, ns.peek());\n    assertEquals(3, ns.pop());\n    assertEquals(2, ns.getSize());\n    assertEquals(2, ns.peek());\n    assertEquals(2, ns.pop());\n    assertEquals(1, ns.getSize());\n    assertEquals(1, ns.peek());\n    assertEquals(1, ns.pop());\n    assertTrue(ns.isEmpty());\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        // Create a new instance of NodeStack\n        NodeStack<String> stack = new NodeStack<>();\n\n        // Push an item onto the stack\n        stack.push(\"item1\");\n\n        // Add assertions to verify the push operation\n        assertEquals(1, NodeStack.getSize());\n        assertFalse(stack.isEmpty());\n    }\n}",
        "package com.thealgorithms.datastructures.stacks;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeStackTest {\n    @Test\n    public void pushTest() {\n        NodeStack<Integer> stack = new NodeStack<>();\n\n        // Test when the stack is empty\n        stack.push(1);\n        assertEquals(1, stack.getSize());\n\n        // Test when the stack is not empty\n        stack.push(2);\n        stack.push(3);\n        assertEquals(3, stack.getSize());\n    }\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<String> stack = new NodeStack<String>();\n    stack.push(\"A\");\n    assertEquals(1, NodeStack.getSize());\n    stack.push(\"B\");\n    assertEquals(2, NodeStack.getSize());\n    stack.push(\"C\");\n    assertEquals(3, NodeStack.getSize());\n    // Additional assertions for the specific functionality of the push() method\n}",
        "@Test\npublic void pushTest() {\n    NodeStack<Integer> stack = new NodeStack<>();\n    stack.push(5);\n    assertEquals(1, NodeStack.getSize());\n    assertEquals(5, NodeStack.peek());\n\n    stack.push(10);\n    assertEquals(2, NodeStack.getSize());\n    assertEquals(10, NodeStack.peek());\n\n    stack.push(15);\n    assertEquals(3, NodeStack.getSize());\n    assertEquals(15, NodeStack.peek());\n}"
    ]
}
{
    "project_name": "Java",
    "file_name": "CursorLinkedList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/CursorLinkedList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * @return the logical index of the element within the list , not the actual\n     * index of the [cursorSpace] array\n     */",
    "source_code": "\npublic int indexOf(T element) {\n    Objects.requireNonNull(element);\n    Node<T> iterator = cursorSpace[head];\n    for (int i = 0; i < count; i++) {\n        if (iterator.element.equals(element)) {\n            return i;\n        }\n        iterator = cursorSpace[iterator.next];\n    }\n\n    return -1;\n}\n",
    "class_name": "CursorLinkedList",
    "method_name": "indexOf",
    "arguments": [
        "T element"
    ],
    "generate_test": [
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    list.append(1);\n    list.append(2);\n    list.append(3);\n    \n    assertEquals(0, list.indexOf(1));\n    assertEquals(2, list.indexOf(3));\n    assertEquals(-1, list.indexOf(4));\n}",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    list.append(1);\n    list.append(2);\n    list.append(3);\n    \n    int index1 = list.indexOf(2);\n    assertEquals(1, index1);\n    \n    int index2 = list.indexOf(5);\n    assertEquals(-1, index2);\n    \n    int index3 = list.indexOf(1);\n    assertEquals(0, index3);\n}",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    // Append elements to the list\n    list.append(10);\n    list.append(20);\n    list.append(30);\n    list.append(40);\n    list.append(50);\n    \n    // Test for existing element\n    assertEquals(2, list.indexOf(30));\n    \n    // Test for non-existing element\n    assertEquals(-1, list.indexOf(100));\n    \n    // Test for empty list\n    CursorLinkedList<String> emptyList = new CursorLinkedList<>();\n    assertEquals(-1, emptyList.indexOf(\"test\"));\n}",
        "@Test\n    public void indexOfTest() {\n        CursorLinkedList<String> list = new CursorLinkedList<>();\n        list.append(\"apple\");\n        list.append(\"banana\");\n        list.append(\"orange\");\n\n        int indexApple = list.indexOf(\"apple\");\n        int indexBanana = list.indexOf(\"banana\");\n        int indexOrange = list.indexOf(\"orange\");\n\n        assertEquals(0, indexApple);\n        assertEquals(1, indexBanana);\n        assertEquals(2, indexOrange);\n\n        int indexNonexistent = list.indexOf(\"grape\");\n        assertEquals(-1, indexNonexistent);\n    }",
        "CursorLinkedList<Integer> list = new CursorLinkedList<>();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.append(4);\nlist.append(5);\n\nassertEquals(0, list.indexOf(1));\nassertEquals(2, list.indexOf(3));\nassertEquals(-1, list.indexOf(6));",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    \n    list.append(1);\n    list.append(2);\n    list.append(3);\n    \n    assertEquals(0, list.indexOf(1));\n    assertEquals(1, list.indexOf(2));\n    assertEquals(2, list.indexOf(3));\n    assertEquals(-1, list.indexOf(4));\n}",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<String> list = new CursorLinkedList<>();\n    \n    list.append(\"A\");\n    list.append(\"B\");\n    list.append(\"C\");\n    \n    assertEquals(0, list.indexOf(\"A\"));\n    assertEquals(1, list.indexOf(\"B\"));\n    assertEquals(2, list.indexOf(\"C\"));\n    assertEquals(-1, list.indexOf(\"D\"));\n}",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<String> list = new CursorLinkedList<>();\n    \n    list.append(\"apple\");\n    list.append(\"banana\");\n    list.append(\"orange\");\n    list.append(\"strawberry\");\n    \n    int index = list.indexOf(\"banana\");\n    \n    assertEquals(1, index);\n}",
        "@Test\npublic void indexOfTest() {\n  CursorLinkedList<Integer> list = new CursorLinkedList<>();\n  list.append(1);\n  list.append(2);\n  list.append(3);\n  \n  int index = list.indexOf(2);\n  \n  assertEquals(1, index);\n}",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<String> list = new CursorLinkedList<>();\n    list.append(\"apple\");\n    list.append(\"banana\");\n    list.append(\"orange\");\n\n    assertEquals(0, list.indexOf(\"apple\"));\n    assertEquals(1, list.indexOf(\"banana\"));\n    assertEquals(2, list.indexOf(\"orange\"));\n    assertEquals(-1, list.indexOf(\"grape\"));\n}"
    ]
}
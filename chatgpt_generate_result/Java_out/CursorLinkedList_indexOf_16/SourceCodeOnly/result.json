{
    "project_name": "Java",
    "file_name": "CursorLinkedList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/CursorLinkedList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * @return the logical index of the element within the list , not the actual\n     * index of the [cursorSpace] array\n     */",
    "source_code": "\npublic int indexOf(T element) {\n    Objects.requireNonNull(element);\n    Node<T> iterator = cursorSpace[head];\n    for (int i = 0; i < count; i++) {\n        if (iterator.element.equals(element)) {\n            return i;\n        }\n        iterator = cursorSpace[iterator.next];\n    }\n\n    return -1;\n}\n",
    "class_name": "CursorLinkedList",
    "method_name": "indexOf",
    "arguments": [
        "T element"
    ],
    "generate_test": [
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    list.add(10);\n    list.add(20);\n    list.add(30);\n\n    assertEquals(0, list.indexOf(10));\n    assertEquals(1, list.indexOf(20));\n    assertEquals(2, list.indexOf(30));\n    assertEquals(-1, list.indexOf(40));\n}",
        "public int indexOf(T element) {\n    Objects.requireNonNull(element);\n    Node<T> iterator = cursorSpace[head];\n    for (int i = 0; i < count; i++) {\n        if (iterator.element.equals(element)) {\n            return i;\n        }\n        iterator = cursorSpace[iterator.next];\n    }\n\n    return -1;\n}\n\n\npackage com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        CursorLinkedList<Integer> list = new CursorLinkedList<>();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n\n        int index = list.indexOf(2);\n        assertEquals(1, index);\n\n        int indexNotFound = list.indexOf(4);\n        assertEquals(-1, indexNotFound);\n    }\n}",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    list.add(10);\n    list.add(20);\n    list.add(30);\n    list.add(40);\n    \n    // Test case 1: element present at beginning\n    int index1 = list.indexOf(10);\n    assertEquals(0, index1);\n    \n    // Test case 2: element present in the middle\n    int index2 = list.indexOf(30);\n    assertEquals(2, index2);\n    \n    // Test case 3: element present at the end\n    int index3 = list.indexOf(40);\n    assertEquals(3, index3);\n    \n    // Test case 4: element not present\n    int index4 = list.indexOf(50);\n    assertEquals(-1, index4);\n}",
        "public void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    list.add(1);\n    list.add(2);\n    list.add(3);\n    \n    assertEquals(1, list.indexOf(2));\n    assertEquals(2, list.indexOf(3));\n    assertEquals(-1, list.indexOf(4));\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        CursorLinkedList<Integer> list = new CursorLinkedList<>();\n        list.add(10);\n        list.add(20);\n        list.add(30);\n\n        int index = list.indexOf(20);\n\n        assertEquals(1, index);\n    }\n}",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    list.add(10);\n    list.add(20);\n    list.add(30);\n    \n    int index = list.indexOf(20);\n    \n    assertEquals(1, index);\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        CursorLinkedList<Integer> list = new CursorLinkedList<>();\n        \n        list.add(5);\n        list.add(10);\n        list.add(15);\n        list.add(20);\n        \n        assertEquals(2, list.indexOf(15)); // check if index of 15 is correct\n        assertEquals(-1, list.indexOf(25)); // check if index of non-existing element is -1\n        assertEquals(-1, list.indexOf(null)); // check if index of null element is -1\n    }\n}",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    list.add(1);\n    list.add(2);\n    list.add(3);\n    list.add(4);\n    \n    int index1 = list.indexOf(2);\n    assertEquals(1, index1);\n    \n    int index2 = list.indexOf(5);\n    assertEquals(-1, index2);\n    \n    int index3 = list.indexOf(3);\n    assertEquals(2, index3);\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n    @Test\n    public void indexOfTest() {\n        CursorLinkedList<Integer> list = new CursorLinkedList<>();\n        list.add(10);\n        list.add(20);\n        list.add(30);\n        list.add(40);\n        \n        int index = list.indexOf(30);\n        assertEquals(2, index);\n        \n        index = list.indexOf(50);\n        assertEquals(-1, index);\n    }\n}",
        "assertEquals(2, list.indexOf(3));\nassertEquals(-1, list.indexOf(7));\nassertEquals(0, list.indexOf(1));"
    ]
}
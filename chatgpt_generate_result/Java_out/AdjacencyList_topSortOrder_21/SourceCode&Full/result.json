{
    "project_name": "Java",
    "file_name": "KahnsAlgorithm.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/graphs/KahnsAlgorithm.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.graphs",
    "docstring": "/**\n     * Returns an ArrayList with vertices arranged in topological order\n     */",
    "source_code": "\nArrayList<E> topSortOrder() {\n    calculateInDegree();\n    Queue<E> q = new LinkedList<E>();\n\n    for (E vertex : inDegree.keySet()) {\n        if (inDegree.get(vertex) == 0) {\n            q.add(vertex);\n        }\n    }\n\n    ArrayList<E> answer = new ArrayList<>();\n\n    while (!q.isEmpty()) {\n        E current = q.poll();\n        answer.add(current);\n        for (E adjacent : graph.getAdjacents(current)) {\n            inDegree.put(adjacent, inDegree.get(adjacent) - 1);\n            if (inDegree.get(adjacent) == 0) {\n                q.add(adjacent);\n            }\n        }\n    }\n\n    return answer;\n}\n",
    "class_name": "AdjacencyList",
    "method_name": "topSortOrder",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void topSortOrderTest() {\n    AdjacencyList<String> graph = new AdjacencyList<>();\n        graph.addEdge(\"a\", \"b\");\n        graph.addEdge(\"c\", \"a\");\n        graph.addEdge(\"a\", \"d\");\n        graph.addEdge(\"b\", \"d\");\n        graph.addEdge(\"c\", \"u\");\n        graph.addEdge(\"u\", \"b\");\n\n        TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n\n        ArrayList<String> expected = new ArrayList<>();\n        expected.add(\"c\");\n        expected.add(\"u\");\n        expected.add(\"a\");\n        expected.add(\"b\");\n        expected.add(\"d\");\n\n        ArrayList<String> actual = topSort.topSortOrder();\n\n        assertEquals(expected, actual);\n}",
        "@Test\npublic void topSortOrderTest() {\n    // Graph definition and initialization\n    AdjacencyList<String> graph = new AdjacencyList<>();\n    graph.addEdge(\"a\", \"b\");\n    graph.addEdge(\"c\", \"a\");\n    graph.addEdge(\"a\", \"d\");\n    graph.addEdge(\"b\", \"d\");\n    graph.addEdge(\"c\", \"u\");\n    graph.addEdge(\"u\", \"b\");\n\n    TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n\n    // Expected topological order\n    ArrayList<String> expectedOrder = new ArrayList<>();\n    expectedOrder.add(\"c\");\n    expectedOrder.add(\"u\");\n    expectedOrder.add(\"a\");\n    expectedOrder.add(\"b\");\n    expectedOrder.add(\"d\");\n\n    // Testing the topSortOrder() method\n    ArrayList<String> actualOrder = topSort.topSortOrder();\n    assertEquals(expectedOrder, actualOrder);\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdjacencyListTest {\n    @Test\n    public void topSortOrderTest() {\n        // Graph definition and initialization\n        AdjacencyList<String> graph = new AdjacencyList<>();\n        graph.addEdge(\"a\", \"b\");\n        graph.addEdge(\"c\", \"a\");\n        graph.addEdge(\"a\", \"d\");\n        graph.addEdge(\"b\", \"d\");\n        graph.addEdge(\"c\", \"u\");\n        graph.addEdge(\"u\", \"b\");\n\n        TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n\n        // Expected topological order\n        String[] expectedOrder = {\"c\", \"u\", \"a\", \"b\", \"d\"};\n\n        // Comparing the expected order with the actual order\n        ArrayList<String> actualOrder = topSort.topSortOrder();\n        assertArrayEquals(expectedOrder, actualOrder.toArray());\n    }\n}",
        "\n@Test\npublic void topSortOrderTest() {\n    AdjacencyList<String> graph = new AdjacencyList<>();\n    graph.addEdge(\"a\", \"b\");\n    graph.addEdge(\"c\", \"a\");\n    graph.addEdge(\"a\", \"d\");\n    graph.addEdge(\"b\", \"d\");\n    graph.addEdge(\"c\", \"u\");\n    graph.addEdge(\"u\", \"b\");\n\n    TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n\n    ArrayList<String> expectedResult = new ArrayList<>();\n    expectedResult.add(\"c\");\n    expectedResult.add(\"u\");\n    expectedResult.add(\"a\");\n    expectedResult.add(\"b\");\n    expectedResult.add(\"d\");\n\n    assertEquals(expectedResult, topSort.topSortOrder());\n}\n",
        "@Test\npublic void topSortOrderTest() {\n    // Graph definition and initialization\n    AdjacencyList<String> graph = new AdjacencyList<>();\n    graph.addEdge(\"a\", \"b\");\n    graph.addEdge(\"c\", \"a\");\n    graph.addEdge(\"a\", \"d\");\n    graph.addEdge(\"b\", \"d\");\n    graph.addEdge(\"c\", \"u\");\n    graph.addEdge(\"u\", \"b\");\n\n    TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n\n    // Expected Output\n    ArrayList<String> expected = new ArrayList<>();\n    expected.add(\"c\");\n    expected.add(\"u\");\n    expected.add(\"a\");\n    expected.add(\"b\");\n    expected.add(\"d\");\n\n    // Actual Output\n    ArrayList<String> actual = topSort.topSortOrder();\n\n    // Assertion\n    assertArrayEquals(expected.toArray(), actual.toArray());\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdjacencyListTest {\n    @Test\n    public void topSortOrderTest() {\n        AdjacencyList<String> graph = new AdjacencyList<>();\n        graph.addEdge(\"a\", \"b\");\n        graph.addEdge(\"c\", \"a\");\n        graph.addEdge(\"a\", \"d\");\n        graph.addEdge(\"b\", \"d\");\n        graph.addEdge(\"c\", \"u\");\n        graph.addEdge(\"u\", \"b\");\n        \n        TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n        \n        ArrayList<String> expectedResult = new ArrayList<>();\n        expectedResult.add(\"c\");\n        expectedResult.add(\"u\");\n        expectedResult.add(\"a\");\n        expectedResult.add(\"b\");\n        expectedResult.add(\"d\");\n        \n        ArrayList<String> actualResult = topSort.topSortOrder();\n        \n        assertIterableEquals(expectedResult, actualResult);\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdjacencyListTest {\n    @Test\n    public void topSortOrderTest() {\n        AdjacencyList<String> graph = new AdjacencyList<>();\n        graph.addEdge(\"a\", \"b\");\n        graph.addEdge(\"c\", \"a\");\n        graph.addEdge(\"a\", \"d\");\n        graph.addEdge(\"b\", \"d\");\n        graph.addEdge(\"c\", \"u\");\n        graph.addEdge(\"u\", \"b\");\n\n        TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n\n        assertIterableEquals(topSort.topSortOrder(), List.of(\"c\", \"u\", \"a\", \"b\", \"d\"));\n    }\n}",
        "TopologicalSort<String> topSort = new TopologicalSort<>(graph);\nArrayList<String> expected = new ArrayList<>();\nexpected.add(\"c\");\nexpected.add(\"u\");\nexpected.add(\"a\");\nexpected.add(\"b\");\nexpected.add(\"d\");\nArrayList<String> actual = topSort.topSortOrder();\nassertEquals(expected, actual);",
        "@Test\npublic void topSortOrderTest() {\n    // Graph definition and initialization\n    AdjacencyList<String> graph = new AdjacencyList<>();\n    graph.addEdge(\"a\", \"b\");\n    graph.addEdge(\"c\", \"a\");\n    graph.addEdge(\"a\", \"d\");\n    graph.addEdge(\"b\", \"d\");\n    graph.addEdge(\"c\", \"u\");\n    graph.addEdge(\"u\", \"b\");\n\n    TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n\n    // Expected output\n    ArrayList<String> expected = new ArrayList<>();\n    expected.add(\"c\");\n    expected.add(\"u\");\n    expected.add(\"a\");\n    expected.add(\"b\");\n    expected.add(\"d\");\n\n    // Verify if the expected output matches the output from topological sort algorithm\n    ArrayList<String> actual = topSort.topSortOrder();\n    assertEquals(expected, actual);\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdjacencyListTest {\n    @Test\n    public void topSortOrderTest() {\n        // Create a graph\n        AdjacencyList<String> graph = new AdjacencyList<>();\n        graph.addEdge(\"a\", \"b\");\n        graph.addEdge(\"c\", \"a\");\n        graph.addEdge(\"a\", \"d\");\n        graph.addEdge(\"b\", \"d\");\n        graph.addEdge(\"c\", \"u\");\n        graph.addEdge(\"u\", \"b\");\n\n        // Create a TopologicalSort object\n        TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n\n        // Call the topSortOrder method and get the result\n        ArrayList<String> result = topSort.topSortOrder();\n\n        // Verify the result\n        assertEquals(\"c\", result.get(0));\n        assertEquals(\"u\", result.get(1));\n        assertEquals(\"a\", result.get(2));\n        assertEquals(\"b\", result.get(3));\n        assertEquals(\"d\", result.get(4));\n    }\n}"
    ]
}
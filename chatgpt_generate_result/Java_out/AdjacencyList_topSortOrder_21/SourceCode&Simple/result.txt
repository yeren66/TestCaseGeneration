Source code: 


ArrayList<E> topSortOrder() {
    calculateInDegree();
    Queue<E> q = new LinkedList<E>();

    for (E vertex : inDegree.keySet()) {
        if (inDegree.get(vertex) == 0) {
            q.add(vertex);
        }
    }

    ArrayList<E> answer = new ArrayList<>();

    while (!q.isEmpty()) {
        E current = q.poll();
        answer.add(current);
        for (E adjacent : graph.getAdjacents(current)) {
            inDegree.put(adjacent, inDegree.get(adjacent) - 1);
            if (inDegree.get(adjacent) == 0) {
                q.add(adjacent);
            }
        }
    }

    return answer;
}



No.1 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AdjacencyListTest {
    @Test
    public void topSortOrderTest() {
        AdjacencyList<Integer> graph = new AdjacencyList<>();
        graph.addEdge(1, 2);
        graph.addEdge(1, 3);
        graph.addEdge(2, 3);
        graph.addEdge(2, 4);
        graph.addEdge(3, 4);
        graph.addEdge(4, 5);

        TopologicalSort<Integer> topSort = new TopologicalSort<>(graph);
        ArrayList<Integer> result = topSort.topSortOrder();

        ArrayList<Integer> expected = new ArrayList<>();
        expected.add(1);
        expected.add(2);
        expected.add(3);
        expected.add(4);
        expected.add(5);

        assertEquals(expected, result);
    }
}


No.2 generated result --------------------------

TopologicalSort<String> topologicalSort = new TopologicalSort<String>(graph);
ArrayList<String> expectedResult = new ArrayList<String>();
expectedResult.add("A");
expectedResult.add("C");
expectedResult.add("B");

ArrayList<String> actualResult = topologicalSort.topSortOrder();

assertEquals(expectedResult, actualResult);


No.3 generated result --------------------------


@Test
public void topSortOrderTest() {
    AdjacencyList<String> graph = new AdjacencyList<>();
    graph.addEdge("A", "B");
    graph.addEdge("B", "C");
    graph.addEdge("B", "D");
    graph.addEdge("C", "E");
    graph.addEdge("D", "E");
    graph.addEdge("E", "F");
    graph.addEdge("F", "G");

    TopologicalSort<String> topSort = new TopologicalSort<>(graph);
    ArrayList<String> expectedResult = new ArrayList<>();
    expectedResult.add("A");
    expectedResult.add("B");
    expectedResult.add("C");
    expectedResult.add("D");
    expectedResult.add("E");
    expectedResult.add("F");
    expectedResult.add("G");

    ArrayList<String> actualResult = topSort.topSortOrder();

    assertEquals(expectedResult, actualResult);
}



No.4 generated result --------------------------

@Test
public void topSortOrderTest() {
    // Create an instance of AdjacencyList
    AdjacencyList<Integer> adjList = new AdjacencyList<>();

    // Add vertices and edges to the adjacency list
    adjList.addEdge(1, 2);
    adjList.addEdge(1, 3);
    adjList.addEdge(2, 3);
    adjList.addEdge(3, 4);
    adjList.addEdge(3, 5);
    adjList.addEdge(4, 5);

    // Create an instance of TopologicalSort
    TopologicalSort<Integer> topSort = new TopologicalSort<>(adjList);

    // Call the calculateInDegree() method
    topSort.calculateInDegree();

    // Call the topSortOrder() method and store the result
    ArrayList<Integer> result = topSort.topSortOrder();

    // Create the expected output
    ArrayList<Integer> expected = new ArrayList<>();
    expected.add(1);
    expected.add(2);
    expected.add(3);
    expected.add(4);
    expected.add(5);

    // Assert that the result matches the expected output
    assertEquals(expected, result);
}


No.5 generated result --------------------------

@Test
public void topSortOrderTest() {
    AdjacencyList<Integer> graph = new AdjacencyList<>();
    graph.addEdge(1, 2);
    graph.addEdge(2, 3);
    graph.addEdge(3, 4);
    graph.addEdge(4, 5);

    TopologicalSort<Integer> topologicalSort = new TopologicalSort<>(graph);

    ArrayList<Integer> expectedResult = new ArrayList<>();
    expectedResult.add(1);
    expectedResult.add(2);
    expectedResult.add(3);
    expectedResult.add(4);
    expectedResult.add(5);

    ArrayList<Integer> actualResult = topologicalSort.topSortOrder();

    assertEquals(expectedResult, actualResult);
}


No.6 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AdjacencyListTest {
    @Test
    public void topSortOrderTest() {
        AdjacencyList<String> graph = new AdjacencyList<>();
        graph.addEdge("A", "B");
        graph.addEdge("A", "C");
        graph.addEdge("B", "D");
        graph.addEdge("C", "D");
        graph.addEdge("D", "E");
        
        TopologicalSort<String> topSort = new TopologicalSort<>(graph);
        ArrayList<String> result = topSort.topSortOrder();
        
        ArrayList<String> expected = new ArrayList<>();
        expected.add("A");
        expected.add("B");
        expected.add("C");
        expected.add("D");
        expected.add("E");
        
        assertEquals(expected, result);
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AdjacencyListTest {
    @Test
    public void topSortOrderTest() {
        AdjacencyList<String> graph = new AdjacencyList<>();
        graph.addEdge("A", "B");
        graph.addEdge("A", "C");
        graph.addEdge("B", "D");
        graph.addEdge("C", "D");
        graph.addEdge("D", "E");
        graph.addEdge("E", "F");

        TopologicalSort<String> topSort = new TopologicalSort<>(graph);
        ArrayList<String> actual = topSort.topSortOrder();
        
        ArrayList<String> expected = new ArrayList<>();
        expected.add("A");
        expected.add("C");
        expected.add("B");
        expected.add("D");
        expected.add("E");
        expected.add("F");

        assertEquals(expected, actual);
    }
}


No.8 generated result --------------------------

@Test
public void topSortOrderTest() {
    AdjacencyList<Integer> graph = new AdjacencyList<>();
    graph.addEdge(1, 2);
    graph.addEdge(1, 3);
    graph.addEdge(2, 4);
    graph.addEdge(3, 4);

    TopologicalSort<Integer> topologicalSort = new TopologicalSort<>(graph);
    ArrayList<Integer> result = topologicalSort.topSortOrder();

    ArrayList<Integer> expected = new ArrayList<>();
    expected.add(1);
    expected.add(2);
    expected.add(3);
    expected.add(4);

    assertEquals(expected, result);
}


No.9 generated result --------------------------

@Test
public void topSortOrderTest() {
    AdjacencyList<String> graph = new AdjacencyList<>();
    graph.addEdge("A", "B");
    graph.addEdge("A", "C");
    graph.addEdge("B", "D");
    graph.addEdge("C", "D");
    graph.addEdge("D", "E");

    TopologicalSort<String> sorter = new TopologicalSort<>(graph);
    ArrayList<String> result = sorter.topSortOrder();

    ArrayList<String> expected = new ArrayList<>();
    expected.add("A");
    expected.add("B");
    expected.add("C");
    expected.add("D");
    expected.add("E");

    assertEquals(expected, result);
}


No.10 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class AdjacencyListTest {
    @Test
    public void topSortOrderTest() {
        AdjacencyList<String> graph = new AdjacencyList<String>();
        graph.addEdge("A", "B");
        graph.addEdge("B", "C");
        graph.addEdge("C", "D");
        graph.addEdge("D", "E");

        TopologicalSort<String> topologicalSort = new TopologicalSort<>(graph);
        ArrayList<String> actual = topologicalSort.topSortOrder();
        ArrayList<String> expected = new ArrayList<>();
        expected.add("A");
        expected.add("B");
        expected.add("C");
        expected.add("D");
        expected.add("E");

        assertEquals(expected, actual);
    }
}



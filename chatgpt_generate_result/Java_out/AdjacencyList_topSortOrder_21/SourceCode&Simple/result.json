{
    "project_name": "Java",
    "file_name": "KahnsAlgorithm.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/graphs/KahnsAlgorithm.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.graphs",
    "docstring": "/**\n     * Returns an ArrayList with vertices arranged in topological order\n     */",
    "source_code": "\nArrayList<E> topSortOrder() {\n    calculateInDegree();\n    Queue<E> q = new LinkedList<E>();\n\n    for (E vertex : inDegree.keySet()) {\n        if (inDegree.get(vertex) == 0) {\n            q.add(vertex);\n        }\n    }\n\n    ArrayList<E> answer = new ArrayList<>();\n\n    while (!q.isEmpty()) {\n        E current = q.poll();\n        answer.add(current);\n        for (E adjacent : graph.getAdjacents(current)) {\n            inDegree.put(adjacent, inDegree.get(adjacent) - 1);\n            if (inDegree.get(adjacent) == 0) {\n                q.add(adjacent);\n            }\n        }\n    }\n\n    return answer;\n}\n",
    "class_name": "AdjacencyList",
    "method_name": "topSortOrder",
    "arguments": [],
    "generate_test": [
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdjacencyListTest {\n    @Test\n    public void topSortOrderTest() {\n        AdjacencyList<Integer> graph = new AdjacencyList<>();\n        graph.addEdge(1, 2);\n        graph.addEdge(1, 3);\n        graph.addEdge(2, 3);\n        graph.addEdge(2, 4);\n        graph.addEdge(3, 4);\n        graph.addEdge(4, 5);\n\n        TopologicalSort<Integer> topSort = new TopologicalSort<>(graph);\n        ArrayList<Integer> result = topSort.topSortOrder();\n\n        ArrayList<Integer> expected = new ArrayList<>();\n        expected.add(1);\n        expected.add(2);\n        expected.add(3);\n        expected.add(4);\n        expected.add(5);\n\n        assertEquals(expected, result);\n    }\n}",
        "TopologicalSort<String> topologicalSort = new TopologicalSort<String>(graph);\nArrayList<String> expectedResult = new ArrayList<String>();\nexpectedResult.add(\"A\");\nexpectedResult.add(\"C\");\nexpectedResult.add(\"B\");\n\nArrayList<String> actualResult = topologicalSort.topSortOrder();\n\nassertEquals(expectedResult, actualResult);",
        "\n@Test\npublic void topSortOrderTest() {\n    AdjacencyList<String> graph = new AdjacencyList<>();\n    graph.addEdge(\"A\", \"B\");\n    graph.addEdge(\"B\", \"C\");\n    graph.addEdge(\"B\", \"D\");\n    graph.addEdge(\"C\", \"E\");\n    graph.addEdge(\"D\", \"E\");\n    graph.addEdge(\"E\", \"F\");\n    graph.addEdge(\"F\", \"G\");\n\n    TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n    ArrayList<String> expectedResult = new ArrayList<>();\n    expectedResult.add(\"A\");\n    expectedResult.add(\"B\");\n    expectedResult.add(\"C\");\n    expectedResult.add(\"D\");\n    expectedResult.add(\"E\");\n    expectedResult.add(\"F\");\n    expectedResult.add(\"G\");\n\n    ArrayList<String> actualResult = topSort.topSortOrder();\n\n    assertEquals(expectedResult, actualResult);\n}\n",
        "@Test\npublic void topSortOrderTest() {\n    // Create an instance of AdjacencyList\n    AdjacencyList<Integer> adjList = new AdjacencyList<>();\n\n    // Add vertices and edges to the adjacency list\n    adjList.addEdge(1, 2);\n    adjList.addEdge(1, 3);\n    adjList.addEdge(2, 3);\n    adjList.addEdge(3, 4);\n    adjList.addEdge(3, 5);\n    adjList.addEdge(4, 5);\n\n    // Create an instance of TopologicalSort\n    TopologicalSort<Integer> topSort = new TopologicalSort<>(adjList);\n\n    // Call the calculateInDegree() method\n    topSort.calculateInDegree();\n\n    // Call the topSortOrder() method and store the result\n    ArrayList<Integer> result = topSort.topSortOrder();\n\n    // Create the expected output\n    ArrayList<Integer> expected = new ArrayList<>();\n    expected.add(1);\n    expected.add(2);\n    expected.add(3);\n    expected.add(4);\n    expected.add(5);\n\n    // Assert that the result matches the expected output\n    assertEquals(expected, result);\n}",
        "@Test\npublic void topSortOrderTest() {\n    AdjacencyList<Integer> graph = new AdjacencyList<>();\n    graph.addEdge(1, 2);\n    graph.addEdge(2, 3);\n    graph.addEdge(3, 4);\n    graph.addEdge(4, 5);\n\n    TopologicalSort<Integer> topologicalSort = new TopologicalSort<>(graph);\n\n    ArrayList<Integer> expectedResult = new ArrayList<>();\n    expectedResult.add(1);\n    expectedResult.add(2);\n    expectedResult.add(3);\n    expectedResult.add(4);\n    expectedResult.add(5);\n\n    ArrayList<Integer> actualResult = topologicalSort.topSortOrder();\n\n    assertEquals(expectedResult, actualResult);\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdjacencyListTest {\n    @Test\n    public void topSortOrderTest() {\n        AdjacencyList<String> graph = new AdjacencyList<>();\n        graph.addEdge(\"A\", \"B\");\n        graph.addEdge(\"A\", \"C\");\n        graph.addEdge(\"B\", \"D\");\n        graph.addEdge(\"C\", \"D\");\n        graph.addEdge(\"D\", \"E\");\n        \n        TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n        ArrayList<String> result = topSort.topSortOrder();\n        \n        ArrayList<String> expected = new ArrayList<>();\n        expected.add(\"A\");\n        expected.add(\"B\");\n        expected.add(\"C\");\n        expected.add(\"D\");\n        expected.add(\"E\");\n        \n        assertEquals(expected, result);\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdjacencyListTest {\n    @Test\n    public void topSortOrderTest() {\n        AdjacencyList<String> graph = new AdjacencyList<>();\n        graph.addEdge(\"A\", \"B\");\n        graph.addEdge(\"A\", \"C\");\n        graph.addEdge(\"B\", \"D\");\n        graph.addEdge(\"C\", \"D\");\n        graph.addEdge(\"D\", \"E\");\n        graph.addEdge(\"E\", \"F\");\n\n        TopologicalSort<String> topSort = new TopologicalSort<>(graph);\n        ArrayList<String> actual = topSort.topSortOrder();\n        \n        ArrayList<String> expected = new ArrayList<>();\n        expected.add(\"A\");\n        expected.add(\"C\");\n        expected.add(\"B\");\n        expected.add(\"D\");\n        expected.add(\"E\");\n        expected.add(\"F\");\n\n        assertEquals(expected, actual);\n    }\n}",
        "@Test\npublic void topSortOrderTest() {\n    AdjacencyList<Integer> graph = new AdjacencyList<>();\n    graph.addEdge(1, 2);\n    graph.addEdge(1, 3);\n    graph.addEdge(2, 4);\n    graph.addEdge(3, 4);\n\n    TopologicalSort<Integer> topologicalSort = new TopologicalSort<>(graph);\n    ArrayList<Integer> result = topologicalSort.topSortOrder();\n\n    ArrayList<Integer> expected = new ArrayList<>();\n    expected.add(1);\n    expected.add(2);\n    expected.add(3);\n    expected.add(4);\n\n    assertEquals(expected, result);\n}",
        "@Test\npublic void topSortOrderTest() {\n    AdjacencyList<String> graph = new AdjacencyList<>();\n    graph.addEdge(\"A\", \"B\");\n    graph.addEdge(\"A\", \"C\");\n    graph.addEdge(\"B\", \"D\");\n    graph.addEdge(\"C\", \"D\");\n    graph.addEdge(\"D\", \"E\");\n\n    TopologicalSort<String> sorter = new TopologicalSort<>(graph);\n    ArrayList<String> result = sorter.topSortOrder();\n\n    ArrayList<String> expected = new ArrayList<>();\n    expected.add(\"A\");\n    expected.add(\"B\");\n    expected.add(\"C\");\n    expected.add(\"D\");\n    expected.add(\"E\");\n\n    assertEquals(expected, result);\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class AdjacencyListTest {\n    @Test\n    public void topSortOrderTest() {\n        AdjacencyList<String> graph = new AdjacencyList<String>();\n        graph.addEdge(\"A\", \"B\");\n        graph.addEdge(\"B\", \"C\");\n        graph.addEdge(\"C\", \"D\");\n        graph.addEdge(\"D\", \"E\");\n\n        TopologicalSort<String> topologicalSort = new TopologicalSort<>(graph);\n        ArrayList<String> actual = topologicalSort.topSortOrder();\n        ArrayList<String> expected = new ArrayList<>();\n        expected.add(\"A\");\n        expected.add(\"B\");\n        expected.add(\"C\");\n        expected.add(\"D\");\n        expected.add(\"E\");\n\n        assertEquals(expected, actual);\n    }\n}"
    ]
}
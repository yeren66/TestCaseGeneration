{
    "project_name": "Java",
    "file_name": "AbsoluteMax.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/AbsoluteMax.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * Finds the absolute maximum value among the given numbers.\n     *\n     * @param numbers The numbers to compare.\n     * @return The absolute maximum value.\n     * @throws IllegalArgumentException If the input array is empty or null.\n     */",
    "source_code": "\npublic static int getMaxValue(int... numbers) {\n    if (numbers == null || numbers.length == 0) {\n        throw new IllegalArgumentException(\"Numbers array cannot be empty or null\");\n    }\n    int absMax = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (Math.abs(numbers[i]) > Math.abs(absMax)) {\n            absMax = numbers[i];\n        }\n    }\n    return absMax;\n}\n",
    "class_name": "AbsoluteMax",
    "method_name": "getMaxValue",
    "arguments": [
        "int numbers"
    ],
    "generate_test": [
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        // Test case 1: Positive numbers\n        int result1 = AbsoluteMax.getMaxValue(5, 10, 3, 7);\n        assertEquals(10, result1);\n        \n        // Test case 2: Negative numbers\n        int result2 = AbsoluteMax.getMaxValue(-5, -10, -3, -7);\n        assertEquals(-10, result2);\n        \n        // Test case 3: Mixed positive and negative numbers\n        int result3 = AbsoluteMax.getMaxValue(-5, 10, -3, 7);\n        assertEquals(10, result3);\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        // Arrange\n        int[] numbers = {1, -2, 3, -4, 5};\n        int expected = 5;\n        \n        // Act\n        int result = AbsoluteMax.getMaxValue(numbers);\n        \n        // Assert\n        assertEquals(expected, result);\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        int result = AbsoluteMax.getMaxValue(-10, 5, -8, 15);\n        assertEquals(15, result);\n    }\n}",
        "@Test\npublic void getMaxValueTest() {\n    // Test case 1: numbers array is [1, -2, 3, -4, 5]\n    int[] numbers1 = {1, -2, 3, -4, 5};\n    int expected1 = 5;\n    int actual1 = AbsoluteMax.getMaxValue(numbers1);\n    assertEquals(expected1, actual1);\n\n    // Test case 2: numbers array is [0, 0, 0, 0]\n    int[] numbers2 = {0, 0, 0, 0};\n    int expected2 = 0;\n    int actual2 = AbsoluteMax.getMaxValue(numbers2);\n    assertEquals(expected2, actual2);\n\n    // Test case 3: numbers array is [-10, 20, -30, 40, -50]\n    int[] numbers3 = {-10, 20, -30, 40, -50};\n    int expected3 = -50;\n    int actual3 = AbsoluteMax.getMaxValue(numbers3);\n    assertEquals(expected3, actual3);\n}",
        "@Test\npublic void getMaxValueTest() {\n    assertEquals(5, AbsoluteMax.getMaxValue(1, -2, 5, -4));\n    assertEquals(10, AbsoluteMax.getMaxValue(-10, -5, 10, -7));\n    assertEquals(8, AbsoluteMax.getMaxValue(2, 4, 6, 8));\n    assertThrows(IllegalArgumentException.class, () -> {\n        AbsoluteMax.getMaxValue();\n    });\n}",
        "@Test\npublic void getMaxValueTest() {\n    int[] numbers = {1, -2, 3, -4, 5};\n    int expected = 5;\n    int actual = AbsoluteMax.getMaxValue(numbers);\n    assertEquals(expected, actual);\n}\n\nExplanation: \nIn the test case, we create an array of numbers {1, -2, 3, -4, 5}. The expected result is the maximum absolute value, which is 5. We call the getMaxValue method from the AbsoluteMax class with the numbers array as the argument. Finally, we use the assertEquals method to assert that the expected value is equal to the actual value returned by the method.",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        // Test case 1: Numbers array not empty\n        int result1 = AbsoluteMax.getMaxValue(1, -2, 3, 4, -5);\n        assertEquals(5, result1);\n\n        // Test case 2: Numbers array is empty\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        });\n\n        // Test case 3: Numbers array is null\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n    }\n}",
        "@Test\npublic void getMaxValueTest() {\n    int result = AbsoluteMax.getMaxValue(3, -5, 2, -7, 1);\n    assertEquals(7, result, \"Expected result should be 7\");\n\n    result = AbsoluteMax.getMaxValue(-4, -9, -2, -6, -1);\n    assertEquals(-9, result, \"Expected result should be -9\");\n\n    assertThrows(IllegalArgumentException.class, () -> {\n        AbsoluteMax.getMaxValue();\n    }, \"Expected IllegalArgumentException\");\n\n    assertThrows(IllegalArgumentException.class, () -> {\n        AbsoluteMax.getMaxValue(null);\n    }, \"Expected IllegalArgumentException\");\n}",
        "@Test\npublic void getMaxValueTest() {\n    int[] numbers = {1, -2, 3, -4, 5};\n    int result = AbsoluteMax.getMaxValue(numbers);\n    assertEquals(5, result);\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        // Test Case 1: Testing with positive numbers\n        int result1 = AbsoluteMax.getMaxValue(1, 4, 7, 2, 5);\n        assertEquals(7, result1);\n        \n        // Test Case 2: Testing with negative numbers\n        int result2 = AbsoluteMax.getMaxValue(-10, -5, -20, -2, -15);\n        assertEquals(-2, result2);\n        \n        // Test Case 3: Testing with mixed positive and negative numbers\n        int result3 = AbsoluteMax.getMaxValue(-5, 3, -2, 6, -10);\n        assertEquals(6, result3);\n        \n        // Test Case 4: Testing with a single number\n        int result4 = AbsoluteMax.getMaxValue(8);\n        assertEquals(8, result4);\n\n        // Test Case 5: Testing with an empty array\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        });\n\n        // Test Case 6: Testing with a null array\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n    }\n}"
    ]
}
Source code: 


public static int getMaxValue(int... numbers) {
    if (numbers == null || numbers.length == 0) {
        throw new IllegalArgumentException("Numbers array cannot be empty or null");
    }
    int absMax = numbers[0];
    for (int i = 1; i < numbers.length; i++) {
        if (Math.abs(numbers[i]) > Math.abs(absMax)) {
            absMax = numbers[i];
        }
    }
    return absMax;
}



No.1 generated result --------------------------

@Test
public void getMaxValueTest() {
    int result = AbsoluteMax.getMaxValue(-1, 2, -3, 4, -5);
    assertEquals(5, result);
}


No.2 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        // Test with positive numbers
        int result1 = AbsoluteMax.getMaxValue(1, 2, 3, 4);
        assertEquals(4, result1);
        
        // Test with negative and positive numbers
        int result2 = AbsoluteMax.getMaxValue(-1, -2, 3, 4);
        assertEquals(-4, result2);
        
        // Test with only negative numbers
        int result3 = AbsoluteMax.getMaxValue(-5, -3, -2, -1);
        assertEquals(-5, result3);
        
        // Test with a single number
        int result4 = AbsoluteMax.getMaxValue(9);
        assertEquals(9, result4);
        
        // Test with an empty array
        assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue();
        });
    }
}


No.3 generated result --------------------------

@Test
public void getMaxValueTest() {
    int result = AbsoluteMax.getMaxValue(1, -4, 10, -20, 5);
    assertEquals(20, result);
}


No.4 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        // Test case 1: Valid input
        int result1 = AbsoluteMax.getMaxValue(10, -5, 7, -2);
        assertEquals(10, result1);
        
        // Test case 2: Numbers array is empty (IllegalArgumentException expected)
        assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue();
        });
        
        // Test case 3: Numbers array is null (IllegalArgumentException expected)
        assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue(null);
        });
    }
}


No.5 generated result --------------------------

@Test
public void getMaxValueTest() {
    int result = AbsoluteMax.getMaxValue(1, -5, 10, -8, 3);
    assertEquals(10, result);
}


No.6 generated result --------------------------

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        // Test case 1: Testing with positive numbers
        int result1 = AbsoluteMax.getMaxValue(-1, 2, 5, 4, 3);
        assertEquals(5, result1);
        
        // Test case 2: Testing with negative numbers
        int result2 = AbsoluteMax.getMaxValue(-5, -3, -2, -1);
        assertEquals(-5, result2);
        
        // Test case 3: Testing with positive and negative numbers
        int result3 = AbsoluteMax.getMaxValue(-10, 20, -30, 40, -50);
        assertEquals(-50, result3);
        
        // Test case 4: Testing with only one number
        int result4 = AbsoluteMax.getMaxValue(6);
        assertEquals(6, result4);
        
        // Test case 5: Testing with an empty numbers array
        assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue();
        });
    }
}


No.7 generated result --------------------------

@Test
public void getMaxValueTest() {
    // Test case 1: numbers = {1, -3, 5, -7, 9}
    int[] numbers = {1, -3, 5, -7, 9};
    int expectedValue = 9;
    int actualValue = AbsoluteMax.getMaxValue(numbers);
    assertEquals(expectedValue, actualValue);
    
    // Test case 2: numbers = {-2, -4, -6, -8, -10}
    numbers = {-2, -4, -6, -8, -10};
    expectedValue = -2;
    actualValue = AbsoluteMax.getMaxValue(numbers);
    assertEquals(expectedValue, actualValue);
    
    // Test case 3: numbers = {0, 0, 0, 0, 0}
    numbers = {0, 0, 0, 0, 0};
    expectedValue = 0;
    actualValue = AbsoluteMax.getMaxValue(numbers);
    assertEquals(expectedValue, actualValue);
}


No.8 generated result --------------------------

@Test
public void getMaxValueTest() {
    // Test case with positive numbers
    int result1 = AbsoluteMax.getMaxValue(1, 2, 3, 4);
    assertEquals(4, result1);
    
    // Test case with negative numbers
    int result2 = AbsoluteMax.getMaxValue(-1, -2, -3, -4);
    assertEquals(-4, result2);
    
    // Test case with mixed positive and negative numbers
    int result3 = AbsoluteMax.getMaxValue(-1, 2, -3, 4);
    assertEquals(-4, result3);
    
    // Test case with zero and positive numbers
    int result4 = AbsoluteMax.getMaxValue(0, 2, 3, 4);
    assertEquals(4, result4);
    
    // Test case with zero and negative numbers
    int result5 = AbsoluteMax.getMaxValue(0, -2, -3, -4);
    assertEquals(-4, result5);
}


No.9 generated result --------------------------

package com.thealgorithms.maths;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AbsoluteMaxTest {
    @Test
    public void getMaxValueTest() {
        int[] numbers = {1, -5, 10, -15, 20};
        int result = AbsoluteMax.getMaxValue(numbers);
        assertEquals(20, result);
        
        int[] emptyArray = {};
        assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue(emptyArray);
        });
        
        int[] nullArray = null;
        assertThrows(IllegalArgumentException.class, () -> {
            AbsoluteMax.getMaxValue(nullArray);
        });
    }
}


No.10 generated result --------------------------


int[] testArray = {1, -2, 3, -4, 5};
int expectedResult = 5;
int actualResult = AbsoluteMax.getMaxValue(testArray);
assertEquals(expectedResult, actualResult);




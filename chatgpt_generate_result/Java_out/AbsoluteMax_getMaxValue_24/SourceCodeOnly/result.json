{
    "project_name": "Java",
    "file_name": "AbsoluteMax.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/AbsoluteMax.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * Finds the absolute maximum value among the given numbers.\n     *\n     * @param numbers The numbers to compare.\n     * @return The absolute maximum value.\n     * @throws IllegalArgumentException If the input array is empty or null.\n     */",
    "source_code": "\npublic static int getMaxValue(int... numbers) {\n    if (numbers == null || numbers.length == 0) {\n        throw new IllegalArgumentException(\"Numbers array cannot be empty or null\");\n    }\n    int absMax = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (Math.abs(numbers[i]) > Math.abs(absMax)) {\n            absMax = numbers[i];\n        }\n    }\n    return absMax;\n}\n",
    "class_name": "AbsoluteMax",
    "method_name": "getMaxValue",
    "arguments": [
        "int numbers"
    ],
    "generate_test": [
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        // Test case 1: Positive numbers\n        int[] numbers1 = {2, 4, 6, 8};\n        int expected1 = 8;\n        int actual1 = AbsoluteMax.getMaxValue(numbers1);\n        assertEquals(expected1, actual1);\n\n        // Test case 2: Negative numbers\n        int[] numbers2 = {-2, -4, -6, -8};\n        int expected2 = -8;\n        int actual2 = AbsoluteMax.getMaxValue(numbers2);\n        assertEquals(expected2, actual2);\n\n        // Test case 3: Mixed positive and negative numbers\n        int[] numbers3 = {1, -2, 3, -4};\n        int expected3 = -4;\n        int actual3 = AbsoluteMax.getMaxValue(numbers3);\n        assertEquals(expected3, actual3);\n\n        // Test case 4: Single number\n        int[] numbers4 = {5};\n        int expected4 = 5;\n        int actual4 = AbsoluteMax.getMaxValue(numbers4);\n        assertEquals(expected4, actual4);\n\n        // Test case 5: Numbers array is empty\n        int[] numbers5 = {};\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(numbers5);\n        });\n\n        // Test case 6: Numbers array is null\n        int[] numbers6 = null;\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(numbers6);\n        });\n    }\n}",
        "@Test\npublic void getMaxValueTest() {\n    int maxValue = AbsoluteMax.getMaxValue(-10, 20, -30, 40, -50);\n    assertEquals(50, maxValue);\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    \n    @Test\n    public void getMaxValueTest() {\n        // Test case 1: numbers array = [1, 2, 3, -4, 5]\n        int[] numbers1 = {1, 2, 3, -4, 5};\n        int expected1 = 5; // The absolute maximum value is 5\n        int actual1 = AbsoluteMax.getMaxValue(numbers1);\n        assertEquals(expected1, actual1);\n        \n        // Test case 2: numbers array = [-10, -5, -3, 0, -7]\n        int[] numbers2 = {-10, -5, -3, 0, -7};\n        int expected2 = -10; // The absolute maximum value is -10\n        int actual2 = AbsoluteMax.getMaxValue(numbers2);\n        assertEquals(expected2, actual2);\n        \n        // Test case 3: numbers array = [5, -5, 10, -10, 15, -15]\n        int[] numbers3 = {5, -5, 10, -10, 15, -15};\n        int expected3 = -15; // The absolute maximum value is -15\n        int actual3 = AbsoluteMax.getMaxValue(numbers3);\n        assertEquals(expected3, actual3);\n        \n        // Test case 4: numbers array = [0]\n        int[] numbers4 = {0};\n        int expected4 = 0; // The absolute maximum value is 0\n        int actual4 = AbsoluteMax.getMaxValue(numbers4);\n        assertEquals(expected4, actual4);\n        \n        // Test case 5: numbers array = []\n        int[] numbers5 = {}; // An empty array should throw an IllegalArgumentException\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(numbers5));\n    }\n}",
        "@Test\npublic void getMaxValueTest() {\n    assertEquals(5, AbsoluteMax.getMaxValue(1, -2, 3, -4, 5));\n    assertEquals(10, AbsoluteMax.getMaxValue(-10, -20, 30, 40, 50));\n    assertEquals(-100, AbsoluteMax.getMaxValue(100, -200, -300, -400, -500));\n    assertThrows(IllegalArgumentException.class, () -> {\n        AbsoluteMax.getMaxValue();\n    });\n    assertThrows(IllegalArgumentException.class, () -> {\n        AbsoluteMax.getMaxValue(null);\n    });\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n\n    @Test\n    public void getMaxValueTest() {\n\n        // Test case 1: numbers = {1, 2, 3}\n        int result1 = AbsoluteMax.getMaxValue(1, 2, 3);\n        assertEquals(3, result1, \"Max value should be 3\");\n\n        // Test case 2: numbers = {-1, 0, 2}\n        int result2 = AbsoluteMax.getMaxValue(-1, 0, 2);\n        assertEquals(-1, result2, \"Max value should be -1\");\n\n        // Test case 3: numbers = {-5, -8, -3, -10}\n        int result3 = AbsoluteMax.getMaxValue(-5, -8, -3, -10);\n        assertEquals(-10, result3, \"Max value should be -10\");\n\n        // Test case 4: numbers = {0}\n        int result4 = AbsoluteMax.getMaxValue(0);\n        assertEquals(0, result4, \"Max value should be 0\");\n\n        // Test case 5: numbers = {-3, 5, 2, -5, 6}\n        int result5 = AbsoluteMax.getMaxValue(-3, 5, 2, -5, 6);\n        assertEquals(-5, result5, \"Max value should be -5\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        // Test with positive numbers\n        assertEquals(5, AbsoluteMax.getMaxValue(1, 2, 3, 4, 5));\n        \n        // Test with negative numbers\n        assertEquals(-5, AbsoluteMax.getMaxValue(-1, -2, -3, -4, -5));\n        \n        // Test with both positive and negative numbers\n        assertEquals(10, AbsoluteMax.getMaxValue(-10, 5, -2, 8, -3, 10));\n        \n        // Test with only one number\n        assertEquals(15, AbsoluteMax.getMaxValue(15));\n        \n        // Test with an empty array\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue());\n        \n        // Test with a null array\n        assertThrows(IllegalArgumentException.class, () -> AbsoluteMax.getMaxValue(null));\n    }\n}",
        "@Test\npublic void getMaxValueTest() {\n    int result1 = AbsoluteMax.getMaxValue(1, -2, 3, -4, 5);\n    assertEquals(5, result1);\n\n    int result2 = AbsoluteMax.getMaxValue(-5, -10, -15, -20);\n    assertEquals(-20, result2);\n\n    int result3 = AbsoluteMax.getMaxValue(-1, -2, -3, -4);\n    assertEquals(-4, result3);\n\n    assertThrows(IllegalArgumentException.class, () -> {\n        AbsoluteMax.getMaxValue();\n    });\n}",
        "@Test\npublic void getMaxValueTest() {\n    // Test case 1: numbers array contains positive numbers\n    int result1 = AbsoluteMax.getMaxValue(1, 2, 3, 4, 5);\n    assertEquals(5, result1);\n    \n    // Test case 2: numbers array contains negative numbers\n    int result2 = AbsoluteMax.getMaxValue(-1, -2, -3, -4, -5);\n    assertEquals(-5, result2);\n    \n    // Test case 3: numbers array contains both positive and negative numbers\n    int result3 = AbsoluteMax.getMaxValue(-1, 2, -3, 4, -5);\n    assertEquals(-5, result3);\n    \n    // Test case 4: numbers array contains only one element\n    int result4 = AbsoluteMax.getMaxValue(10);\n    assertEquals(10, result4);\n    \n    // Test case 5: numbers array is empty\n    assertThrows(IllegalArgumentException.class, () -> {\n        AbsoluteMax.getMaxValue();\n    });\n    \n    // Test case 6: numbers array is null\n    assertThrows(IllegalArgumentException.class, () -> {\n        AbsoluteMax.getMaxValue(null);\n    });\n}",
        "@Test\npublic void getMaxValueTest() {\n    int result = AbsoluteMax.getMaxValue(1, -2, 3, -4, 5);\n    assertEquals(5, result);\n    \n    result = AbsoluteMax.getMaxValue(-1, -2, -3, -4, -5);\n    assertEquals(-1, result);\n    \n    result = AbsoluteMax.getMaxValue(0, 0, 0, 0);\n    assertEquals(0, result);\n    \n    assertThrows(IllegalArgumentException.class, () -> {\n        AbsoluteMax.getMaxValue();\n    });\n}",
        "@Test\npublic void getMaxValueTest() {\n    int result = AbsoluteMax.getMaxValue(1, -5, 3, -7);\n    assertEquals(7, result);\n}"
    ]
}
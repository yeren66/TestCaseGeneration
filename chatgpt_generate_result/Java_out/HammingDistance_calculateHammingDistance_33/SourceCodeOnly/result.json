{
    "project_name": "Java",
    "file_name": "HammingDistance.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/strings/HammingDistance.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.strings",
    "docstring": "/**\n     * calculate the hamming distance between two strings of equal length\n     *\n     * @param s1 the first string\n     * @param s2 the second string\n     * @return {@code int} hamming distance\n     * @throws Exception\n     */",
    "source_code": "\npublic static int calculateHammingDistance(String s1, String s2) throws Exception {\n    if (s1.length() != s2.length()) {\n        throw new Exception(\"String lengths must be equal\");\n    }\n\n    int stringLength = s1.length();\n    int counter = 0;\n\n    for (int i = 0; i < stringLength; i++) {\n        if (s1.charAt(i) != s2.charAt(i)) {\n            counter++;\n        }\n    }\n    return counter;\n}\n",
    "class_name": "HammingDistance",
    "method_name": "calculateHammingDistance",
    "arguments": [
        "String s1",
        "String s2"
    ],
    "generate_test": [
        "@Test\npublic void calculateHammingDistanceTest() {\n    try {\n        assertEquals(0, calculateHammingDistance(\"abc\", \"abc\"));\n        assertEquals(1, calculateHammingDistance(\"abc\", \"abd\"));\n        assertEquals(3, calculateHammingDistance(\"abc\", \"def\"));\n    } catch (Exception e) {\n        fail(\"An exception should not be thrown\");\n    }\n}",
        "@Test\npublic void calculateHammingDistanceTest() {\n    try {\n        int distance = HammingDistance.calculateHammingDistance(\"abc\", \"abd\");\n        assertEquals(1, distance);\n        \n        distance = HammingDistance.calculateHammingDistance(\"abc\", \"abc\");\n        assertEquals(0, distance);\n        \n        distance = HammingDistance.calculateHammingDistance(\"abc\", \"aaa\");\n        assertEquals(2, distance);\n        \n        // Add additional test cases here\n        \n    } catch (Exception e) {\n        fail(\"An exception occurred\");\n    }\n}",
        "@Test\npublic void calculateHammingDistanceTest() throws Exception {\n    // Test Case 1: Strings are equal, Hamming distance should be 0\n    String s1 = \"abcd\";\n    String s2 = \"abcd\";\n    int expectedDistance = 0;\n    int actualDistance = HammingDistance.calculateHammingDistance(s1, s2);\n    assertEquals(expectedDistance, actualDistance);\n\n    // Test Case 2: Strings have one different character, Hamming distance should be 1\n    s1 = \"abcd\";\n    s2 = \"abce\";\n    expectedDistance = 1;\n    actualDistance = HammingDistance.calculateHammingDistance(s1, s2);\n    assertEquals(expectedDistance, actualDistance);\n\n    // Test Case 3: Strings have multiple different characters, Hamming distance should be the number of different characters\n    s1 = \"hello\";\n    s2 = \"hella\";\n    expectedDistance = 2;\n    actualDistance = HammingDistance.calculateHammingDistance(s1, s2);\n    assertEquals(expectedDistance, actualDistance);\n\n    // Test Case 4: Strings have different lengths, should throw an exception\n    s1 = \"abc\";\n    s2 = \"abcd\";\n    assertThrows(Exception.class, () -> {\n        HammingDistance.calculateHammingDistance(s1, s2);\n    });\n}",
        "@Test\npublic void calculateHammingDistanceTest() throws Exception {\n    // Input Strings\n    String s1 = \"abcd\";\n    String s2 = \"abed\";\n    \n    // Expected Hamming Distance\n    int expectedDistance = 1;\n    \n    // Calculate Hamming Distance\n    int actualDistance = HammingDistance.calculateHammingDistance(s1, s2);\n    \n    // Verify the result\n    assertEquals(expectedDistance, actualDistance);\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        try {\n            // Test case 1: s1 and s2 are equal, hamming distance should be 0\n            String s1 = \"abc\";\n            String s2 = \"abc\";\n            assertEquals(0, HammingDistance.calculateHammingDistance(s1, s2));\n\n            // Test case 2: s1 and s2 have 1 different character, hamming distance should be 1\n            s1 = \"abc\";\n            s2 = \"abd\";\n            assertEquals(1, HammingDistance.calculateHammingDistance(s1, s2));\n\n            // Test case 3: s1 and s2 have multiple different characters, hamming distance should be the number of differences\n            s1 = \"abc\";\n            s2 = \"def\";\n            assertEquals(3, HammingDistance.calculateHammingDistance(s1, s2));\n        } catch (Exception e) {\n            fail(\"Exception should not be thrown\");\n        }\n    }\n}",
        "@Test\n    public void calculateHammingDistanceTest() {\n        try {\n            assertEquals(0, HammingDistance.calculateHammingDistance(\"\", \"\"));\n            assertEquals(3, HammingDistance.calculateHammingDistance(\"karolin\", \"kathrin\"));\n            assertEquals(4, HammingDistance.calculateHammingDistance(\"karolin\", \"kathrine\"));\n            assertEquals(6, HammingDistance.calculateHammingDistance(\"123456\", \"789012\"));\n        } catch (Exception e) {\n            fail(\"An exception occurred: \" + e.getMessage());\n        }\n    }",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        try {\n            int distance = HammingDistance.calculateHammingDistance(\"abc\", \"abd\");\n            assertEquals(1, distance);\n        } catch (Exception e) {\n            fail(\"An exception should not have been thrown\");\n        }\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        try {\n            int distance = HammingDistance.calculateHammingDistance(\"1010101\", \"1110101\");\n            assertEquals(1, distance);\n        } catch (Exception e) {\n            fail(\"Exception should not be thrown\");\n        }\n    }\n}",
        "@Test\npublic void calculateHammingDistanceTest() {\n    try {\n        String s1 = \"abc\";\n        String s2 = \"abb\";\n        int expectedDistance = 1;\n\n        int actualDistance = HammingDistance.calculateHammingDistance(s1, s2);\n\n        assertEquals(expectedDistance, actualDistance);\n    } catch (Exception e) {\n        fail(\"An unexpected exception occurred\");\n    }\n}",
        "@Test\npublic void calculateHammingDistanceTest() {\n    try {\n        assertEquals(2, HammingDistance.calculateHammingDistance(\"101010\", \"100011\"));\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"abcde\", \"abcde\"));\n    } catch (Exception e) {\n        fail(\"Exception thrown: \" + e.getMessage());\n    }\n}"
    ]
}
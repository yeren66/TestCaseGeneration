Source code: 


public static int calculateHammingDistance(String s1, String s2) throws Exception {
    if (s1.length() != s2.length()) {
        throw new Exception("String lengths must be equal");
    }

    int stringLength = s1.length();
    int counter = 0;

    for (int i = 0; i < stringLength; i++) {
        if (s1.charAt(i) != s2.charAt(i)) {
            counter++;
        }
    }
    return counter;
}



No.1 generated result --------------------------

@Test
public void calculateHammingDistanceTest() {
    try {
        assertEquals(0, calculateHammingDistance("abc", "abc"));
        assertEquals(1, calculateHammingDistance("abc", "abd"));
        assertEquals(3, calculateHammingDistance("abc", "def"));
    } catch (Exception e) {
        fail("An exception should not be thrown");
    }
}


No.2 generated result --------------------------

@Test
public void calculateHammingDistanceTest() {
    try {
        int distance = HammingDistance.calculateHammingDistance("abc", "abd");
        assertEquals(1, distance);
        
        distance = HammingDistance.calculateHammingDistance("abc", "abc");
        assertEquals(0, distance);
        
        distance = HammingDistance.calculateHammingDistance("abc", "aaa");
        assertEquals(2, distance);
        
        // Add additional test cases here
        
    } catch (Exception e) {
        fail("An exception occurred");
    }
}


No.3 generated result --------------------------

@Test
public void calculateHammingDistanceTest() throws Exception {
    // Test Case 1: Strings are equal, Hamming distance should be 0
    String s1 = "abcd";
    String s2 = "abcd";
    int expectedDistance = 0;
    int actualDistance = HammingDistance.calculateHammingDistance(s1, s2);
    assertEquals(expectedDistance, actualDistance);

    // Test Case 2: Strings have one different character, Hamming distance should be 1
    s1 = "abcd";
    s2 = "abce";
    expectedDistance = 1;
    actualDistance = HammingDistance.calculateHammingDistance(s1, s2);
    assertEquals(expectedDistance, actualDistance);

    // Test Case 3: Strings have multiple different characters, Hamming distance should be the number of different characters
    s1 = "hello";
    s2 = "hella";
    expectedDistance = 2;
    actualDistance = HammingDistance.calculateHammingDistance(s1, s2);
    assertEquals(expectedDistance, actualDistance);

    // Test Case 4: Strings have different lengths, should throw an exception
    s1 = "abc";
    s2 = "abcd";
    assertThrows(Exception.class, () -> {
        HammingDistance.calculateHammingDistance(s1, s2);
    });
}


No.4 generated result --------------------------

@Test
public void calculateHammingDistanceTest() throws Exception {
    // Input Strings
    String s1 = "abcd";
    String s2 = "abed";
    
    // Expected Hamming Distance
    int expectedDistance = 1;
    
    // Calculate Hamming Distance
    int actualDistance = HammingDistance.calculateHammingDistance(s1, s2);
    
    // Verify the result
    assertEquals(expectedDistance, actualDistance);
}


No.5 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        try {
            // Test case 1: s1 and s2 are equal, hamming distance should be 0
            String s1 = "abc";
            String s2 = "abc";
            assertEquals(0, HammingDistance.calculateHammingDistance(s1, s2));

            // Test case 2: s1 and s2 have 1 different character, hamming distance should be 1
            s1 = "abc";
            s2 = "abd";
            assertEquals(1, HammingDistance.calculateHammingDistance(s1, s2));

            // Test case 3: s1 and s2 have multiple different characters, hamming distance should be the number of differences
            s1 = "abc";
            s2 = "def";
            assertEquals(3, HammingDistance.calculateHammingDistance(s1, s2));
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }
}


No.6 generated result --------------------------

@Test
    public void calculateHammingDistanceTest() {
        try {
            assertEquals(0, HammingDistance.calculateHammingDistance("", ""));
            assertEquals(3, HammingDistance.calculateHammingDistance("karolin", "kathrin"));
            assertEquals(4, HammingDistance.calculateHammingDistance("karolin", "kathrine"));
            assertEquals(6, HammingDistance.calculateHammingDistance("123456", "789012"));
        } catch (Exception e) {
            fail("An exception occurred: " + e.getMessage());
        }
    }


No.7 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        try {
            int distance = HammingDistance.calculateHammingDistance("abc", "abd");
            assertEquals(1, distance);
        } catch (Exception e) {
            fail("An exception should not have been thrown");
        }
    }
}


No.8 generated result --------------------------

package com.thealgorithms.strings;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HammingDistanceTest {
    @Test
    public void calculateHammingDistanceTest() {
        try {
            int distance = HammingDistance.calculateHammingDistance("1010101", "1110101");
            assertEquals(1, distance);
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }
}


No.9 generated result --------------------------

@Test
public void calculateHammingDistanceTest() {
    try {
        String s1 = "abc";
        String s2 = "abb";
        int expectedDistance = 1;

        int actualDistance = HammingDistance.calculateHammingDistance(s1, s2);

        assertEquals(expectedDistance, actualDistance);
    } catch (Exception e) {
        fail("An unexpected exception occurred");
    }
}


No.10 generated result --------------------------

@Test
public void calculateHammingDistanceTest() {
    try {
        assertEquals(2, HammingDistance.calculateHammingDistance("101010", "100011"));
        assertEquals(0, HammingDistance.calculateHammingDistance("abcde", "abcde"));
    } catch (Exception e) {
        fail("Exception thrown: " + e.getMessage());
    }
}



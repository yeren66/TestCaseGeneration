{
    "project_name": "Java",
    "file_name": "HammingDistance.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/strings/HammingDistance.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.strings",
    "docstring": "/**\n     * calculate the hamming distance between two strings of equal length\n     *\n     * @param s1 the first string\n     * @param s2 the second string\n     * @return {@code int} hamming distance\n     * @throws Exception\n     */",
    "source_code": "\npublic static int calculateHammingDistance(String s1, String s2) throws Exception {\n    if (s1.length() != s2.length()) {\n        throw new Exception(\"String lengths must be equal\");\n    }\n\n    int stringLength = s1.length();\n    int counter = 0;\n\n    for (int i = 0; i < stringLength; i++) {\n        if (s1.charAt(i) != s2.charAt(i)) {\n            counter++;\n        }\n    }\n    return counter;\n}\n",
    "class_name": "HammingDistance",
    "method_name": "calculateHammingDistance",
    "arguments": [
        "String s1",
        "String s2"
    ],
    "generate_test": [
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        try {\n            // Test case 1: Strings are equal\n            String s1 = \"abc\";\n            String s2 = \"abc\";\n            int expectedDistance = 0;\n            int actualDistance = HammingDistance.calculateHammingDistance(s1, s2);\n            assertEquals(expectedDistance, actualDistance);\n\n            // Test case 2: Strings have 1 character difference\n            s1 = \"abc\";\n            s2 = \"abd\";\n            expectedDistance = 1;\n            actualDistance = HammingDistance.calculateHammingDistance(s1, s2);\n            assertEquals(expectedDistance, actualDistance);\n\n            // Test case 3: Strings have multiple character differences\n            s1 = \"abc\";\n            s2 = \"def\";\n            expectedDistance = 3;\n            actualDistance = HammingDistance.calculateHammingDistance(s1, s2);\n            assertEquals(expectedDistance, actualDistance);\n\n            // Test case 4: Strings have different lengths\n            s1 = \"abc\";\n            s2 = \"ab\";\n            assertThrows(Exception.class, () -> {\n                HammingDistance.calculateHammingDistance(s1, s2);\n            });\n        } catch (Exception e) {\n            fail(\"An exception occurred: \" + e.getMessage());\n        }\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test case 1: Strings with different characters at all positions\n        String s1 = \"abcdefg\";\n        String s2 = \"hijklmn\";\n        int expected1 = 7;\n        int actual1 = HammingDistance.calculateHammingDistance(s1, s2);\n        assertEquals(expected1, actual1);\n\n        // Test case 2: Strings with different characters at some positions\n        String s3 = \"abcdefg\";\n        String s4 = \"abcijkl\";\n        int expected2 = 3;\n        int actual2 = HammingDistance.calculateHammingDistance(s3, s4);\n        assertEquals(expected2, actual2);\n\n        // Test case 3: Strings with same characters\n        String s5 = \"abcdefg\";\n        String s6 = \"abcdefg\";\n        int expected3 = 0;\n        int actual3 = HammingDistance.calculateHammingDistance(s5, s6);\n        assertEquals(expected3, actual3);\n\n        // Test case 4: Strings with same length but different characters\n        String s7 = \"abcdefg\";\n        String s8 = \"hijklmn\";\n        assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(s7, s8);\n        });\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        try {\n            // Test case 1: Same strings\n            int result1 = HammingDistance.calculateHammingDistance(\"abc\", \"abc\");\n            assertEquals(0, result1, \"Hamming distance between 'abc' and 'abc' should be 0\");\n\n            // Test case 2: Strings with 1 different character\n            int result2 = HammingDistance.calculateHammingDistance(\"abc\", \"abd\");\n            assertEquals(1, result2, \"Hamming distance between 'abc' and 'abd' should be 1\");\n\n            // Test case 3: Strings with all different characters\n            int result3 = HammingDistance.calculateHammingDistance(\"abc\", \"def\");\n            assertEquals(3, result3, \"Hamming distance between 'abc' and 'def' should be 3\");\n\n        } catch (Exception e) {\n            fail(\"An exception occurred: \" + e.getMessage());\n        }\n    }\n}",
        "@Test\npublic void calculateHammingDistanceTest() {\n    try {\n        int distance = HammingDistance.calculateHammingDistance(\"abc\", \"abd\");\n        assertEquals(1, distance, \"Hamming distance should be 1\");\n    } catch (Exception e) {\n        fail(\"An exception should not be thrown\");\n    }\n}",
        "@Test\npublic void calculateHammingDistanceTest() {\n    try {\n        int result = HammingDistance.calculateHammingDistance(\"101010\", \"111000\");\n        assertEquals(3, result);\n    } catch (Exception e) {\n        fail(\"Exception thrown: \" + e.getMessage());\n    }\n}",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    \n    @Test\n    public void calculateHammingDistanceTest() {\n        try {\n            int distance = HammingDistance.calculateHammingDistance(\"abcd\", \"abdc\");\n            assertEquals(2, distance);\n        } catch (Exception e) {\n            fail(\"An exception should not have been thrown\");\n        }\n    }\n}",
        "@Test\npublic void calculateHammingDistanceTest() {\n    try {\n        String s1 = \"abcd\";\n        String s2 = \"abcf\";\n        int expectedDistance = 1;\n        int actualDistance = HammingDistance.calculateHammingDistance(s1, s2);\n        assertEquals(expectedDistance, actualDistance);\n    } catch (Exception e) {\n        fail(\"An exception occurred: \" + e.getMessage());\n    }\n}",
        "@Test\n    public void calculateHammingDistanceTest() {\n        // Arrange\n        String s1 = \"abc\";\n        String s2 = \"aba\";\n        \n        // Act\n        int result = HammingDistance.calculateHammingDistance(s1, s2);\n        \n        // Assert\n        assertEquals(1, result);\n    }",
        "@Test\npublic void calculateHammingDistanceTest() {\n    try {\n        int distance = HammingDistance.calculateHammingDistance(\"abc\", \"abd\");\n        assertEquals(1, distance);\n        \n        distance = HammingDistance.calculateHammingDistance(\"abc\", \"abc\");\n        assertEquals(0, distance);\n        \n        // Add additional test cases here\n    } catch (Exception e) {\n        fail(\"An exception occurred: \" + e.getMessage());\n    }\n}",
        "@Test\npublic void calculateHammingDistanceTest() {\n    try {\n        int distance = HammingDistance.calculateHammingDistance(\"abc\", \"def\");\n        assertEquals(3, distance);\n    } catch (Exception e) {\n        fail(\"Exception should not be thrown\");\n    }\n}"
    ]
}
{
    "project_name": "Java",
    "file_name": "HillCipher.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/HillCipher.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": null,
    "source_code": "// Determinant calculator\npublic static int determinant(int[][] a, int n) {\n    int det = 0, sign = 1, p = 0, q = 0;\n\n    if (n == 1) {\n        det = a[0][0];\n    } else {\n        int[][] b = new int[n - 1][n - 1];\n        for (int x = 0; x < n; x++) {\n            p = 0;\n            q = 0;\n            for (int i = 1; i < n; i++) {\n                for (int j = 0; j < n; j++) {\n                    if (j != x) {\n                        b[p][q++] = a[i][j];\n                        if (q % (n - 1) == 0) {\n                            p++;\n                            q = 0;\n                        }\n                    }\n                }\n            }\n            det = det + a[0][x] * determinant(b, n - 1) * sign;\n            sign = -sign;\n        }\n    }\n    return det;\n}\n",
    "class_name": "HillCipher",
    "method_name": "determinant",
    "arguments": [
        "int[][] a",
        "int n"
    ],
    "generate_test": [
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n        int expectedDeterminant = -3;\n        \n        int actualDeterminant = HillCipher.determinant(matrix, 3);\n        \n        assertEquals(expectedDeterminant, actualDeterminant);\n    }\n}",
        "@BeforeEach\npublic void init() {\n    // Create a test matrix\n    int[][] matrix = {\n        {1, 2},\n        {3, 4}\n    }\n    \n    // Calculate the determinant using the given method\n    int determinant = determinant(matrix, 2);\n    \n    // Expected determinant value\n    int expected = -2;\n    \n    // Assert that the calculated determinant matches the expected value\n    assertEquals(expected, determinant);\n}\n\n@Test\npublic void determinantTest() {\n    init();\n}",
        "@Test\npublic void determinantTest() {\n    int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    assertEquals(-3, determinant(matrix, 3));\n}",
        "@Test\npublic void determinantTest() {\n    int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    int result = HillCipher.determinant(matrix, 3);\n    assertEquals(0, result, \"The determinant of the matrix is not calculated correctly\");\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        int[][] matrix = {{2, 3}, {1, 4}};\n        int result = HillCipher.determinant(matrix, 2);\n        assertEquals(5, result);\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n        int expectedDeterminant = -3;\n        int actualDeterminant = determinant(matrix, 3);\n        assertEquals(expectedDeterminant, actualDeterminant);\n    }\n\n    public int determinant(int[][] a, int n) {\n        int det = 0, sign = 1, p = 0, q = 0;\n\n        if (n == 1) {\n            det = a[0][0];\n        } else {\n            int[][] b = new int[n - 1][n - 1];\n            for (int x = 0; x < n; x++) {\n                p = 0;\n                q = 0;\n                for (int i = 1; i < n; i++) {\n                    for (int j = 0; j < n; j++) {\n                        if (j != x) {\n                            b[p][q++] = a[i][j];\n                            if (q % (n - 1) == 0) {\n                                p++;\n                                q = 0;\n                            }\n                        }\n                    }\n                }\n                det = det + a[0][x] * determinant(b, n - 1) * sign;\n                sign = -sign;\n            }\n        }\n        return det;\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n        int n = 3;\n        int expected = 0;\n        int actual = HillCipher.determinant(matrix, n);\n        assertEquals(expected, actual);\n    }\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HillCipherTest {\n    @Test\n    public void determinantTest() {\n        int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n        int expectedDeterminant = 0;\n        \n        // Calculate the expected determinant using another method or by manual calculation\n        \n        int actualDeterminant = DeterminantUtil.determinant(matrix, 3); // Assuming DeterminantUtil is a separate class that contains the 'determinant' method\n        \n        assertEquals(expectedDeterminant, actualDeterminant);\n    }\n}",
        "@Test\npublic void determinantTest() {\n    int[][] a = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    int expectedDet = 0;\n    int actualDet = determinant(a, 3);\n    assertEquals(expectedDet, actualDet);\n}",
        "@Test\npublic void determinantTest() {\n    int[][] matrix1 = {{1, 2}, {3, 4}};\n    int expected1 = -2;\n    int result1 = HillCipher.determinant(matrix1, 2);\n    assertEquals(expected1, result1);\n\n    int[][] matrix2 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    int expected2 = 0;\n    int result2 = HillCipher.determinant(matrix2, 3);\n    assertEquals(expected2, result2);\n}"
    ]
}
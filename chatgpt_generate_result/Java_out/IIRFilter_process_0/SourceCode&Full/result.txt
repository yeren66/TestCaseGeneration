Source code: 


public double process(double sample) {
    double result = 0.0;

    // Process
    for (int i = 1; i <= order; i++) {
        result += (coeffsB[i] * historyX[i - 1] - coeffsA[i] * historyY[i - 1]);
    }
    result = (result + coeffsB[0] * sample) / coeffsA[0];

    // Feedback
    for (int i = order - 1; i > 0; i--) {
        historyX[i] = historyX[i - 1];
        historyY[i] = historyY[i - 1];
    }

    historyX[0] = sample;
    historyY[0] = result;

    return result;
}



No.1 generated result --------------------------

@Test
    public void processTest() {
        IIRFilter filter = new IIRFilter(2);
        double[] aCoeffs = {1.0, -0.5, 0.2};
        double[] bCoeffs = {0.3, 0.1, 0.5};
        filter.setCoeffs(aCoeffs, bCoeffs);
        double sample = 0.5;
        
        double result = filter.process(sample);
        
        assertEquals(0.6696, result, 0.0001);
    }


No.2 generated result --------------------------

package com.thealgorithms.audiofilters;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class IIRFilterTest {
    @Test
    public void processTest() {
        IIRFilter filter = new IIRFilter(3);
        double[] aCoeffs = {1.0, -0.5, 0.25};
        double[] bCoeffs = {0.1, 0.2, 0.3};
        filter.setCoeffs(aCoeffs, bCoeffs);
        
        double sample = 0.5;
        double expected = 0.125;
        double result = filter.process(sample);
        
        assertEquals(expected, result);
    }
}


No.3 generated result --------------------------

public void processTest() {
    IIRFilter filter = new IIRFilter(2);
    double[] aCoeffs = {1.0, 0.5, 0.25};
    double[] bCoeffs = {0.75, 0.5, 0.25};
    filter.setCoeffs(aCoeffs, bCoeffs);

    double sample = 0.5;
    double expected = 0.184;

    double result = filter.process(sample);

    assertEquals(expected, result, 0.001);
}


No.4 generated result --------------------------

@Test
public void processTest() {
    IIRFilter filter = new IIRFilter(3);
    
    double[] aCoeffs = {1.0, -0.5, 0.25, -0.125};
    double[] bCoeffs = {0.75, 0.5, 0.25, 0.125};
    
    filter.setCoeffs(aCoeffs, bCoeffs);
    
    double sample = 0.5;
    double expectedResult = -0.1875;
    
    double result = filter.process(sample);
    
    assertEquals(expectedResult, result, 0.0001);
}


No.5 generated result --------------------------

@Test
public void processTest() {
    IIRFilter filter = new IIRFilter(3);
    double[] aCoeffs = {1.0, -0.5, 0.3, -0.2};
    double[] bCoeffs = {0.5, -0.4, 0.2, -0.1};
    
    filter.setCoeffs(aCoeffs, bCoeffs);
    
    // Test with sample input
    double sample = 0.6;
    double expected = 0.028;
    double result = filter.process(sample);
    
    assertEquals(expected, result, 0.001);
}


No.6 generated result --------------------------

@Test
public void processTest() {
    double[] aCoeffs = {1.0, 0.5, 0.25};
    double[] bCoeffs = {0.3, 0.1, 0.05};
    IIRFilter filter = new IIRFilter(aCoeffs.length);
    filter.setCoeffs(aCoeffs, bCoeffs);
    double inputSample = 0.8;
    double expectedOutput = 0.659;
    double actualOutput = filter.process(inputSample);
    
    assertEquals(expectedOutput, actualOutput, 0.001);
}


No.7 generated result --------------------------

@Test
    public void processTest() {
        IIRFilter iirFilter = new IIRFilter(2);
        double[] aCoeffs = {1.0, 0.5, 0.1};
        double[] bCoeffs = {0.2, 0.3, 0.4};
        iirFilter.setCoeffs(aCoeffs, bCoeffs);

        double sample = 0.8;
        double expectedOutput = 0.202;
        double result = iirFilter.process(sample);
        assertEquals(expectedOutput, result, 0.001);
    }


No.8 generated result --------------------------

@Test
    public void processTest() {
        IIRFilter filter = new IIRFilter(2);
        double sample = 0.5;
        double[] aCoeffs = {1, 0.5, 0.25};
        double[] bCoeffs = {0.2, 0.4, 0.6};
        double expected = 0.975;

        filter.setCoeffs(aCoeffs, bCoeffs);
        double actual = filter.process(sample);

        assertEquals(expected, actual, 0.001);
    }


No.9 generated result --------------------------

@Test
    public void processTest() {
        IIRFilter filter = new IIRFilter(2);
        
        double[] aCoeffs = {1.0, -0.5, 0.1};
        double[] bCoeffs = {0.2, 0.4, 0.2};
        filter.setCoeffs(aCoeffs, bCoeffs);
        
        double sample = 0.5;
        double expected = 0.3;
        double result = filter.process(sample);
        
        assertEquals(expected, result, 0.0001);
    }


No.10 generated result --------------------------

@Test
public void processTest() {
    IIRFilter filter = new IIRFilter(3);
    double[] aCoeffs = {1.0, 0.5, 0.25};
    double[] bCoeffs = {0.8, 0.6, 0.4};
    filter.setCoeffs(aCoeffs, bCoeffs);
    
    double sample = 0.7;
    double expected = 0.6;
    double result = filter.process(sample);
    assertEquals(expected, result, 0.0001);
}



{
    "project_name": "Java",
    "file_name": "IIRFilter.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/audiofilters/IIRFilter.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.audiofilters",
    "docstring": "/**\n     * Process a single sample\n     *\n     * @param sample the sample to process\n     * @return the processed sample\n     */",
    "source_code": "\npublic double process(double sample) {\n    double result = 0.0;\n\n    // Process\n    for (int i = 1; i <= order; i++) {\n        result += (coeffsB[i] * historyX[i - 1] - coeffsA[i] * historyY[i - 1]);\n    }\n    result = (result + coeffsB[0] * sample) / coeffsA[0];\n\n    // Feedback\n    for (int i = order - 1; i > 0; i--) {\n        historyX[i] = historyX[i - 1];\n        historyY[i] = historyY[i - 1];\n    }\n\n    historyX[0] = sample;\n    historyY[0] = result;\n\n    return result;\n}\n",
    "class_name": "IIRFilter",
    "method_name": "process",
    "arguments": [
        "double sample"
    ],
    "generate_test": [
        "package com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        // Initialize coefficients and history arrays\n        double[] coeffsB = {0.25, 0.5, 0.25};\n        double[] coeffsA = {1.0, -0.5, 0.25};\n        double[] historyX = {0.0, 0.0, 0.0};\n        double[] historyY = {0.0, 0.0, 0.0};\n\n        // Initialize the IIRFilter object\n        IIRFilter iirFilter = new IIRFilter(coeffsB, coeffsA, historyX, historyY);\n\n        // Test the process method\n        double sample = 1.0;\n        double expected = 0.25;\n        double actual = iirFilter.process(sample);\n        assertEquals(expected, actual);\n    }\n}",
        "package com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        double[] coeffsB = {1.0, 2.0, 3.0};\n        double[] coeffsA = {4.0, 5.0, 6.0};\n        double[] historyX = {0.0, 0.0, 0.0};\n        double[] historyY = {0.0, 0.0, 0.0};\n        int order = 2;\n        double sample = 1.0;\n        \n        IIRFilter iirFilter = new IIRFilter();\n        \n        double result = iirFilter.process(sample, coeffsB, coeffsA, historyX, historyY, order);\n        \n        // Assert the expected output\n        assertEquals(3.0, result);\n    }\n}",
        "package com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        // Create an instance of the IIRFilter class\n        IIRFilter filter = new IIRFilter();\n\n        // Set the necessary values for the order of the filter, coeffsB, coeffsA, and historyX, historyY\n        filter.order = 3;\n        filter.coeffsB = new double[]{0.5, 0.8, 1.2, 1.5};\n        filter.coeffsA = new double[]{1.0, 0.6, 0.3, 0.1};\n        filter.historyX = new double[]{0.0, 0.0, 0.0};\n        filter.historyY = new double[]{0.0, 0.0, 0.0};\n\n        // Test the process() method with a sample input\n        double sample = 1.0;\n        double expectedOutput = 0.35; // expected result based on the provided source code\n        double actualOutput = filter.process(sample);\n\n        // Verify that the actual output matches the expected output\n        assertEquals(expectedOutput, actualOutput, 0.0001);\n    }\n}",
        "@Test\npublic void processTest() {\n    IIRFilter filter = new IIRFilter();\n    double sample = 2.0;\n    \n    // Set up coefficients and history arrays for testing\n    double[] coeffsB = {1.0, 2.0, 3.0};\n    double[] coeffsA = {4.0, 5.0, 6.0};\n    \n    double[] historyX = {0.0, 0.0, 0.0};\n    double[] historyY = {0.0, 0.0, 0.0};\n    \n    filter.setCoeffs(coeffsB, coeffsA);\n    filter.setHistory(historyX, historyY);\n    \n    double expectedOutput = 3.333333333333333;\n    double actualOutput = filter.process(sample);\n    \n    assertEquals(expectedOutput, actualOutput);\n}",
        "@Test\npublic void processTest() {\n    IIRFilter filter = new IIRFilter();\n    double result = filter.process(1.0);\n    assertEquals(<expected value>, result, <tolerance>);\n}",
        "@Test\npublic void processTest() {\n    double[] coeffsB = {2.0, 4.0, 6.0}; // example values for coefficients\n    double[] coeffsA = {1.0, 2.0, 3.0}; // example values for coefficients\n    double[] historyX = {1.0, 2.0, 3.0}; // example values for historyX\n    double[] historyY = {4.0, 5.0, 6.0}; // example values for historyY\n    \n    int order = 3; // example value for order\n    double sample = 7.0; // example value for sample\n    \n    double result = 0.0;\n    \n    // Process\n    for (int i = 1; i <= order; i++) {\n        result += (coeffsB[i] * historyX[i - 1] - coeffsA[i] * historyY[i - 1]);\n    }\n    result = (result + coeffsB[0] * sample) / coeffsA[0];\n    \n    // Feedback\n    for (int i = order - 1; i > 0; i--) {\n        historyX[i] = historyX[i - 1];\n        historyY[i] = historyY[i - 1];\n    }\n    \n    historyX[0] = sample;\n    historyY[0] = result;\n    \n    assertEquals(expectedResult, result); // Add assertion for expected result\n    assertArrayEquals(expectedHistoryX, historyX); // Add assertion for expected historyX\n    assertArrayEquals(expectedHistoryY, historyY); // Add assertion for expected historyY\n}",
        "@Test\npublic void processTest() {\n    double[] coeffsB = {0.5, 0.3, 0.1};\n    double[] coeffsA = {1.0, 0.4, 0.2};\n    double[] historyX = {0.0, 0.0, 0.0};\n    double[] historyY = {0.0, 0.0, 0.0};\n    int order = 3;\n    \n    IIRFilter filter = new IIRFilter(coeffsB, coeffsA, historyX, historyY, order);\n    \n    double sample = 0.75;\n    double expected = 0.5 * historyX[2] - 1.0 * historyY[2] + 0.3 * historyX[1] - 0.4 * historyY[1] + \n                      0.1 * historyX[0] - 0.2 * historyY[0] + 0.5 * sample / 1.0;\n    \n    double result = filter.process(sample);\n    \n    assertEquals(expected, result);\n}",
        "@Test\npublic void processTest() {\n    double[] coeffsB = {0.5, 0.5, 0.5}; // Example coefficients\n    double[] coeffsA = {1.0, 2.0, 1.0}; // Example coefficients\n    int order = coeffsB.length - 1;\n    double[] historyX = new double[order];\n    double[] historyY = new double[order];\n    double sample = 0.5; // Example input value\n\n    IIRFilter filter = new IIRFilter(coeffsB, coeffsA, order, historyX, historyY);\n    double result = filter.process(sample);\n\n    assertEquals(0.5, result); // Example assertion\n}\n    \nIIRFilter is the class that contains the \"process\" method. In order to test this method, we need to create an instance of IIRFilter class and pass it the necessary parameters such as the coefficients (coeffsB and coeffsA), order, and history arrays (historyX and historyY). We also need to provide an example input value (sample).\n\nIn the test case, we create an instance of IIRFilter and call the process method with the example input value. We then use the \"assertEquals\" assertion to compare the expected output (0.5) with the actual output (result).",
        "package com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        // Create an instance of the IIRFilter class\n        IIRFilter filter = new IIRFilter();\n        \n        // Set the required values for order, coeffsA, coeffsB, and historyX\n        int order = 3;\n        double[] coeffsA = {1.0, 0.2, 0.3, 0.1};\n        double[] coeffsB = {0.5, 0.6, 0.4, 0.8};\n        double[] historyX = {0.2, 0.1, 0.5, 0.3};\n        \n        // Set the sample value\n        double sample = 0.7;\n        \n        // Call the process method and store the actual result\n        double actualResult = filter.process(sample, order, coeffsA, coeffsB, historyX);\n        \n        // Calculate the expected result manually based on the given source code\n        double expectedResult = 0.0;\n        for (int i = 1; i <= order; i++) {\n            expectedResult += (coeffsB[i] * historyX[i - 1] - coeffsA[i] * historyY[i - 1]);\n        }\n        expectedResult = (expectedResult + coeffsB[0] * sample) / coeffsA[0];\n        \n        // Assert that the actual result matches the expected result\n        assertEquals(expectedResult, actualResult, 0.0001); // Use an appropriate delta for double comparison\n    }\n}",
        "package com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        // Given\n        double sample = 2.5;\n        int order = 3;\n        double[] coeffsB = {0.5, 0.3, 0.1, 0.2};\n        double[] coeffsA = {0.4, 0.2, 0.1, 0.3};\n        double[] historyX = {1.0, 1.5, 2.0};\n        double[] historyY = {0.8, 1.2, 1.6};\n        double expectedResult = 1.46;\n        \n        // When\n        IIRFilter filter = new IIRFilter(order, coeffsB, coeffsA, historyX, historyY);\n        double result = filter.process(sample);\n        \n        // Then\n        assertEquals(expectedResult, result);\n    }\n}"
    ]
}
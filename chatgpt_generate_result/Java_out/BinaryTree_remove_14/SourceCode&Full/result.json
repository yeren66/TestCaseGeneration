{
    "project_name": "Java",
    "file_name": "BinaryTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/BinaryTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": "/**\n     * Deletes a given value from the Binary Tree\n     *\n     * @param value Value to be deleted\n     * @return If the value was deleted\n     */",
    "source_code": "\npublic boolean remove(int value) {\n    // temp is the node to be deleted\n    Node temp = find(value);\n\n    // If the value doesn't exist\n    if (temp.data != value) {\n        return false;\n    }\n\n    // No children\n    if (temp.right == null && temp.left == null) {\n        if (temp == root) {\n            root = null;\n        } // This if/else assigns the new node to be either the left or right child of the\n          // parent\n        else if (temp.parent.data < temp.data) {\n            temp.parent.right = null;\n        } else {\n            temp.parent.left = null;\n        }\n        return true;\n    } // Two children\n    else if (temp.left != null && temp.right != null) {\n        Node successor = findSuccessor(temp);\n\n        // The left tree of temp is made the left tree of the successor\n        successor.left = temp.left;\n        successor.left.parent = successor;\n\n        // If the successor has a right child, the child's grandparent is it's new parent\n        if (successor.parent != temp) {\n            if (successor.right != null) {\n                successor.right.parent = successor.parent;\n                successor.parent.left = successor.right;\n            } else {\n                successor.parent.left = null;\n            }\n            successor.right = temp.right;\n            successor.right.parent = successor;\n        }\n\n        if (temp == root) {\n            successor.parent = null;\n            root = successor;\n        } // If you're not deleting the root\n        else {\n            successor.parent = temp.parent;\n\n            // This if/else assigns the new node to be either the left or right child of the\n            // parent\n            if (temp.parent.data < temp.data) {\n                temp.parent.right = successor;\n            } else {\n                temp.parent.left = successor;\n            }\n        }\n        return true;\n    } // One child\n    else {\n        // If it has a right child\n        if (temp.right != null) {\n            if (temp == root) {\n                root = temp.right;\n                return true;\n            }\n\n            temp.right.parent = temp.parent;\n\n            // Assigns temp to left or right child\n            if (temp.data < temp.parent.data) {\n                temp.parent.left = temp.right;\n            } else {\n                temp.parent.right = temp.right;\n            }\n        } // If it has a left child\n        else {\n            if (temp == root) {\n                root = temp.left;\n                return true;\n            }\n\n            temp.left.parent = temp.parent;\n\n            // Assigns temp to left or right side\n            if (temp.data < temp.parent.data) {\n                temp.parent.left = temp.left;\n            } else {\n                temp.parent.right = temp.left;\n            }\n        }\n        return true;\n    }\n}\n",
    "class_name": "BinaryTree",
    "method_name": "remove",
    "arguments": [
        "int value"
    ],
    "generate_test": [
        "\npackage com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void removeTest() {\n        BinaryTree tree = new BinaryTree();\n        tree.put(5);\n        tree.put(3);\n        tree.put(7);\n        tree.remove(3);\n        assertNull(tree.find(3));\n        assertNotNull(tree.find(5));\n        assertNotNull(tree.find(7));\n        assertTrue(tree.remove(5));\n        assertTrue(tree.remove(7));\n        assertNull(tree.find(5));\n        assertNull(tree.find(7));\n        assertNull(tree.getRoot());\n    }\n}\n",
        "@Test\npublic void removeTest() {\n    BinaryTree testTree = new BinaryTree();\n    testTree.put(5);\n    testTree.put(3);\n    testTree.put(7);\n    testTree.put(2);\n    testTree.put(4);\n    testTree.put(6);\n    testTree.put(8);\n\n    // Remove a node with no children\n    assertTrue(testTree.remove(4));\n    assertNull(testTree.find(4));\n\n    // Remove a node with one child\n    assertTrue(testTree.remove(7));\n    assertNull(testTree.find(7));\n\n    // Remove a node with two children\n    assertTrue(testTree.remove(3));\n    assertNull(testTree.find(3));\n}",
        "@Test\npublic void removeTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(5);\n    tree.put(3);\n    tree.put(7);\n    \n    // Test removing a value that doesn't exist\n    assertFalse(tree.remove(1));\n    \n    // Test removing a leaf node\n    assertTrue(tree.remove(3));\n    assertNull(tree.find(3));\n    \n    // Test removing a node with two children\n    assertTrue(tree.remove(5));\n    assertNull(tree.find(5));\n    assertNotNull(tree.find(7));\n    assertNotNull(tree.findSuccessor(tree.find(7)));\n\n    // Test removing the root node\n    assertTrue(tree.remove(7));\n    assertNull(tree.find(7));\n    assertNotNull(tree.getRoot());\n}\n",
        "@Test\npublic void removeTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(5);\n    tree.put(3);\n    tree.put(7);\n    tree.put(2);\n    tree.put(4);\n    tree.put(6);\n    tree.put(8);\n    \n    assertTrue(tree.remove(2)); // Removing a leaf node\n    assertFalse(tree.remove(9)); // Value doesn't exist\n    \n    assertTrue(tree.remove(3)); // Node with one child (right child)\n    \n    assertTrue(tree.remove(7)); // Node with one child (left child)\n    assertFalse(tree.remove(7)); // Value has already been removed\n    \n    assertTrue(tree.remove(5)); // Node with two children\n    \n    assertTrue(tree.remove(6)); // Removing a leaf node\n    assertTrue(tree.remove(8)); // Removing a leaf node\n    \n    assertNull(tree.getRoot()); // Tree should be empty\n}",
        "   @Test\n    public void removeTest() {\n        BinaryTree tree = new BinaryTree();\n        tree.put(10);\n        tree.put(5);\n        tree.put(15);\n        tree.put(3);\n        tree.put(7);\n        \n        assertTrue(tree.remove(3));\n        assertFalse(tree.remove(8));\n        assertTrue(tree.remove(10));\n        \n        assertNull(tree.find(3));\n        assertNotNull(tree.find(5));\n        assertNotNull(tree.find(7));\n        assertNull(tree.find(10));\n    }",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void removeTest() {\n        BinaryTree tree = new BinaryTree();\n        tree.put(10);\n        tree.put(5);\n        tree.put(15);\n        tree.put(3);\n        \n        // Testing removal of a value that exists in the tree\n        assertTrue(tree.remove(5));\n        \n        // Testing removal of a value that doesn't exist in the tree\n        assertFalse(tree.remove(8));\n        \n        // Testing removal of the root node\n        assertTrue(tree.remove(10));\n        \n        // Testing removal of a leaf node\n        assertTrue(tree.remove(3));\n\n        // Testing removal of a value when there are no elements in the tree\n        assertFalse(tree.remove(10));\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void removeTest() {\n        BinaryTree tree = new BinaryTree();\n        \n        // Inserting elements into the tree for testing\n        tree.put(10);\n        tree.put(5);\n        tree.put(15);\n        tree.put(3);\n        tree.put(7);\n        tree.put(12);\n        tree.put(20);\n        \n        // Removing a value that doesn't exist in the tree\n        assertFalse(tree.remove(1));\n        \n        // Removing a leaf node\n        assertTrue(tree.remove(3));\n        \n        // Removing a node with two children\n        assertTrue(tree.remove(5));\n        \n        // Removing a node with one child\n        assertTrue(tree.remove(15));\n    }\n}",
        "@Test\npublic void removeTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(5);\n    tree.put(3);\n    tree.put(7);\n    tree.put(2);\n    tree.put(4);\n\n    boolean result = tree.remove(3);\n\n    assertTrue(result);\n    assertNull(tree.find(3));\n    assertEquals(4, tree.getRoot().left.data);\n}",
        "@Test\n    public void removeTest() {\n        BinaryTree tree = new BinaryTree();\n        tree.put(5);\n        tree.put(3);\n        tree.put(7);\n        tree.put(2);\n        tree.put(4);\n        tree.put(6);\n        tree.put(8);\n\n        assertTrue(tree.remove(5));\n        assertFalse(tree.remove(9));\n        assertTrue(tree.remove(3));\n        assertTrue(tree.remove(8));\n    }",
        "@Test\npublic void removeTest() {\n    BinaryTree tree = new BinaryTree();\n    tree.put(5);\n    tree.put(3);\n    tree.put(7);\n    tree.put(2);\n    tree.put(4);\n    tree.put(6);\n    tree.put(8);\n    \n    assertTrue(tree.remove(3));\n    assertTrue(tree.remove(7));\n    assertTrue(tree.remove(5));\n    assertFalse(tree.remove(10));\n}"
    ]
}
{
    "project_name": "Java",
    "file_name": "ConnectedComponent.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/graphs/ConnectedComponent.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.graphs",
    "docstring": "/**\n     * Main method used for counting the connected components. Iterates through\n     * the array of nodes to do a depth first search to get all nodes of the\n     * graph from the actual node. These nodes are added to the array\n     * markedNodes and will be ignored if they are chosen in the nodeList.\n     *\n     * @return returns the amount of unconnected graphs\n     */",
    "source_code": "\npublic int countGraphs() {\n    int count = 0;\n    Set<Node> markedNodes = new HashSet<Node>();\n\n    for (Node n : nodeList) {\n        if (!markedNodes.contains(n)) {\n            markedNodes.add(n);\n            markedNodes.addAll(depthFirstSearch(n, new ArrayList<Node>()));\n            count++;\n        }\n    }\n\n    return count;\n}\n",
    "class_name": "Graph",
    "method_name": "countGraphs",
    "arguments": [],
    "generate_test": [
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        Graph<Integer> graph = new Graph<>();\n        \n        // Graph 1\n        graph.addEdge(1, 2);\n        graph.addEdge(2, 3);\n        graph.addEdge(2, 4);\n        graph.addEdge(3, 5);\n        \n        assertEquals(2, graph.countGraphs());\n        \n        graph = new Graph<>();\n        \n        // Graph 2\n        graph.addEdge(7, 8);\n        graph.addEdge(8, 10);\n        graph.addEdge(10, 8);\n        \n        assertEquals(1, graph.countGraphs());\n    }\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph<Character> graphChars = new Graph<>();\n    graphChars.addEdge('a', 'b');\n    graphChars.addEdge('a', 'e');\n    graphChars.addEdge('b', 'e');\n    graphChars.addEdge('b', 'c');\n    graphChars.addEdge('c', 'd');\n    graphChars.addEdge('d', 'a');\n\n    graphChars.addEdge('x', 'y');\n    graphChars.addEdge('x', 'z');\n\n    graphChars.addEdge('w', 'w');\n\n    int expectedCharGraphs = 2;\n    int actualCharGraphs = graphChars.countGraphs();\n\n    assertEquals(expectedCharGraphs, actualCharGraphs);\n\n    Graph<Integer> graphInts = new Graph<>();\n    graphInts.addEdge(1, 2);\n    graphInts.addEdge(2, 3);\n    graphInts.addEdge(2, 4);\n    graphInts.addEdge(3, 5);\n\n    graphInts.addEdge(7, 8);\n    graphInts.addEdge(8, 10);\n    graphInts.addEdge(10, 8);\n\n    int expectedIntGraphs = 2;\n    int actualIntGraphs = graphInts.countGraphs();\n\n    assertEquals(expectedIntGraphs, actualIntGraphs);\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph<Character> graphChars = new Graph<>();\n    \n    // Graph 1\n    graphChars.addEdge('a', 'b');\n    graphChars.addEdge('a', 'e');\n    graphChars.addEdge('b', 'e');\n    graphChars.addEdge('b', 'c');\n    graphChars.addEdge('c', 'd');\n    graphChars.addEdge('d', 'a');\n\n    graphChars.addEdge('x', 'y');\n    graphChars.addEdge('x', 'z');\n\n    graphChars.addEdge('w', 'w');\n\n    Graph<Integer> graphInts = new Graph<>();\n\n    // Graph 2\n    graphInts.addEdge(1, 2);\n    graphInts.addEdge(2, 3);\n    graphInts.addEdge(2, 4);\n    graphInts.addEdge(3, 5);\n\n    graphInts.addEdge(7, 8);\n    graphInts.addEdge(8, 10);\n    graphInts.addEdge(10, 8);\n    \n    int charGraphCount = graphChars.countGraphs();\n    int intGraphCount = graphInts.countGraphs();\n    \n    assertEquals(2, charGraphCount, \"Incorrect count of char-graphs\");\n    assertEquals(2, intGraphCount, \"Incorrect count of int-graphs\"); \n}",
        "@Test\npublic void countGraphsTest() {\n    Graph<Character> graphChars = new Graph<>();\n\n    // Graph 1\n    graphChars.addEdge('a', 'b');\n    graphChars.addEdge('a', 'e');\n    graphChars.addEdge('b', 'e');\n    graphChars.addEdge('b', 'c');\n    graphChars.addEdge('c', 'd');\n    graphChars.addEdge('d', 'a');\n\n    graphChars.addEdge('x', 'y');\n    graphChars.addEdge('x', 'z');\n\n    graphChars.addEdge('w', 'w');\n\n    Graph<Integer> graphInts = new Graph<>();\n\n    // Graph 2\n    graphInts.addEdge(1, 2);\n    graphInts.addEdge(2, 3);\n    graphInts.addEdge(2, 4);\n    graphInts.addEdge(3, 5);\n\n    graphInts.addEdge(7, 8);\n    graphInts.addEdge(8, 10);\n    graphInts.addEdge(10, 8);\n\n    assertEquals(3, graphChars.countGraphs());\n    assertEquals(2, graphInts.countGraphs());\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph<Character> graphChars = new Graph<>();\n    \n    // Graph 1\n    graphChars.addEdge('a', 'b');\n    graphChars.addEdge('a', 'e');\n    graphChars.addEdge('b', 'e');\n    graphChars.addEdge('b', 'c');\n    graphChars.addEdge('c', 'd');\n    graphChars.addEdge('d', 'a');\n\n    graphChars.addEdge('x', 'y');\n    graphChars.addEdge('x', 'z');\n\n    graphChars.addEdge('w', 'w');\n    \n    assertEquals(2, graphChars.countGraphs());\n    \n    Graph<Integer> graphInts = new Graph<>();\n    \n    // Graph 2\n    graphInts.addEdge(1, 2);\n    graphInts.addEdge(2, 3);\n    graphInts.addEdge(2, 4);\n    graphInts.addEdge(3, 5);\n\n    graphInts.addEdge(7, 8);\n    graphInts.addEdge(8, 10);\n    graphInts.addEdge(10, 8);\n    \n    assertEquals(2, graphInts.countGraphs());\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph<Character> graphChars = new Graph<>();\n    graphChars.addEdge('a', 'b');\n    graphChars.addEdge('a', 'e');\n    graphChars.addEdge('b', 'e');\n    graphChars.addEdge('b', 'c');\n    graphChars.addEdge('c', 'd');\n    graphChars.addEdge('d', 'a');\n\n    graphChars.addEdge('x', 'y');\n    graphChars.addEdge('x', 'z');\n\n    graphChars.addEdge('w', 'w');\n\n    assertEquals(2, graphChars.countGraphs());\n\n    Graph<Integer> graphInts = new Graph<>();\n    graphInts.addEdge(1, 2);\n    graphInts.addEdge(2, 3);\n    graphInts.addEdge(2, 4);\n    graphInts.addEdge(3, 5);\n\n    graphInts.addEdge(7, 8);\n    graphInts.addEdge(8, 10);\n    graphInts.addEdge(10, 8);\n\n    assertEquals(2, graphInts.countGraphs());\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        Graph<Character> graphChars = new Graph<>();\n\n        graphChars.addEdge('a', 'b');\n        graphChars.addEdge('a', 'e');\n        graphChars.addEdge('b', 'e');\n        graphChars.addEdge('b', 'c');\n        graphChars.addEdge('c', 'd');\n        graphChars.addEdge('d', 'a');\n\n        graphChars.addEdge('x', 'y');\n        graphChars.addEdge('x', 'z');\n\n        graphChars.addEdge('w', 'w');\n\n        assertEquals(2, graphChars.countGraphs());\n    }\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph<Character> graphChars = new Graph<>();\n    graphChars.addEdge('a', 'b');\n    graphChars.addEdge('a', 'e');\n    graphChars.addEdge('b', 'e');\n    graphChars.addEdge('b', 'c');\n    graphChars.addEdge('c', 'd');\n    graphChars.addEdge('d', 'a');\n    \n    graphChars.addEdge('x', 'y');\n    graphChars.addEdge('x', 'z');\n    \n    graphChars.addEdge('w', 'w');\n\n    assertEquals(2, graphChars.countGraphs());\n\n    Graph<Integer> graphInts = new Graph<>();\n    graphInts.addEdge(1, 2);\n    graphInts.addEdge(2, 3);\n    graphInts.addEdge(2, 4);\n    graphInts.addEdge(3, 5);\n    \n    graphInts.addEdge(7, 8);\n    graphInts.addEdge(8, 10);\n    graphInts.addEdge(10, 8);\n\n    assertEquals(2, graphInts.countGraphs());\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph<Character> graphChars = new Graph<>();\n    graphChars.addEdge('a', 'b');\n    graphChars.addEdge('a', 'e');\n    graphChars.addEdge('b', 'e');\n    graphChars.addEdge('b', 'c');\n    graphChars.addEdge('c', 'd');\n    graphChars.addEdge('d', 'a');\n\n    graphChars.addEdge('x', 'y');\n    graphChars.addEdge('x', 'z');\n\n    graphChars.addEdge('w', 'w');\n\n    assertEquals(2, graphChars.countGraphs());\n\n    Graph<Integer> graphInts = new Graph<>();\n    graphInts.addEdge(1, 2);\n    graphInts.addEdge(2, 3);\n    graphInts.addEdge(2, 4);\n    graphInts.addEdge(3, 5);\n\n    graphInts.addEdge(7, 8);\n    graphInts.addEdge(8, 10);\n    graphInts.addEdge(10, 8);\n\n    assertEquals(2, graphInts.countGraphs());\n}",
        "@Test\n    public void countGraphsTest() {\n        Graph<Character> graphChars = new Graph<>();\n\n        // Graph 1\n        graphChars.addEdge('a', 'b');\n        graphChars.addEdge('a', 'e');\n        graphChars.addEdge('b', 'e');\n        graphChars.addEdge('b', 'c');\n        graphChars.addEdge('c', 'd');\n        graphChars.addEdge('d', 'a');\n\n        graphChars.addEdge('x', 'y');\n        graphChars.addEdge('x', 'z');\n\n        graphChars.addEdge('w', 'w');\n        \n        assertEquals(<expected count>, graphChars.countGraphs());\n\n        Graph<Integer> graphInts = new Graph<>();\n\n        // Graph 2\n        graphInts.addEdge(1, 2);\n        graphInts.addEdge(2, 3);\n        graphInts.addEdge(2, 4);\n        graphInts.addEdge(3, 5);\n\n        graphInts.addEdge(7, 8);\n        graphInts.addEdge(8, 10);\n        graphInts.addEdge(10, 8);\n        \n        assertEquals(<expected count>, graphInts.countGraphs());\n    }"
    ]
}
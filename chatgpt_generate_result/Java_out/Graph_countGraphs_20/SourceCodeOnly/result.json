{
    "project_name": "Java",
    "file_name": "ConnectedComponent.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/graphs/ConnectedComponent.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.graphs",
    "docstring": "/**\n     * Main method used for counting the connected components. Iterates through\n     * the array of nodes to do a depth first search to get all nodes of the\n     * graph from the actual node. These nodes are added to the array\n     * markedNodes and will be ignored if they are chosen in the nodeList.\n     *\n     * @return returns the amount of unconnected graphs\n     */",
    "source_code": "\npublic int countGraphs() {\n    int count = 0;\n    Set<Node> markedNodes = new HashSet<Node>();\n\n    for (Node n : nodeList) {\n        if (!markedNodes.contains(n)) {\n            markedNodes.add(n);\n            markedNodes.addAll(depthFirstSearch(n, new ArrayList<Node>()));\n            count++;\n        }\n    }\n\n    return count;\n}\n",
    "class_name": "Graph",
    "method_name": "countGraphs",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    \n    // Create nodes and add them to the graph\n    \n    Node node1 = new Node();\n    Node node2 = new Node();\n    Node node3 = new Node();\n    // Add more nodes if needed\n    \n    graph.addNode(node1);\n    graph.addNode(node2);\n    graph.addNode(node3);\n    // Add nodes to the graph\n    \n    int expectedCount = 3; // Set the expected count of graphs\n    \n    int result = graph.countGraphs(); // Call the method under test\n    \n    assertEquals(expectedCount, result); // Check if the result matches the expected count\n    \n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        Graph graph = new Graph(); // create an instance of the Graph class\n        Node node1 = new Node(); // create a sample node\n        Node node2 = new Node();\n        Node node3 = new Node();\n        Node node4 = new Node();\n        \n        // add nodes to the nodeList in the Graph instance\n        graph.addNode(node1);\n        graph.addNode(node2);\n        graph.addNode(node3);\n        graph.addNode(node4);\n        \n        // call the countGraphs method and assert the expected output\n        assertEquals(1, graph.countGraphs()); // expected output is 1 since all nodes are connected\n        \n        Node node5 = new Node(); // create a disconnected node\n        graph.addNode(node5); // add the disconnected node to the nodeList\n        \n        // call the countGraphs method and assert the expected output\n        assertEquals(2, graph.countGraphs()); // expected output is now 2 since the disconnected node forms a separate graph\n    }\n}",
        "public void countGraphsTest() {\n    Graph graph = new Graph();\n    Node node1 = new Node(1);\n    Node node2 = new Node(2);\n    Node node3 = new Node(3);\n    \n    graph.addEdge(node1, node2);\n    graph.addEdge(node2, node3);\n    \n    int expected = 1;\n    int actual = graph.countGraphs();\n    \n    assertEquals(expected, actual);\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    Node node1 = new Node(\"A\");\n    Node node2 = new Node(\"B\");\n    Node node3 = new Node(\"C\");\n    \n    // create edges between nodes\n    node1.addEdge(node2);\n    node2.addEdge(node3);\n    \n    // add nodes to the graph\n    graph.addNode(node1);\n    graph.addNode(node2);\n    graph.addNode(node3);\n    \n    int expectedCount = 1;\n    int actualCount = graph.countGraphs();\n    \n    assertEquals(expectedCount, actualCount);\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    \n    Node node1 = new Node(1);\n    Node node2 = new Node(2);\n    Node node3 = new Node(3);\n    \n    node1.addNeighbor(node2);\n    node2.addNeighbor(node1);\n    node2.addNeighbor(node3);\n    node3.addNeighbor(node2);\n    \n    graph.addNode(node1);\n    graph.addNode(node2);\n    graph.addNode(node3);\n    \n    int result = graph.countGraphs();\n    \n    assertEquals(1, result);\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    Node node1 = new Node(1);\n    Node node2 = new Node(2);\n    Node node3 = new Node(3);\n    \n    graph.addNode(node1);\n    graph.addNode(node2);\n    graph.addNode(node3);\n    \n    node1.addEdge(node2);\n    node2.addEdge(node3);\n    \n    int result = graph.countGraphs();\n    assertEquals(1, result);\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    Node node1 = new Node(1);\n    Node node2 = new Node(2);\n    Node node3 = new Node(3);\n    \n    graph.addNode(node1);\n    graph.addNode(node2);\n    graph.addNode(node3);\n    \n    graph.addEdge(node1, node2);\n    \n    assertEquals(2, graph.countGraphs());\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    \n    // create the nodes and add them to the graph\n    Node node1 = new Node();\n    Node node2 = new Node();\n    Node node3 = new Node();\n    \n    graph.addNode(node1);\n    graph.addNode(node2);\n    graph.addNode(node3);\n    \n    // create the edges between the nodes\n    graph.addEdge(node1, node2);\n    graph.addEdge(node2, node3);\n    graph.addEdge(node3, node1);\n    \n    // check that the countGraphs() method returns the correct value\n    assertEquals(1, graph.countGraphs());\n}",
        "public void countGraphsTest() {\n    Graph graph = new Graph();\n    graph.addNode(new Node(\"A\"));\n    graph.addNode(new Node(\"B\"));\n    graph.addNode(new Node(\"C\"));\n    graph.addNode(new Node(\"D\"));\n\n    graph.addEdge(\"A\", \"B\");\n    graph.addEdge(\"B\", \"C\");\n    graph.addEdge(\"C\", \"D\");\n\n    int result = graph.countGraphs();\n    assertEquals(1, result);\n}",
        "public void countGraphsTest() {\n        Graph graph = new Graph();\n\n        // create nodes\n        Node n1 = new Node(1);\n        Node n2 = new Node(2);\n        Node n3 = new Node(3);\n        Node n4 = new Node(4);\n        Node n5 = new Node(5);\n\n        // create edges\n        graph.addEdge(n1, n2);\n        graph.addEdge(n2, n3);\n        graph.addEdge(n3, n4);\n        graph.addEdge(n4, n5);\n\n        int result = graph.countGraphs();\n\n        assertEquals(1, result);\n    }"
    ]
}
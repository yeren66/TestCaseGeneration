{
    "project_name": "jeecg-boot",
    "file_name": "JSqlParserAllTableManager.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/sqlparse/JSqlParserAllTableManager.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.util.sqlparse",
    "docstring": "/**\n     * \u5f00\u59cb\u89e3\u6790\n     *\n     * @return\n     * @throws JSQLParserException\n     */",
    "source_code": "\npublic Map<String, SelectSqlInfo> parse() throws JSQLParserException {\n    // 1. \u521b\u5efa\u89e3\u6790\u5668\n    CCJSqlParserManager mgr = new CCJSqlParserManager();\n    // 2. \u4f7f\u7528\u89e3\u6790\u5668\u89e3\u6790sql\u751f\u6210\u5177\u6709\u5c42\u6b21\u7ed3\u6784\u7684java\u7c7b\n    Statement stmt = mgr.parse(new StringReader(this.sql));\n    if (stmt instanceof Select) {\n        Select selectStatement = (Select) stmt;\n        SelectBody selectBody = selectStatement.getSelectBody();\n        this.parsedSql = selectBody.toString();\n        // 3. \u89e3\u6790select\u67e5\u8be2sql\u7684\u4fe1\u606f\n        if (selectBody instanceof PlainSelect) {\n            PlainSelect plainSelect = (PlainSelect) selectBody;\n            // 4. \u5408\u5e76 fromItems\n            List<FromItem> fromItems = new ArrayList<>();\n            fromItems.add(plainSelect.getFromItem());\n            // 4.1 \u5904\u7406join\u7684\u8868\n            List<Join> joins = plainSelect.getJoins();\n            if (joins != null) {\n                joins.forEach(join -> fromItems.add(join.getRightItem()));\n            }\n            // 5. \u5904\u7406 fromItems\n            for (FromItem fromItem : fromItems) {\n                // 5.1 \u901a\u8fc7\u8868\u540d\u7684\u65b9\u5f0ffrom\n                if (fromItem instanceof Table) {\n                    this.addSqlInfoByTable((Table) fromItem);\n                }\n                // 5.2 \u901a\u8fc7\u5b50\u67e5\u8be2\u7684\u65b9\u5f0ffrom\n                else if (fromItem instanceof SubSelect) {\n                    this.handleSubSelect((SubSelect) fromItem);\n                }\n            }\n            // 6. \u89e3\u6790 selectFields\n            List<SelectItem> selectItems = plainSelect.getSelectItems();\n            for (SelectItem selectItem : selectItems) {\n                // 6.1 \u67e5\u8be2\u7684\u662f\u5168\u90e8\u5b57\u6bb5\n                if (selectItem instanceof AllColumns) {\n                    // \u5f53 selectItem \u4e3a AllColumns \u65f6\uff0cfromItem \u5fc5\u5b9a\u4e3a Table\n                    String tableName = plainSelect.getFromItem(Table.class).getName();\n                    // \u6b64\u5904\u5fc5\u5b9a\u4e0d\u4e3a\u7a7a\uff0c\u56e0\u4e3a\u5728\u89e3\u6790 fromItem \u65f6\uff0c\u5df2\u7ecf\u5c06\u8868\u540d\u6dfb\u52a0\u5230 allTableMap \u4e2d\n                    SelectSqlInfo sqlInfo = this.allTableMap.get(tableName);\n                    assert sqlInfo != null;\n                    // \u8bbe\u7f6e\u4e3a\u67e5\u8be2\u5168\u90e8\u5b57\u6bb5\n                    sqlInfo.setSelectAll(true);\n                    sqlInfo.setSelectFields(null);\n                    sqlInfo.setRealSelectFields(null);\n                }\n                // 6.2 \u67e5\u8be2\u7684\u662f\u5e26\u8868\u522b\u540d\uff08 u.* )\u7684\u5168\u90e8\u5b57\u6bb5\n                else if (selectItem instanceof AllTableColumns) {\n                    AllTableColumns allTableColumns = (AllTableColumns) selectItem;\n                    String aliasName = allTableColumns.getTable().getName();\n                    // \u901a\u8fc7\u522b\u540d\u83b7\u53d6\u8868\u540d\n                    String tableName = this.tableAliasMap.get(aliasName);\n                    if (tableName == null) {\n                        tableName = aliasName;\n                    }\n                    SelectSqlInfo sqlInfo = this.allTableMap.get(tableName);\n                    // \u5982\u679c\u6b64\u5904\u4e3a\u7a7a\uff0c\u5219\u8bf4\u660e\u8be5\u5b57\u6bb5\u662f\u901a\u8fc7\u5b50\u67e5\u8be2\u83b7\u53d6\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0d\u5904\u7406\uff0c\u53ea\u6709\u5b9e\u9645\u8868\u624d\u9700\u8981\u5904\u7406\n                    if (sqlInfo != null) {\n                        // \u8bbe\u7f6e\u4e3a\u67e5\u8be2\u5168\u90e8\u5b57\u6bb5\n                        sqlInfo.setSelectAll(true);\n                        sqlInfo.setSelectFields(null);\n                        sqlInfo.setRealSelectFields(null);\n                    }\n                }\n                // 6.3 \u5404\u79cd\u5b57\u6bb5\u8868\u8fbe\u5f0f\u5904\u7406\n                else if (selectItem instanceof SelectExpressionItem) {\n                    SelectExpressionItem selectExpressionItem = (SelectExpressionItem) selectItem;\n                    Expression expression = selectExpressionItem.getExpression();\n                    Alias alias = selectExpressionItem.getAlias();\n                    this.handleExpression(expression, alias, plainSelect.getFromItem());\n                }\n            }\n        } else {\n            log.warn(\"\u6682\u65f6\u5c1a\u672a\u5904\u7406\u8be5\u7c7b\u578b\u7684 SelectBody: {}\", selectBody.getClass().getName());\n            throw new JeecgBootException(\"\u6682\u65f6\u5c1a\u672a\u5904\u7406\u8be5\u7c7b\u578b\u7684 SelectBody\");\n        }\n    } else {\n        // \u975e select \u67e5\u8be2sql\uff0c\u4e0d\u505a\u5904\u7406\n        throw new JeecgBootException(\"\u975e select \u67e5\u8be2sql\uff0c\u4e0d\u505a\u5904\u7406\");\n    }\n    return this.allTableMap;\n}\n",
    "class_name": "JSqlParserAllTableManager",
    "method_name": "parse",
    "arguments": [],
    "generate_test": [
        "public void parseTest() {\n    try {\n        JSqlParserAllTableManager manager = new JSqlParserAllTableManager();\n        manager.setSql(\"SELECT * FROM customers\");\n        Map<String, SelectSqlInfo> result = manager.parse();\n        \n        // Assert statements\n        assertNotNull(result);\n        assertEquals(1, result.size());\n        // Add more assert statements as needed\n    } catch (JSQLParserException e) {\n        e.printStackTrace();\n        fail(\"An exception occurred while parsing the SQL\");\n    }\n}",
        "@Test\npublic void parseTest() {\n    JSqlParserAllTableManager manager = new JSqlParserAllTableManager(\"SELECT * FROM users\");\n    try {\n        Map<String, SelectSqlInfo> result = manager.parse();\n        assertNotNull(result);\n        // Add assertions for the expected output\n        // For example:\n        assertTrue(result.containsKey(\"users\"));\n        assertEquals(\"SELECT * FROM users\", result.get(\"users\").getParsedSql());\n    } catch (JSQLParserException e) {\n        fail(\"An exception occurred during parsing: \" + e.getMessage());\n    }\n}",
        "@Test\npublic void parseTest() throws JSQLParserException {\n    JSqlParserAllTableManager manager = new JSqlParserAllTableManager();\n    manager.setSql(\"SELECT * FROM table1\");\n\n    Map<String, SelectSqlInfo> result = manager.parse();\n\n    assertNotNull(result);\n    assertEquals(1, result.size());\n}",
        "public void parseTest() {\n   JSqlParserAllTableManager manager = new JSqlParserAllTableManager(\"SELECT * FROM employees\");\n   Map<String, SelectSqlInfo> result = null;\n   try {\n      result = manager.parse();\n   } catch (JSQLParserException e) {\n      e.printStackTrace();\n   }\n   \n   // Assertion\n   assertNotNull(result);\n   assertEquals(1, result.size());\n   assertTrue(result.containsKey(\"employees\"));\n}",
        "@Test\npublic void parseTest() {\n    JSqlParserAllTableManager manager = new JSqlParserAllTableManager();\n    String sql = \"SELECT * FROM employees\";\n    manager.setSql(sql);\n    try {\n        Map<String, SelectSqlInfo> result = manager.parse();\n        assertNotNull(result);\n        assertFalse(result.isEmpty());\n        assertEquals(1, result.size());\n        assertTrue(result.containsKey(\"employees\"));\n        SelectSqlInfo sqlInfo = result.get(\"employees\");\n        assertTrue(sqlInfo.isSelectAll());\n        assertNull(sqlInfo.getSelectFields());\n        assertNull(sqlInfo.getRealSelectFields());\n    } catch (JSQLParserException e) {\n        e.printStackTrace();\n        fail(\"An exception occurred while parsing the SQL\");\n    }\n}",
        "@Test\npublic void parseTest() throws JSQLParserException {\n    JSqlParserAllTableManager manager = new JSqlParserAllTableManager();\n    manager.setSql(\"SELECT * FROM customers;\");\n    Map<String, SelectSqlInfo> result = manager.parse();\n    // Assertion to check if the result is not null\n    assertNotNull(result);\n    // Assertion to check if the size of the result is 1\n    assertEquals(1, result.size());\n    // Assertion to check if the table name is \"customers\"\n    assertTrue(result.containsKey(\"customers\"));\n    // Assertion to check if the SelectSqlInfo object is not null\n    assertNotNull(result.get(\"customers\"));\n    // Assertion to check if the SelectSqlInfo object has the selectAll flag set to true\n    assertTrue(result.get(\"customers\").isSelectAll()); \n}",
        "@Test\n    public void parseTest() throws JSQLParserException {\n        JSqlParserAllTableManager manager = new JSqlParserAllTableManager();\n        manager.setSql(\"SELECT id, name FROM employees;\");\n        Map<String, SelectSqlInfo> result = manager.parse();\n        assertNotNull(result);\n        assertEquals(1, result.size());\n        SelectSqlInfo sqlInfo = result.get(\"employees\");\n        assertNotNull(sqlInfo);\n        assertTrue(sqlInfo.isSelectAll());\n        assertNull(sqlInfo.getSelectFields());\n        assertNull(sqlInfo.getRealSelectFields());\n    }",
        "public void parseTest() {\n    try {\n        JSqlParserAllTableManager manager = new JSqlParserAllTableManager();\n        // Set up the SQL query to be parsed\n        manager.setSql(\"SELECT * FROM table1\");\n        \n        // Call the parse method\n        Map<String, SelectSqlInfo> result = manager.parse();\n        \n        // Assert that the result is not null\n        assertNotNull(result);\n        \n        // Assert that the size of the map is 1\n        assertEquals(1, result.size());\n    } catch (JSQLParserException e) {\n        fail(\"An exception occurred during parsing.\");\n    }\n}",
        "package org.jeecg.common.util.sqlparse;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSqlParserAllTableManagerTest {\n    @Test\n    public void parseTest() {\n        // Create an instance of JSqlParserAllTableManager\n        JSqlParserAllTableManager manager = new JSqlParserAllTableManager();\n        \n        // Set the sql property of the manager\n        \n        try {\n            // Call the parse() method on the manager and store the result in a variable\n            Map<String, SelectSqlInfo> result = manager.parse();\n            \n            // Make assertions to verify the correctness of the result\n            \n            // ...\n        } catch (JSQLParserException e) {\n            // Handle the exception\n        }\n    }\n}",
        "@Test\npublic void parseTest() throws JSQLParserException {\n    JSqlParserAllTableManager manager = new JSqlParserAllTableManager();\n    \n    // Set up test data\n    String sql = \"SELECT * FROM table1\";\n    manager.setSql(sql);\n    \n    // Call the method to be tested\n    Map<String, SelectSqlInfo> result = manager.parse();\n    \n    // Assert the result\n    assertNotNull(result);\n    assertEquals(1, result.size());\n    assertTrue(result.containsKey(\"table1\"));\n    \n    SelectSqlInfo sqlInfo = result.get(\"table1\");\n    assertTrue(sqlInfo.isSelectAll());\n    assertNull(sqlInfo.getSelectFields());\n    assertNull(sqlInfo.getRealSelectFields());\n}"
    ]
}
{
    "project_name": "jeecg-boot",
    "file_name": "OssBootUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/oss/OssBootUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.util.oss",
    "docstring": "/**\n     * \u4e0a\u4f20\u6587\u4ef6\u81f3\u963f\u91cc\u4e91 OSS\n     * \u6587\u4ef6\u4e0a\u4f20\u6210\u529f,\u8fd4\u56de\u6587\u4ef6\u5b8c\u6574\u8bbf\u95ee\u8def\u5f84\n     * \u6587\u4ef6\u4e0a\u4f20\u5931\u8d25,\u8fd4\u56de null\n     *\n     * @param file    \u5f85\u4e0a\u4f20\u6587\u4ef6\n     * @param fileDir \u6587\u4ef6\u4fdd\u5b58\u76ee\u5f55\n     * @return oss \u4e2d\u7684\u76f8\u5bf9\u6587\u4ef6\u8def\u5f84\n     */",
    "source_code": "\npublic static String upload(FileItemStream file, String fileDir) {\n    String filePath = null;\n    initOss(endPoint, accessKeyId, accessKeySecret);\n    StringBuilder fileUrl = new StringBuilder();\n    try {\n        String suffix = file.getName().substring(file.getName().lastIndexOf('.'));\n        String fileName = UUID.randomUUID().toString().replace(\"-\", \"\") + suffix;\n        if (!fileDir.endsWith(SymbolConstant.SINGLE_SLASH)) {\n            fileDir = fileDir.concat(SymbolConstant.SINGLE_SLASH);\n        }\n        fileDir = StrAttackFilter.filter(fileDir);\n        fileUrl = fileUrl.append(fileDir + fileName);\n        if (oConvertUtils.isNotEmpty(staticDomain) && staticDomain.toLowerCase().startsWith(CommonConstant.STR_HTTP)) {\n            filePath = staticDomain + SymbolConstant.SINGLE_SLASH + fileUrl;\n        } else {\n            filePath = \"https://\" + bucketName + \".\" + endPoint + SymbolConstant.SINGLE_SLASH + fileUrl;\n        }\n        PutObjectResult result = ossClient.putObject(bucketName, fileUrl.toString(), file.openStream());\n        // \u8bbe\u7f6e\u6743\u9650(\u516c\u5f00\u8bfb)\n        ossClient.setBucketAcl(bucketName, CannedAccessControlList.PublicRead);\n        if (result != null) {\n            log.info(\"------OSS\u6587\u4ef6\u4e0a\u4f20\u6210\u529f------\" + fileUrl);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n    return filePath;\n}\n",
    "class_name": "OssBootUtil",
    "method_name": "upload",
    "arguments": [
        "FileItemStream file",
        "String fileDir"
    ],
    "generate_test": [
        "@Test\npublic void uploadTest() {\n    // Create a mock FileItemStream object\n    FileItemStream file = mock(FileItemStream.class);\n    // Set up the necessary properties for the file object\n    when(file.getName()).thenReturn(\"test.jpg\");\n    when(file.openStream()).thenReturn(new ByteArrayInputStream(\"test\".getBytes()));\n\n    // Set up the necessary properties for the OssBootUtil class\n    OssBootUtil.setEndPoint(\"test-endpoint\");\n    OssBootUtil.setAccessKeyId(\"test-access-key-id\");\n    OssBootUtil.setAccessKeySecret(\"test-access-key-secret\");\n    OssBootUtil.setBucketName(\"test-bucket-name\");\n    OssBootUtil.setStaticDomain(\"test-static-domain\");\n\n    // Call the upload method and assert the returned file path\n    String filePath = OssBootUtil.upload(file, \"test-dir\");\n    assertEquals(\"https://test-bucket-name.test-endpoint/test-dir/test.jpg\", filePath);\n}",
        "@Test\npublic void uploadTest() {\n    FileItemStream file = null; // Insert the required FileItemStream object here\n    String fileDir = \"\"; // Insert the required file directory here\n    \n    String result = OssBootUtil.upload(file, fileDir);\n    \n    assertNotNull(result);\n    assertTrue(result.startsWith(\"https://\"));\n}",
        "@Test\npublic void uploadTest() {\n    FileItemStream file = <mock file item stream>;\n    String fileDir = \"path/to/directory\";\n    OssBootUtil.upload(file, fileDir);\n    <assert statement>;\n}",
        "@Test\npublic void uploadTest() {\n    FileItemStream file = // Create a mock FileItemStream object\n    String fileDir = // Set the fileDir value\n    \n    String result = OssBootUtil.upload(file, fileDir);\n    \n    // Assert statements to verify the expected result\n    assertNotNull(result);\n    assertEquals(expectedFilePath, result);\n}",
        "@Test\npublic void uploadTest() {\n    FileItemStream file = ...; // Create a mock FileItemStream object\n    String fileDir = ...; // Set the file directory\n    String filePath = OssBootUtil.upload(file, fileDir);\n    \n    assertNotNull(filePath);\n    assertTrue(filePath.startsWith(\"https://\"));\n    // Assert other expectations based on the logic of the method\n}",
        "@Test\npublic void uploadTest() {\n    FileItemStream file = null; // create or initialize FileItemStream object\n    String fileDir = \"\"; // specify the file directory\n    \n    String filePath = OssBootUtil.upload(file, fileDir);\n    \n    assertNotNull(filePath);\n}",
        "@Test\n    public void uploadTest() {\n        FileItemStream file = <FILL WITH FILE ITEM STREAM OBJECT>;\n        String fileDir = <FILL WITH FILE DIRECTORY>;\n        String expectedFilePath = <FILL WITH EXPECTED FILE PATH>;\n        \n        String actualFilePath = OssBootUtil.upload(file, fileDir);\n        \n        assertEquals(expectedFilePath, actualFilePath);\n    }",
        "@Test\n    public void uploadTest() {\n        // Create a mock FileItemStream object\n        FileItemStream mockFile = createMockFileItemStream();\n\n        // Set the file directory path\n        String fileDir = \"/path/to/files/\";\n\n        // Call the upload method\n        String filePath = OssBootUtil.upload(mockFile, fileDir);\n\n        // Assert that the returned file path is not null\n        assertNotNull(filePath);\n\n        // Assert that the file path matches the expected value\n        assertEquals(\"https://\" + OssBootUtil.getBucketName() + \".\" + OssBootUtil.getEndPoint() + \"/path/to/files/\" + mockFile.getName(), filePath);\n    }\n\n    private FileItemStream createMockFileItemStream() {\n        // Implement this method to create a mock FileItemStream object for testing\n        // This could be done using a mocking framework like Mockito or by manually creating an object with dummy values\n        // For simplicity, let's assume that the mock file name is \"mockfile.txt\"\n        FileItemStream mockFile = new FileItemStream();\n        mockFile.setName(\"mockfile.txt\");\n        return mockFile;\n    }",
        "@Test\npublic void uploadTest() {\n    // Create a dummy FileItemStream object\n    FileItemStream file = createDummyFileItemStream();\n    \n    // Create a dummy file directory\n    String fileDir = \"dummyDirectory\";\n    \n    // Call the upload method and get the result\n    String result = OssBootUtil.upload(file, fileDir);\n    \n    // Verify the result is not null\n    assertNotNull(result);\n    \n    // Verify that the result is a valid file path\n    assertTrue(result.startsWith(\"https://\"));\n    \n    // Verify that the file path contains the file directory and file name\n    assertTrue(result.contains(fileDir));\n    assertTrue(result.contains(file.getName()));\n}",
        "@Test\npublic void uploadTest() {\n    FileItemStream file = new FileItemStream();\n    String fileDir = \"test-directory\";\n    \n    String result = OssBootUtil.upload(file, fileDir);\n    \n    assertNotNull(result);\n    assertEquals(\"https://bucketName.endPoint/test-directory/fileName\", result);\n}"
    ]
}
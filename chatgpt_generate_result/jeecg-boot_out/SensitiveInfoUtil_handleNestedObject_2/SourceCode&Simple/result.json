{
    "project_name": "jeecg-boot",
    "file_name": "SensitiveInfoUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/desensitization/util/SensitiveInfoUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.desensitization.util",
    "docstring": "/**\n     * \u5904\u7406\u5d4c\u5957\u5bf9\u8c61\n     * @param obj \u65b9\u6cd5\u8fd4\u56de\u503c\n     * @param entity \u5b9e\u4f53class\n     * @param isEncode \u662f\u5426\u52a0\u5bc6\uff08true: \u52a0\u5bc6\u64cd\u4f5c / false:\u89e3\u5bc6\u64cd\u4f5c\uff09\n     * @throws IllegalAccessException\n     */",
    "source_code": "\npublic static void handleNestedObject(Object obj, Class entity, boolean isEncode) throws IllegalAccessException {\n    Field[] fields = obj.getClass().getDeclaredFields();\n    for (Field field : fields) {\n        if(field.getType().isPrimitive()){\n            continue;\n        }\n        if(field.getType().equals(entity)){\n            // \u5bf9\u8c61\u91cc\u9762\u662f\u5b9e\u4f53\n            field.setAccessible(true);\n            Object nestedObject = field.get(obj);\n            handlerObject(nestedObject, isEncode);\n            break;\n        }else{\n            // \u5bf9\u8c61\u91cc\u9762\u662fList<\u5b9e\u4f53>\n            if(field.getGenericType() instanceof ParameterizedType){\n                ParameterizedType pt = (ParameterizedType)field.getGenericType();\n                if(pt.getRawType().equals(List.class)){\n                    if(pt.getActualTypeArguments()[0].equals(entity)){\n                        field.setAccessible(true);\n                        Object nestedObject = field.get(obj);\n                        handleList(nestedObject, entity, isEncode);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "class_name": "SensitiveInfoUtil",
    "method_name": "handleNestedObject",
    "arguments": [
        "Object obj",
        "Class entity",
        "boolean isEncode"
    ],
    "generate_test": [
        "@Test\npublic void handleNestedObjectTest() throws IllegalAccessException {\n    // Create test object\n    Object obj = new TestObject();\n    Class entity = TestEntity.class;\n    boolean isEncode = true;\n    \n    // Call the method to be tested\n    SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);\n    \n    // Assert the expected results\n    // Add assertions here\n}\n\nprivate static class TestObject {\n    // Define test fields here\n}\n\nprivate static class TestEntity {\n    // Define test fields here\n}",
        "@Test\npublic void handleNestedObjectTest() throws IllegalAccessException {\n    // Create a sample object\n    Object obj = new Object();\n    \n    // Run the method under test\n    SensitiveInfoUtil.handleNestedObject(obj, Entity.class, true);\n    \n    // Verify the results\n    \n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void handleNestedObjectTest() {\n        try {\n            Object obj = new Object();\n            Class entity = Entity.class;\n            boolean isEncode = true;\n            \n            // Set up test data\n            // ...\n            \n            // Call the method being tested\n            SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);\n            \n            // Assert the expected results\n            // ...\n            \n        } catch (IllegalAccessException e) {\n            fail(\"IllegalAccessException occurred\");\n        }\n    }\n    \n    private static class Entity {\n        // Define test entity class\n    }\n}",
        "@Test\npublic void handleNestedObjectTest() {\n    Object obj = new Object(); // input object\n    Class entity = Object.class; // entity class\n    boolean isEncode = true; // flag for encoding\n\n    try {\n        SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);\n    } catch (IllegalAccessException e) {\n        fail(\"IllegalAccessException occurred\");\n    }\n    \n    // Additional assertions here (if any)\n}",
        "@Test\npublic void handleNestedObjectTest() throws IllegalAccessException {\n    Object obj = new Object(); // Replace with actual object\n    Class entity = Object.class; // Replace with actual entity class\n    boolean isEncode = true; // Replace with actual isEncode value\n    \n    SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);\n    \n    // Add assertions here to validate the result of the method\n}",
        "@Test\npublic void handleNestedObjectTest() {\n    try {\n        Object obj = new Object(); // create a new object for testing\n        Class entity = obj.getClass(); // get the class of the object\n        boolean isEncode = true; // set the value of isEncode\n        \n        SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);\n        \n        // Assert the expected output or behavior here\n        \n    } catch (IllegalAccessException e) {\n        fail(\"IllegalAccessException occurred\");\n    }\n}",
        "\n@Test\npublic void handleNestedObjectTest() throws IllegalAccessException {\n    // Arrange\n    Object obj = new Object(); // create a sample object\n    Class entity = Object.class; // set the entity class\n    boolean isEncode = true; // set the isEncode flag\n    \n    // Act\n    SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);\n    \n    // Assert\n    // Add your assertions here\n}\n",
        "@Test\npublic void handleNestedObjectTest() {\n    try {\n        Object obj = new Object(); // Create an object for testing\n        Class entity = Object.class; // Set the entity class for testing\n        \n        boolean isEncode = true; // Set the value of isEncode for testing\n        \n        SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);\n        \n        // Add assertions to validate the expected outcome\n    } catch (IllegalAccessException e) {\n        e.printStackTrace();\n        fail(\"An exception occurred during the test\");\n    }\n}",
        "@Test\npublic void handleNestedObjectTest() throws IllegalAccessException {\n    Object obj = new Object(); // Create a sample object for testing\n    Class entity = Object.class; // Specify the class of the entity object\n    boolean isEncode = true; // Specify whether to encode the sensitive information\n    \n    SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);\n    \n    // Add assertions to verify the correctness of the function\n    // ...\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void handleNestedObjectTest() {\n        try {\n            // Creating test object\n            TestObject testObject = new TestObject();\n\n            // Calling the method to be tested\n            SensitiveInfoUtil.handleNestedObject(testObject, Entity.class, true);\n\n            // Assert statements to check the expected output\n            // <FILL>\n\n        } catch (IllegalAccessException e) {\n            fail(\"IllegalAccessException occurred\");\n        }\n    }\n}\n\nclass TestObject {\n    private Entity entity;\n    private List<Entity> entityList;\n\n    // Getters and setters\n\n    // Constructor\n}\n\nclass Entity {\n    // Fields\n}"
    ]
}
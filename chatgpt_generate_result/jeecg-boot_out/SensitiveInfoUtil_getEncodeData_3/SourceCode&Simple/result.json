{
    "project_name": "jeecg-boot",
    "file_name": "SensitiveInfoUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/desensitization/util/SensitiveInfoUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.desensitization.util",
    "docstring": "/**\n     * \u5904\u7406\u6570\u636e \u83b7\u53d6\u52a0\u5bc6\u540e\u7684\u6570\u636e \u6216\u662f\u683c\u5f0f\u5316\u540e\u7684\u6570\u636e\n     * @param data \u5b57\u7b26\u4e32\n     * @param sensitiveEnum \u7c7b\u578b\n     * @return \u5904\u7406\u540e\u7684\u5b57\u7b26\u4e32\n     */",
    "source_code": "\npublic static String getEncodeData(String data, SensitiveEnum sensitiveEnum){\n    String result;\n    switch (sensitiveEnum){\n        case ENCODE:\n            try {\n                result = AesEncryptUtil.encrypt(data);\n            } catch (Exception exception) {\n                log.error(\"\u6570\u636e\u52a0\u5bc6\u9519\u8bef\", exception.getMessage());\n                result = data;\n            }\n            break;\n        case CHINESE_NAME:\n            result = chineseName(data);\n            break;\n        case ID_CARD:\n            result = idCardNum(data);\n            break;\n        case FIXED_PHONE:\n            result = fixedPhone(data);\n            break;\n        case MOBILE_PHONE:\n            result = mobilePhone(data);\n            break;\n        case ADDRESS:\n            result = address(data, 3);\n            break;\n        case EMAIL:\n            result = email(data);\n            break;\n        case BANK_CARD:\n            result = bankCard(data);\n            break;\n        case CNAPS_CODE:\n            result = cnapsCode(data);\n            break;\n        default:\n            result = data;\n    }\n    return result;\n}\n",
    "class_name": "SensitiveInfoUtil",
    "method_name": "getEncodeData",
    "arguments": [
        "String data",
        "SensitiveEnum sensitiveEnum"
    ],
    "generate_test": [
        "@Test\npublic void getEncodeDataTest() {\n    // Test case for ENCODE sensitiveEnum\n    String data1 = \"sensitive data 1\";\n    SensitiveEnum sensitiveEnum1 = SensitiveEnum.ENCODE;\n    String expectedResult1 = \"encrypted data 1\";\n    String actualResult1 = SensitiveInfoUtil.getEncodeData(data1, sensitiveEnum1);\n    assertEquals(expectedResult1, actualResult1);\n    \n    // Test case for CHINESE_NAME sensitiveEnum\n    String data2 = \"\u5f20\u4e09\";\n    SensitiveEnum sensitiveEnum2 = SensitiveEnum.CHINESE_NAME;\n    String expectedResult2 = \"\u738b\u4e94\";\n    String actualResult2 = SensitiveInfoUtil.getEncodeData(data2, sensitiveEnum2);\n    assertEquals(expectedResult2, actualResult2);\n    \n    // Test case for ID_CARD sensitiveEnum\n    String data3 = \"123456789012345678\";\n    SensitiveEnum sensitiveEnum3 = SensitiveEnum.ID_CARD;\n    String expectedResult3 = \"**************678\";\n    String actualResult3 = SensitiveInfoUtil.getEncodeData(data3, sensitiveEnum3);\n    assertEquals(expectedResult3, actualResult3);\n    \n    // Test case for FIXED_PHONE sensitiveEnum\n    String data4 = \"1234567890\";\n    SensitiveEnum sensitiveEnum4 = SensitiveEnum.FIXED_PHONE;\n    String expectedResult4 = \"****7890\";\n    String actualResult4 = SensitiveInfoUtil.getEncodeData(data4, sensitiveEnum4);\n    assertEquals(expectedResult4, actualResult4);\n    \n    // Test case for MOBILE_PHONE sensitiveEnum\n    String data5 = \"12345678901\";\n    SensitiveEnum sensitiveEnum5 = SensitiveEnum.MOBILE_PHONE;\n    String expectedResult5 = \"****678901\";\n    String actualResult5 = SensitiveInfoUtil.getEncodeData(data5, sensitiveEnum5);\n    assertEquals(expectedResult5, actualResult5);\n    \n    // Test case for ADDRESS sensitiveEnum\n    String data6 = \"123 Main St, City, State\";\n    SensitiveEnum sensitiveEnum6 = SensitiveEnum.ADDRESS;\n    int sensitiveSize6 = 3;\n    String expectedResult6 = \"*****n St, City, State\";\n    String actualResult6 = SensitiveInfoUtil.getEncodeData(data6, sensitiveEnum6);\n    assertEquals(expectedResult6, actualResult6);\n    \n    // Test case for EMAIL sensitiveEnum\n    String data7 = \"test@example.com\";\n    SensitiveEnum sensitiveEnum7 = SensitiveEnum.EMAIL;\n    String expectedResult7 = \"test@*****.com\";\n    String actualResult7 = SensitiveInfoUtil.getEncodeData(data7, sensitiveEnum7);\n    assertEquals(expectedResult7, actualResult7);\n    \n    // Test case for BANK_CARD sensitiveEnum\n    String data8 = \"1234567890123456\";\n    SensitiveEnum sensitiveEnum8 = SensitiveEnum.BANK_CARD;\n    String expectedResult8 = \"****************\";\n    String actualResult8 = SensitiveInfoUtil.getEncodeData(data8, sensitiveEnum8);\n    assertEquals(expectedResult8, actualResult8);\n    \n    // Test case for CNAPS_CODE sensitiveEnum\n    String data9 = \"ABCDEFGH\";\n    SensitiveEnum sensitiveEnum9 = SensitiveEnum.CNAPS_CODE;\n    String expectedResult9 = \"********\";\n    String actualResult9 = SensitiveInfoUtil.getEncodeData(data9, sensitiveEnum9);\n    assertEquals(expectedResult9, actualResult9);\n    \n    // Test case for default sensitiveEnum\n    String data10 = \"data\";\n    SensitiveEnum sensitiveEnum10 = SensitiveEnum.UNKNOWN;\n    String expectedResult10 = \"data\";\n    String actualResult10 = SensitiveInfoUtil.getEncodeData(data10, sensitiveEnum10);\n    assertEquals(expectedResult10, actualResult10);\n}",
        "@Test\npublic void getEncodeDataTest() {\n    String testData = \"testData\";\n    SensitiveEnum[] sensitiveEnums = SensitiveEnum.values();\n    for (SensitiveEnum sensitiveEnum : sensitiveEnums) {\n        String encodedData = SensitiveInfoUtil.getEncodeData(testData, sensitiveEnum);\n        assertNotNull(encodedData);\n        // Assert other conditions as necessary\n    }\n}",
        "@Test\npublic void getEncodeDataTest() {\n    String data = \"123456\";\n    SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n    String expectedResult = \"\";\n    \n    try {\n        expectedResult = AesEncryptUtil.encrypt(data);\n    } catch (Exception e) {\n        expectedResult = data;\n    }\n    \n   String result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n   \n   assertEquals(expectedResult, result);\n}",
        "@Test\npublic void getEncodeDataTest() {\n    String data = \"Sensitive Data\";\n    SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n    String expectedResult = \"Encoded Data\";\n\n    String actualResult = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n\n    assertEquals(expectedResult, actualResult);\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\npublic class SensitiveInfoUtilTest {\n\n    @Test\n    public void getEncodeDataTest() {\n        String data = \"sensitive data\";\n        SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n\n        String result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n\n        // Assert\n        assertNotNull(result);\n        assertEquals(\"encoded data\", result);\n    }\n}",
        "\n@Test\npublic void getEncodeDataTest() {\n    // Arrange\n    String data = \"sensitive data\";\n    SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n\n    // Act\n    String result = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n\n    // Assert\n    assertNotNull(result);\n    // Add more specific assertions based on the expected behavior of the method\n}\n",
        "@Test\npublic void getEncodeDataTest() {\n    String data = \"Sensitive Data\";\n    SensitiveEnum sensitiveEnum = SensitiveEnum.ENCODE;\n\n    String expectedResult = AesEncryptUtil.encrypt(data);\n    String actualResult = SensitiveInfoUtil.getEncodeData(data, sensitiveEnum);\n\n    assertEquals(expectedResult, actualResult);\n}",
        "@Test\npublic void getEncodeDataTest() {\n    // Test case 1: SensitiveEnum.ENCODE\n    String data1 = \"Hello World\";\n    SensitiveEnum sensitiveEnum1 = SensitiveEnum.ENCODE;\n    String expected1;\n    try {\n        expected1 = AesEncryptUtil.encrypt(data1);\n    } catch (Exception exception) {\n        log.error(\"\u6570\u636e\u52a0\u5bc6\u9519\u8bef\", exception.getMessage());\n        expected1 = data1;\n    }\n    String result1 = SensitiveInfoUtil.getEncodeData(data1, sensitiveEnum1);\n    assertEquals(expected1, result1);\n    \n    // Test case 2: SensitiveEnum.CHINESE_NAME\n    String data2 = \"\u5f20\u4e09\";\n    SensitiveEnum sensitiveEnum2 = SensitiveEnum.CHINESE_NAME;\n    String expected2 = SensitiveInfoUtil.chineseName(data2);\n    String result2 = SensitiveInfoUtil.getEncodeData(data2, sensitiveEnum2);\n    assertEquals(expected2, result2);\n    \n    // Test case 3: SensitiveEnum.ID_CARD\n    String data3 = \"123456789012345678\";\n    SensitiveEnum sensitiveEnum3 = SensitiveEnum.ID_CARD;\n    String expected3 = SensitiveInfoUtil.idCardNum(data3);\n    String result3 = SensitiveInfoUtil.getEncodeData(data3, sensitiveEnum3);\n    assertEquals(expected3, result3);\n    \n    // Test case 4: SensitiveEnum.FIXED_PHONE\n    String data4 = \"0123456789\";\n    SensitiveEnum sensitiveEnum4 = SensitiveEnum.FIXED_PHONE;\n    String expected4 = SensitiveInfoUtil.fixedPhone(data4);\n    String result4 = SensitiveInfoUtil.getEncodeData(data4, sensitiveEnum4);\n    assertEquals(expected4, result4);\n    \n    // Test case 5: SensitiveEnum.MOBILE_PHONE\n    String data5 = \"01234567890\";\n    SensitiveEnum sensitiveEnum5 = SensitiveEnum.MOBILE_PHONE;\n    String expected5 = SensitiveInfoUtil.mobilePhone(data5);\n    String result5 = SensitiveInfoUtil.getEncodeData(data5, sensitiveEnum5);\n    assertEquals(expected5, result5);\n    \n    // Test case 6: SensitiveEnum.ADDRESS\n    String data6 = \"123 Main Street\";\n    SensitiveEnum sensitiveEnum6 = SensitiveEnum.ADDRESS;\n    int sensitiveSize6 = 3;\n    String expected6 = SensitiveInfoUtil.address(data6, sensitiveSize6);\n    String result6 = SensitiveInfoUtil.getEncodeData(data6, sensitiveEnum6);\n    assertEquals(expected6, result6);\n    \n    // Test case 7: SensitiveEnum.EMAIL\n    String data7 = \"test@example.com\";\n    SensitiveEnum sensitiveEnum7 = SensitiveEnum.EMAIL;\n    String expected7 = SensitiveInfoUtil.email(data7);\n    String result7 = SensitiveInfoUtil.getEncodeData(data7, sensitiveEnum7);\n    assertEquals(expected7, result7);\n    \n    // Test case 8: SensitiveEnum.BANK_CARD\n    String data8 = \"1234567890123456\";\n    SensitiveEnum sensitiveEnum8 = SensitiveEnum.BANK_CARD;\n    String expected8 = SensitiveInfoUtil.bankCard(data8);\n    String result8 = SensitiveInfoUtil.getEncodeData(data8, sensitiveEnum8);\n    assertEquals(expected8, result8);\n    \n    // Test case 9: SensitiveEnum.CNAPS_CODE\n    String data9 = \"123456\";\n    SensitiveEnum sensitiveEnum9 = SensitiveEnum.CNAPS_CODE;\n    String expected9 = SensitiveInfoUtil.cnapsCode(data9);\n    String result9 = SensitiveInfoUtil.getEncodeData(data9, sensitiveEnum9);\n    assertEquals(expected9, result9);\n    \n    // Test case 10: Default case\n    String data10 = \"Test data\";\n    SensitiveEnum sensitiveEnum10 = null;\n    String expected10 = data10;\n    String result10 = SensitiveInfoUtil.getEncodeData(data10, sensitiveEnum10);\n    assertEquals(expected10, result10);\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void getEncodeDataTest() {\n        String encodedData = SensitiveInfoUtil.getEncodeData(\"Hello World\", SensitiveEnum.ENCODE);\n        assertEquals(\"EncryptedData\", encodedData);\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void getEncodeDataTest() {\n        // Test for SensitiveEnum.ENCODE\n        String encodedData = SensitiveInfoUtil.getEncodeData(\"sensitiveData\", SensitiveEnum.ENCODE);\n        assertNotNull(encodedData, \"Encoded data should not be null\");\n        \n        // Test for SensitiveEnum.CHINESE_NAME\n        String chineseName = \"\u674e\u96f7\";\n        String encodedChineseName = SensitiveInfoUtil.getEncodeData(chineseName, SensitiveEnum.CHINESE_NAME);\n        assertNotNull(encodedChineseName, \"Encoded Chinese name should not be null\");\n        assertNotEquals(chineseName, encodedChineseName, \"Encoded Chinese name should be different from original\");\n        \n        // Test for SensitiveEnum.ID_CARD\n        String idCardNum = \"110101200001011234\";\n        String encodedIdCardNum = SensitiveInfoUtil.getEncodeData(idCardNum, SensitiveEnum.ID_CARD);\n        assertNotNull(encodedIdCardNum, \"Encoded ID card number should not be null\");\n        assertNotEquals(idCardNum, encodedIdCardNum, \"Encoded ID card number should be different from original\");\n        \n        // Test for SensitiveEnum.FIXED_PHONE\n        String fixedPhoneNum = \"010-12345678\";\n        String encodedFixedPhoneNum = SensitiveInfoUtil.getEncodeData(fixedPhoneNum, SensitiveEnum.FIXED_PHONE);\n        assertNotNull(encodedFixedPhoneNum, \"Encoded fixed phone number should not be null\");\n        assertNotEquals(fixedPhoneNum, encodedFixedPhoneNum, \"Encoded fixed phone number should be different from original\");\n        \n        // Test for SensitiveEnum.MOBILE_PHONE\n        String mobilePhoneNum = \"13812345678\";\n        String encodedMobilePhoneNum = SensitiveInfoUtil.getEncodeData(mobilePhoneNum, SensitiveEnum.MOBILE_PHONE);\n        assertNotNull(encodedMobilePhoneNum, \"Encoded mobile phone number should not be null\");\n        assertNotEquals(mobilePhoneNum, encodedMobilePhoneNum, \"Encoded mobile phone number should be different from original\");\n        \n        // Test for SensitiveEnum.ADDRESS\n        String address = \"\u5317\u4eac\u5e02\u671d\u9633\u533a\";\n        String encodedAddress = SensitiveInfoUtil.getEncodeData(address, SensitiveEnum.ADDRESS);\n        assertNotNull(encodedAddress, \"Encoded address should not be null\");\n        assertNotEquals(address, encodedAddress, \"Encoded address should be different from original\");\n        \n        // Test for SensitiveEnum.EMAIL\n        String email = \"test@example.com\";\n        String encodedEmail = SensitiveInfoUtil.getEncodeData(email, SensitiveEnum.EMAIL);\n        assertNotNull(encodedEmail, \"Encoded email should not be null\");\n        assertNotEquals(email, encodedEmail, \"Encoded email should be different from original\");\n        \n        // Test for SensitiveEnum.BANK_CARD\n        String bankCardNum = \"6222600612345678\";\n        String encodedBankCardNum = SensitiveInfoUtil.getEncodeData(bankCardNum, SensitiveEnum.BANK_CARD);\n        assertNotNull(encodedBankCardNum, \"Encoded bank card number should not be null\");\n        assertNotEquals(bankCardNum, encodedBankCardNum, \"Encoded bank card number should be different from original\");\n        \n        // Test for SensitiveEnum.CNAPS_CODE\n        String cnapsCode = \"ABCD1234567890\";\n        String encodedCnapsCode = SensitiveInfoUtil.getEncodeData(cnapsCode, SensitiveEnum.CNAPS_CODE);\n        assertNotNull(encodedCnapsCode, \"Encoded CNAPS code should not be null\");\n        assertNotEquals(cnapsCode, encodedCnapsCode, \"Encoded CNAPS code should be different from original\");\n        \n        // Test for default case\n        String defaultData = \"defaultData\";\n        String encodedDefaultData = SensitiveInfoUtil.getEncodeData(defaultData, SensitiveEnum.UNKNOWN);\n        assertEquals(defaultData, encodedDefaultData, \"Encoded data for unknown SensitiveEnum should be the same as original\");\n    }\n}"
    ]
}
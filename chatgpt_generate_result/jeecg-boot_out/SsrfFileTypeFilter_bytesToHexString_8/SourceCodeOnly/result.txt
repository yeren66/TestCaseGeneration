Source code: 


private static String bytesToHexString(byte[] src) {
    StringBuilder stringBuilder = new StringBuilder();
    if (src == null || src.length <= 0) {
        return null;
    }
    for (int i = 0; i < src.length; i++) {
        int v = src[i] & 0xFF;
        String hv = Integer.toHexString(v);
        if (hv.length() < 2) {
            stringBuilder.append(0);
        }
        stringBuilder.append(hv);
    }
    return stringBuilder.toString();
}



No.1 generated result --------------------------

@Test
public void bytesToHexStringTest() {
    byte[] input = {10, 20, 30};
    String expectedResult = "0a141e";
    
    String result = bytesToHexString(input);
    
    assertEquals(expectedResult, result);
}


No.2 generated result --------------------------

@Test
public void bytesToHexStringTest() {
    byte[] src = {12, 34, 56, 78};
    String expectedResult = "0c22384e";

    String result = bytesToHexString(src);

    assertEquals(expectedResult, result);
}


No.3 generated result --------------------------

@Test
public void bytesToHexStringTest() {
    // Test case 1: Empty source array
    byte[] src1 = null;
    assertNull(bytesToHexString(src1));
    
    // Test case 2: Empty source array
    byte[] src2 = new byte[0];
    assertNull(bytesToHexString(src2));
    
    // Test case 3: Source array with one element
    byte[] src3 = { 10 };
    assertEquals("0a", bytesToHexString(src3));
    
    // Test case 4: Source array with multiple elements
    byte[] src4 = { 10, 11, 12, 13 };
    assertEquals("0a0b0c0d", bytesToHexString(src4));
    }


No.4 generated result --------------------------

@Test
public void bytesToHexStringTest() {
    byte[] src = new byte[]{10, 20, 30};
    String expected = "0a141e";
    String result = bytesToHexString(src);
    assertEquals(expected, result);
}


No.5 generated result --------------------------

@Test
public void bytesToHexStringTest() {
  byte[] bytes = {1, 2, 3};
  String expected = "010203";
  
  String result = bytesToHexString(bytes);
  
  assertEquals(expected, result);
}


No.6 generated result --------------------------

@Test
public void bytesToHexStringTest() {
    byte[] bytes = {10, 20, 30, 40, 50};
    String expected = "0a141e2832";
    String result = bytesToHexString(bytes);
    assertEquals(expected, result);
}


No.7 generated result --------------------------

@Test
public void bytesToHexStringTest() {
    byte[] testBytes = {10, 20, 30};
    String expected = "0a141e";
    String actual = SsrfFileTypeFilter.bytesToHexString(testBytes);
    assertEquals(expected, actual);
}


No.8 generated result --------------------------

@Test
public void bytesToHexStringTest() {
    byte[] src = { 0x12, 0x34, 0xAB, 0xCD };
    String expected = "1234abcd";
    String result = bytesToHexString(src);
    assertEquals(expected, result);
}


No.9 generated result --------------------------

@Test
public void bytesToHexStringTest() {
    byte[] testArray1 = {0x12, 0x34, 0x56};
    String expectedResult1 = "123456";
    assertEquals(expectedResult1, bytesToHexString(testArray1));

    byte[] testArray2 = {0x00, 0xFF, 0xA1};
    String expectedResult2 = "00ffa1";
    assertEquals(expectedResult2, bytesToHexString(testArray2));

    byte[] testArray3 = {};
    String expectedResult3 = "";
    assertEquals(expectedResult3, bytesToHexString(testArray3));

    byte[] testArray4 = null;
    assertNull(bytesToHexString(testArray4));
}


No.10 generated result --------------------------

package org.jeecg.common.util.filter;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SsrfFileTypeFilterTest {
    @Test
    public void bytesToHexStringTest() {
        byte[] src = {0x12, 0x34, 0x56};
        String expectedResult = "123456";
        String result = bytesToHexString(src);
        assertEquals(expectedResult, result);
    }
}



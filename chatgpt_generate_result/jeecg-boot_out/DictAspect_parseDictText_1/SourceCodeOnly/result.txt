Source code: 


private Object parseDictText(Object result) {
    if (result instanceof Result) {
        if (((Result) result).getResult() instanceof IPage) {
            List<JSONObject> items = new ArrayList<>();

            //step.1 筛选出加了 Dict 注解的字段列表
            List<Field> dictFieldList = new ArrayList<>();
            // 字典数据列表， key = 字典code，value=数据列表
            Map<String, List<String>> dataListMap = new HashMap<>(5);
            //取出结果集
            List<Object> records=((IPage) ((Result) result).getResult()).getRecords();
            //update-begin--Author:zyf -- Date:20220606 ----for：【VUEN-1230】 判断是否含有字典注解,没有注解返回-----
            Boolean hasDict= checkHasDict(records);
            if(!hasDict){
                return result;
            }

            log.debug(" __ 进入字典翻译切面 DictAspect —— " );
            //update-end--Author:zyf -- Date:20220606 ----for：【VUEN-1230】 判断是否含有字典注解,没有注解返回-----
            for (Object record : records) {
                String json="{}";
                try {
                    //update-begin--Author:zyf -- Date:20220531 ----for：【issues/#3629】 DictAspect Jackson序列化报错-----
                    //解决@JsonFormat注解解析不了的问题详见SysAnnouncement类的@JsonFormat
                     json = objectMapper.writeValueAsString(record);
                    //update-end--Author:zyf -- Date:20220531 ----for：【issues/#3629】 DictAspect Jackson序列化报错-----
                } catch (JsonProcessingException e) {
                    log.error("json解析失败"+e.getMessage(),e);
                }
                //update-begin--Author:scott -- Date:20211223 ----for：【issues/3303】restcontroller返回json数据后key顺序错乱 -----
                JSONObject item = JSONObject.parseObject(json, Feature.OrderedField);
                //update-end--Author:scott -- Date:20211223 ----for：【issues/3303】restcontroller返回json数据后key顺序错乱 -----

                //update-begin--Author:scott -- Date:20190603 ----for：解决继承实体字段无法翻译问题------
                //for (Field field : record.getClass().getDeclaredFields()) {
                // 遍历所有字段，把字典Code取出来，放到 map 里
                for (Field field : oConvertUtils.getAllFields(record)) {
                    String value = item.getString(field.getName());
                    if (oConvertUtils.isEmpty(value)) {
                        continue;
                    }
                //update-end--Author:scott  -- Date:20190603 ----for：解决继承实体字段无法翻译问题------
                    if (field.getAnnotation(Dict.class) != null) {
                        if (!dictFieldList.contains(field)) {
                            dictFieldList.add(field);
                        }
                        String code = field.getAnnotation(Dict.class).dicCode();
                        String text = field.getAnnotation(Dict.class).dicText();
                        String table = field.getAnnotation(Dict.class).dictTable();

                        List<String> dataList;
                        String dictCode = code;
                        if (!StringUtils.isEmpty(table)) {
                            dictCode = String.format("%s,%s,%s", table, text, code);
                        }
                        dataList = dataListMap.computeIfAbsent(dictCode, k -> new ArrayList<>());
                        this.listAddAllDeduplicate(dataList, Arrays.asList(value.split(",")));
                    }
                    //date类型默认转换string格式化日期
                    //update-begin--Author:zyf -- Date:20220531 ----for：【issues/#3629】 DictAspect Jackson序列化报错-----
                    //if (JAVA_UTIL_DATE.equals(field.getType().getName())&&field.getAnnotation(JsonFormat.class)==null&&item.get(field.getName())!=null){
                        //SimpleDateFormat aDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                        // item.put(field.getName(), aDate.format(new Date((Long) item.get(field.getName()))));
                    //}
                    //update-end--Author:zyf -- Date:20220531 ----for：【issues/#3629】 DictAspect Jackson序列化报错-----
                }
                items.add(item);
            }

            //step.2 调用翻译方法，一次性翻译
            Map<String, List<DictModel>> translText = this.translateAllDict(dataListMap);

            //step.3 将翻译结果填充到返回结果里
            for (JSONObject record : items) {
                for (Field field : dictFieldList) {
                    String code = field.getAnnotation(Dict.class).dicCode();
                    String text = field.getAnnotation(Dict.class).dicText();
                    String table = field.getAnnotation(Dict.class).dictTable();

                    String fieldDictCode = code;
                    if (!StringUtils.isEmpty(table)) {
                        fieldDictCode = String.format("%s,%s,%s", table, text, code);
                    }

                    String value = record.getString(field.getName());
                    if (oConvertUtils.isNotEmpty(value)) {
                        List<DictModel> dictModels = translText.get(fieldDictCode);
                        if(dictModels==null || dictModels.size()==0){
                            continue;
                        }

                        String textValue = this.translDictText(dictModels, value);
                        log.debug(" 字典Val : " + textValue);
                        log.debug(" __翻译字典字段__ " + field.getName() + CommonConstant.DICT_TEXT_SUFFIX + "： " + textValue);

                        // TODO-sun 测试输出，待删
                        log.debug(" ---- dictCode: " + fieldDictCode);
                        log.debug(" ---- value: " + value);
                        log.debug(" ----- text: " + textValue);
                        log.debug(" ---- dictModels: " + JSON.toJSONString(dictModels));

                        record.put(field.getName() + CommonConstant.DICT_TEXT_SUFFIX, textValue);
                    }
                }
            }

            ((IPage) ((Result) result).getResult()).setRecords(items);
        }

    }
    return result;
}



No.1 generated result --------------------------


package org.jeecg.common.aspect;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import org.jeecg.common.aspect.DictAspect;
import org.jeecg.common.aspect.Dict;
import org.jeecg.common.aspect.DictModel;
import org.jeecg.common.constant.CommonConstant;
import org.jeecg.common.util.oConvertUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests;

public class DictAspectTest {
    @Test
    public void parseDictTextTest() {
        Object result = new Object(); // dummy object

        // Create test data
        Result mockResult = new Result();
        IPage mockPage = new IPage();
        List<Object> mockRecords = new ArrayList<>();
        Object mockRecord = new Object(); // dummy record
        mockRecords.add(mockRecord);
        mockPage.setRecords(mockRecords);
        mockResult.setResult(mockPage);
        result = mockResult;

        DictAspect dictAspect = new DictAspect();
        Object parsedResult = dictAspect.parseDictText(result);

        // Verify the result
        // <FILL>
    }
}



No.2 generated result --------------------------

package org.jeecg.common.aspect;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DictAspectTest {
    @Test
    public void parseDictTextTest() {
        DictAspect dictAspect = new DictAspect();
        
        // Create a Result object for testing
        Result result = new Result();
        IPage iPage = new IPage();
        List<Object> records = new ArrayList<>();
        
        // Add some records to the list
        records.add(new Object());
        records.add(new Object());
        
        iPage.setRecords(records);
        result.setResult(iPage);
        
        // Call the parseDictText method and get the result
        Object resultAfterParsing = dictAspect.parseDictText(result);
        
        // Perform assertions to verify the correctness of the result
        assertNotNull(resultAfterParsing);
        assertTrue(resultAfterParsing instanceof Result);
        Result resultObj = (Result) resultAfterParsing;
        assertTrue(resultObj.getResult() instanceof IPage);
        IPage iPageResult = (IPage) resultObj.getResult();
        assertEquals(records.size(), iPageResult.getRecords().size());
    }
}


No.3 generated result --------------------------

@Test
public void parseDictTextTest() {
    // Set up test data
    Result result = new Result();
    List<Object> records = new ArrayList<>();
    // Add records to the list
    // ...
    // Set the records in the Result object
    ((IPage) result.getResult()).setRecords(records);
    
    // Create an instance of the class under test
    DictAspect dictAspect = new DictAspect();
    
    // Call the method being tested
    Object actualResult = dictAspect.parseDictText(result);
    
    // Assert the expected result
    assertNotNull(actualResult);
    // Add more assertions as needed for the specific functionality being tested
    // ...
}


No.4 generated result --------------------------

@Test
public void parseDictTextTest() {
    // Create a mock Result object
    Result result = new Result();
  
    // Set up the mock Result object with data
    // ...

    // Call the method being tested
    Object actualResult = parseDictText(result);

    // Verify the expected output
    // ...
}


No.5 generated result --------------------------

@Test
public void parseDictTextTest() {
    // mock data
    Result result = new Result();
    IPage page = new IPage();
    List<Object> records = new ArrayList<>();
    // create objects and add values to fields
    //...
    page.setRecords(records);
    result.setResult(page);
    
    // invoke the method to test
    DictAspect dictAspect = new DictAspect();
    Object parsedResult = dictAspect.parseDictText(result);
    
    // assert the output
    // ...
}


No.6 generated result --------------------------

@Test
public void parseDictTextTest() {
    // Create a sample Result object
    Result result = new Result();
    // Create a sample IPage object
    IPage page = new IPage();
    // Set the records in the IPage object
    List<Object> records = new ArrayList<>();
    records.add(<Sample Record 1>);
    records.add(<Sample Record 2>);
    page.setRecords(records);
    // Set the IPage object as the result in the Result object
    result.setResult(page);
    
    // Call the parseDictText method
    Object output = parseDictText(result);
    
    // Assert that the output is equal to the expected result
    assertEquals(result, output);
}


No.7 generated result --------------------------

@Test
    public void parseDictTextTest() {
        // Prepare input
        Object result = prepareTestInput();

        // Call the method
        Object output = parseDictText(result);

        // Verify the result
        assertParseDictText(output);
    }

    private Object prepareTestInput() {
        // Create a sample Result object
        Result result = new Result();
        result.setResult(new IPage());

        // Add records to the IPage
        List<Object> records = new ArrayList<>();
        records.add(createRecord("field1", "value1"));
        records.add(createRecord("field2", "value2"));
        ((IPage) result.getResult()).setRecords(records);

        return result;
    }

    private Object createRecord(String fieldName, String value) {
        Map<String, String> record = new HashMap<>();
        record.put(fieldName, value);
        return record;
    }

    private void assertParseDictText(Object output) {
        // Verify the updated result
        assertTrue(output instanceof Result);
        assertTrue(((Result) output).getResult() instanceof IPage);
        List<Object> records = ((IPage) ((Result) output).getResult()).getRecords();
        assertEquals(2, records.size());

        // Verify the translated dict fields
        Map<String, String> record1 = (Map<String, String>) records.get(0);
        assertEquals("value1", record1.get("field1"));
        assertEquals("translatedValue1", record1.get("field1_text"));

        Map<String, String> record2 = (Map<String, String>) records.get(1);
        assertEquals("value2", record2.get("field2"));
        assertEquals("translatedValue2", record2.get("field2_text"));
    }


No.8 generated result --------------------------

@Test
public void parseDictTextTest() {
    // Create a sample input object
    Object result = new Result();
    ((Result) result).setResult(new IPage());

    // Create a list of records
    List<Object> records = new ArrayList<>();
    records.add(new Record("Field1Value", "Field2Value"));
    records.add(new Record("Field3Value", "Field4Value"));
    ((IPage) ((Result) result).getResult()).setRecords(records);

    // Call the parseDictText method
    Object output = parseDictText(result);

    // Validate the output
    assertNotNull(output);
    assertTrue(output instanceof Result);
    assertNotNull(((Result) output).getResult());
    assertTrue(((Result) output).getResult() instanceof IPage);

    IPage outputPage = (IPage) ((Result) output).getResult();
    assertNotNull(outputPage.getRecords());
    assertEquals(2, outputPage.getRecords().size());

    for (Object record : outputPage.getRecords()) {
        assertTrue(record instanceof JSONObject);
        JSONObject jsonObject = (JSONObject) record;

        // Validate the presence of dict text fields
        assertTrue(jsonObject.containsKey("Field1Value_text"));
        assertTrue(jsonObject.containsKey("Field2Value_text"));

        // Validate the dict text values
        assertEquals("Field1Text", jsonObject.get("Field1Value_text"));
        assertEquals("Field2Text", jsonObject.get("Field2Value_text"));
    }
}


No.9 generated result --------------------------

package org.jeecg.common.aspect;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class DictAspectTest {
    @Test
    public void parseDictTextTest() {
        // Creating a mock object for the "result" parameter
        Object result = new Result();

        // Setting up necessary data for the test
        // ...
        
        // Calling the method to be tested
        Object parsedResult = parseDictText(result);
        
        // Asserting the expected output
        // ...
    }
}


No.10 generated result --------------------------

@Test
public void parseDictTextTest() {
    // Create input data
    Object result = new Result();
    List<Object> records = new ArrayList<>();
    IPage<Object> page = new Page<>();
    page.setRecords(records);
    ((Result) result).setResult(page);

    // Call the method under test
    Object output = parseDictText(result);

    // Verify the output
    assertNotNull(output);
    assertEquals(result, output);
    // Assert other conditions
}



{
    "project_name": "javacv",
    "file_name": "AndroidFrameConverter.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/AndroidFrameConverter.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**\n     * Convert YUV 4:2:0 SP (NV21) data to BGR, as received, for example,\n     * via {@link Camera.PreviewCallback#onPreviewFrame(byte[],Camera)}.\n     */",
    "source_code": "\npublic Frame convert(byte[] data, int width, int height) {\n    if (frame == null || frame.imageWidth != width\n            || frame.imageHeight != height || frame.imageChannels != 3) {\n        if (frame != null) {\n            frame.close();\n        }\n        frame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);\n    }\n    ByteBuffer out = (ByteBuffer)frame.image[0];\n    int stride = frame.imageStride;\n\n    // ported from https://android.googlesource.com/platform/development/+/master/tools/yuv420sp2rgb/yuv420sp2rgb.c\n    int offset = height * width;\n    for (int i = 0; i < height; i++) {\n        for (int j = 0; j < width; j++) {\n            int Y = data[i * width + j] & 0xFF;\n            int V = data[offset + (i/2) * width + 2 * (j/2)    ] & 0xFF;\n            int U = data[offset + (i/2) * width + 2 * (j/2) + 1] & 0xFF;\n\n            // Yuv Convert\n            Y -= 16;\n            U -= 128;\n            V -= 128;\n\n            if (Y < 0)\n                Y = 0;\n\n            // R = (int)(1.164 * Y + 2.018 * U);\n            // G = (int)(1.164 * Y - 0.813 * V - 0.391 * U);\n            // B = (int)(1.164 * Y + 1.596 * V);\n\n            int B = (int)(1192 * Y + 2066 * U);\n            int G = (int)(1192 * Y - 833 * V - 400 * U);\n            int R = (int)(1192 * Y + 1634 * V);\n\n            R = Math.min(262143, Math.max(0, R));\n            G = Math.min(262143, Math.max(0, G));\n            B = Math.min(262143, Math.max(0, B));\n\n            R >>= 10; R &= 0xff;\n            G >>= 10; G &= 0xff;\n            B >>= 10; B &= 0xff;\n\n            out.put(i * stride + 3 * j,     (byte)B);\n            out.put(i * stride + 3 * j + 1, (byte)G);\n            out.put(i * stride + 3 * j + 2, (byte)R);\n        }\n    }\n    return frame;\n}\n",
    "class_name": "AndroidFrameConverter",
    "method_name": "convert",
    "arguments": [
        "byte[] data",
        "int width",
        "int height"
    ],
    "generate_test": [
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AndroidFrameConverterTest {\n    @Test\n    public void convertTest() {\n        byte[] data = new byte[10]; // Sample data\n        int width = 640; // Sample width\n        int height = 480; // Sample height\n\n        AndroidFrameConverter converter = new AndroidFrameConverter();\n\n        Frame expectedFrame = converter.convert(data, width, height);\n\n        Frame actualFrame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);\n        // Fill the actualFrame with expected RGB values using the given data, width, and height\n        \n        assertArrayEquals(expectedFrame.getBytes(), actualFrame.getBytes());\n    }\n}",
        "public void convertTest() {\n        byte[] data = new byte[100];\n        int width = 10;\n        int height = 10;\n        FrameConverter<Bitmap> converter = new AndroidFrameConverter();\n        \n        Frame result = converter.convert(data, width, height);\n        \n        // assertions\n        assertNotNull(result);\n        assertEquals(width, result.imageWidth);\n        assertEquals(height, result.imageHeight);\n        assertEquals(Frame.DEPTH_UBYTE, result.imageDepth);\n        assertEquals(3, result.imageChannels);\n    }",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AndroidFrameConverterTest {\n    @Test\n    public void convertTest() {\n        byte[] data = new byte[10];\n        int width = 2;\n        int height = 2;\n\n        AndroidFrameConverter converter = new AndroidFrameConverter();\n        Frame outputFrame = converter.convert(data, width, height);\n\n        assertNotNull(outputFrame);\n        assertEquals(width, outputFrame.imageWidth);\n        assertEquals(height, outputFrame.imageHeight);\n        assertEquals(3, outputFrame.imageChannels);\n        assertEquals(Frame.DEPTH_UBYTE, outputFrame.imageDepth);\n    }\n}",
        "public void convertTest() {\n    byte[] data = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06}; // sample data\n    int width = 2;\n    int height = 2;\n\n    AndroidFrameConverter converter = new AndroidFrameConverter();\n\n    Frame result = converter.convert(data, width, height);\n\n    assertNotNull(result);\n    assertEquals(width, result.imageWidth);\n    assertEquals(height, result.imageHeight);\n    assertEquals(3, result.imageChannels);\n    assertEquals(Frame.DEPTH_UBYTE, result.imageDepth);\n}",
        "@Test\npublic void convertTest() {\n    AndroidFrameConverter converter = new AndroidFrameConverter();\n    byte[] data = new byte[width * height * 3];\n    int width = 640;\n    int height = 480;\n\n    // <FILL> Instantiate a Frame with the given width, height, and depth\n    Frame frame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);\n\n    // <FILL> Call the convert() method from the AndroidFrameConverter class\n    frame = converter.convert(data, frame.imageWidth, frame.imageHeight);\n\n    // <FILL> Assert that the frame is not null\n    assertNotNull(frame);\n\n    // <FILL> Assert that the frame's properties match the expected values\n    assertEquals(width, frame.imageWidth);\n    assertEquals(height, frame.imageHeight);\n    assertEquals(3, frame.imageChannels);\n\n    ByteBuffer out = (ByteBuffer) frame.image[0];\n    int stride = frame.imageStride;\n\n    // <FILL> Add assertions to verify the correctness of the image conversion\n    \n    // Sample assertion: Assert that the output buffer is not null\n    assertNotNull(out);\n}",
        "@Test\npublic void convertTest() {\n  byte[] data = new byte[]{...}; // Input data\n  int width = 640; // Set the desired width\n  int height = 480; // Set the desired height\n  \n  AndroidFrameConverter converter = new AndroidFrameConverter();\n  Frame expectedFrame = converter.convert(data, width, height);\n  \n  Frame actualFrame = convert(data, width, height);\n  \n  assertEquals(expectedFrame, actualFrame);\n}",
        "@Test\npublic void convertTest() {\n    byte[] data = new byte[100];\n    int width = 10;\n    int height = 10;\n    \n    Frame frame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);\n    AndroidFrameConverter converter = new AndroidFrameConverter();\n    Frame result = converter.convert(data, width, height);\n    \n    assertNotNull(result);\n    assertEquals(frame.imageWidth, result.imageWidth);\n    assertEquals(frame.imageHeight, result.imageHeight);\n    assertEquals(frame.imageChannels, result.imageChannels);\n    assertEquals(frame.imageDepth, result.imageDepth);\n    assertEquals(frame.imageStride, result.imageStride);\n    assertEquals(frame.image, result.image);\n}",
        "@Test\npublic void convertTest() {\n    // Prepare test data\n    byte[] data = {/* sample byte data */};\n    int width = 640;\n    int height = 480;\n\n    // Create an instance of AndroidFrameConverter\n    AndroidFrameConverter converter = new AndroidFrameConverter();\n\n    // Call the convert method\n    Frame result = converter.convert(data, width, height);\n\n    // Assert the result\n    assertNotNull(result);\n    assertEquals(width, result.imageWidth);\n    assertEquals(height, result.imageHeight);\n    assertEquals(3, result.imageChannels);\n    // More assertions can be added for specific values in the frame\n}",
        "@Test\npublic void convertTest() {\n    byte[] data = new byte[width * height];\n    int width = 640;\n    int height = 480;\n    FrameConverter<Bitmap> converter = new AndroidFrameConverter();\n    Frame frame = converter.convert(data, width, height);\n    \n    assertNotNull(frame);\n    assertEquals(width, frame.imageWidth);\n    assertEquals(height, frame.imageHeight);\n    assertEquals(3, frame.imageChannels);\n    assertEquals(Frame.DEPTH_UBYTE, frame.imageDepth);\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AndroidFrameConverterTest {\n    @Test\n    public void convertTest() {\n        byte[] data = new byte[width * height * 3]; // sample data\n        int width = 640; // sample width\n        int height = 480; // sample height\n        \n        AndroidFrameConverter converter = new AndroidFrameConverter();\n        Frame frame = converter.convert(data, width, height);\n        assertNotNull(frame);\n        \n        // Perform assertions on the converted frame\n        assertEquals(width, frame.imageWidth);\n        assertEquals(height, frame.imageHeight);\n        assertEquals(3, frame.imageChannels);\n        assertEquals(Frame.DEPTH_UBYTE, frame.imageDepth);\n        \n        // ... Continue with more assertions if necessary\n        \n        // Clean up the frame\n        frame.close();\n    }\n}"
    ]
}
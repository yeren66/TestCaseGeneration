Source code: 


public Frame convert(byte[] data, int width, int height) {
    if (frame == null || frame.imageWidth != width
            || frame.imageHeight != height || frame.imageChannels != 3) {
        if (frame != null) {
            frame.close();
        }
        frame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);
    }
    ByteBuffer out = (ByteBuffer)frame.image[0];
    int stride = frame.imageStride;

    // ported from https://android.googlesource.com/platform/development/+/master/tools/yuv420sp2rgb/yuv420sp2rgb.c
    int offset = height * width;
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            int Y = data[i * width + j] & 0xFF;
            int V = data[offset + (i/2) * width + 2 * (j/2)    ] & 0xFF;
            int U = data[offset + (i/2) * width + 2 * (j/2) + 1] & 0xFF;

            // Yuv Convert
            Y -= 16;
            U -= 128;
            V -= 128;

            if (Y < 0)
                Y = 0;

            // R = (int)(1.164 * Y + 2.018 * U);
            // G = (int)(1.164 * Y - 0.813 * V - 0.391 * U);
            // B = (int)(1.164 * Y + 1.596 * V);

            int B = (int)(1192 * Y + 2066 * U);
            int G = (int)(1192 * Y - 833 * V - 400 * U);
            int R = (int)(1192 * Y + 1634 * V);

            R = Math.min(262143, Math.max(0, R));
            G = Math.min(262143, Math.max(0, G));
            B = Math.min(262143, Math.max(0, B));

            R >>= 10; R &= 0xff;
            G >>= 10; G &= 0xff;
            B >>= 10; B &= 0xff;

            out.put(i * stride + 3 * j,     (byte)B);
            out.put(i * stride + 3 * j + 1, (byte)G);
            out.put(i * stride + 3 * j + 2, (byte)R);
        }
    }
    return frame;
}



No.1 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AndroidFrameConverterTest {
    @Test
    public void convertTest() {
        byte[] data = new byte[10]; // Sample data
        int width = 640; // Sample width
        int height = 480; // Sample height

        AndroidFrameConverter converter = new AndroidFrameConverter();

        Frame expectedFrame = converter.convert(data, width, height);

        Frame actualFrame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);
        // Fill the actualFrame with expected RGB values using the given data, width, and height
        
        assertArrayEquals(expectedFrame.getBytes(), actualFrame.getBytes());
    }
}


No.2 generated result --------------------------

public void convertTest() {
        byte[] data = new byte[100];
        int width = 10;
        int height = 10;
        FrameConverter<Bitmap> converter = new AndroidFrameConverter();
        
        Frame result = converter.convert(data, width, height);
        
        // assertions
        assertNotNull(result);
        assertEquals(width, result.imageWidth);
        assertEquals(height, result.imageHeight);
        assertEquals(Frame.DEPTH_UBYTE, result.imageDepth);
        assertEquals(3, result.imageChannels);
    }


No.3 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AndroidFrameConverterTest {
    @Test
    public void convertTest() {
        byte[] data = new byte[10];
        int width = 2;
        int height = 2;

        AndroidFrameConverter converter = new AndroidFrameConverter();
        Frame outputFrame = converter.convert(data, width, height);

        assertNotNull(outputFrame);
        assertEquals(width, outputFrame.imageWidth);
        assertEquals(height, outputFrame.imageHeight);
        assertEquals(3, outputFrame.imageChannels);
        assertEquals(Frame.DEPTH_UBYTE, outputFrame.imageDepth);
    }
}


No.4 generated result --------------------------

public void convertTest() {
    byte[] data = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06}; // sample data
    int width = 2;
    int height = 2;

    AndroidFrameConverter converter = new AndroidFrameConverter();

    Frame result = converter.convert(data, width, height);

    assertNotNull(result);
    assertEquals(width, result.imageWidth);
    assertEquals(height, result.imageHeight);
    assertEquals(3, result.imageChannels);
    assertEquals(Frame.DEPTH_UBYTE, result.imageDepth);
}


No.5 generated result --------------------------

@Test
public void convertTest() {
    AndroidFrameConverter converter = new AndroidFrameConverter();
    byte[] data = new byte[width * height * 3];
    int width = 640;
    int height = 480;

    // <FILL> Instantiate a Frame with the given width, height, and depth
    Frame frame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);

    // <FILL> Call the convert() method from the AndroidFrameConverter class
    frame = converter.convert(data, frame.imageWidth, frame.imageHeight);

    // <FILL> Assert that the frame is not null
    assertNotNull(frame);

    // <FILL> Assert that the frame's properties match the expected values
    assertEquals(width, frame.imageWidth);
    assertEquals(height, frame.imageHeight);
    assertEquals(3, frame.imageChannels);

    ByteBuffer out = (ByteBuffer) frame.image[0];
    int stride = frame.imageStride;

    // <FILL> Add assertions to verify the correctness of the image conversion
    
    // Sample assertion: Assert that the output buffer is not null
    assertNotNull(out);
}


No.6 generated result --------------------------

@Test
public void convertTest() {
  byte[] data = new byte[]{...}; // Input data
  int width = 640; // Set the desired width
  int height = 480; // Set the desired height
  
  AndroidFrameConverter converter = new AndroidFrameConverter();
  Frame expectedFrame = converter.convert(data, width, height);
  
  Frame actualFrame = convert(data, width, height);
  
  assertEquals(expectedFrame, actualFrame);
}


No.7 generated result --------------------------

@Test
public void convertTest() {
    byte[] data = new byte[100];
    int width = 10;
    int height = 10;
    
    Frame frame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);
    AndroidFrameConverter converter = new AndroidFrameConverter();
    Frame result = converter.convert(data, width, height);
    
    assertNotNull(result);
    assertEquals(frame.imageWidth, result.imageWidth);
    assertEquals(frame.imageHeight, result.imageHeight);
    assertEquals(frame.imageChannels, result.imageChannels);
    assertEquals(frame.imageDepth, result.imageDepth);
    assertEquals(frame.imageStride, result.imageStride);
    assertEquals(frame.image, result.image);
}


No.8 generated result --------------------------

@Test
public void convertTest() {
    // Prepare test data
    byte[] data = {/* sample byte data */};
    int width = 640;
    int height = 480;

    // Create an instance of AndroidFrameConverter
    AndroidFrameConverter converter = new AndroidFrameConverter();

    // Call the convert method
    Frame result = converter.convert(data, width, height);

    // Assert the result
    assertNotNull(result);
    assertEquals(width, result.imageWidth);
    assertEquals(height, result.imageHeight);
    assertEquals(3, result.imageChannels);
    // More assertions can be added for specific values in the frame
}


No.9 generated result --------------------------

@Test
public void convertTest() {
    byte[] data = new byte[width * height];
    int width = 640;
    int height = 480;
    FrameConverter<Bitmap> converter = new AndroidFrameConverter();
    Frame frame = converter.convert(data, width, height);
    
    assertNotNull(frame);
    assertEquals(width, frame.imageWidth);
    assertEquals(height, frame.imageHeight);
    assertEquals(3, frame.imageChannels);
    assertEquals(Frame.DEPTH_UBYTE, frame.imageDepth);
}


No.10 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AndroidFrameConverterTest {
    @Test
    public void convertTest() {
        byte[] data = new byte[width * height * 3]; // sample data
        int width = 640; // sample width
        int height = 480; // sample height
        
        AndroidFrameConverter converter = new AndroidFrameConverter();
        Frame frame = converter.convert(data, width, height);
        assertNotNull(frame);
        
        // Perform assertions on the converted frame
        assertEquals(width, frame.imageWidth);
        assertEquals(height, frame.imageHeight);
        assertEquals(3, frame.imageChannels);
        assertEquals(Frame.DEPTH_UBYTE, frame.imageDepth);
        
        // ... Continue with more assertions if necessary
        
        // Clean up the frame
        frame.close();
    }
}



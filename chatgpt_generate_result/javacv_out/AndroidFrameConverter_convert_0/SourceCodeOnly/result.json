{
    "project_name": "javacv",
    "file_name": "AndroidFrameConverter.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/AndroidFrameConverter.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**\n     * Convert YUV 4:2:0 SP (NV21) data to BGR, as received, for example,\n     * via {@link Camera.PreviewCallback#onPreviewFrame(byte[],Camera)}.\n     */",
    "source_code": "\npublic Frame convert(byte[] data, int width, int height) {\n    if (frame == null || frame.imageWidth != width\n            || frame.imageHeight != height || frame.imageChannels != 3) {\n        if (frame != null) {\n            frame.close();\n        }\n        frame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);\n    }\n    ByteBuffer out = (ByteBuffer)frame.image[0];\n    int stride = frame.imageStride;\n\n    // ported from https://android.googlesource.com/platform/development/+/master/tools/yuv420sp2rgb/yuv420sp2rgb.c\n    int offset = height * width;\n    for (int i = 0; i < height; i++) {\n        for (int j = 0; j < width; j++) {\n            int Y = data[i * width + j] & 0xFF;\n            int V = data[offset + (i/2) * width + 2 * (j/2)    ] & 0xFF;\n            int U = data[offset + (i/2) * width + 2 * (j/2) + 1] & 0xFF;\n\n            // Yuv Convert\n            Y -= 16;\n            U -= 128;\n            V -= 128;\n\n            if (Y < 0)\n                Y = 0;\n\n            // R = (int)(1.164 * Y + 2.018 * U);\n            // G = (int)(1.164 * Y - 0.813 * V - 0.391 * U);\n            // B = (int)(1.164 * Y + 1.596 * V);\n\n            int B = (int)(1192 * Y + 2066 * U);\n            int G = (int)(1192 * Y - 833 * V - 400 * U);\n            int R = (int)(1192 * Y + 1634 * V);\n\n            R = Math.min(262143, Math.max(0, R));\n            G = Math.min(262143, Math.max(0, G));\n            B = Math.min(262143, Math.max(0, B));\n\n            R >>= 10; R &= 0xff;\n            G >>= 10; G &= 0xff;\n            B >>= 10; B &= 0xff;\n\n            out.put(i * stride + 3 * j,     (byte)B);\n            out.put(i * stride + 3 * j + 1, (byte)G);\n            out.put(i * stride + 3 * j + 2, (byte)R);\n        }\n    }\n    return frame;\n}\n",
    "class_name": "AndroidFrameConverter",
    "method_name": "convert",
    "arguments": [
        "byte[] data",
        "int width",
        "int height"
    ],
    "generate_test": [
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AndroidFrameConverterTest {\n    @Test\n    public void convertTest() {\n        byte[] data = new byte[<DATA_SIZE>];\n        int width = <WIDTH>;\n        int height = <HEIGHT>;\n        \n        Frame expectedFrame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);\n        Frame actualFrame = convert(data, width, height);\n        \n        assertEquals(expectedFrame.imageWidth, actualFrame.imageWidth);\n        assertEquals(expectedFrame.imageHeight, actualFrame.imageHeight);\n        assertEquals(expectedFrame.imageChannels, actualFrame.imageChannels);\n        \n        // Perform additional assertions on the pixel values if needed\n        \n        expectedFrame.close();\n        actualFrame.close();\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AndroidFrameConverterTest {\n    @Test\n    public void convertTest() {\n        byte[] data = new byte[10]; // Example data for testing\n        int width = 320; // Example width for testing\n        int height = 240; // Example height for testing\n        \n        Frame frame = new Frame(); // Create a new Frame object\n        \n        // Perform the conversion\n        // Replace <FILL> with the code to call the \"convert\" method and assign the result to the \"frame\" variable\n        frame = convert(data, width, height);\n        \n        assertNotNull(frame); // Assert that the frame is not null\n        assertEquals(width, frame.imageWidth); // Assert that the frame width is correct\n        assertEquals(height, frame.imageHeight); // Assert that the frame height is correct\n        assertEquals(3, frame.imageChannels); // Assert that the frame has 3 channels\n        \n        // Add additional assertions if needed to test the output of the conversion\n        // For example, you could assert specific values of pixels in the frame\n    }\n}",
        "@Test\npublic void convertTest() {\n    byte[] data = new byte[10];\n    int width = 640;\n    int height = 480;\n    \n    Frame expectedFrame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);\n    Frame actualFrame = convert(data, width, height);\n    \n    assertArrayEquals(expectedFrame.image[0].array(), actualFrame.image[0].array());\n}",
        "@Test\npublic void convertTest() {\n    byte[] data = new byte[10];\n    int width = 640;\n    int height = 480;\n    \n    Frame expectedFrame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);\n    ByteBuffer expectedOut = (ByteBuffer)expectedFrame.image[0];\n    int expectedStride = expectedFrame.imageStride;\n    \n    // Set up the expected output\n    \n    // TODO: Populate expectedOut with expected pixel values\n    \n    // Perform the conversion\n    Frame actualFrame = convert(data, width, height);\n    ByteBuffer actualOut = (ByteBuffer)actualFrame.image[0];\n    \n    // Check if the output frame matches the expected frame\n    assertArrayEquals(expectedOut.array(), actualOut.array());\n    \n    // Check if the stride in the output frame matches the expected stride\n    assertEquals(expectedStride, actualFrame.imageStride);\n}",
        "@Test\npublic void convertTest() {\n    byte[] data = new byte[100];\n    int width = 10;\n    int height = 10;\n    Frame expectedFrame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);\n    \n    Frame actualFrame = convert(data, width, height);\n    \n    assertEquals(expectedFrame.imageWidth, actualFrame.imageWidth);\n    assertEquals(expectedFrame.imageHeight, actualFrame.imageHeight);\n    assertEquals(expectedFrame.imageChannels, actualFrame.imageChannels);\n    assertArrayEquals(expectedFrame.image[0], actualFrame.image[0]);\n}",
        "@Test\npublic void convertTest() {\n    byte[] data = new byte[width * height]; // size of the data array should be determined\n    int width = 640; // example value\n    int height = 480; // example value\n    \n    // Fill the data array with appropriate values\n    \n    Frame frame = convert(data, width, height); // Call the method to be tested\n    \n    int expectedImageWidth = frame.imageWidth;\n    int expectedImageHeight = frame.imageHeight;\n    int expectedImageChannels = frame.imageChannels;\n    \n    // Assert statements should be added to verify the correctness of the conversion\n    \n    assertEquals(expectedImageWidth, width);\n    assertEquals(expectedImageHeight, height);\n    assertEquals(expectedImageChannels, 3);\n}",
        "@Test\npublic void convertTest() {\n    byte[] data = new byte[] {255, 0, 0, 0, 255, 0, 0, 0, 255}; // Example data\n    int width = 3;\n    int height = 1;\n    \n    Frame expectedFrame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);\n    ByteBuffer expectedOutput = (ByteBuffer)expectedFrame.image[0];\n    expectedOutput.put(0, (byte)0);\n    expectedOutput.put(1, (byte)0);\n    expectedOutput.put(2, (byte)255);\n    expectedOutput.put(3, (byte)0);\n    expectedOutput.put(4, (byte)255);\n    expectedOutput.put(5, (byte)0);\n    expectedOutput.put(6, (byte)255);\n    expectedOutput.put(7, (byte)0);\n    expectedOutput.put(8, (byte)255);\n    \n    Frame actualFrame = convert(data, width, height);\n    ByteBuffer actualOutput = (ByteBuffer)actualFrame.image[0];\n    \n    assertArrayEquals(expectedOutput.array(), actualOutput.array());\n    assertEquals(expectedFrame.imageWidth, actualFrame.imageWidth);\n    assertEquals(expectedFrame.imageHeight, actualFrame.imageHeight);\n    assertEquals(expectedFrame.imageChannels, actualFrame.imageChannels);\n    \n    if (frame != null) {\n        frame.close();\n    }\n    frame = null;\n}",
        "@Test\npublic void convertTest() {\n    byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 }; // Sample data for testing\n    int width = 2; // Sample width for testing\n    int height = 2; // Sample height for testing\n\n    // Initialize the converter object\n    AndroidFrameConverter converter = new AndroidFrameConverter();\n\n    // Call the convert method and get the result\n    Frame result = converter.convert(data, width, height);\n\n    // Verify the expected result\n    assertNotNull(result);\n    assertEquals(width, result.imageWidth);\n    assertEquals(height, result.imageHeight);\n    assertEquals(3, result.imageChannels);\n\n    // Add more assertions to verify the data in the resulting frame\n    // For example, you can test specific pixel values\n\n    //...\n}",
        "public class AndroidFrameConverterTest {\n    @Test\n    public void convertTest() {\n        // Arrange\n        byte[] data = new byte[10]; // sample data\n        int width = 640;\n        int height = 480;\n        Frame frame = null; // initialize frame\n        AndroidFrameConverter converter = new AndroidFrameConverter(); //assuming AndroidFrameConverter class exists\n\n        // Act\n        Frame result = converter.convert(data, width, height);\n\n        // Assert\n        assertNotNull(result);\n        assertEquals(width, result.imageWidth);\n        assertEquals(height, result.imageHeight);\n        assertEquals(3, result.imageChannels);\n    }\n}",
        "@Test\npublic void convertTest() {\n    byte[] data = new byte[10];\n    int width = 5;\n    int height = 2;\n    \n    Frame expectedFrame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);\n    Frame actualFrame = convert(data, width, height);\n    \n    assertArrayEquals(expectedFrame.image[0].array(), actualFrame.image[0].array());\n}"
    ]
}
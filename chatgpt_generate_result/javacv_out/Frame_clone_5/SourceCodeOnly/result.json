{
    "project_name": "javacv",
    "file_name": "Frame.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/Frame.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**Care must be taken if this method is to be used in conjunction with movie recordings.\n     *  Cloning a frame containing a full HD picture (alpha channel included) would take 1920 x 1080 * 4 = 8.294.400 Bytes.\n     *  Expect a heap overflow exception when using this method without cleaning up.\n     *\n     * @return A deep copy of this frame.\n     * @see {@link #cloneBufferArray}\n     *\n     * @author Extension proposed by Dragos Dutu\n     * */",
    "source_code": "\n@Override\npublic Frame clone() {\n    Frame newFrame = new Frame();\n\n    // Video part\n    newFrame.imageWidth = imageWidth;\n    newFrame.imageHeight = imageHeight;\n    newFrame.imageDepth = imageDepth;\n    newFrame.imageChannels = imageChannels;\n    newFrame.imageStride = imageStride;\n    newFrame.keyFrame = keyFrame;\n    newFrame.pictType = pictType;\n    newFrame.streamIndex = streamIndex;\n    newFrame.type = type;\n    newFrame.opaque = new Pointer[3];\n    if (image != null) {\n        newFrame.image = new Buffer[image.length];\n        ((Pointer[])newFrame.opaque)[0] = cloneBufferArray(image, newFrame.image);\n    }\n\n    // Audio part\n    newFrame.audioChannels = audioChannels;\n    newFrame.sampleRate = sampleRate;\n    if (samples != null) {\n        newFrame.samples = new Buffer[samples.length];\n        ((Pointer[])newFrame.opaque)[1] = cloneBufferArray(samples, newFrame.samples);\n    }\n\n    // Other data streams\n    if (data != null) {\n        ByteBuffer[] dst = new ByteBuffer[1];\n        ((Pointer[])newFrame.opaque)[2] = cloneBufferArray(new ByteBuffer[]{data}, dst);\n        newFrame.data = dst[0];\n    }\n\n    // Add timestamp\n    newFrame.timestamp = timestamp;\n\n    return newFrame;\n}\n",
    "class_name": "Frame",
    "method_name": "clone",
    "arguments": [],
    "generate_test": [
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        Frame frame = new Frame();\n        frame.imageWidth = 100;\n        frame.imageHeight = 200;\n        frame.imageDepth = 8;\n        \n        Frame clonedFrame = frame.clone();\n        \n        assertEquals(frame.imageWidth, clonedFrame.imageWidth);\n        assertEquals(frame.imageHeight, clonedFrame.imageHeight);\n        assertEquals(frame.imageDepth, clonedFrame.imageDepth);\n        // Continue with the assertion for other properties \n        \n        // Add more assertions as necessary\n        \n    }\n}",
        "@Test\npublic void cloneTest() {\n    Frame frame = new Frame();\n\n    // Set values for the original frame\n    frame.setImageWidth(640);\n    frame.setImageHeight(480);\n    frame.setImageDepth(8);\n    frame.setImageChannels(3);\n    frame.setImageStride(1920);\n    frame.setKeyFrame(true);\n    frame.setPictType(Frame.Type.I_FRAME);\n    frame.setStreamIndex(0);\n    frame.setType(Frame.Type.VIDEO);\n    frame.setOpaque(new Pointer[3]);\n    frame.setImage(new Buffer[10]);\n\n    frame.setAudioChannels(2);\n    frame.setSampleRate(44100);\n    frame.setSamples(new Buffer[5]);\n\n    frame.setData(ByteBuffer.allocate(1024));\n\n    frame.setTimestamp(123456789);\n\n    // Clone the frame\n    Frame clonedFrame = frame.clone();\n\n    // Verify the cloned frame has the same values as the original frame\n    assertEquals(frame.getImageWidth(), clonedFrame.getImageWidth());\n    assertEquals(frame.getImageHeight(), clonedFrame.getImageHeight());\n    assertEquals(frame.getImageDepth(), clonedFrame.getImageDepth());\n    assertEquals(frame.getImageChannels(), clonedFrame.getImageChannels());\n    assertEquals(frame.getImageStride(), clonedFrame.getImageStride());\n    assertEquals(frame.isKeyFrame(), clonedFrame.isKeyFrame());\n    assertEquals(frame.getPictType(), clonedFrame.getPictType());\n    assertEquals(frame.getStreamIndex(), clonedFrame.getStreamIndex());\n    assertEquals(frame.getType(), clonedFrame.getType());\n    assertArrayEquals(frame.getImage(), clonedFrame.getImage());\n\n    assertEquals(frame.getAudioChannels(), clonedFrame.getAudioChannels());\n    assertEquals(frame.getSampleRate(), clonedFrame.getSampleRate());\n    assertArrayEquals(frame.getSamples(), clonedFrame.getSamples());\n\n    assertEquals(frame.getData(), clonedFrame.getData());\n\n    assertEquals(frame.getTimestamp(), clonedFrame.getTimestamp());\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        Frame frame = new Frame();\n        \n        Frame clonedFrame = frame.clone();\n        \n        // Assertions for Video part\n        assertEquals(frame.imageWidth, clonedFrame.imageWidth);\n        assertEquals(frame.imageHeight, clonedFrame.imageHeight);\n        assertEquals(frame.imageDepth, clonedFrame.imageDepth);\n        assertEquals(frame.imageChannels, clonedFrame.imageChannels);\n        assertEquals(frame.imageStride, clonedFrame.imageStride);\n        assertEquals(frame.keyFrame, clonedFrame.keyFrame);\n        assertEquals(frame.pictType, clonedFrame.pictType);\n        assertEquals(frame.streamIndex, clonedFrame.streamIndex);\n        assertEquals(frame.type, clonedFrame.type);\n        \n        assertArrayEquals(frame.image, clonedFrame.image);\n        \n        // Assertions for Audio part\n        assertEquals(frame.audioChannels, clonedFrame.audioChannels);\n        assertEquals(frame.sampleRate, clonedFrame.sampleRate);\n        \n        assertArrayEquals(frame.samples, clonedFrame.samples);\n        \n        // Assertions for Other data streams\n        assertEquals(frame.data, clonedFrame.data);\n        \n        // Assertion for timestamp\n        assertEquals(frame.timestamp, clonedFrame.timestamp);\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        // Create a new Frame object\n        Frame originalFrame = new Frame();\n\n        // Set values for the original frame (this can be done based on specific test requirements)\n\n        // Clone the original frame\n        Frame clonedFrame = originalFrame.clone();\n\n        // Assert that the cloned frame is not null\n        assertNotNull(clonedFrame);\n        \n        // Assert that the cloned frame's video properties are the same as the original frame's video properties\n        assertEquals(originalFrame.imageWidth, clonedFrame.imageWidth);\n        assertEquals(originalFrame.imageHeight, clonedFrame.imageHeight);\n        assertEquals(originalFrame.imageDepth, clonedFrame.imageDepth);\n        assertEquals(originalFrame.imageChannels, clonedFrame.imageChannels);\n        assertEquals(originalFrame.imageStride, clonedFrame.imageStride);\n        assertEquals(originalFrame.keyFrame, clonedFrame.keyFrame);\n        assertEquals(originalFrame.pictType, clonedFrame.pictType);\n        assertEquals(originalFrame.streamIndex, clonedFrame.streamIndex);\n        assertEquals(originalFrame.type, clonedFrame.type);\n        assertArrayEquals(originalFrame.opaque, clonedFrame.opaque);\n        assertArrayEquals(originalFrame.image, clonedFrame.image);\n        \n        // Assert that the cloned frame's audio properties are the same as the original frame's audio properties\n        assertEquals(originalFrame.audioChannels, clonedFrame.audioChannels);\n        assertEquals(originalFrame.sampleRate, clonedFrame.sampleRate);\n        assertArrayEquals(originalFrame.samples, clonedFrame.samples);\n        \n        // Assert that the cloned frame's other data properties are the same as the original frame's other data properties\n        assertEquals(originalFrame.data, clonedFrame.data);\n        \n        // Assert that the cloned frame's timestamp is the same as the original frame's timestamp\n        assertEquals(originalFrame.timestamp, clonedFrame.timestamp);\n    }\n}",
        "@Test\npublic void cloneTest() {\n    Frame frame = new Frame();\n\n    frame.imageWidth = 640;\n    frame.imageHeight = 480;\n    frame.imageDepth = 8;\n    frame.imageChannels = 3;\n    frame.imageStride = 1920;\n    frame.keyFrame = true;\n    frame.pictType = 1;\n    frame.streamIndex = 0;\n    frame.type = 1;\n    frame.opaque = new Pointer[3];\n\n    // Cloning image\n    frame.image = new Buffer[2];\n    frame.image[0] = createBuffer(1920);\n    frame.image[1] = createBuffer(960);\n    frame.opaque[0] = cloneBufferArray(frame.image, frame.image);\n\n    // Cloning audio samples\n    frame.audioChannels = 2;\n    frame.sampleRate = 44100;\n    frame.samples = new Buffer[2];\n    frame.samples[0] = createBuffer(2048);\n    frame.samples[1] = createBuffer(4096);\n    frame.opaque[1] = cloneBufferArray(frame.samples, frame.samples);\n\n    // Cloning other data streams (data)\n    frame.data = ByteBuffer.allocate(1024);\n    ByteBuffer[] dst = new ByteBuffer[1];\n    frame.opaque[2] = cloneBufferArray(new ByteBuffer[]{frame.data}, dst);\n    frame.data = dst[0];\n\n    // Adding timestamp\n    frame.timestamp = 1500000000L;\n\n    Frame clonedFrame = frame.clone();\n\n    assertEquals(frame.imageWidth, clonedFrame.imageWidth);\n    assertEquals(frame.imageHeight, clonedFrame.imageHeight);\n    assertEquals(frame.imageDepth, clonedFrame.imageDepth);\n    assertEquals(frame.imageChannels, clonedFrame.imageChannels);\n    assertEquals(frame.imageStride, clonedFrame.imageStride);\n    assertEquals(frame.keyFrame, clonedFrame.keyFrame);\n    assertEquals(frame.pictType, clonedFrame.pictType);\n    assertEquals(frame.streamIndex, clonedFrame.streamIndex);\n    assertEquals(frame.type, clonedFrame.type);\n    assertArrayEquals(frame.image, clonedFrame.image);\n    assertEquals(frame.audioChannels, clonedFrame.audioChannels);\n    assertEquals(frame.sampleRate, clonedFrame.sampleRate);\n    assertArrayEquals(frame.samples, clonedFrame.samples);\n    assertEquals(frame.data, clonedFrame.data);\n    assertEquals(frame.timestamp, clonedFrame.timestamp);\n}",
        "@Test\npublic void cloneTest() {\n    Frame frame = new Frame();\n    \n    // Set initial values for the frame\n    \n    Frame clonedFrame = frame.clone();\n    \n    // Assert statements for each property to verify if the cloning was successful\n    \n    // Assert statements for video part\n    \n    assertEquals(frame.getImageWidth(), clonedFrame.getImageWidth());\n    assertEquals(frame.getImageHeight(), clonedFrame.getImageHeight());\n    assertEquals(frame.getImageDepth(), clonedFrame.getImageDepth());\n    assertEquals(frame.getImageChannels(), clonedFrame.getImageChannels());\n    assertEquals(frame.getImageStride(), clonedFrame.getImageStride());\n    assertEquals(frame.isKeyFrame(), clonedFrame.isKeyFrame());\n    assertEquals(frame.getPictType(), clonedFrame.getPictType());\n    assertEquals(frame.getStreamIndex(), clonedFrame.getStreamIndex());\n    assertEquals(frame.getType(), clonedFrame.getType());\n    assertArrayEquals(frame.getImage(), clonedFrame.getImage());\n    \n    // Assert statements for audio part\n    \n    assertEquals(frame.getAudioChannels(), clonedFrame.getAudioChannels());\n    assertEquals(frame.getSampleRate(), clonedFrame.getSampleRate());\n    assertArrayEquals(frame.getSamples(), clonedFrame.getSamples());\n    \n    // Assert statements for other data streams\n    \n    assertEquals(frame.getData(), clonedFrame.getData());\n    \n    // Assert statement for timestamp\n    \n    assertEquals(frame.getTimestamp(), clonedFrame.getTimestamp());\n}",
        "@Test\npublic void cloneTest() {\n    Frame frame = new Frame();\n    frame.imageWidth = 640;\n    frame.imageHeight = 480;\n    frame.imageDepth = 8;\n    frame.imageChannels = 3;\n    frame.imageStride = 640 * 3;\n    frame.keyFrame = 1;\n    frame.pictType = AV_PICTURE_TYPE_I;\n    frame.streamIndex = 0;\n    frame.type = FF_FRAME_TYPE_VIDEO;\n    BufferedImage img = new BufferedImage(frame.imageWidth, frame.imageHeight, BufferedImage.TYPE_3BYTE_BGR);\n    frame.image = new Buffer[]{((DataBufferByte) img.getRaster().getDataBuffer()).getData()};\n    frame.audioChannels = 2;\n    frame.sampleRate = 44100;\n    frame.samples = new Buffer[2];\n    frame.samples[0] = FloatBuffer.allocate(1024);\n    frame.samples[1] = FloatBuffer.allocate(1024);\n    ByteBuffer dataBuffer = ByteBuffer.allocateDirect(256);\n    frame.data = dataBuffer;\n    frame.timestamp = 1234567890;\n\n    Frame cloned = frame.clone();\n\n    assertNotSame(frame, cloned);\n    assertEquals(frame.imageWidth, cloned.imageWidth);\n    assertEquals(frame.imageHeight, cloned.imageHeight);\n    assertEquals(frame.imageDepth, cloned.imageDepth);\n    assertEquals(frame.imageChannels, cloned.imageChannels);\n    assertEquals(frame.imageStride, cloned.imageStride);\n    assertEquals(frame.keyFrame, cloned.keyFrame);\n    assertEquals(frame.pictType, cloned.pictType);\n    assertEquals(frame.streamIndex, cloned.streamIndex);\n    assertEquals(frame.type, cloned.type);\n    assertArrayEquals(frame.image, cloned.image);\n    assertEquals(frame.audioChannels, cloned.audioChannels);\n    assertEquals(frame.sampleRate, cloned.sampleRate);\n    assertArrayEquals(frame.samples, cloned.samples);\n    assertEquals(frame.data, cloned.data);\n    assertEquals(frame.timestamp, cloned.timestamp);\n}",
        "@Test\npublic void cloneTest() {\n    Frame frame = new Frame();\n    Frame clonedFrame = frame.clone();\n\n    // Video part\n    assertEquals(frame.imageWidth, clonedFrame.imageWidth);\n    assertEquals(frame.imageHeight, clonedFrame.imageHeight);\n    assertEquals(frame.imageDepth, clonedFrame.imageDepth);\n    assertEquals(frame.imageChannels, clonedFrame.imageChannels);\n    assertEquals(frame.imageStride, clonedFrame.imageStride);\n    assertEquals(frame.keyFrame, clonedFrame.keyFrame);\n    assertEquals(frame.pictType, clonedFrame.pictType);\n    assertEquals(frame.streamIndex, clonedFrame.streamIndex);\n    assertEquals(frame.type, clonedFrame.type);\n    assertArrayEquals(frame.opaque, clonedFrame.opaque);\n    assertArrayEquals(frame.image, clonedFrame.image);\n\n    // Audio part\n    assertEquals(frame.audioChannels, clonedFrame.audioChannels);\n    assertEquals(frame.sampleRate, clonedFrame.sampleRate);\n    assertArrayEquals(frame.samples, clonedFrame.samples);\n\n    // Other data streams\n    assertEquals(frame.data, clonedFrame.data);\n    \n    // Add timestamp\n    assertEquals(frame.timestamp, clonedFrame.timestamp);\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        Frame frame = new Frame();\n\n        // Set up the frame\n        frame.setImageWidth(800);\n        frame.setImageHeight(600);\n        frame.setImageDepth(24);\n        frame.setImageChannels(3);\n        frame.setImageStride(2400);\n        frame.setKeyFrame(true);\n        frame.setPictType(VideoPictureType.PICT_TYPE_I);\n        frame.setStreamIndex(0);\n        frame.setType(Buffer.Type.VIDEO);\n        frame.setOpaque(new Pointer[3]);\n        Buffer[] image = new Buffer[10];\n        frame.setImage(image);\n        ((Pointer[])frame.getOpaque())[0] = cloneBufferArray(image, frame.getImage());\n\n        frame.setAudioChannels(2);\n        frame.setSampleRate(44100);\n        Buffer[] samples = new Buffer[5];\n        frame.setSamples(samples);\n        ((Pointer[])frame.getOpaque())[1] = cloneBufferArray(samples, frame.getSamples());\n\n        ByteBuffer data = ByteBuffer.allocate(1024);\n        ((Pointer[])frame.getOpaque())[2] = cloneBufferArray(new ByteBuffer[]{data}, new ByteBuffer[]{frame.getData()});\n        frame.setData(frame.getData());\n\n        // Set timestamp\n        frame.setTimestamp(12345);\n\n        // Clone the frame\n        Frame clonedFrame = frame.clone();\n\n        // Check if the cloned frame is correct\n        assertEquals(frame.getImageWidth(), clonedFrame.getImageWidth());\n        assertEquals(frame.getImageHeight(), clonedFrame.getImageHeight());\n        assertEquals(frame.getImageDepth(), clonedFrame.getImageDepth());\n        assertEquals(frame.getImageChannels(), clonedFrame.getImageChannels());\n        assertEquals(frame.getImageStride(), clonedFrame.getImageStride());\n        assertEquals(frame.isKeyFrame(), clonedFrame.isKeyFrame());\n        assertEquals(frame.getPictType(), clonedFrame.getPictType());\n        assertEquals(frame.getStreamIndex(), clonedFrame.getStreamIndex());\n        assertEquals(frame.getType(), clonedFrame.getType());\n        assertArrayEquals(frame.getOpaque(), clonedFrame.getOpaque());\n        assertArrayEquals(frame.getImage(), clonedFrame.getImage());\n        assertEquals(frame.getAudioChannels(), clonedFrame.getAudioChannels());\n        assertEquals(frame.getSampleRate(), clonedFrame.getSampleRate());\n        assertArrayEquals(frame.getSamples(), clonedFrame.getSamples());\n        assertArrayEquals(frame.getData(), clonedFrame.getData());\n        assertEquals(frame.getTimestamp(), clonedFrame.getTimestamp());\n    }\n}",
        "@Test\npublic void cloneTest() {\n    Frame originalFrame = new Frame();\n    originalFrame.setImageWidth(640);\n    originalFrame.setImageHeight(480);\n    originalFrame.setImageDepth(8);\n    originalFrame.setImageChannels(3);\n\n    Frame clonedFrame = originalFrame.clone();\n\n    assertEquals(originalFrame.getImageWidth(), clonedFrame.getImageWidth());\n    assertEquals(originalFrame.getImageHeight(), clonedFrame.getImageHeight());\n    assertEquals(originalFrame.getImageDepth(), clonedFrame.getImageDepth());\n    assertEquals(originalFrame.getImageChannels(), clonedFrame.getImageChannels());\n\n    // Add more assertions for the other properties of the Frame object\n    // that are being cloned\n    // ...\n}"
    ]
}
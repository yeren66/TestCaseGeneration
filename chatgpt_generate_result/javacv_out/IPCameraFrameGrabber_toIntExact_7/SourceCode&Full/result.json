{
    "project_name": "javacv",
    "file_name": "IPCameraFrameGrabber.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/IPCameraFrameGrabber.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**\n     * Returns the value of the {@code long} argument;\n     * throwing an exception if the value overflows an {@code int}.\n     *\n     * @param value the long value\n     * @return the argument as an int\n     * @throws ArithmeticException if the {@code argument} overflows an int\n     * @see <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toIntExact-long-\">Java 8 Implementation</a>\n     */",
    "source_code": "\nprivate static int toIntExact(long value) {\n    if ((int) value != value) {\n        throw new ArithmeticException(\"integer overflow\");\n    }\n    return (int) value;\n}\n",
    "class_name": "IPCameraFrameGrabber",
    "method_name": "toIntExact",
    "arguments": [
        "long value"
    ],
    "generate_test": [
        "@Test\npublic void toIntExactTest() {\n    // Test case 1\n    try {\n        int result1 = IPCameraFrameGrabber.toIntExact(10); // Value within int range\n        assertEquals(10, result1);\n    } catch (ArithmeticException e) {\n        fail(\"No exception should be thrown\");\n    }\n    \n    // Test case 2\n    try {\n        int result2 = IPCameraFrameGrabber.toIntExact(Integer.MAX_VALUE + 1L); // Value outside int range\n        fail(\"ArithmeticException should be thrown\");\n    } catch (ArithmeticException e) {\n        assertEquals(\"integer overflow\", e.getMessage());\n    }\n}",
        "@Test\n    public void toIntExactTest() {\n        long value = 10L;\n        int expected = 10;\n        int result = IPCameraFrameGrabber.toIntExact(value);\n        assertEquals(expected, result);\n\n        value = 10000000000L;\n        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(value));\n\n        value = Integer.MAX_VALUE + 1L;\n        assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(value));\n    }",
        "@Test\npublic void toIntExactTest() {\n    assertThrows(ArithmeticException.class, () -> {\n        IPCameraFrameGrabber.toIntExact(2147483648L);\n    });\n    assertEquals(123, IPCameraFrameGrabber.toIntExact(123L));\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n    @Test\n    public void toIntExactTest() {\n        long inputValue = 10L;\n        int expectedOutput = 10;\n        int actualOutput = IPCameraFrameGrabber.toIntExact(inputValue);\n        assertEquals(expectedOutput, actualOutput);\n        \n        inputValue = Integer.MAX_VALUE + 1L; // Overflow case\n        assertThrows(ArithmeticException.class, () -> {\n            IPCameraFrameGrabber.toIntExact(inputValue);\n        });\n    }\n}",
        "@Test\npublic void toIntExactTest() {\n    assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(2147483648L));\n    assertDoesNotThrow(() -> IPCameraFrameGrabber.toIntExact(2147483647L));\n}",
        "@Test\npublic void toIntExactTest() {\n    long value = 10;\n    int expected = 10;\n    int actual = IPCameraFrameGrabber.toIntExact(value);\n    assertEquals(expected, actual);\n\n    value = Integer.MAX_VALUE + 1L;\n    assertThrows(ArithmeticException.class, () -> {\n        IPCameraFrameGrabber.toIntExact(value);\n    });\n\n    value = Integer.MIN_VALUE - 1L;\n    assertThrows(ArithmeticException.class, () -> {\n        IPCameraFrameGrabber.toIntExact(value);\n    });\n}",
        "@Test\npublic void toIntExactTest() {\n    // Test for positive value within the range of int\n    long value1 = 100;\n    int expected1 = IPCameraFrameGrabber.toIntExact(value1);\n    assertEquals((int) value1, expected1);\n    \n    // Test for negative value within the range of int\n    long value2 = -50;\n    int expected2 = IPCameraFrameGrabber.toIntExact(value2);\n    assertEquals((int) value2, expected2);\n    \n    // Test for maximum value of int\n    long value3 = Integer.MAX_VALUE;\n    int expected3 = IPCameraFrameGrabber.toIntExact(value3);\n    assertEquals((int) value3, expected3);\n    \n    // Test for minimum value of int\n    long value4 = Integer.MIN_VALUE;\n    int expected4 = IPCameraFrameGrabber.toIntExact(value4);\n    assertEquals((int) value4, expected4);\n    \n    // Test for value above the range of int\n    long value5 = 10000000000L;\n    assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(value5));\n    \n    // Test for value below the range of int\n    long value6 = -10000000000L;\n    assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(value6));\n}",
        "@Test\npublic void toIntExactTest() {\n    // Test for positive value\n    assertDoesNotThrow(() -> {\n        int result = IPCameraFrameGrabber.toIntExact(10);\n        assertEquals(10, result);\n    });\n    \n    // Test for negative value\n    assertDoesNotThrow(() -> {\n        int result = IPCameraFrameGrabber.toIntExact(-10);\n        assertEquals(-10, result);\n    });\n    \n    // Test for max integer value\n    assertDoesNotThrow(() -> {\n        int result = IPCameraFrameGrabber.toIntExact(Integer.MAX_VALUE);\n        assertEquals(Integer.MAX_VALUE, result);\n    });\n    \n    // Test for integer overflow\n    assertThrows(ArithmeticException.class, () -> {\n        IPCameraFrameGrabber.toIntExact((long) Integer.MAX_VALUE + 1);\n    });\n}",
        "@Test\npublic void toIntExactTest() {\n    // Test input that does not overflow\n    long value1 = 100;\n    int expected1 = 100;\n    int result1 = IPCameraFrameGrabber.toIntExact(value1);\n    assertEquals(expected1, result1);\n    \n    // Test input that overflows\n    long value2 = Integer.MAX_VALUE + 1L;\n    assertThrows(ArithmeticException.class, () -> {\n        IPCameraFrameGrabber.toIntExact(value2);\n    });\n    \n    // Test negative input that overflows\n    long value3 = Integer.MIN_VALUE - 1L;\n    assertThrows(ArithmeticException.class, () -> {\n        IPCameraFrameGrabber.toIntExact(value3);\n    });\n}",
        "@Test\npublic void toIntExactTest() {\n    assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(2147483648L));\n    assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(-2147483649L));\n    assertEquals(0, IPCameraFrameGrabber.toIntExact(0L));\n    assertEquals(1, IPCameraFrameGrabber.toIntExact(1L));\n    assertEquals(-1, IPCameraFrameGrabber.toIntExact(-1L));\n    assertEquals(2147483647, IPCameraFrameGrabber.toIntExact(2147483647L));\n    assertEquals(-2147483648, IPCameraFrameGrabber.toIntExact(-2147483648L));\n}"
    ]
}
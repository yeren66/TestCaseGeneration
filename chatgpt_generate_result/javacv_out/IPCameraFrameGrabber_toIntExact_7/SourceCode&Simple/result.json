{
    "project_name": "javacv",
    "file_name": "IPCameraFrameGrabber.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/IPCameraFrameGrabber.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**\n     * Returns the value of the {@code long} argument;\n     * throwing an exception if the value overflows an {@code int}.\n     *\n     * @param value the long value\n     * @return the argument as an int\n     * @throws ArithmeticException if the {@code argument} overflows an int\n     * @see <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toIntExact-long-\">Java 8 Implementation</a>\n     */",
    "source_code": "\nprivate static int toIntExact(long value) {\n    if ((int) value != value) {\n        throw new ArithmeticException(\"integer overflow\");\n    }\n    return (int) value;\n}\n",
    "class_name": "IPCameraFrameGrabber",
    "method_name": "toIntExact",
    "arguments": [
        "long value"
    ],
    "generate_test": [
        "@Test\npublic void toIntExactTest() {\n    // Test when value is within the integer range\n    long value1 = 100;\n    int result1 = IPCameraFrameGrabber.toIntExact(value1);\n    assertEquals((int) value1, result1);\n\n    // Test when value is larger than the integer range\n    long value2 = Integer.MAX_VALUE + 1L;\n    assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(value2));\n\n    // Test when value is smaller than the integer range\n    long value3 = Integer.MIN_VALUE - 1L;\n    assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(value3));\n}",
        "@Test\npublic void toIntExactTest() {\n    // Test case 1: Test when the value is within integer range\n    long value1 = 100;\n    int result1 = IPCameraFrameGrabber.toIntExact(value1);\n    assertEquals((int) value1, result1, \"Should return the same value\");\n\n    // Test case 2: Test when the value is at the lower bound of integer range\n    long value2 = Integer.MIN_VALUE;\n    int result2 = IPCameraFrameGrabber.toIntExact(value2);\n    assertEquals((int) value2, result2, \"Should return the same value\");\n\n    // Test case 3: Test when the value is at the upper bound of integer range\n    long value3 = Integer.MAX_VALUE;\n    int result3 = IPCameraFrameGrabber.toIntExact(value3);\n    assertEquals((int) value3, result3, \"Should return the same value\");\n\n    // Test case 4: Test when the value is outside the integer range\n    long value4 = 100000000000L;\n    assertThrows(ArithmeticException.class, () -> {\n        IPCameraFrameGrabber.toIntExact(value4);\n    }, \"Should throw ArithmeticException for integer overflow\");\n}",
        "@Test\npublic void toIntExactTest() {\n    long value = 1000;\n    int expected = 1000;\n    int actual = IPCameraFrameGrabber.toIntExact(value);\n    assertEquals(expected, actual);\n}\n\nExplanation: \n\nIn the given test case, we are testing the `toIntExact` method of `IPCameraFrameGrabber` class. We can create a test by providing a `long` value and asserting the expected output with the actual output of the method. In this case, we can set the `value` variable to 1000, as it is a valid integer value. Then, we can assign the expected output to 1000 and use the `IPCameraFrameGrabber.toIntExact` method to get the actual output. Finally, we can use the `assertEquals` assertion method to compare the expected and actual values in order to complete the test case.",
        "@Test\npublic void toIntExactTest() {\n    // Test case 1: Valid input\n    long value1 = 10;\n    int expected1 = 10;\n    int result1 = IPCameraFrameGrabber.toIntExact(value1);\n    assertEquals(expected1, result1);\n    \n    // Test case 2: Integer overflow\n    long value2 = Integer.MAX_VALUE + 1L;\n    assertThrows(ArithmeticException.class, () -> {\n        IPCameraFrameGrabber.toIntExact(value2);\n    });\n    \n    // Test case 3: Negative input\n    long value3 = -5;\n    int expected3 = -5;\n    int result3 = IPCameraFrameGrabber.toIntExact(value3);\n    assertEquals(expected3, result3);\n}",
        "@Test\npublic void toIntExactTest() {\n    // Test case 1: value is within the range of an int\n    long value1 = 10;\n    int result1 = IPCameraFrameGrabber.toIntExact(value1);\n    assertEquals((int) value1, result1);\n\n    // Test case 2: value is greater than the maximum value of an int\n    long value2 = Integer.MAX_VALUE + 1L;\n    assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(value2));\n\n    // Test case 3: value is less than the minimum value of an int\n    long value3 = Integer.MIN_VALUE - 1L;\n    assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(value3));\n\n    // Test case 4: value is exactly the maximum value of an int\n    long value4 = Integer.MAX_VALUE;\n    int result4 = IPCameraFrameGrabber.toIntExact(value4);\n    assertEquals((int) value4, result4);\n\n    // Test case 5: value is exactly the minimum value of an int\n    long value5 = Integer.MIN_VALUE;\n    int result5 = IPCameraFrameGrabber.toIntExact(value5);\n    assertEquals((int) value5, result5);\n}",
        "@Test\npublic void toIntExactTest() {\n    // Positive test case: value within the range of int\n    long value1 = 10;\n    int result1 = IPCameraFrameGrabber.toIntExact(value1);\n    assertEquals((int) value1, result1);\n    \n    // Positive test case: value at the lower bound of int\n    long value2 = Integer.MIN_VALUE; // -2147483648\n    int result2 = IPCameraFrameGrabber.toIntExact(value2);\n    assertEquals((int) value2, result2);\n    \n    // Positive test case: value at the upper bound of int\n    long value3 = Integer.MAX_VALUE; // 2147483647\n    int result3 = IPCameraFrameGrabber.toIntExact(value3);\n    assertEquals((int) value3, result3);\n    \n    // Negative test case: value outside the range of int\n    long value4 = Long.MAX_VALUE; // 9223372036854775807\n    assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(value4));\n    \n    // Negative test case: value outside the range of int\n    long value5 = Long.MIN_VALUE; // -9223372036854775808\n    assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(value5));\n}",
        "@Test\npublic void toIntExactTest() {\n    // Test case 1: when the value is within the range of an integer\n    long value1 = 100L;\n    int result1 = IPCameraFrameGrabber.toIntExact(value1);\n    assertEquals((int) value1, result1);\n\n    // Test case 2: when the value exceeds the range of an integer\n    long value2 = Integer.MAX_VALUE + 1L;\n    assertThrows(ArithmeticException.class, () -> {\n        IPCameraFrameGrabber.toIntExact(value2);\n    });\n}",
        "@Test\npublic void toIntExactTest() {\n    long value = 10L;\n    int expected = 10;\n    \n    int result = IPCameraFrameGrabber.toIntExact(value);\n    \n    assertEquals(expected, result);\n    \n    // Test with negative value\n    value = -10L;\n    expected = -10;\n    \n    result = IPCameraFrameGrabber.toIntExact(value);\n    \n    assertEquals(expected, result);\n    \n    // Test with value that causes integer overflow\n    value = 2147483648L;\n    \n    assertThrows(ArithmeticException.class, () -> {\n        IPCameraFrameGrabber.toIntExact(value);\n    });\n}",
        "@Test\npublic void toIntExactTest() {\n    long validValue = 5;\n    int expected = 5;\n    int actual = IPCameraFrameGrabber.toIntExact(validValue);\n    assertEquals(expected, actual);\n\n    long invalidValue = Integer.MAX_VALUE + 1L;\n    assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(invalidValue));\n}",
        "@Test\npublic void toIntExactTest() {\n    // Test case 1: Valid input within integer range\n    long value1 = 100;\n    int expected1 = 100;\n    int result1 = IPCameraFrameGrabber.toIntExact(value1);\n    assertEquals(expected1, result1);\n    \n    // Test case 2: Valid input at the lower boundary of integer range\n    long value2 = Integer.MIN_VALUE;\n    int expected2 = Integer.MIN_VALUE;\n    int result2 = IPCameraFrameGrabber.toIntExact(value2);\n    assertEquals(expected2, result2);\n    \n    // Test case 3: Valid input at the upper boundary of integer range\n    long value3 = Integer.MAX_VALUE;\n    int expected3 = Integer.MAX_VALUE;\n    int result3 = IPCameraFrameGrabber.toIntExact(value3);\n    assertEquals(expected3, result3);\n    \n    // Test case 4: Invalid input outside of integer range\n    long value4 = Long.MAX_VALUE;\n    assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(value4));\n}"
    ]
}
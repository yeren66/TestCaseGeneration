{
    "project_name": "javacv",
    "file_name": "Blobs.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/Blobs.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": null,
    "source_code": "//---------------------------------------------------------------------------------------\n// Main blob analysis routine\n//---------------------------------------------------------------------------------------\n// RegionData[0] is the border. It has Property[BLOBPARENT] = 0. \n\npublic int BlobAnalysis(IplImage Src,           // input image\n            int Col0, int Row0,                 // start of ROI\n            int Cols, int Rows,                 // size of ROI\n            int Border,                         // border color (0 = black; 1 = white)\n            int MinArea)                        // minimum region area\n{\n    CvMat SrcMat = Src.asCvMat();\n    int SrcCols = SrcMat.cols();\n    int SrcRows = SrcMat.rows();\n    \n    if(Col0 < 0) Col0 = 0;\n    if(Row0 < 0) Row0 = 0;\n    if(Cols < 0) Cols = SrcCols;\n    if(Rows < 0) Rows = SrcRows;\n    if(Col0 + Cols > SrcCols) Cols = SrcCols - Col0;\n    if(Row0 + Rows > SrcRows) Rows = SrcRows - Row0;\n\n    if(Cols > BLOBCOLCOUNT || Rows > BLOBROWCOUNT )\n    {\n        System.out.println(\"Error in Class Blobs: Image too large: Edit Blobs.java\");\n        System.exit(666);\n        return 0;\n    }\n    \n    // Initialization\n    int FillLabel = 0;\n    int FillColor = 0; if(Border > 0) { FillColor = 1; }\n    LabelA = LabelB = LabelC = LabelD = 0;\n    ColorA = ColorB = ColorC = ColorD = FillColor;\n    for(int k = 0; k < BLOBTOTALCOUNT; k++) SubsumedLabel[k] = -1;\n    \n    // Initialize border region\n    MaxLabel = 0;\n    double [] BorderRegion = RegionData[0];\n    BorderRegion[BLOBLABEL] = 0.0;\n    BorderRegion[BLOBPARENT] = -1.0;\n    BorderRegion[BLOBAREA] = Rows + Cols + 4;   // Top, left, and 4 corners\n    BorderRegion[BLOBCOLOR] = FillColor;\n    BorderRegion[BLOBSUMX] = 0.5 * ( (2.0 + Cols) * (Cols - 1.0) ) - Rows - 1 ;\n    BorderRegion[BLOBSUMY] = 0.5 * ( (2.0 + Rows) * (Rows - 1.0) ) - Cols - 1 ;\n    BorderRegion[BLOBMINX] = -1;\n    BorderRegion[BLOBMINY] = -1;\n    BorderRegion[BLOBMAXX] = Cols + 1.0;\n    BorderRegion[BLOBMAXY] = Rows + 1.0;\n    System.arraycopy(BorderRegion,0,RegionData[0],0,BLOBDATACOUNT); // RegionData[0] <- BorderRegion;\n    \n    //  The cells are identified this way\n    //          Last |AB|\n    //          This |CD|\n    //\n    // With 4 connectivity, there are 8 possibilities for the cells:\n    //                      No color transition     Color transition\n    //          Case              1  2  3  4          5  6  7  8 \n    //          Last Row        |pp|pp|pq|pq|       |pp|pp|pq|pq|   \n    //          This Row        |pP|qQ|pP|qQ|       |pQ|qP|pQ|qP|\n    //\n    // Region numbers are p, q, r, x; where p<>q\n    // Upper case letter is the current element at column=x row=y\n    // Color is 0 or 1      (1 stands for 255 in the actual image)\n    // Note that Case 4 is complicated because it joins two regions\n    //--------------------------\n    // Case 1: Colors A=B; C=D; A=C     \n    // Case 2: Colors A=B; C=D; A<>C    \n    // Case 3: Colors A<>B;C=D; A=C     \n    // Case 4: Colors A<>B;C=D; A<>C    \n    // Case 5: Colors A=B; C<>D; A=C    \n    // Case 6: Colors A=B; C<>D; A<>C   \n    // Case 7: Colors A<>B;C<>D; A=C    \n    // Case 8: Colors A<>B;C<>D; A<>C   \n    //--------------------------\n                \n    // Loop over rows of ROI. irow = Row0 is 1st row of image; irow = Row0+Row is last row of image.\n    for(int irow = Row0; irow < Row0+Rows; irow++)  // index within Src\n    {\n        jrow = irow - Row0; // index within ROI. 0 is first row. Rows is last row.\n        \n        // Loop over columns of ROI.\n        for(int icol = Col0; icol < Col0+Cols; icol++)  // index within Src\n        {\n            jcol = icol - Col0; // index within ROI\n\n            // initialize\n            ColorA = ColorB = ColorC = FillColor;\n            LabelA = LabelB = LabelC = LabelD = 0;\n            ColorD = (int) SrcMat.get(jrow,jcol);       // fetch color of cell\n        \n            if(jrow == 0 || jcol == 0)  // first column or row\n            {\n                if(jcol > 0)\n                {\n                    ColorC = (int) SrcMat.get(jrow,jcol-1);\n                    LabelC = LabelMat[jrow][jcol-1];\n                }\n                if(jrow > 0)\n                {\n                    ColorB = (int) SrcMat.get(jrow-1,jcol);\n                    LabelB = LabelMat[jrow-1][jcol];\n                }\n            }\n            else\n            {\n                ColorA = (int) SrcMat.get(jrow-1,jcol-1); if(ColorA > 0) ColorA = 1;\n                ColorB = (int) SrcMat.get(jrow-1,jcol); if(ColorB > 0) ColorB = 1;\n                ColorC = (int) SrcMat.get(jrow,jcol-1); if(ColorC > 0) ColorC = 1;\n                LabelA = LabelMat[jrow-1][jcol-1];\n                LabelB = LabelMat[jrow-1][jcol];\n                LabelC = LabelMat[jrow][jcol-1];\n            }   \n            if(ColorA > 0) ColorA = 1;\n            if(ColorB > 0) ColorB = 1;\n            if(ColorC > 0) ColorC = 1;\n            if(ColorD > 0) ColorD = 1;\n                \n            // Determine Case\n            int Case = 0;\n            if(ColorA == ColorB)\n            {\n                if(ColorC == ColorD) { if(ColorA == ColorC) Case = 1; else Case = 2; }\n                else { if(ColorA == ColorC) Case = 5; else Case = 6; }\n            }\n            else\n            {\n                if(ColorC == ColorD) { if(ColorA == ColorC) Case = 3; else Case = 4; }\n                else { if(ColorA == ColorC) Case = 7; else Case = 8; }\n            }\n\n            // Take appropriate action\n            if(Case == 1) { OldRegion(LabelC, -1, -1); }\n            else if(Case == 2 || Case == 3) { OldRegion(LabelC, LabelB, LabelC); }\n            else if(Case == 5 || Case == 8) // Isolated\n            {\n                if((jrow == Rows || jcol == Cols) && ColorD == FillColor) { OldRegion(0, -1, -1); } // attached to border region 0\n                else NewRegion(LabelB);\n            }\n            else if(Case == 6 || Case == 7) { OldRegion(LabelB, LabelB, LabelC); }\n            else            // Case 4 - The complicated situation\n            {\n                int LabelBRoot = SubsumptionChain(LabelB); \n                int LabelCRoot = SubsumptionChain(LabelC);\n                int LabelRoot = Math.min(LabelBRoot, LabelCRoot);\n                int LabelX;\n                if(LabelBRoot < LabelCRoot) { OldRegion(LabelB, -1, -1); LabelX = LabelC; }\n                else { OldRegion(LabelC, -1, -1); LabelX = LabelB; }\n                int NextLabelX = LabelX;\n                while(LabelRoot < LabelX)\n                {\n                    NextLabelX = SubsumedLabel[LabelX];\n                    SubsumedLabel[LabelX] = LabelRoot;\n                    LabelX = NextLabelX;\n                }\n            }\n                \n            // Last column or row. Final corner was handled earlier in Cases 5 and 8.\n            if((jrow == Rows || jcol == Cols) && ColorD == FillColor)\n            {\n                if(jcol < Cols)         // bottom row   \n                {\n                    if(ColorC != FillColor)     // Subsume B chain to border region 0\n                    {\n                        int LabelRoot = SubsumptionChain(LabelB);\n                        SubsumedLabel[LabelRoot] = 0;\n                    }\n                }\n                else if(jrow < Rows)    // right column\n                {\n                    if(ColorB != FillColor)     // Subsume C chain to border region 0\n                    {\n                        int LabelRoot = SubsumptionChain(LabelC);\n                        SubsumedLabel[LabelRoot] = 0;\n                    }\n                }\n                OldRegion(0, -1, -1);   // attached to border region 0\n            }\n\n            LabelMat[jrow][jcol] = LabelD;\n                \n        }\n    }\n\n    // Compute Condensation map\n    int Offset = 0;\n    for(int Label = 1; Label <= MaxLabel; Label++)\n    {\n        if(SubsumedLabel[Label] > -1) Offset++;\n        CondensationMap[Label] = Label - Offset;\n    }\n\n    // Subsume regions that were flagged as connected; Perimeters add\n    for(int Label = 1; Label <= MaxLabel; Label++)\n    {\n        int BetterLabel = SubsumptionChain(Label);\n        if(BetterLabel != Label) Subsume(BetterLabel, Label, 1);\n    }   \n\n    // Condense subsumed regions\n    int NewMaxLabel = 0;\n    for(int OldLabel = 1; OldLabel <= MaxLabel; OldLabel++)\n    {\n        if(SubsumedLabel[OldLabel] < 0) // Renumber valid regions only\n        {\n            double [] OldRegion = RegionData[OldLabel];\n            int OldParent = (int) OldRegion[BLOBPARENT];\n            int NewLabel = CondensationMap[OldLabel];\n            int NewParent = SubsumptionChain(OldParent);\n            NewParent = CondensationMap[NewParent];\n            OldRegion[BLOBLABEL] = (double) NewLabel;\n            OldRegion[BLOBPARENT] = (double) NewParent;\n            System.arraycopy(OldRegion,0,RegionData[NewLabel],0,BLOBDATACOUNT); //RegionData[NewLabel] <- ThisRegion;\n            NewMaxLabel = NewLabel;\n        }\n    }\n\n    // Zero out unneeded high labels\n    for(int Label = NewMaxLabel+1; Label <= MaxLabel; Label++) ResetRegion(Label);\n    MaxLabel = NewMaxLabel;\n    \n    // Flag for subsumption regions that have too small area\n    for(int Label = MaxLabel; Label > 0; Label--)\n    {\n        double [] ThisRegion = RegionData[Label];\n        int ThisArea = (int) ThisRegion[BLOBAREA];\n        if(ThisArea < MinArea)\n        {\n            int ThisParent = (int) ThisRegion[BLOBPARENT];\n            SubsumedLabel[Label] =  ThisParent;             // Flag this label as having been subsumed\n        }\n        else SubsumedLabel[Label] =  -1;\n    }\n    \n    // Compute Condensation map\n    Offset = 0;\n    for(int Label = 1; Label <= MaxLabel; Label++)\n    {\n        if(SubsumedLabel[Label] > -1) Offset++;\n        CondensationMap[Label] = Label - Offset;      \n    }\n\n    // Subsume regions that were flagged as enclosed; Perimeters subtract\n    for(int Label = 1; Label <= MaxLabel; Label++)\n    {\n        int BetterLabel = SubsumptionChain(Label);\n        if(BetterLabel != Label) Subsume(BetterLabel, Label, -1);\n    }   \n\n    // Condense subsumed regions\n    for(int OldLabel = 1; OldLabel <= MaxLabel; OldLabel++)\n    {\n        if(SubsumedLabel[OldLabel] < 0) // Renumber valid regions only\n        {\n            double [] OldRegion = RegionData[OldLabel];\n            int OldParent = (int) OldRegion[BLOBPARENT];\n            int NewLabel = CondensationMap[OldLabel];\n            int NewParent = SubsumptionChain(OldParent);\n            NewParent = CondensationMap[NewParent];\n            OldRegion[BLOBLABEL] = (double) NewLabel;\n            OldRegion[BLOBPARENT] = (double) NewParent;\n            System.arraycopy(OldRegion,0,RegionData[NewLabel],0,BLOBDATACOUNT); //RegionData[NewLabel] <- ThisRegion;\n            NewMaxLabel = NewLabel;\n        }\n    }\n    \n    // Zero out unneeded high labels\n    for(int Label = NewMaxLabel+1; Label <= MaxLabel; Label++) ResetRegion(Label);\n    MaxLabel = NewMaxLabel;\n\n    // Normalize summation fields into moments \n    for(int Label = 0; Label <= MaxLabel; Label++)\n    {\n        double [] ThisRegion = RegionData[Label];\n        \n        // Extract fields\n        double Area = ThisRegion[BLOBAREA];\n        double SumX = ThisRegion[BLOBSUMX];\n        double SumY = ThisRegion[BLOBSUMY];\n        double SumXX = ThisRegion[BLOBSUMXX];\n        double SumYY = ThisRegion[BLOBSUMYY];\n        double SumXY = ThisRegion[BLOBSUMXY];\n        \n        // Get averages\n        SumX /= Area;\n        SumY /= Area;\n        SumXX /= Area;\n        SumYY /= Area;\n        SumXY /= Area;\n        \n        // Create moments\n        SumXX -= SumX * SumX;\n        SumYY -= SumY * SumY;\n        SumXY -= SumX * SumY;\n        if(SumXY > -1.0E-14 && SumXY < 1.0E-14) SumXY = (float) 0.0; // Eliminate roundoff error\n\n        ThisRegion[BLOBSUMX] = SumX;\n        ThisRegion[BLOBSUMY] = SumY;\n        ThisRegion[BLOBSUMXX] = SumXX;\n        ThisRegion[BLOBSUMYY] = SumYY;\n        ThisRegion[BLOBSUMXY] = SumXY;\n\n        System.arraycopy(ThisRegion,0,RegionData[Label],0,BLOBDATACOUNT);   // RegionData[Label] <- ThisRegion;\n    }\n\n    // Adjust border region\n    BorderRegion = RegionData[0];\n    BorderRegion[BLOBSUMXX] = BorderRegion[BLOBSUMYY] = BorderRegion[BLOBSUMXY] = 0;    // Mark invalid fields\n    System.arraycopy(BorderRegion,0,RegionData[0],0,BLOBDATACOUNT); // RegionData[0] <- BorderRegion;\n    \n    return MaxLabel;\n}\n",
    "class_name": "Blobs",
    "method_name": "BlobAnalysis",
    "arguments": [
        "IplImage Src",
        "int Col0",
        "int Row0",
        "int Cols",
        "int Rows",
        "int Border",
        "int MinArea"
    ],
    "generate_test": [
        "// Test inputs\nIplImage Src = new IplImage();\nint Col0 = 0;\nint Row0 = 0;\nint Cols = 10;\nint Rows = 10;\nint Border = 0;\nint MinArea = 5;\n\n// Expected outputs\nint expectedMaxLabel = 0;\n\n// Run the method and validate the result\nBlobs instance = new Blobs();\nint result = instance.BlobAnalysis(Src, Col0, Row0, Cols, Rows, Border, MinArea);\nassertEquals(expectedMaxLabel, result);",
        "In the JUNIT test case, write the necessary code to test the BlobAnalysis method. This can be done by creating an instance of the Blobs class, creating an input image for testing, and calling the BlobAnalysis method with appropriate arguments. Then, assert the expected output with the actual output of the BlobAnalysis method.",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void BlobAnalysisTest() {\n        // Create an instance of the Blobs class\n        Blobs blobs = new Blobs();\n        \n        // Create an IplImage object for testing purposes\n        IplImage src = cvCreateImage(cvSize(200, 200), IPL_DEPTH_8U, 1);\n        \n        // Set up other parameters for the BlobAnalysis method\n        int col0 = 0;\n        int row0 = 0;\n        int cols = 200;\n        int rows = 200;\n        int border = 0;\n        int minArea = 10;\n        \n        // Call the BlobAnalysis method and store the result\n        int result = blobs.BlobAnalysis(src, col0, row0, cols, rows, border, minArea);\n        \n        // Assert that the result is greater than 0\n        assertTrue(result > 0);\n    }\n}",
        "@Test\npublic void BlobAnalysisTest() {\n    // Create test data\n    IplImage src = cvCreateImage(cvSize(10, 10), IPL_DEPTH_8U, 1);\n    int col0 = 0;\n    int row0 = 0;\n    int cols = 10;\n    int rows = 10;\n    int border = 0;\n    int minArea = 5; // example minimum area\n    \n    // Expected output\n    int expectedMaxLabel = 1;\n    \n    // Call the BlobAnalysis method\n    int actualMaxLabel = BlobAnalysis(src, col0, row0, cols, rows, border, minArea);\n    \n    // Check if the actualMaxLabel matches the expectedMaxLabel\n    assertEquals(expectedMaxLabel, actualMaxLabel);\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void BlobAnalysisTest() {\n        // Create input image for testing\n        IplImage src = new IplImage();\n        // Set up other necessary variables for testing\n        int col0 = 0;\n        int row0 = 0;\n        int cols = 10;\n        int rows = 10;\n        int border = 0;\n        int minArea = 0;\n        // Create an instance of the Blobs class\n        Blobs blobs = new Blobs();\n        // Call the BlobAnalysis method with the given parameters\n        int maxLabel = blobs.BlobAnalysis(src, col0, row0, cols, rows, border, minArea);\n        // Assertions to test the correctness of the result\n        assertEquals(0, maxLabel); // Assuming the expected maximum label is 0\n        // More assertions can be added based on the expected behavior of the BlobAnalysis method\n    }\n}",
        "@Test\npublic void BlobAnalysisTest() {\n    IplImage image = cvLoadImage(\"path_to_image.jpg\");\n    Blobs blobs = new Blobs();\n    int maxLabel = blobs.BlobAnalysis(image, 0, 0, image.width(), image.height(), 1, 100);\n    \n    // Add assertions here to test the BlobAnalysis method \n    // and verify the values returned by the method.\n    \n    assertEquals(expectedMaxLabel, maxLabel);\n}",
        "import org.bytedeco.javacv.IplImage;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void BlobAnalysisTest() {\n        IplImage src = ...; // Create or mock the input image\n        \n        int col0 = ...; // Set the start of ROI\n        int row0 = ...;\n        int cols = ...; // Set the size of ROI\n        int rows = ...;\n        int border = ...; // Set the border color\n        int minArea = ...; // Set the minimum region area\n        \n        Blobs blobs = new Blobs(); // Create an instance of the Blobs class\n        \n        int maxLabel = blobs.BlobAnalysis(src, col0, row0, cols, rows, border, minArea); // Call the BlobAnalysis method\n        \n        // Perform assertions on the output\n        assertEquals(expectedMaxLabel, maxLabel);\n        // ... Add more assertions as needed\n    }\n}",
        "@Test\npublic void BlobAnalysisTest() {\n    IplImage src = // create a test input image\n\n    Blobs blobs = new Blobs();\n    int result = blobs.BlobAnalysis(src, 0, 0, src.width(), src.height(), 0, 100);\n\n    assertEquals(expectedResult, result);\n}",
        "@Test\npublic void BlobAnalysisTest() {\n    IplImage src = new IplImage();\n    int col0 = <FILL>;\n    int row0 = <FILL>;\n    int cols = <FILL>;\n    int rows = <FILL>;\n    int border = <FILL>;\n    int minArea = <FILL>;\n    \n    Blobs blobs = new Blobs();\n    int result = blobs.BlobAnalysis(src, col0, row0, cols, rows, border, minArea);\n    \n    assertEquals(<EXPECTED RESULT>, result);\n}",
        "\npackage org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void BlobAnalysisTest() {\n        // Create a test image\n        IplImage testImage = cvCreateImage(cvSize(10, 10), 8, 1);\n        cvSet(testImage, cvScalarAll(255));\n        \n        // Call the BlobAnalysis method\n        Blobs blobs = new Blobs();\n        int maxLabel = blobs.BlobAnalysis(testImage, 0, 0, 10, 10, 0, 10);\n        \n        // Assert the result\n        assertEquals(0, maxLabel);\n    }\n}\n"
    ]
}
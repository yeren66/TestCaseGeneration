{
    "project_name": "javacv",
    "file_name": "ObjectFinder.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/ObjectFinder.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/** a rough implementation for object location */",
    "source_code": "\ndouble[] locatePlanarObject(KeyPointVector objectKeypoints, Mat objectDescriptors,\n        KeyPointVector imageKeypoints, Mat imageDescriptors, double[] srcCorners) {\n    ptpairs.clear();\n    if (settings.useFLANN) {\n        flannFindPairs(objectDescriptors, imageDescriptors);\n    } else {\n        findPairs(objectDescriptors, imageDescriptors);\n    }\n    int n = ptpairs.size()/2;\n    logger.info(n + \" matching pairs found\");\n    if (n < settings.matchesMin) {\n        return null;\n    }\n\n    pt1 .resize(n);\n    pt2 .resize(n);\n    mask.resize(n);\n    FloatBuffer pt1Idx = pt1.createBuffer();\n    FloatBuffer pt2Idx = pt2.createBuffer();\n    for (int i = 0; i < n; i++) {\n        Point2f p1 = objectKeypoints.get(ptpairs.get(2*i)).pt();\n        pt1Idx.put(2*i, p1.x()); pt1Idx.put(2*i+1, p1.y());\n        Point2f p2 = imageKeypoints.get(ptpairs.get(2*i+1)).pt();\n        pt2Idx.put(2*i, p2.x()); pt2Idx.put(2*i+1, p2.y());\n    }\n\n    H = findHomography(pt1, pt2, CV_RANSAC, settings.ransacReprojThreshold, mask, 2000, 0.995);\n    if (H.empty() || countNonZero(mask) < settings.matchesMin) {\n        return null;\n    }\n\n    double[] h = (double[])H.createIndexer(false).array();\n    double[] dstCorners = new double[srcCorners.length];\n    for(int i = 0; i < srcCorners.length/2; i++) {\n        double x = srcCorners[2*i], y = srcCorners[2*i + 1];\n        double Z = 1/(h[6]*x + h[7]*y + h[8]);\n        double X = (h[0]*x + h[1]*y + h[2])*Z;\n        double Y = (h[3]*x + h[4]*y + h[5])*Z;\n        dstCorners[2*i    ] = X;\n        dstCorners[2*i + 1] = Y;\n    }\n    return dstCorners;\n}\n",
    "class_name": "ObjectFinder",
    "method_name": "locatePlanarObject",
    "arguments": [
        "KeyPointVector objectKeypoints",
        "Mat objectDescriptors",
        "KeyPointVector imageKeypoints",
        "Mat imageDescriptors",
        "double[] srcCorners"
    ],
    "generate_test": [
        "@Test\npublic void locatePlanarObjectTest() {\n    KeyPointVector objectKeypoints = new KeyPointVector();\n    Mat objectDescriptors = new Mat();\n    KeyPointVector imageKeypoints = new KeyPointVector();\n    Mat imageDescriptors = new Mat();\n    double[] srcCorners = {10, 20, 30, 40};\n\n    double[] result = new ObjectFinder().locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n\n    assertNotNull(result);\n    assertEquals(4, result.length);\n}",
        "@Test\npublic void locatePlanarObjectTest() {\n    // Create the necessary mock objects and variables\n    KeyPointVector objectKeypoints = new KeyPointVector();\n    Mat objectDescriptors = new Mat();\n    KeyPointVector imageKeypoints = new KeyPointVector();\n    Mat imageDescriptors = new Mat();\n    double[] srcCorners = {10, 20, 30, 40, 50, 60, 70, 80};\n\n    // Build the test case\n    ObjectFinder objectFinder = new ObjectFinder();\n    double[] result = objectFinder.locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n\n    // Assertions\n    assertNotNull(result);\n    // Perform any other necessary assertions on the result\n}",
        "@Test\npublic void locatePlanarObjectTest() {\n    KeyPointVector objectKeypoints = new KeyPointVector(); // initialize objectKeypoints\n    Mat objectDescriptors = new Mat(); // initialize objectDescriptors\n    KeyPointVector imageKeypoints = new KeyPointVector(); // initialize imageKeypoints\n    Mat imageDescriptors = new Mat(); // initialize imageDescriptors\n    double[] srcCorners = {0, 0, 100, 0, 100, 100, 0, 100}; // provide the source corners\n    \n    ObjectFinder objectFinder = new ObjectFinder();\n    double[] dstCorners = objectFinder.locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n    \n    assertNotNull(dstCorners); // check if dstCorners is not null\n    assertEquals(8, dstCorners.length); // check if the length of dstCorners is 8\n    // Add additional assertions if needed\n}",
        "@Test\npublic void locatePlanarObjectTest() {\n    // Declare and initialize the necessary variables\n    KeyPointVector objectKeypoints = new KeyPointVector();\n    Mat objectDescriptors = new Mat();\n    KeyPointVector imageKeypoints = new KeyPointVector();\n    Mat imageDescriptors = new Mat();\n    double[] srcCorners = new double[8];\n\n    // Create an instance of ObjectFinder\n    ObjectFinder objectFinder = new ObjectFinder();\n\n    // Call the locatePlanarObject method and store the result\n    double[] result = objectFinder.locatePlanarObject(objectKeypoints, objectDescriptors,\n                        imageKeypoints, imageDescriptors, srcCorners);\n\n    // Assert that the result is not null\n    assertNotNull(result);\n\n    // Assert any additional necessary conditions for the result\n    // ...\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ObjectFinderTest {\n    @Test\n    public void locatePlanarObjectTest() {\n        // Create test data\n        KeyPointVector objectKeypoints = new KeyPointVector();\n        Mat objectDescriptors = new Mat();\n        KeyPointVector imageKeypoints = new KeyPointVector();\n        Mat imageDescriptors = new Mat();\n        double[] srcCorners = {0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0};\n\n        // Call the method to be tested\n        ObjectFinder objectFinder = new ObjectFinder();\n        double[] result = objectFinder.locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n\n        // Perform assertions\n        assertNotNull(result);\n        assertEquals(8, result.length);\n    }\n}",
        "double[] srcCorners = {10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0};\nKeyPointVector objectKeypoints = new KeyPointVector();\nMat objectDescriptors = new Mat();\nKeyPointVector imageKeypoints = new KeyPointVector();\nMat imageDescriptors = new Mat();\ndouble[] dstCorners = locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\nassertNotNull(dstCorners);\nassertEquals(8, dstCorners.length);\n// Add additional assertions as needed.",
        "import org.bytedeco.javacpp.opencv_core.*;\nimport org.bytedeco.javacpp.opencv_features2d.*;\nimport org.bytedeco.javacv.*;\nimport org.junit.jupiter.api.*;\nimport java.nio.FloatBuffer;\nimport java.util.ArrayList;\n\nimport static org.bytedeco.javacpp.opencv_calib3d.*;\nimport static org.bytedeco.javacpp.opencv_core.*;\nimport static org.bytedeco.javacpp.opencv_features2d.*;\nimport static org.bytedeco.javacpp.opencv_flann.*;\nimport static org.bytedeco.javacpp.opencv_imgproc.*;\n\npublic class ObjectFinderTest {\n    @Test\n    public void locatePlanarObjectTest() {\n        Settings settings = new Settings();\n        ObjectFinder objectFinder = new ObjectFinder(settings);\n        KeyPointVector objectKeypoints = new KeyPointVector();\n        Mat objectDescriptors = new Mat();\n        KeyPointVector imageKeypoints = new KeyPointVector();\n        Mat imageDescriptors = new Mat();\n        double[] srcCorners = {0, 0, 100, 0, 100, 100, 0, 100};\n        \n        double[] result = objectFinder.locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n        \n        assertNotNull(result);\n    }\n}",
        "ObjectFinder objectFinder = new ObjectFinder();\nIplImage objectImage = new IplImage();\nSettings settings = objectFinder.getSettings();\nsettings.setUseFLANN(true);\n\n// Set up the necessary variables for the test\nKeyPointVector objectKeypoints = new KeyPointVector();\nMat objectDescriptors = new Mat();\nKeyPointVector imageKeypoints = new KeyPointVector();\nMat imageDescriptors = new Mat();\ndouble[] srcCorners = new double[]{0, 0, 1, 0, 1, 1, 0, 1};\n\n// Call the method to be tested\ndouble[] result = objectFinder.locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n\n// Assert the expected result\nassertNotNull(result);\nassertEquals(8, result.length);\n// Add more assertions as needed",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ObjectFinderTest {\n    @Test\n    public void locatePlanarObjectTest() {\n        // Create dummy data for the test\n        KeyPointVector objectKeypoints = new KeyPointVector();\n        Mat objectDescriptors = new Mat();\n        KeyPointVector imageKeypoints = new KeyPointVector();\n        Mat imageDescriptors = new Mat();\n        double[] srcCorners = new double[8];\n\n        // Call the method under test\n        ObjectFinder objectFinder = new ObjectFinder();\n        double[] result = objectFinder.locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\n\n        // Assert the result\n        assertNotNull(result);\n        // Add more assertions as needed\n    }\n}",
        "\ndouble[] srcCorners = {0, 0, 1, 0, 0, 1, 1, 1};\nKeyPointVector objectKeypoints = new KeyPointVector();\nMat objectDescriptors = new Mat();\nKeyPointVector imageKeypoints = new KeyPointVector();\nMat imageDescriptors = new Mat();\ndouble[] result = locatePlanarObject(objectKeypoints, objectDescriptors, imageKeypoints, imageDescriptors, srcCorners);\nassertNotNull(result);\n"
    ]
}
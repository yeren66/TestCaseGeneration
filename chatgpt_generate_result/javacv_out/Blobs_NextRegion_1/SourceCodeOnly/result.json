{
    "project_name": "javacv",
    "file_name": "Blobs.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/Blobs.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": null,
    "source_code": "// Determine the next (higher number) region that meets the desired conditions\npublic static int NextRegion(int Parent, int Color, double MinArea, double MaxArea, int Label)\n{\n    double DParent = (double) Parent; \n    double DColor = (double) Color; if(DColor > 0) DColor = 1;\n    \n    int i;\n    for(i = Label; i <= MaxLabel; i++)\n    {\n        double [] Region = RegionData[i];\n        double ThisParent = Region[BLOBPARENT];\n        double ThisColor = Region[BLOBCOLOR];\n        if(DParent >= 0 && DParent != ThisParent) continue;\n        if(DColor >= 0 && DColor != ThisColor) continue;\n        if(Region[BLOBAREA] < MinArea || Region[BLOBAREA] > MaxArea) continue;  \n        break;      // We have a match!\n    }\n    if(i > MaxLabel) i = -1;    // Use -1 to flag that there was no match\n    return i;\n}\n",
    "class_name": "Blobs",
    "method_name": "NextRegion",
    "arguments": [
        "int Parent",
        "int Color",
        "double MinArea",
        "double MaxArea",
        "int Label"
    ],
    "generate_test": [
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void NextRegionTest() {\n        int result = Blobs.NextRegion(5, 1, 10.0, 20.0, 0);\n        assertEquals(2, result);\n    }\n}",
        "@Test\npublic void NextRegionTest() {\n    int parent = 10;\n    int color = 0;\n    double minArea = 100;\n    double maxArea = 1000;\n    int label = 0;\n\n    int expectedResult = 1;\n    int actualResult = Blobs.NextRegion(parent, color, minArea, maxArea, label);\n\n    assertEquals(expectedResult, actualResult);\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void NextRegionTest() {\n        int Parent = 1;\n        int Color = 0;\n        double MinArea = 10.0;\n        double MaxArea = 100.0;\n        int Label = 0;\n\n        int expected = <FILL> // expected value\n        int result = Blobs.NextRegion(Parent, Color, MinArea, MaxArea, Label);\n        \n        assertEquals(expected, result);\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void NextRegionTest() {\n        int Parent = 0;\n        int Color = 1;\n        double MinArea = 100;\n        double MaxArea = 200;\n        int Label = 1;\n        \n        int actualResult = Blobs.NextRegion(Parent, Color, MinArea, MaxArea, Label);\n        int expectedResult = <FILL>; // Fill this with the expected result\n        \n        assertEquals(expectedResult, actualResult);\n    }\n}",
        "@Test\npublic void NextRegionTest() {\n    int Parent = 1;\n    int Color = 0;\n    double MinArea = 10.0;\n    double MaxArea = 100.0;\n    int Label = 0;\n    \n    int expectedOutput = 1;\n    int actualOutput = Blobs.NextRegion(Parent, Color, MinArea, MaxArea, Label);\n    \n    assertEquals(expectedOutput, actualOutput);\n}",
        "@Test\npublic void NextRegionTest() {\n    int Parent = 10;\n    int Color = 0;\n    double MinArea = 100.0;\n    double MaxArea = 500.0;\n    int Label = 0;\n    \n    int expectedOutput = 0;\n    int actualOutput = Blobs.NextRegion(Parent, Color, MinArea, MaxArea, Label);\n    \n    assertEquals(expectedOutput, actualOutput);\n}",
        "// Determine the next (higher number) region that meets the desired conditions\npublic static int NextRegion(int Parent, int Color, double MinArea, double MaxArea, int Label)\n{\n    double DParent = (double) Parent; \n    double DColor = (double) Color; if(DColor > 0) DColor = 1;\n    \n    int i;\n    for(i = Label; i <= MaxLabel; i++)\n    {\n        double [] Region = RegionData[i];\n        double ThisParent = Region[BLOBPARENT];\n        double ThisColor = Region[BLOBCOLOR];\n        if(DParent >= 0 && DParent != ThisParent) continue;\n        if(DColor >= 0 && DColor != ThisColor) continue;\n        if(Region[BLOBAREA] < MinArea || Region[BLOBAREA] > MaxArea) continue;  \n        break;      // We have a match!\n    }\n    if(i > MaxLabel) i = -1;    // Use -1 to flag that there was no match\n    return i;\n}\n\npackage org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void NextRegionTest() {\n        int Parent = 5;\n        int Color = 1;\n        double MinArea = 10.0;\n        double MaxArea = 100.0;\n        int Label = 0;\n        \n        int result = Blobs.NextRegion(Parent, Color, MinArea, MaxArea, Label);\n        \n        // Expected output\n        int expectedResult = 2; \n      \n        assertEquals(expectedResult, result);\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BlobsTest {\n    @Test\n    public void NextRegionTest() {\n        int result = Blobs.NextRegion(0, 1, 10.0, 20.0, 1);\n        assertEquals(1, result);\n    }\n}",
        "@Test\npublic void NextRegionTest() {\n    int Parent = 1;\n    int Color = 0;\n    double MinArea = 10.0;\n    double MaxArea = 100.0;\n    int Label = 0;\n    \n    int expected = 1;\n    int actual = NextRegion(Parent, Color, MinArea, MaxArea, Label);\n    \n    assertEquals(expected, actual);\n}",
        "@Test\npublic void NextRegionTest() {\n    int parent = 1;\n    int color = 0;\n    double minArea = 10.0;\n    double maxArea = 100.0;\n    int label = 0;\n    \n    int expectedOutput = 2;\n    int actualOutput = Blobs.NextRegion(parent, color, minArea, maxArea, label);\n    \n    assertEquals(expectedOutput, actualOutput);\n}"
    ]
}
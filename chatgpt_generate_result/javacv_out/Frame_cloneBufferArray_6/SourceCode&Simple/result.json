{
    "project_name": "javacv",
    "file_name": "Frame.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/Frame.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**\n     * This private method takes a buffer array as input and returns a deep copy.\n     * It is assumed that all buffers in the input array are of the same subclass.\n     *\n     * @param srcBuffers - Buffer array to be cloned\n     * @param clonedBuffers - Buffer array to fill with clones\n     * @return Opaque object to store\n     *\n     *  @author Extension proposed by Dragos Dutu\n     */",
    "source_code": "\nprivate static Pointer cloneBufferArray(Buffer[] srcBuffers, Buffer[] clonedBuffers) {\n    Pointer opaque = null;\n\n    if (srcBuffers != null && srcBuffers.length > 0) {\n        int totalCapacity = 0;\n        for (int i = 0; i < srcBuffers.length; i++) {\n            srcBuffers[i].rewind();\n            totalCapacity += srcBuffers[i].capacity();\n        }\n\n        /*\n         * In order to optimize the transfer we need a type check.\n         *\n         * Most CPUs support hardware memory transfer for different data\n         * types, so it's faster to copy more bytes at once rather\n         * than one byte per iteration as in case of ByteBuffer.\n         *\n         * For example, Intel CPUs support MOVSB (byte transfer), MOVSW\n         * (word transfer), MOVSD (double word transfer), MOVSS (32 bit\n         * scalar single precision floating point), MOVSQ (quad word\n         * transfer) and so on...\n         *\n         * Type checking may be improved by changing the order in\n         * which a buffer is checked against. If it's likely that the\n         * expected buffer is of type \"ShortBuffer\", then it should be\n         * checked at first place.\n         *\n         */\n\n        if (srcBuffers[0] instanceof ByteBuffer) {\n            BytePointer pointer = new BytePointer(totalCapacity);\n            for (int i = 0; i < srcBuffers.length; i++) {\n                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())\n                        .asBuffer().put((ByteBuffer)srcBuffers[i]);\n                pointer.position(pointer.limit());\n            }\n            opaque = pointer;\n        } else if (srcBuffers[0] instanceof ShortBuffer) {\n            ShortPointer pointer = new ShortPointer(totalCapacity);\n            for (int i = 0; i < srcBuffers.length; i++) {\n                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())\n                        .asBuffer().put((ShortBuffer)srcBuffers[i]);\n                pointer.position(pointer.limit());\n            }\n            opaque = pointer;\n        } else if (srcBuffers[0] instanceof IntBuffer) {\n            IntPointer pointer = new IntPointer(totalCapacity);\n            for (int i = 0; i < srcBuffers.length; i++) {\n                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())\n                        .asBuffer().put((IntBuffer)srcBuffers[i]);\n                pointer.position(pointer.limit());\n            }\n            opaque = pointer;\n        } else if (srcBuffers[0] instanceof LongBuffer) {\n            LongPointer pointer = new LongPointer(totalCapacity);\n            for (int i = 0; i < srcBuffers.length; i++) {\n                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())\n                        .asBuffer().put((LongBuffer)srcBuffers[i]);\n                pointer.position(pointer.limit());\n            }\n            opaque = pointer;\n        } else if (srcBuffers[0] instanceof FloatBuffer) {\n            FloatPointer pointer = new FloatPointer(totalCapacity);\n            for (int i = 0; i < srcBuffers.length; i++) {\n                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())\n                        .asBuffer().put((FloatBuffer)srcBuffers[i]);\n                pointer.position(pointer.limit());\n            }\n            opaque = pointer;\n        } else if (srcBuffers[0] instanceof DoubleBuffer) {\n            DoublePointer pointer = new DoublePointer(totalCapacity);\n            for (int i = 0; i < srcBuffers.length; i++) {\n                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())\n                        .asBuffer().put((DoubleBuffer)srcBuffers[i]);\n                pointer.position(pointer.limit());\n            }\n            opaque = pointer;\n        }\n\n        for (int i = 0; i < srcBuffers.length; i++) {\n            srcBuffers[i].rewind();\n            clonedBuffers[i].rewind();\n        }\n    }\n\n    if (opaque != null) {\n        opaque.retainReference();\n    }\n    return opaque;\n}\n",
    "class_name": "Frame",
    "method_name": "cloneBufferArray",
    "arguments": [
        "Buffer srcBuffers",
        "Buffer clonedBuffers"
    ],
    "generate_test": [
        "@Test\npublic void cloneBufferArrayTest() {\n    Buffer[] srcBuffers = new Buffer[2];\n    Buffer[] clonedBuffers = new Buffer[2];\n    srcBuffers[0] = ByteBuffer.allocateDirect(100);\n    srcBuffers[1] = FloatBuffer.allocate(50);\n\n    Pointer opaque = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n\n    assertNotNull(opaque);\n    assertTrue(clonedBuffers[0] instanceof ByteBuffer);\n    assertTrue(clonedBuffers[1] instanceof FloatBuffer);\n\n    assertEquals(100, clonedBuffers[0].capacity());\n    assertEquals(50, clonedBuffers[1].capacity());\n\n    for (int i = 0; i < srcBuffers.length; i++) {\n        srcBuffers[i].rewind();\n        clonedBuffers[i].rewind();\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneBufferArrayTest() {\n        Buffer[] srcBuffers = new Buffer[2];\n        srcBuffers[0] = ByteBuffer.allocate(4);\n        srcBuffers[1] = DoubleBuffer.allocate(8);\n        \n        Buffer[] clonedBuffers = new Buffer[2];\n        \n        Pointer result = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n        \n        assertNotNull(result);\n    }\n}",
        "@Test\npublic void cloneBufferArrayTest() {\n    Buffer[] srcBuffers = new Buffer[] {ByteBuffer.allocate(10), ByteBuffer.allocate(20)};\n    Buffer[] clonedBuffers = new Buffer[2];\n    \n    Pointer result = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n    \n    assertNotNull(result);\n    assertEquals(clonedBuffers.length, srcBuffers.length);\n    for (int i = 0; i < srcBuffers.length; i++) {\n        assertEquals(clonedBuffers[i].limit(), srcBuffers[i].limit());\n        assertEquals(clonedBuffers[i].position(), srcBuffers[i].position());\n        assertEquals(clonedBuffers[i].remaining(), srcBuffers[i].remaining());\n    }\n}",
        "@Test\npublic void cloneBufferArrayTest() {\n    // Define the source and cloned buffer arrays\n    Buffer[] srcBuffers = new Buffer[2];\n    srcBuffers[0] = ByteBuffer.allocate(10);\n    srcBuffers[1] = ShortBuffer.allocate(10);\n\n    Buffer[] clonedBuffers = new Buffer[srcBuffers.length];\n\n    // Call the method to be tested\n    Pointer opaque = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n\n    // Perform assertions\n    assertNotNull(opaque);\n    assertEquals(srcBuffers[0].capacity() + srcBuffers[1].capacity(), opaque.capacity());\n    assertEquals(ByteBuffer.class, clonedBuffers[0].getClass());\n    assertEquals(ShortBuffer.class, clonedBuffers[1].getClass());\n}",
        "@Test\npublic void cloneBufferArrayTest() {\n    // Create source buffers\n    ByteBuffer byteBuffer = ByteBuffer.allocate(100);\n    ShortBuffer shortBuffer = ShortBuffer.allocate(50);\n    \n    // Set values for source buffers\n    byteBuffer.put((byte) 1);\n    shortBuffer.put((short) 2);\n    \n    // Create cloned buffers\n    Buffer[] clonedBuffers = new Buffer[2];\n    \n    // Call the method being tested\n    Pointer result = Frame.cloneBufferArray(new Buffer[]{byteBuffer, shortBuffer}, clonedBuffers);\n    \n    // Assert the correctness of the cloned buffers\n    assertTrue(clonedBuffers[0] instanceof ByteBuffer);\n    assertTrue(clonedBuffers[1] instanceof ShortBuffer);\n    assertEquals(1, ((ByteBuffer)clonedBuffers[0]).get());\n    assertEquals(2, ((ShortBuffer)clonedBuffers[1]).get());\n    \n    // Assert the correctness of the result\n    assertNotNull(result);\n}",
        "@Test\n    public void cloneBufferArrayTest() {\n        Buffer[] srcBuffers = new Buffer[5];\n        srcBuffers[0] = ByteBuffer.allocate(10);\n        srcBuffers[1] = ShortBuffer.allocate(20);\n        srcBuffers[2] = IntBuffer.allocate(15);\n        srcBuffers[3] = LongBuffer.allocate(25);\n        srcBuffers[4] = FloatBuffer.allocate(30);\n\n        Buffer[] clonedBuffers = new Buffer[srcBuffers.length];\n        Pointer opaque = cloneBufferArray(srcBuffers, clonedBuffers);\n\n        // Assert statements\n\n        // Check if the opaque pointer is not null\n        assertNotNull(opaque);\n\n        // Check if the clonedBuffers array is not null\n        assertNotNull(clonedBuffers);\n\n        // Check if the length of the clonedBuffers array is equal to the length of srcBuffers\n        assertEquals(srcBuffers.length, clonedBuffers.length);\n\n        // Check if each cloned buffer has the same limit and position as its corresponding source buffer\n        for (int i = 0; i < srcBuffers.length; i++) {\n            assertEquals(srcBuffers[i].limit(), clonedBuffers[i].limit());\n            assertEquals(srcBuffers[i].position(), clonedBuffers[i].position());\n        }\n\n        // Check if each cloned buffer has the same content as its corresponding source buffer\n        for (int i = 0; i < srcBuffers.length; i++) {\n            for (int j = 0; j < srcBuffers[i].limit(); j++) {\n                assertEquals(srcBuffers[i].get(j), clonedBuffers[i].get(j));\n            }\n        }\n    }",
        "@Test\npublic void cloneBufferArrayTest() {\n    // Test data\n    ByteBuffer byteBuffer1 = ByteBuffer.allocate(10);\n    ByteBuffer byteBuffer2 = ByteBuffer.allocate(20);\n    ByteBuffer[] srcBuffers = {byteBuffer1, byteBuffer2};\n    Buffer[] clonedBuffers = new Buffer[2];\n\n    // Invoke the method\n    Pointer result = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n\n    // Assertions\n    assertNotNull(result);\n    assertEquals(30, result.capacity());\n    assertEquals(2, clonedBuffers.length);\n\n    // Check cloned buffers\n    assertTrue(clonedBuffers[0] instanceof ByteBuffer);\n    assertTrue(clonedBuffers[1] instanceof ByteBuffer);\n\n    ByteBuffer clonedBuffer1 = (ByteBuffer) clonedBuffers[0];\n    ByteBuffer clonedBuffer2 = (ByteBuffer) clonedBuffers[1];\n\n    assertEquals(10, clonedBuffer1.capacity());\n    assertEquals(20, clonedBuffer2.capacity());\n\n    // Check buffer data\n    assertArrayEquals(byteBuffer1.array(), clonedBuffer1.array());\n    assertArrayEquals(byteBuffer2.array(), clonedBuffer2.array());\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneBufferArrayTest() {\n        // Create the source and cloned buffer arrays\n        Buffer[] srcBuffers = new Buffer[3];\n        Buffer[] clonedBuffers = new Buffer[3];\n        \n        // Create some sample buffers\n        ByteBuffer byteBuffer = ByteBuffer.allocate(10);\n        ShortBuffer shortBuffer = ShortBuffer.allocate(10);\n        IntBuffer intBuffer = IntBuffer.allocate(10);\n        \n        // Assign the sample buffers to the source buffer array\n        srcBuffers[0] = byteBuffer;\n        srcBuffers[1] = shortBuffer;\n        srcBuffers[2] = intBuffer;\n        \n        // Call the cloneBufferArray() method\n        Pointer result = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n        \n        // Verify that the cloned buffer array is populated correctly\n        assertArrayEquals(srcBuffers, clonedBuffers);\n        \n        // Verify that the result is not null\n        assertNotNull(result);\n    }\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.nio.Buffer;\nimport java.nio.ByteBuffer;\nimport java.nio.DoubleBuffer;\nimport java.nio.FloatBuffer;\nimport java.nio.IntBuffer;\nimport java.nio.LongBuffer;\nimport java.nio.ShortBuffer;\n\npublic class FrameTest {\n    @Test\n    public void cloneBufferArrayTest() {\n        Frame frame = new Frame();\n\n        // Create sample source buffers\n        ByteBuffer bb1 = ByteBuffer.allocate(10);\n        ByteBuffer bb2 = ByteBuffer.allocate(20);\n        Buffer[] srcBuffers = new Buffer[] {bb1, bb2};\n        \n  \t    // Create cloned buffers\n        Buffer[] clonedBuffers = new Buffer[srcBuffers.length];\n\n        // Call the method to be tested\n        Pointer result = frame.cloneBufferArray(srcBuffers, clonedBuffers);\n\n        // Assert the output\n        assertNotNull(result);\n    }\n}",
        "@Test\npublic void cloneBufferArrayTest() {\n    Buffer[] srcBuffers = new Buffer[2];\n    srcBuffers[0] = ByteBuffer.allocate(10);\n    srcBuffers[1] = ShortBuffer.allocate(5);\n\n    Buffer[] clonedBuffers = new Buffer[2];\n\n    Pointer opaque = Frame.cloneBufferArray(srcBuffers, clonedBuffers);\n\n    assertNotNull(opaque);\n    assertNotNull(clonedBuffers[0]);\n    assertNotNull(clonedBuffers[1]);\n}\n\nIn this test case, we have created two source buffers - one ByteBuffer and one ShortBuffer. We then create an array to store the cloned buffers. The Frame.cloneBufferArray() method is called with the source buffers and cloned buffers as arguments. \n\nWe check that the opaque pointer, as well as the cloned buffers, are not null to ensure that the cloning process was successful."
    ]
}
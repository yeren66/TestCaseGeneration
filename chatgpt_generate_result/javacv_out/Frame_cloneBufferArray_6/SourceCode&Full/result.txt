Source code: 


private static Pointer cloneBufferArray(Buffer[] srcBuffers, Buffer[] clonedBuffers) {
    Pointer opaque = null;

    if (srcBuffers != null && srcBuffers.length > 0) {
        int totalCapacity = 0;
        for (int i = 0; i < srcBuffers.length; i++) {
            srcBuffers[i].rewind();
            totalCapacity += srcBuffers[i].capacity();
        }

        /*
         * In order to optimize the transfer we need a type check.
         *
         * Most CPUs support hardware memory transfer for different data
         * types, so it's faster to copy more bytes at once rather
         * than one byte per iteration as in case of ByteBuffer.
         *
         * For example, Intel CPUs support MOVSB (byte transfer), MOVSW
         * (word transfer), MOVSD (double word transfer), MOVSS (32 bit
         * scalar single precision floating point), MOVSQ (quad word
         * transfer) and so on...
         *
         * Type checking may be improved by changing the order in
         * which a buffer is checked against. If it's likely that the
         * expected buffer is of type "ShortBuffer", then it should be
         * checked at first place.
         *
         */

        if (srcBuffers[0] instanceof ByteBuffer) {
            BytePointer pointer = new BytePointer(totalCapacity);
            for (int i = 0; i < srcBuffers.length; i++) {
                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())
                        .asBuffer().put((ByteBuffer)srcBuffers[i]);
                pointer.position(pointer.limit());
            }
            opaque = pointer;
        } else if (srcBuffers[0] instanceof ShortBuffer) {
            ShortPointer pointer = new ShortPointer(totalCapacity);
            for (int i = 0; i < srcBuffers.length; i++) {
                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())
                        .asBuffer().put((ShortBuffer)srcBuffers[i]);
                pointer.position(pointer.limit());
            }
            opaque = pointer;
        } else if (srcBuffers[0] instanceof IntBuffer) {
            IntPointer pointer = new IntPointer(totalCapacity);
            for (int i = 0; i < srcBuffers.length; i++) {
                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())
                        .asBuffer().put((IntBuffer)srcBuffers[i]);
                pointer.position(pointer.limit());
            }
            opaque = pointer;
        } else if (srcBuffers[0] instanceof LongBuffer) {
            LongPointer pointer = new LongPointer(totalCapacity);
            for (int i = 0; i < srcBuffers.length; i++) {
                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())
                        .asBuffer().put((LongBuffer)srcBuffers[i]);
                pointer.position(pointer.limit());
            }
            opaque = pointer;
        } else if (srcBuffers[0] instanceof FloatBuffer) {
            FloatPointer pointer = new FloatPointer(totalCapacity);
            for (int i = 0; i < srcBuffers.length; i++) {
                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())
                        .asBuffer().put((FloatBuffer)srcBuffers[i]);
                pointer.position(pointer.limit());
            }
            opaque = pointer;
        } else if (srcBuffers[0] instanceof DoubleBuffer) {
            DoublePointer pointer = new DoublePointer(totalCapacity);
            for (int i = 0; i < srcBuffers.length; i++) {
                clonedBuffers[i] = pointer.limit(pointer.position() + srcBuffers[i].limit())
                        .asBuffer().put((DoubleBuffer)srcBuffers[i]);
                pointer.position(pointer.limit());
            }
            opaque = pointer;
        }

        for (int i = 0; i < srcBuffers.length; i++) {
            srcBuffers[i].rewind();
            clonedBuffers[i].rewind();
        }
    }

    if (opaque != null) {
        opaque.retainReference();
    }
    return opaque;
}



No.1 generated result --------------------------

Timeout


No.2 generated result --------------------------

Timeout


No.3 generated result --------------------------

Timeout


No.4 generated result --------------------------

Timeout


No.5 generated result --------------------------

Timeout


No.6 generated result --------------------------

Timeout


No.7 generated result --------------------------

Timeout


No.8 generated result --------------------------

Timeout


No.9 generated result --------------------------

Timeout


No.10 generated result --------------------------

Timeout



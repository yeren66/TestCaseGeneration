{
    "project_name": "apollo",
    "file_name": "AdminServiceAuthenticationFilter.java",
    "relative_path": "apollo/apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/filter/AdminServiceAuthenticationFilter.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.adminservice.filter",
    "docstring": null,
    "source_code": "private boolean checkAccessToken(String token) {\n  String accessTokens = bizConfig.getAdminServiceAccessTokens();\n\n  // if user forget to configure access tokens, then default to pass\n  if (Strings.isNullOrEmpty(accessTokens)) {\n    return true;\n  }\n\n  // no need to check\n  if (Strings.isNullOrEmpty(token)) {\n    return false;\n  }\n\n  // update cache\n  if (!accessTokens.equals(lastAccessTokens)) {\n    synchronized (this) {\n      accessTokenList = ACCESS_TOKEN_SPLITTER.splitToList(accessTokens);\n      lastAccessTokens = accessTokens;\n    }\n  }\n\n  return accessTokenList.contains(token);\n}\n",
    "class_name": "AdminServiceAuthenticationFilter",
    "method_name": "checkAccessToken",
    "arguments": [
        "String token"
    ],
    "generate_test": [
        "@Test\npublic void checkAccessTokenTest() {\n    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter();\n    String token = \"ABC123\";\n    boolean expected = filter.checkAccessToken(token);\n    assertTrue(expected);\n}",
        "@Test\npublic void checkAccessTokenTest() {\n    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter();\n    String token = \"testToken\";\n    \n    // Test case for when access tokens are not configured\n    filter.bizConfig = new BizConfig();\n    assertTrue(filter.checkAccessToken(token));\n    \n    // Test case for when token is empty\n    assertFalse(filter.checkAccessToken(\"\"));\n    \n    // Test case for when access tokens are configured and token is present in the list\n    filter.bizConfig.setAdminServiceAccessTokens(\"token1,token2,token3\");\n    assertTrue(filter.checkAccessToken(\"token2\"));\n    \n    // Test case for when access tokens are configured but token is not present in the list\n    assertFalse(filter.checkAccessToken(\"invalidToken\"));\n}",
        "@Test\npublic void checkAccessTokenTest() {\n    AdminServiceAuthenticationFilter adminServiceAuthenticationFilter = new AdminServiceAuthenticationFilter();\n    adminServiceAuthenticationFilter.setBizConfig(new BizConfig());\n    \n    // Test case 1: Empty access tokens, token provided\n    boolean result1 = adminServiceAuthenticationFilter.checkAccessToken(\"123\");\n    assertEquals(true, result1, \"Expected: true\");\n    \n    // Test case 2: Non-empty access tokens, empty token\n    adminServiceAuthenticationFilter.getBizConfig().setAdminServiceAccessTokens(\"token1,token2,token3\");\n    boolean result2 = adminServiceAuthenticationFilter.checkAccessToken(\"\");\n    assertEquals(false, result2, \"Expected: false\");\n    \n    // Test case 3: Non-empty access tokens, non-empty token\n    boolean result3 = adminServiceAuthenticationFilter.checkAccessToken(\"token2\");\n    assertEquals(true, result3, \"Expected: true\");\n    \n    // Test case 4: Different access tokens, token not in list\n    adminServiceAuthenticationFilter.getBizConfig().setAdminServiceAccessTokens(\"token1,token3\");\n    boolean result4 = adminServiceAuthenticationFilter.checkAccessToken(\"token2\");\n    assertEquals(false, result4, \"Expected: false\");\n}",
        "@Test\npublic void checkAccessTokenTest() {\n    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter();\n    String validToken = \"validToken\";\n    String invalidToken = \"invalidToken\";\n    \n    // Test with empty access tokens\n    boolean result1 = filter.checkAccessToken(validToken);\n    assertTrue(result1);\n    \n    // Test with non-empty access tokens\n    boolean result2 = filter.checkAccessToken(invalidToken);\n    assertFalse(result2);\n    \n    // Test with valid access tokens\n    boolean result3 = filter.checkAccessToken(validToken);\n    assertTrue(result3);\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        // Create an instance of the AdminServiceAuthenticationFilter class\n        AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter();\n        \n        // Set the access token in 'filter' object to a valid token\n        filter.setToken(\"valid_token\");\n        \n        // Call the checkAccessToken() method of 'filter' object and assert that it returns 'true'\n        assertTrue(filter.checkAccessToken(filter.getToken()));\n        \n        // Set the access token in 'filter' object to an invalid token\n        filter.setToken(\"invalid_token\");\n        \n        // Call the checkAccessToken() method of 'filter' object and assert that it returns 'false'\n        assertFalse(filter.checkAccessToken(filter.getToken()));\n        \n        // Set the access token in 'filter' object to null\n        filter.setToken(null);\n        \n        // Call the checkAccessToken() method of 'filter' object and assert that it returns 'false'\n        assertFalse(filter.checkAccessToken(filter.getToken()));\n    }\n}",
        "@Test\npublic void checkAccessTokenTest() {\n    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter();\n    String token = \"exampleToken\";\n    boolean expectedResult = <expected result based on the code>;\n\n    boolean actualResult = filter.checkAccessToken(token);\n\n    assertEquals(expectedResult, actualResult);\n}",
        "private boolean checkAccessToken(String token) {\n  String accessTokens = bizConfig.getAdminServiceAccessTokens();\n\n  // if user forget to configure access tokens, then default to pass\n  if (Strings.isNullOrEmpty(accessTokens)) {\n    return true;\n  }\n\n  // no need to check\n  if (Strings.isNullOrEmpty(token)) {\n    return false;\n  }\n\n  // update cache\n  if (!accessTokens.equals(lastAccessTokens)) {\n    synchronized (this) {\n      accessTokenList = ACCESS_TOKEN_SPLITTER.splitToList(accessTokens);\n      lastAccessTokens = accessTokens;\n    }\n  }\n\n  return accessTokenList.contains(token);\n}\n\n@Test\npublic void checkAccessTokenTest() {\n    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter();\n    String validToken = \"validToken\";\n    String invalidToken = \"invalidToken\";\n    \n    // Test case 1: When access tokens are not configured\n    bizConfig.setAdminServiceAccessTokens(null);\n    assertTrue(filter.checkAccessToken(validToken), \"Access tokens not configured. Should default to pass\");\n    \n    // Test case 2: When token is empty\n    bizConfig.setAdminServiceAccessTokens(\"accessToken1,accessToken2\");\n    assertFalse(filter.checkAccessToken(\"\"), \"Token is empty. Should return false\");\n    \n    // Test case 3: When token is valid\n    bizConfig.setAdminServiceAccessTokens(\"accessToken1,accessToken2\");\n    assertTrue(filter.checkAccessToken(validToken), \"Token is valid. Should return true\");\n    \n    // Test case 4: When token is invalid\n    bizConfig.setAdminServiceAccessTokens(\"accessToken1,accessToken2\");\n    assertFalse(filter.checkAccessToken(invalidToken), \"Token is invalid. Should return false\");\n    \n    // Test case 5: When access tokens are updated in config\n    bizConfig.setAdminServiceAccessTokens(\"updatedAccessToken1,updatedAccessToken2\");\n    assertTrue(filter.checkAccessToken(validToken), \"Access tokens updated. Should return true for valid token\");\n    assertFalse(filter.checkAccessToken(invalidToken), \"Access tokens updated. Should return false for invalid token\");\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        // create an instance of AdminServiceAuthenticationFilter\n        AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter();\n        \n        // set the value for bizConfig's adminServiceAccessTokens\n        filter.bizConfig.setAdminServiceAccessTokens(\"<access_token_1>,<access_token_2>,...\");\n        \n        // test with a valid token\n        assertTrue(filter.checkAccessToken(\"<access_token_1>\"));\n        \n        // test with an invalid token\n        assertFalse(filter.checkAccessToken(\"<invalid_token>\"));\n        \n        // test with empty token\n        assertFalse(filter.checkAccessToken(\"\"));\n        \n        // test with null token\n        assertFalse(filter.checkAccessToken(null));\n    }\n}",
        "@Test\npublic void checkAccessTokenTest() {\n    AdminServiceAuthenticationFilter adminServiceAuthenticationFilter = new AdminServiceAuthenticationFilter();\n    boolean result;\n\n    // Test when access tokens are not configured\n    adminServiceAuthenticationFilter.<FILL> // Call method to configure access tokens to null\n    result = adminServiceAuthenticationFilter.checkAccessToken(null);\n    assertTrue(result);\n\n    // Test when access tokens are configured and token parameter is null\n    adminServiceAuthenticationFilter.<FILL> // Call method to configure access tokens to a valid value\n    result = adminServiceAuthenticationFilter.checkAccessToken(null);\n    assertFalse(result);\n\n    // Test when access tokens are configured and token parameter is not in the list\n    adminServiceAuthenticationFilter.<FILL> // Call method to configure an access token list\n    result = adminServiceAuthenticationFilter.checkAccessToken(\"invalidToken\");\n    assertFalse(result);\n\n    // Test when access tokens are configured and token parameter is in the list\n    adminServiceAuthenticationFilter.<FILL> // Call method to configure an access token list\n    result = adminServiceAuthenticationFilter.checkAccessToken(\"validToken\");\n    assertTrue(result);\n}",
        "@Test\npublic void checkAccessTokenTest() {\n    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter();\n    // Test when access tokens are not configured\n    boolean result1 = filter.checkAccessToken(\"token\");\n    assertTrue(result1);\n    \n    // Test when access tokens are configured and token is empty\n    filter.bizConfig = new BizConfig();\n    boolean result2 = filter.checkAccessToken(\"\");\n    assertFalse(result2);\n    \n    // Test when access tokens are configured, token is not empty, and token is in access token list\n    filter.lastAccessTokens = \"token1,token2,token3\";\n    boolean result3 = filter.checkAccessToken(\"token2\");\n    assertTrue(result3);\n    \n    // Test when access tokens are configured, token is not empty, and token is not in access token list\n    boolean result4 = filter.checkAccessToken(\"invalidToken\");\n    assertFalse(result4);\n}"
    ]
}
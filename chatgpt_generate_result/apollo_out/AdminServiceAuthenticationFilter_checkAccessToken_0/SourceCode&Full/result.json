{
    "project_name": "apollo",
    "file_name": "AdminServiceAuthenticationFilter.java",
    "relative_path": "apollo/apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/filter/AdminServiceAuthenticationFilter.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.adminservice.filter",
    "docstring": null,
    "source_code": "private boolean checkAccessToken(String token) {\n  String accessTokens = bizConfig.getAdminServiceAccessTokens();\n\n  // if user forget to configure access tokens, then default to pass\n  if (Strings.isNullOrEmpty(accessTokens)) {\n    return true;\n  }\n\n  // no need to check\n  if (Strings.isNullOrEmpty(token)) {\n    return false;\n  }\n\n  // update cache\n  if (!accessTokens.equals(lastAccessTokens)) {\n    synchronized (this) {\n      accessTokenList = ACCESS_TOKEN_SPLITTER.splitToList(accessTokens);\n      lastAccessTokens = accessTokens;\n    }\n  }\n\n  return accessTokenList.contains(token);\n}\n",
    "class_name": "AdminServiceAuthenticationFilter",
    "method_name": "checkAccessToken",
    "arguments": [
        "String token"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter();\n        \n        // Test case 1: Access tokens are not configured\n        filter.setBizConfig(new BizConfig());\n        boolean result1 = filter.checkAccessToken(\"token\");\n        assertTrue(result1);\n        \n        // Test case 2: Null access token\n        filter.setBizConfig(AccessTokensConfigured());\n        boolean result2 = filter.checkAccessToken(null);\n        assertFalse(result2);\n        \n        // Test case 3: Valid access token\n        filter.setBizConfig(AccessTokensConfigured());\n        boolean result3 = filter.checkAccessToken(\"token\");\n        assertTrue(result3);\n        \n        // Test case 4: Invalid access token\n        filter.setBizConfig(AccessTokensConfigured());\n        boolean result4 = filter.checkAccessToken(\"invalid_token\");\n        assertFalse(result4);\n    }\n    \n    private BizConfig AccessTokensConfigured() {\n        BizConfig bizConfig = new BizConfig();\n        bizConfig.setAdminServiceAccessTokens(\"token1,token2,token3\");\n        return bizConfig;\n    }\n}",
        "@Test\npublic void checkAccessTokenTest() {\n    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(new BizConfigImpl());\n    \n    // Test case 1: Access tokens are not configured, so it should return true\n    assertTrue(filter.checkAccessToken(null));\n    \n    // Test case 2: Access token is null, so it should return false\n    assertFalse(filter.checkAccessToken(\"token123\"));\n    \n    // Test case 3: Access tokens are configured and token is in the list, so it should return true\n    filter.setAccessTokens(\"token123,token456,token789\");\n    assertTrue(filter.checkAccessToken(\"token123\"));\n    \n    // Test case 4: Access tokens are configured but token is not in the list, so it should return false\n    assertFalse(filter.checkAccessToken(\"token999\"));\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    private AdminServiceAuthenticationFilter filter;\n\n    @BeforeEach\n    public void setup() {\n        BizConfig bizConfig = new BizConfig(); // Initialize your BizConfig instance here\n        filter = new AdminServiceAuthenticationFilter(bizConfig);\n    }\n\n    @Test\n    public void checkAccessTokenTest() {\n        // Case 1: Access tokens are not configured, token is null\n        boolean result1 = filter.checkAccessToken(null);\n        assertTrue(result1, \"Expected result to be true\");\n\n        // Case 2: Access tokens are not configured, token is empty\n        boolean result2 = filter.checkAccessToken(\"\");\n        assertFalse(result2, \"Expected result to be false\");\n\n        // Case 3: Access tokens are configured, token is null\n        boolean result3 = filter.checkAccessToken(null);\n        assertFalse(result3, \"Expected result to be false\");\n\n        // Case 4: Access tokens are configured, token is not in access token list\n        boolean result4 = filter.checkAccessToken(\"invalid_token\");\n        assertFalse(result4, \"Expected result to be false\");\n\n        // Case 5: Access tokens are configured, token is in access token list\n        boolean result5 = filter.checkAccessToken(\"valid_token\");\n        assertTrue(result5, \"Expected result to be true\");\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        // Arrange\n        BizConfig bizConfig = new BizConfig(); // Assuming proper initialization\n        AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(bizConfig);\n        String validToken = \"validToken\";\n        String invalidToken = \"invalidToken\";\n        String emptyToken = \"\";\n\n        // Act\n        boolean validResult = filter.checkAccessToken(validToken);\n        boolean invalidResult = filter.checkAccessToken(invalidToken);\n        boolean emptyResult = filter.checkAccessToken(emptyToken);\n\n        // Assert\n        assertTrue(validResult);\n        assertFalse(invalidResult);\n        assertFalse(emptyResult);\n    }\n}",
        "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    private AdminServiceAuthenticationFilter filter;\n\n    @BeforeEach\n    public void setUp() {\n        BizConfig bizConfig = new BizConfig();\n        bizConfig.setAdminServiceAccessTokens(\"token1,token2\"); // Set access tokens for testing\n        filter = new AdminServiceAuthenticationFilter(bizConfig);\n    }\n\n    @Test\n    public void checkAccessTokenTest() {\n        // Test case when access tokens are not configured\n        filter.getBizConfig().setAdminServiceAccessTokens(\"\"); // Set empty access tokens\n        assertTrue(filter.checkAccessToken(\"token1\")); // Expecting true as default to pass\n\n        // Test case when access token is null or empty\n        assertFalse(filter.checkAccessToken(null)); // Expecting false as token is null\n        assertFalse(filter.checkAccessToken(\"\")); // Expecting false as token is empty\n\n        // Test case when access tokens are configured\n        filter.getBizConfig().setAdminServiceAccessTokens(\"token1,token2\"); // Set access tokens\n        assertTrue(filter.checkAccessToken(\"token1\")); // Expecting true as token is present in access tokens\n        assertFalse(filter.checkAccessToken(\"token3\")); // Expecting false as token is not present in access tokens\n    }\n}",
        "@Test\npublic void checkAccessTokenTest() {\n    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(bizConfig);\n    String validToken = \"validToken\";\n    String invalidToken = \"invalidToken\";\n    String emptyToken = \"\";\n    \n    // Test case 1: Access tokens configured, valid token provided\n    assertTrue(filter.checkAccessToken(validToken));\n    \n    // Test case 2: Access tokens configured, invalid token provided\n    assertFalse(filter.checkAccessToken(invalidToken));\n    \n    // Test case 3: Access tokens configured, empty token provided\n    assertFalse(filter.checkAccessToken(emptyToken));\n    \n    // Test case 4: No access tokens configured\n    bizConfig.setAdminServiceAccessTokens(\"\"); // set access tokens to empty\n    assertTrue(filter.checkAccessToken(validToken));\n    assertFalse(filter.checkAccessToken(invalidToken));\n    assertFalse(filter.checkAccessToken(emptyToken));\n}",
        "@Test\npublic void checkAccessTokenTest() {\n  AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(new BizConfig());\n  boolean result = filter.checkAccessToken(\"testToken\");\n  assertTrue(result);\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    @Test\n    public void checkAccessTokenTest() {\n        AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(new BizConfig());\n\n        // Test with empty access tokens\n        assertTrue(filter.checkAccessToken(\"\"));\n        assertTrue(filter.checkAccessToken(null));\n\n        // Test with non-empty access tokens\n        filter.checkAccessToken(\"token1\");\n        assertFalse(filter.checkAccessToken(\"token2\"));\n        assertTrue(filter.checkAccessToken(\"token1\"));\n    }\n}",
        "@Test\npublic void checkAccessTokenTest() {\n  AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(new BizConfig());\n  String token = \"testToken\";\n  boolean result = filter.checkAccessToken(token);\n  assertTrue(result);\n}",
        "    @Test\n    public void checkAccessTokenTest() {\n        // Create instance of AdminServiceAuthenticationFilter with a mock BizConfig object\n        BizConfig bizConfig = mock(BizConfig.class);\n        AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(bizConfig);\n        \n        // Mock the behavior of the BizConfig object\n        when(bizConfig.isAdminServiceAccessControlEnabled()).thenReturn(true);\n        when(bizConfig.getAdminServiceAccessTokens()).thenReturn(\"token1, token2, token3\");\n        \n        // Create mock HttpServletRequest and HttpServletResponse objects\n        HttpServletRequest request = mock(HttpServletRequest.class);\n        HttpServletResponse response = mock(HttpServletResponse.class);\n        \n        // Mock the behavior of the HttpServletRequest object\n        when(request.getHeader(HttpHeaders.AUTHORIZATION)).thenReturn(\"token1\");\n        \n        // Call the checkAccessToken method of the filter\n        boolean result = filter.checkAccessToken(request.getHeader(HttpHeaders.AUTHORIZATION));\n        \n        // Assert that the result is true\n        assertTrue(result);\n    }"
    ]
}
{
    "project_name": "apollo",
    "file_name": "AdminServiceAuthenticationFilter.java",
    "relative_path": "apollo/apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/filter/AdminServiceAuthenticationFilter.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.adminservice.filter",
    "docstring": null,
    "source_code": "private boolean checkAccessToken(String token) {\n  String accessTokens = bizConfig.getAdminServiceAccessTokens();\n\n  // if user forget to configure access tokens, then default to pass\n  if (Strings.isNullOrEmpty(accessTokens)) {\n    return true;\n  }\n\n  // no need to check\n  if (Strings.isNullOrEmpty(token)) {\n    return false;\n  }\n\n  // update cache\n  if (!accessTokens.equals(lastAccessTokens)) {\n    synchronized (this) {\n      accessTokenList = ACCESS_TOKEN_SPLITTER.splitToList(accessTokens);\n      lastAccessTokens = accessTokens;\n    }\n  }\n\n  return accessTokenList.contains(token);\n}\n",
    "class_name": "AdminServiceAuthenticationFilter",
    "method_name": "checkAccessToken",
    "arguments": [
        "String token"
    ],
    "generate_test": [
        "@Test\npublic void checkAccessTokenTest() {\n    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(new BizConfig());\n    String validToken = \"validToken\";\n    String invalidToken = \"invalidToken\";\n\n    // Test with empty access tokens\n    assertTrue(filter.checkAccessToken(validToken));\n    assertTrue(filter.checkAccessToken(invalidToken));\n\n    // Test with non-empty access tokens\n    filter.lastAccessTokens = \"token1,token2,token3\";\n\n    assertTrue(filter.checkAccessToken(validToken));\n    assertFalse(filter.checkAccessToken(invalidToken));\n    assertFalse(filter.checkAccessToken(null));\n}",
        "@Test\npublic void checkAccessTokenTest() {\n  AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(new BizConfig());\n  boolean result = filter.checkAccessToken(\"testToken\");\n  assertTrue(result);\n}",
        "// Test case to check if access token is present in the token list\n@Test\npublic void checkAccessTokenTest() {\n    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(mock(BizConfig.class));\n    List<String> tokenList = Arrays.asList(\"token1\", \"token2\", \"token3\");\n    Whitebox.setInternalState(filter, \"accessTokenList\", tokenList);\n\n    assertTrue(filter.checkAccessToken(\"token1\"));\n}\n\n// Test case to check if access token is not present in the token list\n@Test\npublic void checkAccessTokenTest_tokenNotPresent() {\n    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(mock(BizConfig.class));\n    List<String> tokenList = Arrays.asList(\"token1\", \"token2\", \"token3\");\n    Whitebox.setInternalState(filter, \"accessTokenList\", tokenList);\n\n    assertFalse(filter.checkAccessToken(\"invalidToken\"));\n}\n\n// Test case to check if access token is null\n@Test\npublic void checkAccessTokenTest_nullToken() {\n    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(mock(BizConfig.class));\n    List<String> tokenList = Arrays.asList(\"token1\", \"token2\", \"token3\");\n    Whitebox.setInternalState(filter, \"accessTokenList\", tokenList);\n\n    assertFalse(filter.checkAccessToken(null));\n}\n\n// Test case to check if access token list is null\n@Test\npublic void checkAccessTokenTest_nullTokenList() {\n    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(mock(BizConfig.class));\n    Whitebox.setInternalState(filter, \"accessTokenList\", null);\n\n    assertFalse(filter.checkAccessToken(\"token1\"));\n}\n\n// Test case to check if access token is empty\n@Test\npublic void checkAccessTokenTest_emptyToken() {\n    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(mock(BizConfig.class));\n    List<String> tokenList = Arrays.asList(\"token1\", \"token2\", \"token3\");\n    Whitebox.setInternalState(filter, \"accessTokenList\", tokenList);\n\n    assertFalse(filter.checkAccessToken(\"\"));\n}\n\n// Test case to check if access token list is empty\n@Test\npublic void checkAccessTokenTest_emptyTokenList() {\n    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(mock(BizConfig.class));\n    Whitebox.setInternalState(filter, \"accessTokenList\", Collections.emptyList());\n\n    assertFalse(filter.checkAccessToken(\"token1\"));\n}",
        "@Test\npublic void checkAccessTokenTest() {\n    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(new BizConfig() {\n        @Override\n        public String getAdminServiceAccessTokens() {\n            return \"token1, token2, token3\";\n        }\n    });\n    String validToken = \"token2\";\n    String invalidToken = \"token4\";\n    \n    assertTrue(filter.checkAccessToken(validToken));\n    assertFalse(filter.checkAccessToken(invalidToken));\n    assertTrue(filter.checkAccessToken(null));\n    assertTrue(filter.checkAccessToken(\"\"));\n}",
        "@Test\npublic void checkAccessTokenTest() {\n    AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(<BizConfig Object>);\n    String validToken = \"validToken\";\n    String invalidToken = \"invalidToken\";\n    \n    // Case 1: Access tokens are not configured, should default to pass\n    boolean result1 = filter.checkAccessToken(validToken);\n    assertTrue(result1);\n    \n    // Case 2: Access tokens are not configured, should default to pass\n    boolean result2 = filter.checkAccessToken(invalidToken);\n    assertTrue(result2);\n    \n    // Case 3: Access tokens are configured and token is valid\n    filter.lastAccessTokens = \"token1,token2,token3\";\n    boolean result3 = filter.checkAccessToken(\"token2\");\n    assertTrue(result3);\n    \n    // Case 4: Access tokens are configured but token is invalid\n    boolean result4 = filter.checkAccessToken(\"invalidToken\");\n    assertFalse(result4);\n}",
        "AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(new BizConfig());\n\nboolean result = filter.checkAccessToken(\"accessToken\");\n\nassertTrue(result);",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    private AdminServiceAuthenticationFilter filter;\n\n    @BeforeEach\n    public void setUp() {\n        filter = new AdminServiceAuthenticationFilter(new BizConfig());\n    }\n\n    @Test\n    public void checkAccessTokenTest() {\n        // Test case when access tokens are not configured\n        assertTrue(filter.checkAccessToken(\"\"));\n        \n        // Test case when access tokens are configured and token is empty\n        assertFalse(filter.checkAccessToken(\"\"));\n        \n        // Test case when access tokens are configured and token is in the list\n        assertTrue(filter.checkAccessToken(\"access_token_1\"));\n        \n        // Test case when access tokens are configured and token is not in the list\n        assertFalse(filter.checkAccessToken(\"invalid_token\"));\n    }\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    private AdminServiceAuthenticationFilter filter;\n\n    @BeforeEach\n    public void setup() {\n        filter = new AdminServiceAuthenticationFilter(new BizConfig());\n    }\n\n    @Test\n    public void checkAccessTokenTest() {\n        boolean result = filter.checkAccessToken(\"access_token_here\");\n\n        // Assertion\n        assertTrue(result);\n    }\n}",
        "@Test\npublic void checkAccessTokenTest() {\n  AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(new BizConfig());\n  String validToken = \"validToken\";\n  String invalidToken = \"invalidToken\";\n\n  // Test case 1: When access tokens are not configured, it should default to pass\n  assertTrue(filter.checkAccessToken(validToken));\n\n  // Test case 2: When access tokens are not configured, it should default to pass\n  assertTrue(filter.checkAccessToken(invalidToken));\n\n  // Test case 3: When access tokens are configured and token is null, it should return false\n  assertFalse(filter.checkAccessToken(null));\n\n  // Test case 4: When access tokens are configured and token is empty, it should return false\n  assertFalse(filter.checkAccessToken(\"\"));\n\n  // Test case 5: When access tokens are configured and token is not in the list, it should return false\n  assertFalse(filter.checkAccessToken(invalidToken));\n\n  // Test case 6: When access tokens are configured and token is in the list, it should return true\n  assertTrue(filter.checkAccessToken(validToken));\n}",
        "package com.ctrip.framework.apollo.adminservice.filter;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminServiceAuthenticationFilterTest {\n    // Mock BizConfig\n    private class MockBizConfig implements BizConfig {\n        @Override\n        public String getAdminServiceAccessTokens() {\n            return \"token1,token2,token3\";\n        }\n    }\n\n    @Test\n    public void checkAccessTokenTest() {\n        // Prepare\n        AdminServiceAuthenticationFilter filter = new AdminServiceAuthenticationFilter(new MockBizConfig());\n        \n        // Test cases\n        assertFalse(filter.checkAccessToken(null)); // Empty token\n        assertFalse(filter.checkAccessToken(\"\")); // Empty token\n        assertFalse(filter.checkAccessToken(\"invalid\")); // Invalid token\n        assertTrue(filter.checkAccessToken(\"token1\")); // Valid token\n        assertTrue(filter.checkAccessToken(\"token2\")); // Valid token\n        assertTrue(filter.checkAccessToken(\"token3\")); // Valid token\n        assertFalse(filter.checkAccessToken(\"token4\")); // Invalid token\n    }\n}"
    ]
}
{
    "project_name": "apollo",
    "file_name": "ApolloEurekaClientConfig.java",
    "relative_path": "apollo/apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/eureka/ApolloEurekaClientConfig.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.biz.eureka",
    "docstring": "/**\n   * Assert only one zone: defaultZone, but multiple environments.\n   */",
    "source_code": "\n@Override\npublic List<String> getEurekaServerServiceUrls(String myZone) {\n  List<String> urls = bizConfig.eurekaServiceUrls();\n  return CollectionUtils.isEmpty(urls) ? super.getEurekaServerServiceUrls(myZone) : urls;\n}\n",
    "class_name": "ApolloEurekaClientConfig",
    "method_name": "getEurekaServerServiceUrls",
    "arguments": [
        "String myZone"
    ],
    "generate_test": [
        "@Test\npublic void getEurekaServerServiceUrlsTest() {\n  List<String> expectedUrls = Arrays.asList(\"https://example1.com\", \"https://example2.com\");\n  \n  ApolloEurekaClientConfig apolloEurekaClientConfig = new ApolloEurekaClientConfig();\n  apolloEurekaClientConfig.setBizConfig(new BizConfig());\n  \n  List<String> actualUrls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"myZone\");\n  \n  assertEquals(expectedUrls, actualUrls);\n}",
        "@Test\npublic void getEurekaServerServiceUrlsTest() {\n    ApolloEurekaClientConfig config = new ApolloEurekaClientConfig();\n    List<String> myZoneUrls = config.getEurekaServerServiceUrls(\"myZone\");\n    \n    List<String> expectedUrls = new ArrayList<>();\n    expectedUrls.add(\"http://localhost:8080\");\n    \n    assertEquals(expectedUrls, myZoneUrls);\n}",
        "@Test\npublic void getEurekaServerServiceUrlsTest() {\n  // Given\n  ApolloEurekaClientConfig config = new ApolloEurekaClientConfig();\n  String myZone = \"myZone\";\n  List<String> mockedUrls = Arrays.asList(\"url1\", \"url2\");\n  \n  // Mocking bizConfig.eurekaServiceUrls() to return mockedUrls\n  BizConfig mockedBizConfig = Mockito.mock(BizConfig.class);\n  Mockito.when(mockedBizConfig.eurekaServiceUrls()).thenReturn(mockedUrls);\n  config.setBizConfig(mockedBizConfig);\n  \n  // When\n  List<String> result = config.getEurekaServerServiceUrls(myZone);\n  \n  // Then\n  assertEquals(mockedUrls, result);\n}",
        "@Test\npublic void getEurekaServerServiceUrlsTest() {\n    // Test case 1: When urls list is empty\n    List<String> emptyUrls = new ArrayList<>();\n    ApolloEurekaClientConfig config = new ApolloEurekaClientConfig();\n\n    List<String> result1 = config.getEurekaServerServiceUrls(\"myZone\");\n    assertEquals(super.getEurekaServerServiceUrls(\"myZone\"), result1); // Verify that the result is obtained by calling the superclass method\n\n    // Test case 2: When urls list is not empty\n    List<String> urls = new ArrayList<>();\n    urls.add(\"http://example.com\");\n    urls.add(\"http://example.org\");\n    config.setUrls(urls);\n\n    List<String> result2 = config.getEurekaServerServiceUrls(\"myZone\");\n    assertEquals(urls, result2); // Verify that the result is obtained by using the configured urls\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.Mockito;\nimport java.util.*;\n\npublic class ApolloEurekaClientConfigTest {\n    \n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        ApolloEurekaClientConfig apolloEurekaClientConfig = new ApolloEurekaClientConfig();\n        BizConfig bizConfig = Mockito.mock(BizConfig.class);\n        \n        // Mock the behavior of bizConfig.eurekaServiceUrls()\n        List<String> mockUrls = new ArrayList<>();\n        mockUrls.add(\"http://localhost:8080/eureka\");\n        Mockito.when(bizConfig.eurekaServiceUrls()).thenReturn(mockUrls);\n        \n        // Test case 1: when bizConfig.eurekaServiceUrls() is not empty\n        apolloEurekaClientConfig.setBizConfig(bizConfig);\n        List<String> result1 = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"myZone\");\n        assertEquals(mockUrls, result1);\n        \n        // Test case 2: when bizConfig.eurekaServiceUrls() is empty\n        List<String> emptyUrls = new ArrayList<>();\n        Mockito.when(bizConfig.eurekaServiceUrls()).thenReturn(emptyUrls);\n        List<String> result2 = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"myZone\");\n        List<String> defaultUrls = new ArrayList<>();\n        defaultUrls.add(\"http://localhost:8761/eureka\");\n        assertEquals(defaultUrls, result2);\n    }\n}",
        "@Test\npublic void getEurekaServerServiceUrlsTest() {\n    ApolloEurekaClientConfig config = new ApolloEurekaClientConfig();\n    String myZone = \"zone1\";\n    List<String> urls = config.getEurekaServerServiceUrls(myZone);\n    assertNotNull(urls);\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.Mockito;\nimport java.util.List;\nimport java.util.Arrays;\nimport org.springframework.util.CollectionUtils;\n\npublic class ApolloEurekaClientConfigTest {\n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        // Setup\n        ApolloEurekaClientConfig apolloEurekaClientConfig = Mockito.mock(ApolloEurekaClientConfig.class);\n        Mockito.when(apolloEurekaClientConfig.getEurekaServerServiceUrls(\"myZone\")).thenReturn(Arrays.asList(\"url1\", \"url2\"));\n\n        // Execute\n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"myZone\");\n\n        // Verify\n        assertEquals(Arrays.asList(\"url1\", \"url2\"), result);\n    }\n}",
        "@Test\npublic void getEurekaServerServiceUrlsTest() {\n  ApolloEurekaClientConfig config = new ApolloEurekaClientConfig();\n  List<String> expectedUrls = Collections.singletonList(\"url1\");\n  \n  // Test when urls are not empty\n  when(config.bizConfig.eurekaServiceUrls()).thenReturn(expectedUrls);\n  List<String> actualUrls = config.getEurekaServerServiceUrls(\"myZone\");\n  assertEquals(expectedUrls, actualUrls);\n  \n  // Test when urls are empty\n  when(config.bizConfig.eurekaServiceUrls()).thenReturn(Collections.emptyList());\n  List<String> superUrls = super.getEurekaServerServiceUrls(\"myZone\");\n  List<String> actualUrls2 = config.getEurekaServerServiceUrls(\"myZone\");\n  assertEquals(superUrls, actualUrls2);\n}\n",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\npublic class ApolloEurekaClientConfigTest {\n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        // Test when urls is empty\n        ApolloEurekaClientConfig apolloEurekaClientConfig = new ApolloEurekaClientConfig();\n        List<String> urls = new ArrayList<>();\n        Mockito.when(apolloEurekaClientConfig.bizConfig.eurekaServiceUrls()).thenReturn(urls);\n        List<String> result1 = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"myZone\");\n        assertTrue(result1.isEmpty());\n\n        // Test when urls is not empty\n        ApolloEurekaClientConfig apolloEurekaClientConfig2 = Mockito.mock(ApolloEurekaClientConfig.class);\n        List<String> urls2 = Arrays.asList(\"http://localhost:8080\");\n        Mockito.when(apolloEurekaClientConfig2.bizConfig.eurekaServiceUrls()).thenReturn(urls2);\n        List<String> result2 = apolloEurekaClientConfig2.getEurekaServerServiceUrls(\"myZone\");\n        assertEquals(urls2, result2);\n    }\n}",
        "@Test\npublic void getEurekaServerServiceUrlsTest() {\n    ApolloEurekaClientConfig config = new ApolloEurekaClientConfig();\n    String myZone = \"myZone\";\n    List<String> expectedUrls = new ArrayList<>();\n    expectedUrls.add(\"http://url1\");\n    expectedUrls.add(\"http://url2\");\n    \n    List<String> actualUrls = config.getEurekaServerServiceUrls(myZone);\n    \n    assertEquals(expectedUrls, actualUrls);\n}"
    ]
}
{
    "project_name": "apollo",
    "file_name": "ApolloEurekaClientConfig.java",
    "relative_path": "apollo/apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/eureka/ApolloEurekaClientConfig.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.biz.eureka",
    "docstring": "/**\n   * Assert only one zone: defaultZone, but multiple environments.\n   */",
    "source_code": "\n@Override\npublic List<String> getEurekaServerServiceUrls(String myZone) {\n  List<String> urls = bizConfig.eurekaServiceUrls();\n  return CollectionUtils.isEmpty(urls) ? super.getEurekaServerServiceUrls(myZone) : urls;\n}\n",
    "class_name": "ApolloEurekaClientConfig",
    "method_name": "getEurekaServerServiceUrls",
    "arguments": [
        "String myZone"
    ],
    "generate_test": [
        "@Test\npublic void getEurekaServerServiceUrlsTest() {\n    ApolloEurekaClientConfig config = new ApolloEurekaClientConfig(mockBizConfig, mockRefreshScope);\n    List<String> urls = config.getEurekaServerServiceUrls(\"myZone\");\n    assertEquals(expectedUrls, urls);\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ApolloEurekaClientConfigTest {\n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        ApolloEurekaClientConfig clientConfig = new ApolloEurekaClientConfig(null, null);\n        List<String> urls = clientConfig.getEurekaServerServiceUrls(\"myZone\");\n        assertNotNull(urls);\n        // Add assertions for the expected behavior of the method\n    }\n}",
        "@Test\npublic void getEurekaServerServiceUrlsTest() {\n    ApolloEurekaClientConfig apolloEurekaClientConfig = new ApolloEurekaClientConfig(new BizConfig(), new RefreshScope());\n    String myZone = \"myZone\";\n    List<String> expectedUrls = Arrays.asList(\"url1\", \"url2\", \"url3\");\n    apolloEurekaClientConfig.getBizConfig().setEurekaServiceUrls(expectedUrls);\n\n    List<String> actualUrls = apolloEurekaClientConfig.getEurekaServerServiceUrls(myZone);\n\n    assertEquals(expectedUrls, actualUrls);\n}",
        "@Test\npublic void getEurekaServerServiceUrlsTest() {\n    ApolloEurekaClientConfig config = new ApolloEurekaClientConfig(new BizConfig(), new RefreshScope());\n    List<String> urls = config.getEurekaServerServiceUrls(\"myZone\");\n  \n    // Add assertions here to test the output of the method\n    assertEquals(3, urls.size());\n    assertTrue(urls.contains(\"http://localhost:8761/eureka/\"));\n}",
        "\npackage com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.Mockito;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ApolloEurekaClientConfigTest {\n\n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        BizConfig bizConfig = Mockito.mock(BizConfig.class);\n        ApolloEurekaClientConfig apolloEurekaClientConfig = new ApolloEurekaClientConfig(bizConfig, Mockito.mock(RefreshScope.class));\n\n        // Mocking empty list\n        Mockito.when(bizConfig.eurekaServiceUrls()).thenReturn(new ArrayList<>());\n        List<String> result1 = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"myZone\");\n        assertEquals(0, result1.size());\n\n        // Mocking non-empty list\n        List<String> urls = new ArrayList<>();\n        urls.add(\"http://localhost:8761/eureka\");\n        urls.add(\"http://localhost:8762/eureka\");\n        Mockito.when(bizConfig.eurekaServiceUrls()).thenReturn(urls);\n        List<String> result2 = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"myZone\");\n        assertEquals(2, result2.size());\n        assertEquals(urls, result2);\n    }\n}\n",
        "@Test\npublic void getEurekaServerServiceUrlsTest() {\n    ApolloEurekaClientConfig config = new ApolloEurekaClientConfig(mockBizConfig, mockRefreshScope);\n    List<String> urls = new ArrayList<>();\n    urls.add(\"http://example.com\");\n    \n    when(mockBizConfig.eurekaServiceUrls()).thenReturn(urls);\n    \n    List<String> result = config.getEurekaServerServiceUrls(\"myZone\");\n    \n    assertEquals(urls, result);\n}",
        "@Test\npublic void getEurekaServerServiceUrlsTest() {\n    ApolloEurekaClientConfig eurekaClientConfig = new ApolloEurekaClientConfig(bizConfig, refreshScope);\n    String myZone = \"myZone\";\n    List<String> expectedUrls = List.of(\"http://localhost:8761/eureka\");\n    \n    List<String> actualUrls = eurekaClientConfig.getEurekaServerServiceUrls(myZone);\n    \n    assertEquals(expectedUrls, actualUrls);\n}",
        "@Test\npublic void getEurekaServerServiceUrlsTest() {\n    ApolloEurekaClientConfig config = new ApolloEurekaClientConfig(new BizConfig(), new RefreshScope());\n    List<String> urls = new ArrayList<>();\n    urls.add(\"http://localhost:8761/eureka\");\n    config.bizConfig = new BizConfig() {\n        @Override\n        public List<String> eurekaServiceUrls() {\n            return urls;\n        }\n    };\n    \n    String myZone = \"myZone\";\n    List<String> result = config.getEurekaServerServiceUrls(myZone);\n    \n    assertEquals(urls, result);\n}",
        "@Test\npublic void getEurekaServerServiceUrlsTest() {\n    ApolloEurekaClientConfig config = new ApolloEurekaClientConfig(new BizConfig(), new RefreshScope());\n\n    List<String> urls = config.getEurekaServerServiceUrls(\"myZone\");\n\n    assertNotNull(urls);\n    // additional assertions based on the expected behavior of getEurekaServerServiceUrls() \n}",
        "@Test\npublic void getEurekaServerServiceUrlsTest() {\n    String myZone = \"testZone\";\n    List<String> expectedUrls = new ArrayList<>();\n    expectedUrls.add(\"http://localhost:8761/eureka/\");\n    \n    BizConfig bizConfig = mock(BizConfig.class);\n    when(bizConfig.eurekaServiceUrls()).thenReturn(expectedUrls);\n    \n    ApolloEurekaClientConfig config = new ApolloEurekaClientConfig(bizConfig, mock(RefreshScope.class));\n    List<String> actualUrls = config.getEurekaServerServiceUrls(myZone);\n    \n    assertEquals(expectedUrls, actualUrls);\n}"
    ]
}
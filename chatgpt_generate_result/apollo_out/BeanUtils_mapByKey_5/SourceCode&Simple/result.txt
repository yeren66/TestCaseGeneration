Source code: 


@SuppressWarnings("unchecked")
public static <K, V> Map<K, V> mapByKey(String key, List<?> list) {
  Map<K, V> map = new HashMap<>();
  if (CollectionUtils.isEmpty(list)) {
    return map;
  }
  try {
    Class<?> clazz = list.get(0).getClass();
    Field field = deepFindField(clazz, key);
    if (field == null) {
        throw new IllegalArgumentException("Could not find the key");
    }
    field.setAccessible(true);
    for (Object o : list) {
      map.put((K) field.get(o), (V) o);
    }
  } catch (Exception e) {
    throw new BeanUtilsException(e);
  }
  return map;
}



No.1 generated result --------------------------

@Test
public void mapByKeyTest() {
    List<MyObject> list = new ArrayList<>();
    list.add(new MyObject(1, "one"));
    list.add(new MyObject(2, "two"));
    Map<Integer, MyObject> map = BeanUtils.mapByKey("id", list);
    assertEquals(2, map.size());
    assertEquals("one", map.get(1).getName());
    assertEquals("two", map.get(2).getName());
}

class MyObject {
    private int id;
    private String name;

    public MyObject(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }
}


No.2 generated result --------------------------

@Test
public void mapByKeyTest() {
    // Given
    String key = "id";
    List<TestObject> list = new ArrayList<>();
    TestObject obj1 = new TestObject("123", "John");
    TestObject obj2 = new TestObject("456", "Jane");
    list.add(obj1);
    list.add(obj2);
    
    // When
    Map<String, TestObject> result = BeanUtils.mapByKey(key, list);
    
    // Then
    assertEquals(2, result.size());
    assertEquals(obj1, result.get("123"));
    assertEquals(obj2, result.get("456"));
}

class TestObject {
    private String id;
    private String name;
    
    public TestObject(String id, String name) {
        this.id = id;
        this.name = name;
    }
    
    public String getId() {
        return id;
    }
    
    public String getName() {
        return name;
    }
}


No.3 generated result --------------------------

@Test
public void mapByKeyTest() {
    List<Object> list = new ArrayList<>();
    // Add objects to the list
    
    Map<Object, Object> expectedMap = new HashMap<>();
    // Add expected key-value pairs to the map
    
    Map<Object, Object> actualMap = BeanUtils.mapByKey("key", list);
    
    assertEquals(expectedMap, actualMap);
}


No.4 generated result --------------------------

@Test
public void mapByKeyTest() {
    String key = "id";
    List<User> userList = new ArrayList<>();
    userList.add(new User(1, "John"));
    userList.add(new User(2, "Jane"));
  
    Map<Integer, User> expectedMap = new HashMap<>();
    expectedMap.put(1, new User(1, "John"));
    expectedMap.put(2, new User(2, "Jane"));
  
    Map<Integer, User> actualMap = BeanUtils.mapByKey(key, userList);
  
    assertEquals(expectedMap, actualMap);
}

class User {
    private int id;
    private String name;
  
    public User(int id, String name) {
        this.id = id;
        this.name = name;
    }
  
    // getters and setters
}


No.5 generated result --------------------------

@Test
public void mapByKeyTest() {
    List<Object> list = new ArrayList<>(); // create a list of objects
    list.add(new MyClass("key1", 1)); // add objects to the list
    list.add(new MyClass("key2", 2));
    list.add(new MyClass("key3", 3));
    
    Map<String, MyClass> expected = new HashMap<>(); // create the expected map
    expected.put("key1", new MyClass("key1", 1)); // add key-value pairs to the map
    expected.put("key2", new MyClass("key2", 2));
    expected.put("key3", new MyClass("key3", 3));
    
    Map<String, MyClass> result = BeanUtils.mapByKey("key", list); // call the method to test
    
    assertEquals(expected, result); // assert that the expected map is equal to the result
}

// Define a sample class
class MyClass {
    private String key;
    private Integer value;
    
    public MyClass(String key, Integer value) {
        this.key = key;
        this.value = value;
    }
    
    // getters and setters
}


No.6 generated result --------------------------

@Test
public void mapByKeyTest() {
    // Prepare test data
    List<MyObject> list = new ArrayList<>(); // Replace MyObject with the actual object type in the list
    MyObject obj1 = new MyObject(); // Replace MyObject with the actual object type
    obj1.setKey("key1"); // Set the key value for obj1
    obj1.setValue("value1"); // Set the value for obj1
    list.add(obj1);
    MyObject obj2 = new MyObject(); // Replace MyObject with the actual object type
    obj2.setKey("key2"); // Set the key value for obj2
    obj2.setValue("value2"); // Set the value for obj2
    list.add(obj2);
    
    // Execute the method to test
    Map<String, MyObject> resultMap = BeanUtils.mapByKey("key", list); // Replace "key" with the actual key field name
    
    // Verify the result
    assertEquals(2, resultMap.size());
    assertEquals(obj1, resultMap.get("key1")); // Replace "key1" with the actual key value of obj1
    assertEquals(obj2, resultMap.get("key2")); // Replace "key2" with the actual key value of obj2
}


No.7 generated result --------------------------

@Test
public void mapByKeyTest() {
    String key = "someKey";
    List<Object> list = new ArrayList<>();
    // Add test objects to the list
    
    Map<String, Object> expectedMap = new HashMap<>();
    // Add expected key-value pairs to the map
    
    Map<String, Object> actualMap = BeanUtils.mapByKey(key, list);
    
    assertEquals(expectedMap, actualMap);
}


No.8 generated result --------------------------

@Test
public void mapByKeyTest() {
    List<Object> list = new ArrayList<>();
    list.add(new Person("John", 30));
    list.add(new Person("Jane", 25));
    list.add(new Person("Mike", 40));
    
    Map<String, Object> actualMap = BeanUtils.mapByKey("name", list);
    
    Map<String, Object> expectedMap = new HashMap<>();
    expectedMap.put("John", new Person("John", 30));
    expectedMap.put("Jane", new Person("Jane", 25));
    expectedMap.put("Mike", new Person("Mike", 40));
    
    assertEquals(expectedMap, actualMap);
}


No.9 generated result --------------------------

@Test
public void mapByKeyTest() {
    String key = "id";
    List<TestClass> list = new ArrayList<>();
    TestClass obj1 = new TestClass(1, "John");
    TestClass obj2 = new TestClass(2, "Jane");
    TestClass obj3 = new TestClass(3, "Alice");
    list.add(obj1);
    list.add(obj2);
    list.add(obj3);
    
    Map<Integer, TestClass> expectedMap = new HashMap<>();
    expectedMap.put(1, obj1);
    expectedMap.put(2, obj2);
    expectedMap.put(3, obj3);
    
    Map<Integer, TestClass> actualMap = BeanUtils.mapByKey(key, list);
    
    assertEquals(expectedMap, actualMap);
}

class TestClass {
    private int id;
    private String name;
    
    public TestClass(int id, String name) {
        this.id = id;
        this.name = name;
    }
    
    public int getId() {
        return id;
    }
    
    public String getName() {
        return name;
    }
}


No.10 generated result --------------------------

@Test
public void mapByKeyTest() {
  List<TestClass> list = new ArrayList<>();
  list.add(new TestClass(1, "One"));
  list.add(new TestClass(2, "Two"));
  
  Map<Integer, TestClass> expectedMap = new HashMap<>();
  expectedMap.put(1, new TestClass(1, "One"));
  expectedMap.put(2, new TestClass(2, "Two"));
  
  Map<Integer, TestClass> actualMap = BeanUtils.mapByKey("id", list);
  
  assertEquals(expectedMap, actualMap);
}



{
    "project_name": "apollo",
    "file_name": "BeanUtils.java",
    "relative_path": "apollo/apollo-common/src/main/java/com/ctrip/framework/apollo/common/utils/BeanUtils.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.common.utils",
    "docstring": "/**\n   * \u7528\u4e8e\u5c06\u4e00\u4e2a\u5217\u8868\u8f6c\u6362\u4e3a\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\u7684\u67d0\u4e2a\u5c5e\u6027\u6620\u5c04\u5230\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\n   *\n   * <pre>\n   *      List<UserDTO> userList = userService.queryUsers();\n   *      Map<Integer, userDTO> userIdToUser = BeanUtil.mapByKey(\"userId\", userList);\n   * </pre>\n   *\n   * @param key \u5c5e\u6027\u540d\n   */",
    "source_code": "\n@SuppressWarnings(\"unchecked\")\npublic static <K, V> Map<K, V> mapByKey(String key, List<?> list) {\n  Map<K, V> map = new HashMap<>();\n  if (CollectionUtils.isEmpty(list)) {\n    return map;\n  }\n  try {\n    Class<?> clazz = list.get(0).getClass();\n    Field field = deepFindField(clazz, key);\n    if (field == null) {\n        throw new IllegalArgumentException(\"Could not find the key\");\n    }\n    field.setAccessible(true);\n    for (Object o : list) {\n      map.put((K) field.get(o), (V) o);\n    }\n  } catch (Exception e) {\n    throw new BeanUtilsException(e);\n  }\n  return map;\n}\n",
    "class_name": "BeanUtils",
    "method_name": "mapByKey",
    "arguments": [
        "String key",
        "List<> list"
    ],
    "generate_test": [
        "@Test\npublic void mapByKeyTest() {\n    List<MyObject> list = new ArrayList<>();\n    list.add(new MyObject(1, \"one\"));\n    list.add(new MyObject(2, \"two\"));\n    Map<Integer, MyObject> map = BeanUtils.mapByKey(\"id\", list);\n    assertEquals(2, map.size());\n    assertEquals(\"one\", map.get(1).getName());\n    assertEquals(\"two\", map.get(2).getName());\n}\n\nclass MyObject {\n    private int id;\n    private String name;\n\n    public MyObject(int id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public String getName() {\n        return name;\n    }\n}",
        "@Test\npublic void mapByKeyTest() {\n    // Given\n    String key = \"id\";\n    List<TestObject> list = new ArrayList<>();\n    TestObject obj1 = new TestObject(\"123\", \"John\");\n    TestObject obj2 = new TestObject(\"456\", \"Jane\");\n    list.add(obj1);\n    list.add(obj2);\n    \n    // When\n    Map<String, TestObject> result = BeanUtils.mapByKey(key, list);\n    \n    // Then\n    assertEquals(2, result.size());\n    assertEquals(obj1, result.get(\"123\"));\n    assertEquals(obj2, result.get(\"456\"));\n}\n\nclass TestObject {\n    private String id;\n    private String name;\n    \n    public TestObject(String id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n    \n    public String getId() {\n        return id;\n    }\n    \n    public String getName() {\n        return name;\n    }\n}",
        "@Test\npublic void mapByKeyTest() {\n    List<Object> list = new ArrayList<>();\n    // Add objects to the list\n    \n    Map<Object, Object> expectedMap = new HashMap<>();\n    // Add expected key-value pairs to the map\n    \n    Map<Object, Object> actualMap = BeanUtils.mapByKey(\"key\", list);\n    \n    assertEquals(expectedMap, actualMap);\n}",
        "@Test\npublic void mapByKeyTest() {\n    String key = \"id\";\n    List<User> userList = new ArrayList<>();\n    userList.add(new User(1, \"John\"));\n    userList.add(new User(2, \"Jane\"));\n  \n    Map<Integer, User> expectedMap = new HashMap<>();\n    expectedMap.put(1, new User(1, \"John\"));\n    expectedMap.put(2, new User(2, \"Jane\"));\n  \n    Map<Integer, User> actualMap = BeanUtils.mapByKey(key, userList);\n  \n    assertEquals(expectedMap, actualMap);\n}\n\nclass User {\n    private int id;\n    private String name;\n  \n    public User(int id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n  \n    // getters and setters\n}",
        "@Test\npublic void mapByKeyTest() {\n    List<Object> list = new ArrayList<>(); // create a list of objects\n    list.add(new MyClass(\"key1\", 1)); // add objects to the list\n    list.add(new MyClass(\"key2\", 2));\n    list.add(new MyClass(\"key3\", 3));\n    \n    Map<String, MyClass> expected = new HashMap<>(); // create the expected map\n    expected.put(\"key1\", new MyClass(\"key1\", 1)); // add key-value pairs to the map\n    expected.put(\"key2\", new MyClass(\"key2\", 2));\n    expected.put(\"key3\", new MyClass(\"key3\", 3));\n    \n    Map<String, MyClass> result = BeanUtils.mapByKey(\"key\", list); // call the method to test\n    \n    assertEquals(expected, result); // assert that the expected map is equal to the result\n}\n\n// Define a sample class\nclass MyClass {\n    private String key;\n    private Integer value;\n    \n    public MyClass(String key, Integer value) {\n        this.key = key;\n        this.value = value;\n    }\n    \n    // getters and setters\n}",
        "@Test\npublic void mapByKeyTest() {\n    // Prepare test data\n    List<MyObject> list = new ArrayList<>(); // Replace MyObject with the actual object type in the list\n    MyObject obj1 = new MyObject(); // Replace MyObject with the actual object type\n    obj1.setKey(\"key1\"); // Set the key value for obj1\n    obj1.setValue(\"value1\"); // Set the value for obj1\n    list.add(obj1);\n    MyObject obj2 = new MyObject(); // Replace MyObject with the actual object type\n    obj2.setKey(\"key2\"); // Set the key value for obj2\n    obj2.setValue(\"value2\"); // Set the value for obj2\n    list.add(obj2);\n    \n    // Execute the method to test\n    Map<String, MyObject> resultMap = BeanUtils.mapByKey(\"key\", list); // Replace \"key\" with the actual key field name\n    \n    // Verify the result\n    assertEquals(2, resultMap.size());\n    assertEquals(obj1, resultMap.get(\"key1\")); // Replace \"key1\" with the actual key value of obj1\n    assertEquals(obj2, resultMap.get(\"key2\")); // Replace \"key2\" with the actual key value of obj2\n}",
        "@Test\npublic void mapByKeyTest() {\n    String key = \"someKey\";\n    List<Object> list = new ArrayList<>();\n    // Add test objects to the list\n    \n    Map<String, Object> expectedMap = new HashMap<>();\n    // Add expected key-value pairs to the map\n    \n    Map<String, Object> actualMap = BeanUtils.mapByKey(key, list);\n    \n    assertEquals(expectedMap, actualMap);\n}",
        "@Test\npublic void mapByKeyTest() {\n    List<Object> list = new ArrayList<>();\n    list.add(new Person(\"John\", 30));\n    list.add(new Person(\"Jane\", 25));\n    list.add(new Person(\"Mike\", 40));\n    \n    Map<String, Object> actualMap = BeanUtils.mapByKey(\"name\", list);\n    \n    Map<String, Object> expectedMap = new HashMap<>();\n    expectedMap.put(\"John\", new Person(\"John\", 30));\n    expectedMap.put(\"Jane\", new Person(\"Jane\", 25));\n    expectedMap.put(\"Mike\", new Person(\"Mike\", 40));\n    \n    assertEquals(expectedMap, actualMap);\n}",
        "@Test\npublic void mapByKeyTest() {\n    String key = \"id\";\n    List<TestClass> list = new ArrayList<>();\n    TestClass obj1 = new TestClass(1, \"John\");\n    TestClass obj2 = new TestClass(2, \"Jane\");\n    TestClass obj3 = new TestClass(3, \"Alice\");\n    list.add(obj1);\n    list.add(obj2);\n    list.add(obj3);\n    \n    Map<Integer, TestClass> expectedMap = new HashMap<>();\n    expectedMap.put(1, obj1);\n    expectedMap.put(2, obj2);\n    expectedMap.put(3, obj3);\n    \n    Map<Integer, TestClass> actualMap = BeanUtils.mapByKey(key, list);\n    \n    assertEquals(expectedMap, actualMap);\n}\n\nclass TestClass {\n    private int id;\n    private String name;\n    \n    public TestClass(int id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n    \n    public int getId() {\n        return id;\n    }\n    \n    public String getName() {\n        return name;\n    }\n}",
        "@Test\npublic void mapByKeyTest() {\n  List<TestClass> list = new ArrayList<>();\n  list.add(new TestClass(1, \"One\"));\n  list.add(new TestClass(2, \"Two\"));\n  \n  Map<Integer, TestClass> expectedMap = new HashMap<>();\n  expectedMap.put(1, new TestClass(1, \"One\"));\n  expectedMap.put(2, new TestClass(2, \"Two\"));\n  \n  Map<Integer, TestClass> actualMap = BeanUtils.mapByKey(\"id\", list);\n  \n  assertEquals(expectedMap, actualMap);\n}"
    ]
}
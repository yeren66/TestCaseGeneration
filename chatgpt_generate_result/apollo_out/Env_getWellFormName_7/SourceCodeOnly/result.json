{
    "project_name": "apollo",
    "file_name": "Env.java",
    "relative_path": "apollo/apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/environment/Env.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.portal.environment",
    "docstring": "/**\n   * add some change to environment name trim and to upper\n   *\n   * @param envName\n   * @return\n   */",
    "source_code": "\nprivate static String getWellFormName(String envName) {\n  if (StringUtils.isBlank(envName)) {\n    return \"\";\n  }\n\n  String envWellFormName = envName.trim().toUpperCase();\n\n  // special case for production in case of typo\n  if (\"PROD\".equals(envWellFormName)) {\n    return Env.PRO.name;\n  }\n\n  // special case that FAT & FWS should map to FAT\n  if (\"FWS\".equals(envWellFormName)) {\n    return Env.FAT.name;\n  }\n\n  return envWellFormName;\n}\n",
    "class_name": "Env",
    "method_name": "getWellFormName",
    "arguments": [
        "String envName"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    @Test\n    public void getWellFormNameTest() {\n        assertEquals(\"\", getWellFormName(\"\"));\n        assertEquals(\"PRO\", getWellFormName(\"PROD\"));\n        assertEquals(\"FAT\", getWellFormName(\"FWS\"));\n        assertEquals(\"DEV\", getWellFormName(\"DEV\"));\n    }\n}",
        "@Test\npublic void getWellFormNameTest() {\n    // Test empty string\n    assertEquals(\"\", getWellFormName(\"\"));\n\n    // Test envName = null\n    assertEquals(\"\", getWellFormName(null));\n    \n    // Test lowercase envName\n    assertEquals(\"STAGING\", getWellFormName(\"staging\"));\n\n    // Test uppercase envName\n    assertEquals(\"PRODUCTION\", getWellFormName(\"PRODUCTION\"));\n\n    // Test typo for PROD\n    assertEquals(\"PRODUCTION\", getWellFormName(\"prod\"));\n\n    // Test special case for FWS\n    assertEquals(\"FAT\", getWellFormName(\"FWS\"));\n\n    // Test random envName\n    assertEquals(\"RANDOM\", getWellFormName(\"RANDOM\"));\n}",
        "@Test\npublic void getWellFormNameTest() {\n    // Testing case when envName is empty\n    assertEquals(\"\", getWellFormName(\"\"));\n\n    // Testing case when envName is null\n    assertEquals(\"\", getWellFormName(null));\n\n    // Testing case when envName is \"prod\"\n    assertEquals(Env.PRO.name, getWellFormName(\"prod\"));\n\n    // Testing case when envName is \"fws\"\n    assertEquals(Env.FAT.name, getWellFormName(\"fws\"));\n\n    // Testing case when envName is \"UAT\"\n    assertEquals(\"UAT\", getWellFormName(\"UAT\"));\n\n    // Add more test cases here\n}",
        "@Test\npublic void getWellFormNameTest() {\n    assertEquals(\"\", Env.getWellFormName(\"\"));\n    assertEquals(\"PRO\", Env.getWellFormName(\"PROD\"));\n    assertEquals(\"FAT\", Env.getWellFormName(\"FWS\"));\n    assertEquals(\"DEV\", Env.getWellFormName(\"dev\"));\n}",
        "@Test\n    public void getWellFormNameTest() {\n        // Test case 1: blank env name\n        String result1 = Env.getWellFormName(\"\");\n        assertEquals(\"\", result1);\n\n        // Test case 2: valid env name\n        String result2 = Env.getWellFormName(\"dev\");\n        assertEquals(\"DEV\", result2);\n\n        // Test case 3: special case for production in case of typo\n        String result3 = Env.getWellFormName(\"prod\");\n        assertEquals(\"PRO\", result3);\n\n        // Test case 4: special case for FWS\n        String result4 = Env.getWellFormName(\"fws\");\n        assertEquals(\"FAT\", result4);\n    }",
        "@Test\npublic void getWellFormNameTest() {\n    String result1 = EnvTest.getWellFormName(\"\");\n    assertEquals(\"\", result1);\n    \n    String result2 = EnvTest.getWellFormName(\"prod\");\n    assertEquals(Env.PRO.name, result2);\n    \n    String result3 = EnvTest.getWellFormName(\"fws\");\n    assertEquals(Env.FAT.name, result3);\n    \n    String result4 = EnvTest.getWellFormName(\"test\");\n    assertEquals(\"TEST\", result4);\n}",
        "@Test\npublic void getWellFormNameTest() {\n  // Test case for when envName is blank\n  String blankEnvName = \"\";\n  String blankEnvWellFormName = Env.getWellFormName(blankEnvName);\n  assertEquals(\"\", blankEnvWellFormName);\n\n  // Test case for when envName is \"PROD\"\n  String prodEnvName = \"PROD\";\n  String prodEnvWellFormName = Env.getWellFormName(prodEnvName);\n  assertEquals(Env.PRO.name, prodEnvWellFormName);\n\n  // Test case for when envName is \"FWS\"\n  String fwsEnvName = \"FWS\";\n  String fwsEnvWellFormName = Env.getWellFormName(fwsEnvName);\n  assertEquals(Env.FAT.name, fwsEnvWellFormName);\n\n  // Test case for when envName is any other value\n  String otherEnvName = \"DEV\";\n  String otherEnvWellFormName = Env.getWellFormName(otherEnvName);\n  assertEquals(otherEnvName.trim().toUpperCase(), otherEnvWellFormName);\n}",
        "@Test\npublic void getWellFormNameTest() {\n    // Test case for blank input\n    assertEquals(\"\", getWellFormName(\"\"));\n    \n    // Test case for PROD\n    assertEquals(Env.PRO.name, getWellFormName(\"PROD\"));\n    \n    // Test case for FWS\n    assertEquals(Env.FAT.name, getWellFormName(\"FWS\"));\n    \n    // Test case for other inputs\n    assertEquals(\"OTHER\", getWellFormName(\"OTHER\"));\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    @Test\n    public void getWellFormNameTest() {\n        String envName = \"\";\n        String expected = \"\";\n        String actual = getWellFormName(envName);\n        assertEquals(expected, actual);\n\n        envName = \"prod\";\n        expected = Env.PRO.name;\n        actual = getWellFormName(envName);\n        assertEquals(expected, actual);\n\n        envName = \"fws\";\n        expected = Env.FAT.name;\n        actual = getWellFormName(envName);\n        assertEquals(expected, actual);\n\n        envName = \"uat\";\n        expected = \"UAT\";\n        actual = getWellFormName(envName);\n        assertEquals(expected, actual);\n    }\n}",
        "@Test\npublic void getWellFormNameTest() {\n    // Test case for blank input\n    String result1 = getWellFormName(\"\");\n    assertEquals(\"\", result1);\n\n    // Test case for normal input\n    String result2 = getWellFormName(\"DEV\");\n    assertEquals(\"DEV\", result2);\n\n    // Test case for special case \"PROD\"\n    String result3 = getWellFormName(\"PROD\");\n    assertEquals(\"PRO\", result3);\n\n    // Test case for special case \"FWS\"\n    String result4 = getWellFormName(\"FWS\");\n    assertEquals(\"FAT\", result4);\n}"
    ]
}
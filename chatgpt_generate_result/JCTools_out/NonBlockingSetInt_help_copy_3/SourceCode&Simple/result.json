{
    "project_name": "JCTools",
    "file_name": "NonBlockingSetInt.java",
    "relative_path": "JCTools/jctools-core/src/main/java/org/jctools/maps/NonBlockingSetInt.java",
    "execute_path": "JCTools",
    "package": "org.jctools.maps",
    "docstring": null,
    "source_code": "// Help any top-level NBSI to copy until completed.\n// Always return the _new version of *this* NBSI, in case we're nested.\nprivate NBSI help_copy() {\n  // Pick some words to help with - but only help copy the top-level NBSI.\n  // Nested NBSI waits until the top is done before we start helping.\n  NBSI top_nbsi = _non_blocking_set_int._nbsi;\n  final int HELP = 8;       // Tuning number: how much copy pain are we willing to inflict?\n  // We \"help\" by forcing individual bit indices to copy.  However, bits\n  // come in lumps of 64 per word, so we just advance the bit counter by 64's.\n  int idx = top_nbsi._copyIdx.getAndAdd(64*HELP);\n  for( int i=0; i<HELP; i++ ) {\n    int j = idx+i*64;\n    j %= (top_nbsi._bits.length<<6); // Limit, wrap to array size; means we retry indices\n    top_nbsi.help_copy_impl(j   );\n    top_nbsi.help_copy_impl(j+63); // Also force the nested-by-64 bit\n  }\n\n  // Top level guy ready to promote?\n  // Note: WE may not be the top-level guy!\n  if( top_nbsi._copyDone.get() == top_nbsi._sum_bits_length )\n    // One shot CAS to promote - it may fail since we are racing; others\n    // may promote as well\n    if( _non_blocking_set_int.CAS_nbsi( top_nbsi, top_nbsi._new ) ) {\n      //System.out.println(\"Promote at top level to size \"+(_non_blocking_set_int._nbsi._bits.length<<6));\n    }\n\n  // Return the new bitvector for 'fluid' programming style\n  return _new;\n}\n",
    "class_name": "NonBlockingSetInt",
    "method_name": "help_copy",
    "arguments": [],
    "generate_test": [
        "\n@Test\npublic void help_copyTest() {\n    NonBlockingSetInt nonBlockingSetInt = new NonBlockingSetInt();\n    NonBlockingSetInt.NBSI nbsi = new NonBlockingSetInt.NBSI(10, null, nonBlockingSetInt);\n    NonBlockingSetInt.NBSI mockedNbsi = Mockito.mock(NonBlockingSetInt.NBSI.class);\n\n    nbsi._non_blocking_set_int = nonBlockingSetInt;\n    nbsi._copyIdx = new AtomicInteger(0);\n    nbsi._bits = new long[1];\n    nbsi._copyDone = new AtomicInteger(64);\n\n    Mockito.when(mockedNbsi._copyIdx.getAndAdd(64 * 8)).thenReturn(0);\n    Mockito.when(mockedNbsi.help_copy_impl(0)).thenReturn(new NonBlockingSetInt.NBSI());\n    Mockito.when(mockedNbsi.help_copy_impl(63)).thenReturn(new NonBlockingSetInt.NBSI());\n\n    Mockito.when(mockedNbsi._copyDone.get()).thenReturn(64);\n\n    Mockito.when(nonBlockingSetInt.CAS_nbsi(Mockito.any(NonBlockingSetInt.NBSI.class), Mockito.any(NonBlockingSetInt.NBSI.class)))\n            .thenReturn(true);\n\n    nbsi.help_copy();\n\n    // Assert statements\n\n    Mockito.verify(mockedNbsi, Mockito.times(8)).help_copy_impl(Mockito.anyInt());\n    Mockito.verify(mockedNbsi, Mockito.times(1))._copyIdx.getAndAdd(64 * 8);\n    Mockito.verify(mockedNbsi._non_blocking_set_int, Mockito.times(1)).CAS_nbsi(nbsi, nbsi._new);\n}\n",
        "@Test\npublic void help_copyTest() {\n    NonBlockingSetInt nonBlockingSetInt = new NonBlockingSetInt();\n    NonBlockingSetInt.NBSI nbsi = nonBlockingSetInt.new NBSI(10, null, nonBlockingSetInt);\n\n    // Set up the initial state for the test\n    nbsi._copyIdx.set(0);\n    nbsi._copyDone.set(0);\n    nbsi._sum_bits_length = 64;\n\n    // Call the method being tested\n    nbsi.help_copy();\n\n    // Assert the expected results\n    assertEquals(64*8, nbsi._copyIdx.get());\n    assertEquals(0, nbsi._copyDone.get());\n    assertEquals(64, nbsi._bits.length);\n    assertEquals(nbsi._bits.length * 64, nonBlockingSetInt.length() * 64);\n}",
        "package org.jctools.maps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NonBlockingSetIntTest {\n    @Test\n    public void help_copyTest() {\n        NonBlockingSetInt setInt = new NonBlockingSetInt();\n        NonBlockingSetInt.NBSI nbsi = setInt.new NBSI(100, new ConcurrentAutoTable(), setInt);\n        \n        NonBlockingSetInt.NBSI result = nbsi.help_copy();\n        \n        // Assert the expected behavior of the help_copy method\n        assertNotNull(result); // Ensure the result is not null\n        // Add more assertions as needed\n    }\n}",
        "@Test\npublic void help_copyTest() {\n    NonBlockingSetInt setInt = new NonBlockingSetInt();\n    NonBlockingSetInt.NBSI nbsi = setInt.new NBSI(10, null, setInt);\n    NonBlockingSetInt.NBSI newNbsi = nbsi.help_copy();\n    assertNotNull(newNbsi);\n}",
        "@Test\npublic void help_copyTest() {\n    NonBlockingSetInt nbsi = new NonBlockingSetInt();\n    NonBlockingSetInt.NBSI nbsiObj = nbsi.new NBSI(16, null, nbsi);\n    NonBlockingSetInt.NBSI newNbsi = nbsiObj.help_copy();\n    assertNotNull(newNbsi);\n    // Add assertions for the expected behavior of the help_copy method\n    // and any other relevant assertions\n}",
        "@Test\n    public void help_copyTest() {\n        NonBlockingSetInt nonBlockingSetInt = new NonBlockingSetInt();\n        NBSI nbsi = new NBSI(100, new ConcurrentAutoTable(), nonBlockingSetInt);\n        NBSI newNbsi = nbsi.help_copy();\n        assertNotNull(newNbsi);\n        // Validate the new bitvector length\n        assertEquals(nbsi._bits.length << 6, newNbsi._bits.length << 6);\n        // Validate that the copy index is incremented by 64 * HELP\n        assertEquals(nbsi._copyIdx.get() + (64 * 8), newNbsi._copyIdx.get());\n        // Validate that the copyDone indicator is not updated until the copy is complete\n        assertEquals(nbsi._copyDone.get(), newNbsi._copyDone.get());\n        // Validate that the new bitvector is returned\n        assertEquals(newNbsi._new, nbsi._new);\n    }",
        "@Test\npublic void help_copyTest() {\n    NonBlockingSetInt nonBlockingSet = new NonBlockingSetInt();\n    NBSI nbsi = nonBlockingSet.new NBSI(10, null, nonBlockingSet);\n    NBSI newNbsi = nbsi.help_copy();\n    assertEquals(newNbsi._new, nonBlockingSet._new);\n}",
        "@Test\npublic void help_copyTest() {\n    NonBlockingSetInt nonBlockingSetInt = new NonBlockingSetInt();\n    NonBlockingSetInt.NBSI nbsi = nonBlockingSetInt.new NBSI(100, new ConcurrentAutoTable(), nonBlockingSetInt);\n    NBSI newNbsi = nbsi.help_copy();\n    assertEquals(newNbsi, nbsi._new);\n}",
        "@Test\npublic void help_copyTest() {\n    NonBlockingSetInt nonBlockingSetInt = new NonBlockingSetInt();\n    NonBlockingSetInt.NBSI nbsi = new NonBlockingSetInt.NBSI(10, null, nonBlockingSetInt);\n    \n    // Run help_copy() method\n    NonBlockingSetInt.NBSI newNbsi = nbsi.help_copy();\n    \n    // Assert that the returned newNbsi is not null\n    assertNotNull(newNbsi);\n}",
        "@Test\npublic void help_copyTest() {\n    NonBlockingSetInt set = new NonBlockingSetInt();\n    NonBlockingSetInt.NBSI nbsi = set.new NBSI(10, null, set);\n    NonBlockingSetInt.NBSI newNbsi = nbsi.help_copy();\n    assertNotNull(newNbsi);\n}"
    ]
}
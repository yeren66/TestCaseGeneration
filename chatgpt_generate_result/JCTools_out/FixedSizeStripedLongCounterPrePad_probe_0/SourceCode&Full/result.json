{
    "project_name": "JCTools",
    "file_name": "FixedSizeStripedLongCounter.java",
    "relative_path": "JCTools/jctools-core/src/main/java/org/jctools/counters/FixedSizeStripedLongCounter.java",
    "execute_path": "JCTools",
    "package": "org.jctools.counters",
    "docstring": "/**\n     * Returns the probe value for the current thread.\n     * If target JDK version is 7 or higher, than ThreadLocalRandom-specific\n     * value will be used, xorshift with thread id otherwise.\n     */",
    "source_code": "\nprivate int probe() {\n    // Fast path for reliable well-distributed probe, available from JDK 7+.\n    // As long as PROBE is final static this branch will be constant folded\n    // (i.e removed).\n    if (PROBE != -1) {\n        int probe;\n        if ((probe = UNSAFE.getInt(Thread.currentThread(), PROBE)) == 0) {\n            ThreadLocalRandom.current(); // force initialization\n            probe = UNSAFE.getInt(Thread.currentThread(), PROBE);\n        }\n        return probe;\n    }\n\n    /*\n     * Else use much worse (for values distribution) method:\n     * Mix thread id with golden ratio and then xorshift it\n     * to spread consecutive ids (see Knuth multiplicative method as reference).\n     */\n    int probe = (int) ((Thread.currentThread().getId() * 0x9e3779b9) & Integer.MAX_VALUE);\n    // xorshift\n    probe ^= probe << 13;\n    probe ^= probe >>> 17;\n    probe ^= probe << 5;\n    return probe;\n}\n\n",
    "class_name": "FixedSizeStripedLongCounterPrePad",
    "method_name": "probe",
    "arguments": [],
    "generate_test": [
        "package org.jctools.counters;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport java.lang.reflect.Field;\n\npublic class FixedSizeStripedLongCounterPrePadTest {\n    @Test\n    public void probeTest() {\n        FixedSizeStripedLongCounter fixedSizeStripedLongCounter = new FixedSizeStripedLongCounter(16) {\n            @Override\n            protected void inc(long[] cells, long offset, long value) {\n                // implementation for test    \n            }\n\n            @Override\n            protected long getAndReset(long[] cells, long offset) {\n                // implementation for test\n                return 0L;\n            }\n        };\n        \n        try {\n            Field probeField = fixedSizeStripedLongCounter.getClass().getDeclaredField(\"PROBE\");\n            probeField.setAccessible(true);\n            probeField.set(fixedSizeStripedLongCounter, -1L); // set PROBE to -1 to test the else branch of the probe() method\n        } catch (NoSuchFieldException | IllegalAccessException e) {\n            e.printStackTrace();\n            Assertions.fail(\"Failed to set PROBE field\");\n        }\n\n        int probeResult = fixedSizeStripedLongCounter.probe(); // call the probe() method\n        Assertions.assertEquals(10, probeResult);\n    }\n}",
        "@Test\npublic void probeTest() {\n    FixedSizeStripedLongCounter counter = new FixedSizeStripedLongCounter(8);\n    int probe = counter.probe();\n    assertNotNull(probe); // Check if probe is not null\n    assertEquals(probe, counter.probe()); // Check if probe is consistent\n}",
        "package org.jctools.counters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FixedSizeStripedLongCounterPrePadTest {\n    @Test\n    public void probeTest() {\n        FixedSizeStripedLongCounter counter = new FixedSizeStripedLongCounter(10);\n        assertEquals(10, counter.probe());\n    }\n}",
        "@Test\npublic void probeTest() {\n    FixedSizeStripedLongCounterPrePad counter = new FixedSizeStripedLongCounterPrePad();\n    int probe = counter.probe();\n    assertEquals(<EXPECTED VALUE>, probe);\n}",
        "@Test\npublic void probeTest() {\n    FixedSizeStripedLongCounterPrePad counter = new FixedSizeStripedLongCounterPrePad() {};\n\n    int probe = counter.probe();\n    \n    assertNotNull(probe);\n    assertTrue(probe >= 0);\n}",
        "@Test\npublic void probeTest() {\n    FixedSizeStripedLongCounter counter = new FixedSizeStripedLongCounter(4);\n    int probe = counter.probe();\n    assertTrue(probe >= 0);\n}",
        "package org.jctools.counters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FixedSizeStripedLongCounterPrePadTest {\n    @Test\n    public void probeTest() {\n        FixedSizeStripedLongCounter counter = new FixedSizeStripedLongCounter(16) {\n            @Override\n            protected void inc(long[] cells, long offset, long value) {\n                // do nothing\n            }\n\n            @Override\n            protected long getAndReset(long[] cells, long offset) {\n                return 0L;\n            }\n        };\n        \n        int probe = counter.probe();\n        assertNotNull(probe);\n    }\n}",
        "assertEquals(1, new FixedSizeStripedLongCounter(1).probe());",
        "@Test\npublic void probeTest() {\n    FixedSizeStripedLongCounter counter = new FixedSizeStripedLongCounter(16);\n    int probe = counter.probe();\n    assertNotNull(probe);\n    assertEquals(probe, counter.probe());\n}",
        "@Test\npublic void probeTest() {\n    FixedSizeStripedLongCounter stripedCounter = new FixedSizeStripedLongCounter(16); // Create an instance of FixedSizeStripedLongCounter with stripesCount 16\n    int result = stripedCounter.probe(); // Call the probe() method\n    assertEquals(expectedResult, result); // Assert the expected result\n}"
    ]
}
{
    "project_name": "JCTools",
    "file_name": "NonBlockingSetInt.java",
    "relative_path": "JCTools/jctools-core/src/main/java/org/jctools/maps/NonBlockingSetInt.java",
    "execute_path": "JCTools",
    "package": "org.jctools.maps",
    "docstring": null,
    "source_code": "// Help copy this one word.  State Machine.\n// (1) If not \"made immutable\" in the old array, set the sign bit to make\n//     it immutable.\n// (2) If non-zero in old array & zero in new, CAS new from 0 to copy-of-old\n// (3) If non-zero in old array & non-zero in new, CAS old to zero\n// (4) Zero in old, new is valid\n// At this point, old should be immutable-zero & new has a copy of bits\nprivate NBSI help_copy_impl( int i ) {\n  // Handle every 64th bit via using a nested array\n  NBSI old = this;          // The bit array being copied from\n  NBSI nnn = _new;          // The bit array being copied to\n  if( nnn == null ) return this; // Promoted already\n  int j = i;                // The bit index being added\n  while( (j&63) == 63 ) {   // Bit 64? (low 6 bits are all set)\n    old = old._nbsi64;      // Recurse\n    nnn = nnn._nbsi64;      // Recurse\n    j = j>>6;               // Strip off low 6 bits (all set)\n  }\n\n  // Transit from state 1: word is not immutable yet\n  // Immutable is in bit 63, the sign bit.\n  long bits = old._bits[j>>6];\n  while( bits >= 0 ) {      // Still in state (1)?\n    long oldbits = bits;\n    bits |= mask(63);       // Target state of bits: sign-bit means immutable\n    if( old.CAS( j>>6, oldbits, bits ) ) {\n      if( oldbits == 0 ) _copyDone.addAndGet(1);\n      break;                // Success - old array word is now immutable\n    }\n    bits = old._bits[j>>6]; // Retry if CAS failed\n  }\n\n  // Transit from state 2: non-zero in old and zero in new\n  if( bits != mask(63) ) {  // Non-zero in old?\n    long new_bits = nnn._bits[j>>6];\n    if( new_bits == 0 ) {   // New array is still zero\n      new_bits = bits & ~mask(63); // Desired new value: a mutable copy of bits\n      // One-shot CAS attempt, no loop, from 0 to non-zero.\n      // If it fails, somebody else did the copy for us\n      if( !nnn.CAS( j>>6, 0, new_bits ) )\n        new_bits = nnn._bits[j>>6]; // Since it failed, get the new value\n      assert new_bits != 0;\n    }\n\n    // Transit from state 3: non-zero in old and non-zero in new\n    // One-shot CAS attempt, no loop, from non-zero to 0 (but immutable)\n    if( old.CAS( j>>6, bits, mask(63) ) )\n      _copyDone.addAndGet(1); // One more word finished copying\n  }\n\n  // Now in state 4: zero (and immutable) in old\n\n  // Return the self bitvector for 'fluid' programming style\n  return this;\n}\n",
    "class_name": "NonBlockingSetInt",
    "method_name": "help_copy_impl",
    "arguments": [
        "int i"
    ],
    "generate_test": [
        "package org.jctools.maps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NonBlockingSetIntTest {\n    @Test\n    public void help_copy_implTest() {\n        NBSI nbsi = new NBSI();\n        NBSI old = new NBSI();\n        NBSI nnn = new NBSI();\n        nbsi._bits[0] = 1L;\n        old._bits[0] = 1L;\n        nnn._bits[0] = 0L;\n\n        NBSI result = nbsi.help_copy_impl(0);\n\n        assertEquals(nbsi, result);\n    }\n}",
        "// JUNIT Test case:\npackage org.jctools.maps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NonBlockingSetIntTest {\n    @Test\n    public void help_copy_implTest() {\n        NonBlockingSetInt nbsi = new NonBlockingSetInt();\n      \n        // Create test data\n        nbsi._bits = new long[10];\n        nbsi._bits[0] = 123456;\n        nbsi._bits[1] = 987654;\n      \n        NBSI old = new NBSI();\n        old._bits = new long[10];\n        old._bits[0] = 111111;\n        old._bits[1] = 222222;\n      \n        NBSI nnn = new NBSI();\n        nnn._bits = new long[10];\n        nnn._bits[0] = 0;\n        nnn._bits[1] = 555555;\n      \n        // Call the method under test\n        NBSI result = nbsi.help_copy_impl(0);\n      \n        // Verify the result\n        assertNotNull(result);\n    }\n}",
        "package org.jctools.maps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NonBlockingSetIntTest {\n    @Test\n    public void help_copy_implTest() {\n        NBSI nbsi = new NBSI(); // Create an instance of NBSI\n        NBSI result = nbsi.help_copy_impl(0); // Call the help_copy_impl method with an index of 0\n        assertNotNull(result); // Assert that the result is not null\n        // Additional assertions can be added to test specific behavior or conditions\n    }\n}",
        "package org.jctools.maps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NonBlockingSetIntTest {\n    @Test\n    public void help_copy_implTest() {\n        NBSI nbsi = new NBSI();\n        NBSI result = nbsi.help_copy_impl(5);\n        \n        // Assert statements\n        assertNotNull(result);\n        assertEquals(nbsi, result);\n    }\n}",
        "package org.jctools.maps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NonBlockingSetIntTest {\n    @Test\n    public void help_copy_implTest() {\n        NBSI nbsi = new NBSI();\n        NBSI old = new NBSI();\n        NBSI nnn = new NBSI();\n        \n        // Partial Unit test\n        nbsi.help_copy_impl(1);\n        \n        // Assertion\n        <FILL>\n    }\n}",
        "package org.jctools.maps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NonBlockingSetIntTest {\n    @Test\n    public void help_copy_implTest() {\n        NBSI nbsi = new NBSI(); // Create an instance of NBSI to test\n        NBSI result = nbsi.help_copy_impl(3); // Call the method being tested\n        // Add assertions to verify the expected behavior of the method\n        \n        // Assert that the result of the method call is not null\n        assertNotNull(result);\n        \n        // Add more assertions to verify the desired behavior of the method\n        // For example, verifying specific properties of the result object\n        \n    }\n}",
        "@Test\npublic void help_copy_implTest() {\n    // Create instances of NBSI for testing\n    NBSI old = new NBSI();\n    NBSI nnn = new NBSI();\n    \n    // Set values for testing\n    old._bits = new long[]{122, 243, 13, 0}; // set values for old bits\n    nnn._bits = new long[]{0, 0, 0, 0}; // set values for new bits\n    old._nbsi64 = new NBSI();\n    nnn._nbsi64 = new NBSI();\n\n    int i = 0; // set value for i\n    \n    // Perform help_copy_impl() method\n    NBSI result = help_copy_impl(i);\n\n    // Verify the result\n    assertEquals(this, result);\n    assertEquals(1, _copyDone.get());\n}",
        "@Test\npublic void help_copy_implTest() {\n  NonBlockingSetIntTest testObj = new NonBlockingSetIntTest();\n  NBSI nbsiObj = new NBSI();\n  nbsiObj._bits = new long[10]; // Assuming the array size is 10\n  \n  // Test case 1: Transition from state 1\n  \n  // Set the non-immutable state in old array\n  nbsiObj._bits[1] = 5;\n  \n  // Call the help_copy_impl() method\n  NBSI result = testObj.help_copy_impl(nbsiObj, 1);\n  \n  // Verify the transition from state 1 to state 2\n  assertEquals(0, result._bits[1]);\n  assertEquals(5, result._new._bits[1]);\n  \n  // Test case 2: Transition from state 2\n  \n  // Set the non-zero value in old and new arrays\n  nbsiObj._bits[2] = 10;\n  nbsiObj._new._bits[2] = 0;\n  \n  // Call the help_copy_impl() method\n  result = testObj.help_copy_impl(nbsiObj, 2);\n  \n  // Verify the transition from state 2 to state 3\n  assertEquals(0, result._new._bits[2]);\n  assertEquals(0, result._bits[2]);\n  \n  // Test case 3: Transition from state 3\n  \n  // Set the non-zero value in old and new arrays\n  nbsiObj._bits[3] = 15;\n  nbsiObj._new._bits[3] = 20;\n  \n  // Call the help_copy_impl() method\n  result = testObj.help_copy_impl(nbsiObj, 3);\n  \n  // Verify the transition from state 3 to state 4\n  assertEquals(0, result._bits[3]);\n  assertEquals(20, result._new._bits[3]);\n  \n  // Test case 4: Transition from state 4\n  \n  // Set the zero value in old array\n  nbsiObj._bits[4] = 0;\n  \n  // Call the help_copy_impl() method\n  result = testObj.help_copy_impl(nbsiObj, 4);\n  \n  // Verify the state 4\n  assertEquals(0, result._bits[4]);\n  \n}",
        "@Test\npublic void help_copy_implTest() {\n    NonBlockingSetIntTest obj = new NonBlockingSetIntTest();\n    NBSI nbsi = obj.new NBSI();\n    NBSI result = nbsi.help_copy_impl(0);\n    assertNotNull(result);\n}",
        "@Test\npublic void help_copy_implTest() {\n    NBSI old = new NBSI();\n    NBSI nnn = new NBSI();\n    \n    // Setting up the initial state of the old and new arrays\n    long[] old_bits = new long[10];\n    old_bits[3] = 1234L; // Non-zero value in old array\n    old._bits = old_bits;\n    \n    long[] new_bits = new long[10];\n    nnn._bits = new_bits;\n    \n    // Call the help_copy_impl() method\n    NBSI result = help_copy_impl(3, old, nnn);\n    \n    // Assert the expected results after the method is called\n    assertEquals(old, result);\n    assertEquals(1, result._copyDone.get());\n    assertEquals(1234L & ~mask(63), nnn._bits[3]);\n}"
    ]
}
{
    "project_name": "commons-math",
    "file_name": "AccurateMathCalc.java",
    "relative_path": "commons-math/commons-math-core/src/main/java/org/apache/commons/math4/core/jdkmath/AccurateMathCalc.java",
    "execute_path": "commons-math/commons-math-core",
    "package": "org.apache.commons.math4.core.jdkmath",
    "docstring": "/**\n     * Print an array.\n     * @param out text output stream where output should be printed\n     * @param name array name\n     * @param expectedLen expected length of the array\n     * @param array2d array data\n     */",
    "source_code": "\nstatic void printarray(PrintStream out, String name, int expectedLen, double[][] array2d) {\n    out.println(name);\n    checkLen(expectedLen, array2d.length);\n    out.println(TABLE_START_DECL + \" \");\n    int i = 0;\n    for (double[] array : array2d) { // \"double array[]\" causes PMD parsing error\n        out.print(\"        {\");\n        for (double d : array) { // assume inner array has very few entries\n            out.printf(\"%-25.25s\", format(d)); // multiple entries per line\n        }\n        out.println(\"}, // \" + i++);\n    }\n    out.println(TABLE_END_DECL);\n}\n",
    "class_name": "AccurateMathCalc",
    "method_name": "printarray",
    "arguments": [
        "PrintStream out",
        "String name",
        "int expectedLen",
        "double[][] array2d"
    ],
    "generate_test": [
        "@Test\npublic void printarrayTest() {\n    PrintStream out = System.out;\n    String name = \"testArray\";\n    int expectedLen = 3;\n    double[][] array2d = {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}, {7.0, 8.0, 9.0}};\n    \n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream ps = new PrintStream(baos);\n    System.setOut(ps);\n    \n    AccurateMathCalc.printarray(System.out, name, expectedLen, array2d);\n    \n    System.out.flush();\n    System.setOut(out);\n    \n    String expectedOutput = \"testArray\\n\" +\n                            \"START_DECL\\n\" +\n                            \"        {1.000000000000        ,2.000000000000        ,3.000000000000        }, // 0\\n\" +\n                            \"        {4.000000000000        ,5.000000000000        ,6.000000000000        }, // 1\\n\" +\n                            \"        {7.000000000000        ,8.000000000000        ,9.000000000000        }, // 2\\n\" +\n                            \"END_DECL\\n\";\n    \n    String actualOutput = baos.toString();\n    \n    assertEquals(expectedOutput, actualOutput);\n}\n",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void printarrayTest() {\n        // Create a ByteArrayOutputStream to capture the printed output\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        PrintStream printStream = new PrintStream(outputStream);\n        \n        // Call the printarray method with the necessary parameters\n        AccurateMathCalc.printarray(printStream, \"Array2D\", 3, new double[][] {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}});\n        \n        // Get the printed output from the ByteArrayOutputStream\n        String printedOutput = outputStream.toString();\n        \n        // Verify the printed output matches the expected output\n        String expectedOutput = \"Array2D\\n\" +\n                                \"                        1.0                      2.0                      3.0}, // 0\\n\" +\n                                \"                        4.0                      5.0                      6.0}, // 1\\n\";\n        assertEquals(expectedOutput, printedOutput);\n    }\n}",
        "@Test\npublic void printarrayTest() {\n    PrintStream out = System.out;\n    String name = \"testArray\";\n    int expectedLen = 5;\n    double[][] array2d = {\n            {1.5, 2.7, 3.9},\n            {4.2, 5.6, 6.8},\n            {7.1, 8.4, 9.6},\n            {10.9, 11.2, 12.5},\n            {13.7, 14.9, 15.3}\n    };\n\n    AccurateMathCalc.printarray(out, name, expectedLen, array2d);\n}\n",
        "@Test\npublic void printarrayTest() {\n    PrintStream out = System.out;\n    String name = \"array2d\";\n    int expectedLen = 3;\n    double[][] array2d = {\n        {1.0, 2.0, 3.0},\n        {4.0, 5.0, 6.0},\n        {7.0, 8.0, 9.0}\n    };\n    \n    AccurateMathCalc.printarray(out, name, expectedLen, array2d);\n    <FILL>\n}\n",
        "@Test\npublic void printarrayTest() {\n    // Create a ByteArrayOutputStream to capture the output\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream out = new PrintStream(baos);\n    \n    // Set up test data\n    String name = \"Array\";\n    int expectedLen = 3;\n    double[][] array2d = {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}, {7.0, 8.0, 9.0}};\n\n    // Call the method under test\n    AccurateMathCalc.printarray(out, name, expectedLen, array2d);\n    \n    // Verify the output\n    String expectedOutput = \"Array\\n\" +\n                            \"   {\\n\" +\n                            \"        1.0                    2.0                    3.0                  }, // 0\\n\" +\n                            \"        4.0                    5.0                    6.0                  }, // 1\\n\" +\n                            \"        7.0                    8.0                    9.0                  }, // 2\\n\" +\n                            \"   }\\n\";\n    assertEquals(expectedOutput, baos.toString());\n}",
        "@BeforeEach\npublic void setUp() {\n    System.out.println(\"AccurateMathCalcTest.printarrayTest\");\n}\n\n@Test\npublic void printarrayTest() {\n    // Arrange\n    ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    System.setOut(new PrintStream(outContent));\n    \n    String name = \"Test Array\";\n    int expectedLen = 3;\n    double[][] array2d = { {1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}, {7.0, 8.0, 9.0} };\n    \n    // Act\n    AccurateMathCalc.printarray(System.out, name, expectedLen, array2d);\n\n    // Assert\n    String expectedOutput = \"Test Array\\n\" + \n                            \"                  1.0                    2.0                    3.0}, // 0\\n\" +\n                            \"                  4.0                    5.0                    6.0}, // 1\\n\" +\n                            \"                  7.0                    8.0                    9.0}, // 2\\n\";\n    assertEquals(expectedOutput, outContent.toString());\n}",
        "@Test\npublic void printarrayTest() {\n    PrintStream out = System.out;\n    String name = \"testArray\";\n    int expectedLen = 3;\n    double[][] array2d = {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}, {7.0, 8.0, 9.0}};\n    \n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream ps = new PrintStream(baos);\n    System.setOut(ps);\n    \n    AccurateMathCalc.printarray(System.out, name, expectedLen, array2d);\n    \n    System.setOut(out);\n    \n    String expectedOutput = \"testArray\\n\" +\n            \"  {\\n\" +\n            \"        1.0                     2.0                     3.0                    , // 0\\n\" +\n            \"        4.0                     5.0                     6.0                    , // 1\\n\" +\n            \"        7.0                     8.0                     9.0                    , // 2\\n\" +\n            \"  }\\n\";\n    \n    assertEquals(expectedOutput, baos.toString());\n}",
        "@Test\npublic void printarrayTest() {\n    PrintStream out = System.out;\n    String name = \"array2d\";\n    int expectedLen = 3;\n    double[][] array2d = new double[][]{{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}, {7.0, 8.0, 9.0}};\n    \n    AccurateMathCalc.printarray(out, name, expectedLen, array2d);\n    \n    // Assertions for the expected output\n    // <FILL>\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void printarrayTest() {\n        // Create a stream to capture the printed output\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        PrintStream ps = new PrintStream(baos);\n        \n        // Define the test inputs\n        String name = \"testArray\";\n        int expectedLen = 3;\n        double[][] array2d = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n        \n        // Call the method being tested\n        AccurateMathCalc.printarray(ps, name, expectedLen, array2d);\n        \n        // Check the printed output\n        String printedOutput = baos.toString();\n        String expectedOutput = \"testArray\\n\" +\n                                \"[        1.0                 2.0                 3.0                 }, // 0\\n\" +\n                                \"[        4.0                 5.0                 6.0                 }, // 1\\n\" +\n                                \"[        7.0                 8.0                 9.0                 }, // 2\\n\";\n        assertEquals(expectedOutput, printedOutput);\n    }\n}",
        "@Test\npublic void printarrayTest() {\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    PrintStream printStream = new PrintStream(outputStream);\n    \n    double[][] array2d = new double[][] {\n        { 1.0, 2.0, 3.0 },\n        { 4.0, 5.0, 6.0 },\n        { 7.0, 8.0, 9.0 }\n    };\n    \n    AccurateMathCalc.printarray(printStream, \"Array\", 3, array2d);\n\n    String expectedOutput = \"Array\\n\" +\n        \"                            1.0                     2.0                     3.0}, // 0\\n\" +\n        \"                            4.0                     5.0                     6.0}, // 1\\n\" +\n        \"                            7.0                     8.0                     9.0}, // 2\\n\" +\n        \"                        \";\n    \n    assertEquals(expectedOutput, outputStream.toString());\n}"
    ]
}
{
    "project_name": "commons-math",
    "file_name": "AccurateMathCalc.java",
    "relative_path": "commons-math/commons-math-core/src/main/java/org/apache/commons/math4/core/jdkmath/AccurateMathCalc.java",
    "execute_path": "commons-math/commons-math-core",
    "package": "org.apache.commons.math4.core.jdkmath",
    "docstring": "/**\n     * Print an array.\n     * @param out text output stream where output should be printed\n     * @param name array name\n     * @param expectedLen expected length of the array\n     * @param array2d array data\n     */",
    "source_code": "\nstatic void printarray(PrintStream out, String name, int expectedLen, double[][] array2d) {\n    out.println(name);\n    checkLen(expectedLen, array2d.length);\n    out.println(TABLE_START_DECL + \" \");\n    int i = 0;\n    for (double[] array : array2d) { // \"double array[]\" causes PMD parsing error\n        out.print(\"        {\");\n        for (double d : array) { // assume inner array has very few entries\n            out.printf(\"%-25.25s\", format(d)); // multiple entries per line\n        }\n        out.println(\"}, // \" + i++);\n    }\n    out.println(TABLE_END_DECL);\n}\n",
    "class_name": "AccurateMathCalc",
    "method_name": "printarray",
    "arguments": [
        "PrintStream out",
        "String name",
        "int expectedLen",
        "double[][] array2d"
    ],
    "generate_test": [
        "@Test\npublic void printarrayTest() {\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    PrintStream printStream = new PrintStream(outputStream);\n    String expectedOutput = \"name\" + System.lineSeparator() +\n            \"     \" + System.lineSeparator() +\n            \"        { } // 0\";\n    \n    double[][] array2d = new double[][]{{}};\n    printarray(printStream, \"name\", 1, array2d);\n    \n    assertEquals(expectedOutput, outputStream.toString());\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void printarrayTest() {\n        // Arrange\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n        \n        // Create test data\n        int expectedLen = 2;\n        double[][] array2d = {{1.1, 2.2, 3.3}, {4.4, 5.5, 6.6}};\n        \n        // Act\n        AccurateMathCalc.printarray(System.out, \"testArray\", expectedLen, array2d);\n        \n        // Assert\n        String expectedOutput = \"testArray\\n\" +\n                                \"      [\\n\" +\n                                \"        1.1                    2.2                    3.3                    , // 0\\n\" +\n                                \"        4.4                    5.5                    6.6                    , // 1\\n\" +\n                                \"      ]\\n\";\n        assertEquals(expectedOutput, outContent.toString());\n    }\n}",
        "@Test\npublic void printarrayTest() {\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    PrintStream printStream = new PrintStream(outputStream);\n\n    String name = \"array\";\n    int expectedLen = 3;\n    double[][] array2d = { {1.1, 2.2, 3.3}, {4.4, 5.5, 6.6}, {7.7, 8.8, 9.9} };\n\n    AccurateMathCalc.printarray(printStream, name, expectedLen, array2d);\n\n    String expectedOutput = \"array\\n\" +\n                           \"[                  1.1][                  2.2][                  3.3], // 0\\n\" +\n                           \"[                  4.4][                  5.5][                  6.6], // 1\\n\" +\n                           \"[                  7.7][                  8.8][                  9.9], // 2\\n\" +\n                           \"}\\n\";\n\n    assertEquals(expectedOutput, outputStream.toString());\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void printarrayTest() {\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n        \n        // Test data\n        int expectedLen = 3;\n        double[][] array2d = {{1.1, 2.2, 3.3}, {4.4, 5.5, 6.6}, {7.7, 8.8, 9.9}};\n        \n        printarray(System.out, \"Test Array\", expectedLen, array2d);\n        String expectedOutput = \"Test Array\\n\" +\n                                \"    {1.1                  , 2.2                  , 3.3                  }, // 0\\n\" +\n                                \"    {4.4                  , 5.5                  , 6.6                  }, // 1\\n\" +\n                                \"    {7.7                  , 8.8                  , 9.9                  }, // 2\\n\";\n        String actualOutput = outContent.toString();\n        \n        assertEquals(expectedOutput, actualOutput);\n    }\n}",
        "@Test\npublic void printarrayTest() {\n    PrintStream out = System.out;\n    String name = \"testArray\";\n    int expectedLen = 3;\n    double[][] array2d = { {1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}, {7.0, 8.0, 9.0} };\n\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream ps = new PrintStream(baos);\n    System.setOut(ps);\n    \n    AccurateMathCalc.printarray(out, name, expectedLen, array2d);\n    \n    String expectedOutput = \"testArray\\r\\n\" +\n                            \" |\\r\\n\" +\n                            \"        {1.0                     , 2.0                     , 3.0                     }, // 0\\r\\n\" +\n                            \"        {4.0                     , 5.0                     , 6.0                     }, // 1\\r\\n\" +\n                            \"        {7.0                     , 8.0                     , 9.0                     }, // 2\\r\\n\" +\n                            \"|\";\n    \n    assertEquals(expectedOutput, baos.toString());\n}",
        "@Test\npublic void printarrayTest() {\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    PrintStream printStream = new PrintStream(outputStream);\n\n    String name = \"array2d\";\n    int expectedLen = 3;\n    double[][] array2d = {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}, {7.0, 8.0, 9.0}};\n\n    AccurateMathCalc.printarray(printStream, name, expectedLen, array2d);\n\n    String expectedOutput = \"array2d\\n\" +\n            \"        {1.0                  2.0                  3.0                  }, // 0\\n\" +\n            \"        {4.0                  5.0                  6.0                  }, // 1\\n\" +\n            \"        {7.0                  8.0                  9.0                  }, // 2\\n\" +\n            \"    \";\n            \n    assertEquals(expectedOutput, outputStream.toString());\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\npublic class AccurateMathCalcTest {\n    \n    @Test\n    public void printarrayTest() {\n        // Create a ByteArrayOutputStream to capture the output\n        ByteArrayOutputStream output = new ByteArrayOutputStream();\n        PrintStream printStream = new PrintStream(output);\n        \n        // Call the printarray method and pass the ByteArrayOutputStream as the output stream\n        printarray(printStream, \"Array\", 3, new double[][]{{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}});\n        \n        // Convert the output to a string\n        String expectedOutput = output.toString();\n        \n        // Assert that the expected output matches the actual output\n        assertEquals(\"Array\\n\" +\n                \"Declare start\\n\" +\n                \"        {1.0                     2.0                     3.0                     }, // 0\\n\" +\n                \"        {4.0                     5.0                     6.0                     }, // 1\\n\" +\n                \"Declare end\\n\", expectedOutput);\n    }\n}",
        "@Test\npublic void printarrayTest() {\n    double[][] array2d = {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}};\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    PrintStream printStream = new PrintStream(outputStream);\n    printarray(printStream, \"Test Array\", 2, array2d);\n    String expectedOutput = \"Test Array\\n\" +\n                            \"2\\n\" +\n                            \"{1.0, 2.0, 3.0}, // 0\\n\" +\n                            \"{4.0, 5.0, 6.0}, // 1\\n\" +\n                            \"\\n\";\n    assertEquals(expectedOutput, outputStream.toString());\n}",
        "@Test\npublic void printarrayTest() {\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    PrintStream printStream = new PrintStream(outputStream);\n    \n    String name = \"testArray\";\n    int expectedLen = 3;\n    double[][] array2d = {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}, {7.0, 8.0, 9.0}};\n\n    printarray(printStream, name, expectedLen, array2d);\n\n    String expectedOutput = \"testArray\\n\" +\n                            \"        {1.0000000000000000000000 2.0000000000000000000000 3.0000000000000000000000}, // 0\\n\" +\n                            \"        {4.0000000000000000000000 5.0000000000000000000000 6.0000000000000000000000}, // 1\\n\" +\n                            \"        {7.0000000000000000000000 8.0000000000000000000000 9.0000000000000000000000}, // 2\\n\";\n    \n    assertEquals(expectedOutput, outputStream.toString());\n}",
        "@Test\n    public void printarrayTest() {\n        ByteArrayOutputStream output = new ByteArrayOutputStream();\n        PrintStream printStream = new PrintStream(output);\n        double[][] array2d = {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}, {7.0, 8.0, 9.0}};\n        String name = \"array2d\";\n        int expectedLen = array2d.length;\n\n        AccurateMathCalc.printarray(printStream, name, expectedLen, array2d);\n        printStream.close();\n        \n        String expectedOutput = \"array2d\\n\" +\n                \"    {\\n\" +\n                \"        1.0                  2.0                  3.0                  \\n\" +\n                \"        4.0                  5.0                  6.0                  \\n\" +\n                \"        7.0                  8.0                  9.0                  \\n\" +\n                \"    }, // 0\\n\" +\n                \"}\\n\";\n\n        assertEquals(expectedOutput, output.toString());\n    }"
    ]
}
{
    "project_name": "commons-math",
    "file_name": "AccurateMathCalc.java",
    "relative_path": "commons-math/commons-math-core/src/main/java/org/apache/commons/math4/core/jdkmath/AccurateMathCalc.java",
    "execute_path": "commons-math/commons-math-core",
    "package": "org.apache.commons.math4.core.jdkmath",
    "docstring": "/** Compute the reciprocal of in.  Use the following algorithm.\n     *  in = c + d.\n     *  want to find x + y such that x+y = 1/(c+d) and x is much\n     *  larger than y and x has several zero bits on the right.\n     *\n     *  Set b = 1/(2^22),  a = 1 - b.  Thus (a+b) = 1.\n     *  Use following identity to compute (a+b)/(c+d)\n     *\n     *  (a+b)/(c+d)  =   a/c   +    (bc - ad) / (c^2 + cd)\n     *  set x = a/c  and y = (bc - ad) / (c^2 + cd)\n     *  This will be close to the right answer, but there will be\n     *  some rounding in the calculation of X.  So by carefully\n     *  computing 1 - (c+d)(x+y) we can compute an error and\n     *  add that back in.   This is done carefully so that terms\n     *  of similar size are subtracted first.\n     *  @param in initial number, in split form\n     *  @param result placeholder where to put the result\n     */",
    "source_code": "\nstatic void splitReciprocal(final double[] in, final double[] result) {\n    final double b = 1.0 / 4194304.0;\n    final double a = 1.0 - b;\n\n    if (in[0] == 0.0) {\n        in[0] = in[1];\n        in[1] = 0.0;\n    }\n\n    result[0] = a / in[0];\n    result[1] = (b * in[0] - a * in[1]) / (in[0] * in[0] + in[0] * in[1]);\n\n    if (result[1] != result[1]) { // can happen if result[1] is NAN\n        result[1] = 0.0;\n    }\n\n    /* Resplit */\n    resplit(result);\n\n    for (int i = 0; i < 2; i++) {\n        /* this may be overkill, probably once is enough */\n        double err = 1.0 - result[0] * in[0] - result[0] * in[1] -\n            result[1] * in[0] - result[1] * in[1];\n        /*err = 1.0 - err; */\n        err *= result[0] + result[1];\n        /*printf(\"err = %16e\\n\", err); */\n        result[1] += err;\n    }\n}\n",
    "class_name": "AccurateMathCalc",
    "method_name": "splitReciprocal",
    "arguments": [
        "double[] in",
        "double[] result"
    ],
    "generate_test": [
        "@Test\n    public void splitReciprocalTest() {\n        double[] in = {2.0, 3.0};\n        double[] expectedResult = {0.5, -0.75}; \n        \n        double[] result = new double[2];\n        AccurateMathCalc.splitReciprocal(in, result);\n        \n        assertArrayEquals(expectedResult, result, 1e-15);\n    }",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void splitReciprocalTest() {\n        double[] in = {2.0, 3.0}; // Input array\n        double[] expected = new double[2]; // Expected output array\n        \n        // Expected output values for the given inputs\n        expected[0] = 0.75;\n        expected[1] = -0.125;\n        \n        double[] result = new double[2]; // Actual output array\n        AccurateMathCalc.splitReciprocal(in, result);\n        \n        // Validate the expected outputs\n        assertArrayEquals(expected, result);\n    }\n}",
        "@Test\npublic void splitReciprocalTest() {\n    double[] in = {2.0, 3.0};\n    double[] result = new double[2];\n    \n    AccurateMathCalc.splitReciprocal(in, result);\n    \n    assertEquals(0.20833333333333334, result[0]);\n    assertEquals(-0.034722222222222224, result[1]);\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void splitReciprocalTest() {\n        double[] in = {2.0, 3.0};\n        double[] expected = {-3.0, 0.2};\n\n        double[] result = new double[2];\n        AccurateMathCalc.splitReciprocal(in, result);\n\n        assertArrayEquals(expected, result, 1e-15);\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void splitReciprocalTest() {\n        double[] input = {1.0, 2.0}; // or any other valid input\n        \n        double[] expectedOutput = new double[2];\n        double[] actualOutput = new double[2];\n        \n        AccurateMathCalc.splitReciprocal(input, actualOutput);\n        \n        // assert statements\n        assertEquals(expectedOutput[0], actualOutput[0]);\n        assertEquals(expectedOutput[1], actualOutput[1]);\n    }\n}",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void splitReciprocalTest() {\n        double[] in = {2.0, 3.0};\n        double[] result = new double[2];\n        AccurateMathCalc.splitReciprocal(in, result);\n\n        assertEquals(result[0], 0.25, 0.0001);\n        assertEquals(result[1], -0.0625, 0.0001);\n    }\n}",
        "@Test\npublic void splitReciprocalTest() {\n    double[] in = {2.0, 3.0};\n    double[] result = new double[2];\n    AccurateMathCalc.splitReciprocal(in, result);\n    \n    assertEquals(0.5, result[0]);\n    assertEquals(-0.04166574478149414, result[1]);\n}",
        "@Test\npublic void splitReciprocalTest() {\n    double[] in = {2.0, 3.0};\n    double[] result = new double[2];\n\n    AccurateMathCalc.splitReciprocal(in, result);\n\n    assertEquals(0.8333333333333334, result[0]);\n    assertEquals(0.013885498046875, result[1]);\n\n    in = {0.0, 5.0};\n    AccurateMathCalc.splitReciprocal(in, result);\n\n    assertEquals(0.2, result[0]);\n    assertEquals(-0.001495361328125, result[1]);\n}",
        "assertEquals(2.0, result[0]);\nassertEquals(3.0, result[1]);",
        "package org.apache.commons.math4.core.jdkmath;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccurateMathCalcTest {\n    @Test\n    public void splitReciprocalTest() {\n        double[] in = {2.0, 3.0};\n        double[] result = new double[2];\n\n        AccurateMathCalc.splitReciprocal(in, result);\n\n        assertEquals(0.5, result[0]);\n        assertEquals(-0.16666666666666666, result[1], 1e-15);\n    }\n}"
    ]
}
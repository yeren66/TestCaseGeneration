{
    "project_name": "commons-math",
    "file_name": "Pair.java",
    "relative_path": "commons-math/commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/Pair.java",
    "execute_path": "commons-math/commons-math-legacy-core",
    "package": "org.apache.commons.math4.legacy.core",
    "docstring": "/**\n     * Compare the specified object with this entry for equality.\n     *\n     * @param o Object.\n     * @return {@code true} if the given object is also a map entry and\n     * the two entries represent the same mapping.\n     */",
    "source_code": "\n@Override\npublic boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (!(o instanceof Pair)) {\n        return false;\n    } else {\n        Pair<?, ?> oP = (Pair<?, ?>) o;\n        return (key == null ?\n                oP.key == null :\n                key.equals(oP.key)) &&\n            (value == null ?\n             oP.value == null :\n             value.equals(oP.value));\n    }\n}\n",
    "class_name": "Pair",
    "method_name": "equals",
    "arguments": [
        "Object o"
    ],
    "generate_test": [
        "@Test\npublic void equalsTest() {\n    Pair<String, Integer> pair = new Pair<>(\"key\", 123);\n    Pair<String, Integer> samePair = new Pair<>(\"key\", 123);\n    Pair<String, Integer> differentPair = new Pair<>(\"key\", 456);\n\n    assertEquals(pair, pair); // Self-reference\n    assertEquals(pair, samePair); // Same key-value pair\n    assertNotEquals(pair, differentPair); // Different value\n\n    // Additional test cases for null values\n    Pair<String, Integer> nullPair1 = new Pair<>(null, 123);\n    Pair<String, Integer> nullPair2 = new Pair<>(null, null);\n\n    assertNotEquals(pair, nullPair1); // Different key, same value\n    assertNotEquals(pair, nullPair2); // Different key and value\n    assertEquals(nullPair1, new Pair<>(null, 123)); // Same null key-value pair\n    assertEquals(nullPair2, new Pair<>(null, null)); // Same null key and value\n}",
        "@Test\npublic void equalsTest() {\n    Pair<String, Integer> pair1 = new Pair<>(\"key\", 1);\n    Pair<String, Integer> pair2 = new Pair<>(\"key\", 1);\n    Pair<String, Integer> pair3 = new Pair<>(\"anotherKey\", 2);\n    \n    assertTrue(pair1.equals(pair2));\n    assertTrue(pair2.equals(pair1));\n    assertFalse(pair1.equals(pair3));\n    assertFalse(pair3.equals(pair1));\n    assertTrue(pair2.equals(pair2));\n    assertFalse(pair2.equals(null));\n    assertFalse(pair2.equals(\"not a pair\"));\n    assertFalse(pair3.equals(pair2));\n    assertFalse(pair2.equals(pair3));\n}",
        "public void equalsTest() {\n    Pair<String, Integer> pair1 = new Pair<>(\"key\", 123);\n    Pair<String, Integer> pair2 = new Pair<>(\"key\", 123);\n    Pair<String, Integer> pair3 = new Pair<>(\"different\", 123);\n\n    // Test equals() method\n    assertTrue(pair1.equals(pair2));\n    assertFalse(pair1.equals(pair3));\n\n    // Test hashCode() method\n    assertEquals(pair1.hashCode(), pair2.hashCode());\n    assertNotEquals(pair1.hashCode(), pair3.hashCode());\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, String> pair1 = new Pair<>(\"A\", \"B\");\n        Pair<String, String> pair2 = new Pair<>(\"A\", \"B\");\n        \n        assertEquals(pair1, pair2);\n        \n        Pair<String, String> pair3 = new Pair<>(\"C\", \"D\");\n        \n        assertNotEquals(pair1, pair3);\n    }\n}",
        "@Test\npublic void equalsTest() {\n    Integer key1 = 1;\n    Integer value1 = 2;\n    Integer key2 = 1;\n    Integer value2 = 2;\n    \n    Pair<Integer, Integer> pair1 = new Pair<>(key1, value1);\n    Pair<Integer, Integer> pair2 = new Pair<>(key2, value2);\n    \n    assertTrue(pair1.equals(pair2));\n    \n    key1 = 3;\n    value1 = 4;\n    key2 = 5;\n    value2 = 6;\n    \n    pair1 = new Pair<>(key1, value1);\n    pair2 = new Pair<>(key2, value2);\n    \n    assertFalse(pair1.equals(pair2));\n}",
        "@Test\npublic void equalsTest() {\n    Pair<String, Integer> pair1 = new Pair<>(\"a\", 1);\n    Pair<String, Integer> pair2 = new Pair<>(\"a\", 1);\n    Pair<String, Integer> pair3 = new Pair<>(\"b\", 2);\n    \n    // Test equal pairs\n    assertTrue(pair1.equals(pair2));\n    \n    // Test pair with same key but different value\n    assertFalse(pair1.equals(pair3));\n    \n    // Test pair with different key but same value\n    assertFalse(pair2.equals(pair3));\n    \n    // Test pair with null key and value\n    Pair<String, Integer> pair4 = new Pair<>(null, null);\n    Pair<String, Integer> pair5 = new Pair<>(null, null);\n    assertTrue(pair4.equals(pair5));\n    \n    // Test pair with null key but non-null value\n    assertFalse(pair4.equals(pair1));\n    \n    // Test pair with non-null key but null value\n    assertFalse(pair1.equals(pair4));\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, Integer> pair1 = new Pair<>(\"A\", 1);\n        Pair<String, Integer> pair2 = new Pair<>(\"A\", 1);\n        Pair<String, Integer> pair3 = new Pair<>(\"B\", 2);\n\n        assertTrue(pair1.equals(pair2));\n        assertFalse(pair1.equals(pair3));\n        assertFalse(pair2.equals(pair3));\n        assertTrue(pair3.equals(pair3));\n    }\n}",
        "@Test\npublic void equalsTest() {\n    Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\n    Pair<Integer, String> pair2 = new Pair<>(2, \"two\");\n    Pair<Integer, String> pair3 = new Pair<>(1, \"one\");\n    \n    // Test for equality between different pairs\n    assertFalse(pair1.equals(pair2));\n    \n    // Test for equality between pairs with the same key and value\n    assertTrue(pair1.equals(pair3));\n    \n    // Test for equality between a pair and another object\n    assertFalse(pair1.equals(\"not a Pair\"));\n    \n    // Test for equality with null values\n    Pair<Integer, String> pair4 = new Pair<>(1, null);\n    Pair<Integer, String> pair5 = new Pair<>(null, \"one\");\n    Pair<Integer, String> pair6 = new Pair<>(null, null);\n    \n    assertTrue(pair4.equals(pair6));\n    assertTrue(pair5.equals(pair6));\n    assertFalse(pair4.equals(pair5));\n}\n",
        "@Test\npublic void equalsTest() {\n    Pair<Integer, String> pair1 = new Pair<>(1, \"One\");\n    Pair<Integer, String> pair2 = new Pair<>(1, \"One\");\n    Pair<Integer, String> pair3 = new Pair<>(2, \"Two\");\n\n    // Test equality of same pairs\n    assertTrue(pair1.equals(pair1));\n\n    // Test equality of different pairs with same values\n    assertTrue(pair1.equals(pair2));\n\n    // Test inequality of different pairs with different values\n    assertFalse(pair1.equals(pair3));\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<Integer, String> pair1 = new Pair<>(1, \"One\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"One\");\n        Pair<Integer, String> pair3 = new Pair<>(2, \"Two\");\n\n        assertTrue(pair1.equals(pair2));\n        assertFalse(pair1.equals(pair3));\n    }\n}"
    ]
}
{
    "project_name": "jfreechart",
    "file_name": "DatasetUtils.java",
    "relative_path": "jfreechart/src/main/java/org/jfree/data/general/DatasetUtils.java",
    "execute_path": "jfreechart",
    "package": "org.jfree.data.general",
    "docstring": "/**\n     * Calculates the total of all the values in a {@link PieDataset}.  If\n     * the dataset contains negative or {@code null} values, they are\n     * ignored.\n     *\n     * @param dataset  the dataset ({@code null} not permitted).\n     *\n     * @return The total.\n     */",
    "source_code": "\npublic static double calculatePieDatasetTotal(PieDataset dataset) {\n    Args.nullNotPermitted(dataset, \"dataset\");\n    List keys = dataset.getKeys();\n    double totalValue = 0;\n    Iterator iterator = keys.iterator();\n    while (iterator.hasNext()) {\n        Comparable current = (Comparable) iterator.next();\n        if (current != null) {\n            Number value = dataset.getValue(current);\n            double v = 0.0;\n            if (value != null) {\n                v = value.doubleValue();\n            }\n            if (v > 0) {\n                totalValue = totalValue + v;\n            }\n        }\n    }\n    return totalValue;\n}\n",
    "class_name": "DatasetUtils",
    "method_name": "calculatePieDatasetTotal",
    "arguments": [
        "PieDataset dataset"
    ],
    "generate_test": [
        "@Test\npublic void calculatePieDatasetTotalTest() {\n    // Create a PieDataset for testing\n    DefaultPieDataset dataset = new DefaultPieDataset();\n    dataset.setValue(\"Category 1\", 10);\n    dataset.setValue(\"Category 2\", 20);\n    dataset.setValue(\"Category 3\", 30);\n    \n    // Call the method to calculate the total value\n    double totalValue = DatasetUtils.calculatePieDatasetTotal(dataset);\n    \n    // Assert the expected result\n    assertEquals(60.0, totalValue);\n}",
        "@Test\npublic void calculatePieDatasetTotalTest() {\n    // Create a sample PieDataset\n    DefaultPieDataset dataset = new DefaultPieDataset();\n    dataset.setValue(\"Item 1\", 10);\n    dataset.setValue(\"Item 2\", 20);\n    dataset.setValue(\"Item 3\", 30);\n    \n    // Call the method to calculate the total value\n    double totalValue = DatasetUtils.calculatePieDatasetTotal(dataset);\n    \n    // Check if the calculated total value is correct\n    assertEquals(60.0, totalValue);\n}",
        "@Test\npublic void calculatePieDatasetTotalTest() {\n    // Create a test PieDataset\n    DefaultPieDataset dataset = new DefaultPieDataset();\n    dataset.setValue(\"A\", 10);\n    dataset.setValue(\"B\", 20);\n    dataset.setValue(\"C\", 30);\n\n    // Call the calculatePieDatasetTotal method\n    double result = DatasetUtils.calculatePieDatasetTotal(dataset);\n\n    // Check the result against the expected value\n    assertEquals(60.0, result, 0.001);\n}",
        "@Test\npublic void calculatePieDatasetTotalTest() {\n    // Create a sample PieDataset\n    PieDataset dataset = new DefaultPieDataset();\n    dataset.setValue(\"Apple\", 10);\n    dataset.setValue(\"Banana\", 15);\n    dataset.setValue(\"Orange\", 20);\n\n    // Calculate the total value using the calculatePieDatasetTotal method\n    double totalValue = DatasetUtils.calculatePieDatasetTotal(dataset);\n\n    // Verify that the total value is computed correctly\n    assertEquals(45, totalValue);\n}",
        "@Test\npublic void calculatePieDatasetTotalTest() {\n    // Create a mock PieDataset\n    PieDataset dataset = mock(PieDataset.class);\n    \n    // Create a list of keys to iterate over\n    List keys = new ArrayList<>();\n    keys.add(\"Key1\");\n    keys.add(\"Key2\");\n    keys.add(\"Key3\");\n    \n    // Set up mock behavior for dataset methods\n    when(dataset.getKeys()).thenReturn(keys);\n    when(dataset.getValue(\"Key1\")).thenReturn(10);\n    when(dataset.getValue(\"Key2\")).thenReturn(15);\n    when(dataset.getValue(\"Key3\")).thenReturn(20);\n    \n    // Call the method under test\n    double result = DatasetUtils.calculatePieDatasetTotal(dataset);\n    \n    // Assert the expected result\n    assertEquals(45, result);\n}",
        "@Test\npublic void calculatePieDatasetTotalTest() {\n    PieDataset dataset = new DefaultPieDataset();\n    dataset.setValue(\"A\", 10);\n    dataset.setValue(\"B\", 20);\n    dataset.setValue(\"C\", 30);\n    \n    double expectedTotal = 60;\n    double actualTotal = DatasetUtils.calculatePieDatasetTotal(dataset);\n    assertEquals(expectedTotal, actualTotal, 0.001);\n}",
        "@Test\npublic void calculatePieDatasetTotalTest() {\n    PieDataset dataset = new DefaultPieDataset();\n    dataset.setValue(\"Category 1\", 10);\n    dataset.setValue(\"Category 2\", 20);\n    dataset.setValue(\"Category 3\", 30);\n\n    double expectedTotal = 60;\n    double actualTotal = DatasetUtils.calculatePieDatasetTotal(dataset);\n\n    assertEquals(expectedTotal, actualTotal, 0.001);\n}",
        "@Test\npublic void calculatePieDatasetTotalTest() {\n    // Create a PieDataset object\n    DefaultPieDataset dataset = new DefaultPieDataset();\n    \n    // Add data to the dataset\n    dataset.setValue(\"Category 1\", 10);\n    dataset.setValue(\"Category 2\", 20);\n    dataset.setValue(\"Category 3\", 30);\n    \n    // Call the calculatePieDatasetTotal() method\n    double result = DatasetUtils.calculatePieDatasetTotal(dataset);\n    \n    // Assert that the result is equal to the sum of the values in the dataset\n    assertEquals(60, result);\n}",
        "package org.jfree.data.general;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatasetUtilsTest {\n    @Test\n    public void calculatePieDatasetTotalTest() {\n        // Create a mock PieDataset\n        PieDataset dataset = new DefaultPieDataset();\n        dataset.setValue(\"A\", 10);\n        dataset.setValue(\"B\", 20);\n        dataset.setValue(\"C\", 30);\n\n        // Calculate the total value\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n\n        // Verify that the total is correct\n        assertEquals(60, total);\n    }\n}",
        "@Test\npublic void calculatePieDatasetTotalTest() {\n    // Create a mock PieDataset\n    PieDataset dataset = new MockPieDataset();\n    \n    // Add values to the mock dataset\n    ((MockPieDataset) dataset).setValue(\"A\", 10);\n    ((MockPieDataset) dataset).setValue(\"B\", 5);\n    ((MockPieDataset) dataset).setValue(\"C\", 15);\n    \n    // Calculate the total value using the calculatePieDatasetTotal() method\n    double totalValue = DatasetUtils.calculatePieDatasetTotal(dataset);\n    \n    // Assert that the total value is correct\n    assertEquals(30.0, totalValue, 0.0001);\n}"
    ]
}
Source code: 


private static double[][] calculateSubMatrix(double[][] matrix){
    int equations = matrix.length;
    int coefficients = matrix[0].length;
    double[][] result = new double[equations - 1][coefficients - 1];
    for (int eq = 1; eq < equations; eq++) {
        double factor = matrix[0][0] / matrix[eq][0];
        for (int coe = 1; coe < coefficients; coe++) {
            result[eq - 1][coe -1] = matrix[0][coe] - matrix[eq][coe]
                    * factor;
        }
    }
    if (equations == 1) {
        return result;
    }
    // check for zero pivot element
    if (result[0][0] == 0) {
        boolean found = false;
        for (int i = 0; i < result.length; i ++) {
            if (result[i][0] != 0) {
                found = true;
                double[] temp = result[0];
                System.arraycopy(result[i], 0, result[0], 0, 
                        result[i].length);
                System.arraycopy(temp, 0, result[i], 0, temp.length);
                break;
            }
        }
        if (!found) {
            //System.out.println("Equation has no solution!");
            return new double[equations - 1][coefficients - 1];
        }
    }
    double[][] subMatrix = calculateSubMatrix(result);
    for (int eq = 1; eq < equations -  1; eq++) {
        result[eq][0] = 0;
        if (coefficients - 1 - 1 >= 0) System.arraycopy(subMatrix[eq - 1], 0, result[eq], 1, coefficients - 1 - 1);
    }
    return result;
}



No.1 generated result --------------------------

@Test
    public void calculateSubMatrixTest() {
        double[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
        double[][] expected = {{-3, -4}, {-6, -7}};
        double[][] actual = Regression.calculateSubMatrix(matrix);
        assertArrayEquals(expected, actual);
    }


No.2 generated result --------------------------

package org.jfree.data.statistics;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class RegressionTest {
    @Test
    public void calculateSubMatrixTest() {
        double[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
        double[][] expected = {{5, 6}, {8, 9}};
        
        double[][] result = calculateSubMatrix(matrix);
        
        assertArrayEquals(expected, result);
    }
}


No.3 generated result --------------------------

@Test
public void calculateSubMatrixTest() {
    double[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    double[][] expected = {{4, 5}, {7, 8}};
    double[][] actual = calculateSubMatrix(matrix);
    assertArrayEquals(expected, actual);
}


No.4 generated result --------------------------


double[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
double[][] expectedSubMatrix = {{5, 6}, {8, 9}};
double[][] actualSubMatrix = calculateSubMatrix(matrix);
assertArrayEquals(expectedSubMatrix, actualSubMatrix);



No.5 generated result --------------------------

private static double[][] calculateSubMatrix(double[][] matrix){
    int equations = matrix.length;
    int coefficients = matrix[0].length;
    double[][] result = new double[equations - 1][coefficients - 1];
    for (int eq = 1; eq < equations; eq++) {
        double factor = matrix[0][0] / matrix[eq][0];
        for (int coe = 1; coe < coefficients; coe++) {
            result[eq - 1][coe -1] = matrix[0][coe] - matrix[eq][coe]
                    * factor;
        }
    }
    if (equations == 1) {
        return result;
    }
    // check for zero pivot element
    if (result[0][0] == 0) {
        boolean found = false;
        for (int i = 0; i < result.length; i ++) {
            if (result[i][0] != 0) {
                found = true;
                double[] temp = result[0];
                System.arraycopy(result[i], 0, result[0], 0, 
                        result[i].length);
                System.arraycopy(temp, 0, result[i], 0, temp.length);
                break;
            }
        }
        if (!found) {
            //System.out.println("Equation has no solution!");
            return new double[equations - 1][coefficients - 1];
        }
    }
    double[][] subMatrix = calculateSubMatrix(result);
    for (int eq = 1; eq < equations -  1; eq++) {
        result[eq][0] = 0;
        if (coefficients - 1 - 1 >= 0) System.arraycopy(subMatrix[eq - 1], 0, result[eq], 1, coefficients - 1 - 1);
    }
    return result;
}

package org.jfree.data.statistics;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class RegressionTest {
    @Test
    public void calculateSubMatrixTest() {
        double[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
        double[][] expected = {{4, 5}, {7, 8}};
        double[][] actual = calculateSubMatrix(matrix);
        assertArrayEquals(expected, actual);
    }
}


No.6 generated result --------------------------

package org.jfree.data.statistics;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class RegressionTest {
    @Test
    public void calculateSubMatrixTest() {
        double[][] matrix = {
            {1.0, 2.0, 3.0},
            {4.0, 5.0, 6.0},
            {7.0, 8.0, 9.0}
        };

        double[][] expectedSubMatrix = {
            {5.0, 6.0},
            {8.0, 9.0}
        };

        double[][] result = calculateSubMatrix(matrix);

        assertArrayEquals(expectedSubMatrix, result);
    }
}


No.7 generated result --------------------------

package org.jfree.data.statistics;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class RegressionTest {
    @Test
    public void calculateSubMatrixTest() {
        double[][] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        
        double[][] expected = {
            {5, 6},
            {8, 9}
        };
        
        double[][] result = Regression.calculateSubMatrix(matrix);
        
        assertArrayEquals(expected, result);
    }
}


No.8 generated result --------------------------

@Test
    public void calculateSubMatrixTest() {
        double[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
        double[][] expected = {{5, 6}, {8, 9}};
        double[][] result = calculateSubMatrix(matrix);
        assertArrayEquals(expected, result);
    }


No.9 generated result --------------------------

double[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
double[][] expected = {{-3, -4}, {-6, -7}};
double[][] result = calculateSubMatrix(matrix);
assertArrayEquals(expected, result);


No.10 generated result --------------------------

@Test
public void calculateSubMatrixTest() {
    double[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    double[][] expected = {{-4, -5}, {-7, -8}};
    double[][] actual = calculateSubMatrix(matrix);
    assertArrayEquals(expected, actual);
}



{
    "project_name": "commons-lang",
    "file_name": "CompareToBuilder.java",
    "relative_path": "commons-lang/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java",
    "execute_path": "commons-lang",
    "package": "org.apache.commons.lang3.builder",
    "docstring": "/**\n     * Appends to the {@code builder} the deep comparison of\n     * two {@code double} arrays.\n     *\n     * <ol>\n     *  <li>Check if arrays are the same using {@code ==}</li>\n     *  <li>Check if for {@code null}, {@code null} is less than non-{@code null}</li>\n     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n     *  <li>Check array contents element by element using {@link #append(double, double)}</li>\n     * </ol>\n     *\n     * @param lhs  left-hand side array\n     * @param rhs  right-hand side array\n     * @return this\n     */",
    "source_code": "\npublic CompareToBuilder append(final double[] lhs, final double[] rhs) {\n    if (comparison != 0) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null) {\n        comparison = -1;\n        return this;\n    }\n    if (rhs == null) {\n        comparison = 1;\n        return this;\n    }\n    if (lhs.length != rhs.length) {\n        comparison = lhs.length < rhs.length ? -1 : 1;\n        return this;\n    }\n    for (int i = 0; i < lhs.length && comparison == 0; i++) {\n        append(lhs[i], rhs[i]);\n    }\n    return this;\n}\n",
    "class_name": "CompareToBuilder",
    "method_name": "append",
    "arguments": [
        "double[] lhs",
        "double[] rhs"
    ],
    "generate_test": [
        "@Test\npublic void appendTest() {\n    CompareToBuilder builder = new CompareToBuilder();\n\n    double[] lhs = {1.0, 2.0, 3.0};\n    double[] rhs = {1.0, 2.0, 3.0};\n\n    CompareToBuilder result = builder.append(lhs, rhs);\n    \n    assertEquals(0, result.toComparison());\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        double[] lhs = {1.0, 2.0, 3.0};\n        double[] rhs = {1.0, 2.0, 3.0};\n        builder.append(lhs, rhs);\n        assertEquals(0, builder.build());\n    }\n}",
        "public void appendTest() {\n    CompareToBuilder builder = new CompareToBuilder();\n    double[] lhs = {1.2, 3.4, 5.6};\n    double[] rhs = {1.2, 3.4, 5.6};\n    builder.append(lhs, rhs);\n    int result = builder.toComparison();\n    assertEquals(0, result);\n}",
        "@Test\npublic void appendTest() {\n    CompareToBuilder builder = new CompareToBuilder();\n    \n    double[] lhs = {1.0, 2.0, 3.0};\n    double[] rhs = {1.0, 2.0, 3.0};\n    CompareToBuilder result = builder.append(lhs, rhs);\n    assertEquals(builder, result);\n    \n    double[] lhs2 = null;\n    double[] rhs2 = {1.0, 2.0, 3.0};\n    CompareToBuilder result2 = builder.append(lhs2, rhs2);\n    assertEquals(builder, result2);\n    assertEquals(-1, builder.getComparison());\n    \n    double[] lhs3 = {1.0, 2.0, 3.0};\n    double[] rhs3 = null;\n    CompareToBuilder result3 = builder.append(lhs3, rhs3);\n    assertEquals(builder, result3);\n    assertEquals(1, builder.getComparison());\n    \n    double[] lhs4 = {1.0, 2.0};\n    double[] rhs4 = {1.0, 2.0, 3.0};\n    CompareToBuilder result4 = builder.append(lhs4, rhs4);\n    assertEquals(builder, result4);\n    assertEquals(-1, builder.getComparison());\n    \n    double[] lhs5 = {1.0, 2.0, 3.0};\n    double[] rhs5 = {1.0, 2.0};\n    CompareToBuilder result5 = builder.append(lhs5, rhs5);\n    assertEquals(builder, result5);\n    assertEquals(1, builder.getComparison());\n    \n    double[] lhs6 = {1.0, 2.0, 3.0};\n    double[] rhs6 = {1.0, 2.0, 3.0};\n    CompareToBuilder result6 = builder.append(lhs6, rhs6);\n    assertEquals(builder, result6);\n    assertEquals(0, builder.getComparison());\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        double[] lhs = {1.0, 2.0, 3.0};\n        double[] rhs = {1.0, 2.0, 3.0};\n        CompareToBuilder result = builder.append(lhs, rhs);\n        assertEquals(builder, result);\n    }\n}",
        "@Test\npublic void appendTest() {\n    CompareToBuilder builder = new CompareToBuilder();\n    double[] lhs = {1.0, 2.0, 3.0};\n    double[] rhs = {1.0, 2.0, 3.0};\n    \n    builder.append(lhs, rhs);\n    \n    int expectedComparison = builder.toComparison();\n    int actualComparison = 0;\n    \n    assertEquals(expectedComparison, actualComparison, \"Comparison should be 0\");\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        double[] lhs = {1.0, 2.0, 3.0};\n        double[] rhs = {1.0, 2.0, 3.0};\n        CompareToBuilder result = builder.append(lhs, rhs);\n        assertEquals(builder, result, \"Comparison should be the same object\");\n        \n        lhs = null;\n        result = builder.append(lhs, rhs);\n        assertEquals(builder, result, \"Comparison should be the same object\");\n        assertEquals(-1, builder.toComparison(), \"Comparison should be -1\");\n        \n        lhs = new double[]{1.0};\n        rhs = new double[]{1.0, 2.0, 3.0};\n        result = builder.append(lhs, rhs);\n        assertEquals(builder, result, \"Comparison should be the same object\");\n        assertEquals(-1, builder.toComparison(), \"Comparison should be -1\");\n        \n        lhs = new double[]{1.0, 2.0, 3.0};\n        rhs = new double[]{1.0};\n        result = builder.append(lhs, rhs);\n        assertEquals(builder, result, \"Comparison should be the same object\");\n        assertEquals(1, builder.toComparison(), \"Comparison should be 1\");\n        \n        lhs = new double[]{1.0, 2.0, 3.0};\n        rhs = new double[]{1.0, 2.0, 3.0};\n        result = builder.append(lhs, rhs);\n        assertEquals(builder, result, \"Comparison should be the same object\");\n        assertEquals(0, builder.toComparison(), \"Comparison should be 0\");\n        \n        lhs = new double[]{1.0, 2.0, 3.0};\n        rhs = new double[]{4.0, 5.0, 6.0};\n        result = builder.append(lhs, rhs);\n        assertEquals(builder, result, \"Comparison should be the same object\");\n        assertEquals(-1, builder.toComparison(), \"Comparison should be -1\");\n    }\n}",
        "double[] lhs = {1.0, 2.0, 3.0};\ndouble[] rhs = {1.0, 2.0, 3.0};\n\nCompareToBuilder builder = new CompareToBuilder();\nbuilder.append(lhs, rhs);\n\nint result = builder.build();\n\nassertEquals(0, result);",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        double[] lhs = {1.0, 2.0, 3.0};\n        double[] rhs = {1.0, 2.0, 3.0};\n        \n        builder.append(lhs, rhs);\n        \n        int result = builder.toComparison();\n        assertEquals(0, result);\n    }\n}",
        "public void appendTest() {\n        CompareToBuilder ctb = new CompareToBuilder();\n        double[] lhs = {1.0, 2.0, 3.0};\n        double[] rhs = {1.0, 2.0, 3.0};\n        ctb.append(lhs, rhs);\n        assertEquals(0, ctb.toComparison());\n        \n        double[] lhs2 = {1.0, 2.0, 3.0};\n        double[] rhs2 = {1.0, 2.0, 4.0};\n        ctb.append(lhs2, rhs2);\n        assertNotEquals(0, ctb.toComparison());\n        \n        double[] lhs3 = null;\n        double[] rhs3 = {1.0, 2.0, 3.0};\n        ctb.append(lhs3, rhs3);\n        assertEquals(-1, ctb.toComparison());\n        \n        double[] lhs4 = {1.0, 2.0, 3.0};\n        double[] rhs4 = null;\n        ctb.append(lhs4, rhs4);\n        assertEquals(1, ctb.toComparison());\n        \n        double[] lhs5 = {1.0, 2.0, 3.0};\n        double[] rhs5 = {1.0, 2.0, 3.0, 4.0};\n        ctb.append(lhs5, rhs5);\n        assertNotEquals(0, ctb.toComparison());\n\n        double[] lhs6 = {1.0, 2.0, 3.0};\n        double[] rhs6 = {1.0, 2.0, 3.0};\n        ctb.append(lhs6, rhs6);\n        assertEquals(0, ctb.toComparison());\n    }"
    ]
}
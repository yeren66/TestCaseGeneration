["import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ByteVectorTest {\n    private byte[] data;\n    private int length;\n\n    @BeforeEach\n    public void setup() {\n        data = new byte[8];\n        length = 0;\n    }\n\n    @Test\n    public void enlargeTest() {\n        ByteVector vector = new ByteVector(data, length);\n        assertEquals(vector.size(), 0);\n\n        vector.enlarge();\n        assertEquals(vector.capacity(), 16);\n        assertArrayEquals(vector.array(), data);\n    }\n}", "package com.alibaba.fastjson2.internal.asm;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ByteVectorTest {\n    @Test\n    public void enlargeTest() {\n        // Arrange\n        int initialCapacity = 10;\n        int size = 5;\n        ByteVector byteVector = new ByteVector(initialCapacity);\n\n        // Act\n        byteVector.enlarge(size);\n\n        // Assert\n        assertEquals(byteVector.length, initialCapacity + size);\n    }\n}", "package com.alibaba.fastjson2.internal.asm;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ByteVectorTest {\n    @Test\n    public void enlargeTest() {\n        // Set up the test environment\n        final int initialCapacity = 10;\n        final byte[] data = new byte[initialCapacity];\n        final int length = 0;\n        final int size = 5;\n        ByteVector bv = new ByteVector(data, length);\n\n        // Run the test method\n        bv.enlarge(size);\n\n        // Assert that the data and length fields have been updated correctly\n        assertArrayEquals(new byte[] {0, 0, 0, 0, 0}, data);\n        assertEquals(15, length);\n    }\n}", "package com.alibaba.fastjson2.internal.asm;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ByteVectorTest {\n    @Test\n    public void enlargeTest() {\n        // Create a new instance of the ByteVector class with an initial capacity of 10 bytes\n        ByteVector byteVector = new ByteVector(10);\n        \n        // Add some data to the ByteVector\n        byte[] data = { (byte) 0xCA, (byte) 0xFE };\n        byteVector.putByteArray(data, 0, data.length);\n        \n        // Enlarge the ByteVector by a factor of 2\n        int newSize = byteVector.enlarge(1);\n        \n        // Verify that the new size is equal to the original capacity times 2\n        assertEquals(byteVector.data.length * 2, newSize);\n    }\n}", "package com.alibaba.fastjson2.internal.asm;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ByteVectorTest {\n    @Test\n    public void enlargeTest() {\n        int initialCapacity = 10;\n        ByteVector vector = new ByteVector(initialCapacity);\n        int size = 5;\n        \n        assertEquals(initialCapacity, vector.data.length);\n        assertEquals(0, vector.length);\n        \n        vector.enlarge(size);\n        \n        assertNotEquals(initialCapacity, vector.data.length);\n        assertEquals(size, vector.length);\n    }\n}", "\npackage com.alibaba.fastjson2.internal.asm;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ByteVectorTest {\n    @Test\n    public void enlargeTest() {\n        // Create an instance of the ByteVector class\n        ByteVector vector = new ByteVector();\n\n        // Set up some initial data for the vector\n        int[] values = new int[] { 1, 2, 3 };\n        vector.putInt(values[0]);\n        vector.putInt(values[1]);\n        vector.putInt(values[2]);\n\n        // Check that the length of the data is correct before enlarging\n        assertEquals(3 * Integer.BYTES, vector.length);\n\n        // Enlarge the vector by a certain amount\n        int size = 10;\n        vector.enlarge(size);\n\n        // Check that the length of the data is now correct after enlarging\n        assertEquals((3 * Integer.BYTES) + (Integer.BYTES * size), vector.length);\n\n        // Check that all existing data has been preserved in the new array\n        for (int i = 0; i < values.length; i++) {\n            int expectedValue = values[i];\n            assertEquals(expectedValue, vector.getInt(i));\n        }\n    }\n}\n", "package com.alibaba.fastjson2.internal.asm;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ByteVectorTest {\n    @Test\n    public void enlargeTest() {\n        int size = 10;\n        ByteVector byteVector = new ByteVector(size);\n        \n        // Before the method is called, data should be null and length should be 0.\n        assertNull(byteVector.data);\n        assertEquals(byteVector.length, 0);\n        \n        // Call the enlarge method with a size of 10\n        byteVector.enlarge(size);\n        \n        // After the method is called, data should be an array with a length of 20 (2 * 10) and length should be 10.\n        assertEquals(byteVector.data.length, 20);\n        assertEquals(byteVector.length, size);\n    }\n}", "package com.alibaba.fastjson2.internal.asm;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ByteVectorTest {\n    @Test\n    public void enlargeTest() {\n        int size = 100;\n        int doubleCapacity = 2 * data.length;\n        int minimalCapacity = length + size;\n        byte[] newData = new byte[doubleCapacity > minimalCapacity ? doubleCapacity : minimalCapacity];\n        System.arraycopy(data, 0, newData, 0, length);\n        data = newData;\n    }\n}", "\npackage com.alibaba.fastjson2.internal.asm;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ByteVectorTest {\n    @Test\n    public void enlargeTest() {\n        int size = 100;\n        byte[] data = new byte[size];\n        for (int i = 0; i < size; i++) {\n            data[i] = (byte) i;\n        }\n\n        ByteVector bv = new ByteVector(data);\n        int minimalCapacity = bv.length + size;\n        byte[] newData = new byte[minimalCapacity];\n        System.arraycopy(bv.data, 0, newData, 0, bv.length);\n\n        assertEquals(newData.length, minimalCapacity);\n        for (int i = 0; i < bv.length; i++) {\n            assertEquals(newData[i], data[i]);\n        }\n    }\n}\n", "\npackage com.alibaba.fastjson2.internal.asm;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ByteVectorTest {\n    @Test\n    public void enlargeTest() {\n        int initialCapacity = 10;\n        byte[] data = new byte[initialCapacity];\n        int length = 5;\n        ByteVector byteVector = new ByteVector(data, length);\n        \n        int size = 10;\n        byteVector.enlarge(size);\n        \n        assertEquals(16, byteVector.data.length);\n    }\n}"]
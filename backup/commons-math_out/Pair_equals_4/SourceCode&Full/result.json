["package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test that two pairs with the same key and value are equal\n        Pair<Integer, String> pair1 = new Pair<>(1, \"hello\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"hello\");\n        assertEquals(pair1, pair2);\n\n        // Test that two pairs with different keys are not equal\n        pair1 = new Pair<>(1, \"hello\");\n        pair2 = new Pair<>(2, \"hello\");\n        assertNotEquals(pair1, pair2);\n\n        // Test that two pairs with different values are not equal\n        pair1 = new Pair<>(1, \"hello\");\n        pair2 = new Pair<>(1, \"goodbye\");\n        assertNotEquals(pair1, pair2);\n    }\n}", "@Test\npublic void equalsTest() {\n    Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\n    Pair<Integer, String> pair2 = new Pair<>(1, \"one\");\n    assertEquals(pair1, pair2);\n}", "\n@Test\npublic void equalsTest() {\n    Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\n    Pair<Integer, String> pair2 = new Pair<>(1, \"one\");\n    assertEquals(pair1, pair2); // check that the two objects are equal\n}\n", "package org.apache.commons.math4.legacy.core;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test with identical objects\n        Pair<String, String> p1 = new Pair<>(\"key\", \"value\");\n        assertTrue(p1.equals(p1));\n\n        // Test with different objects but same key and value\n        Pair<String, String> p2 = new Pair<>(\"key\", \"value\");\n        assertTrue(p1.equals(p2));\n\n        // Test with different objects but same key but different value\n        Pair<String, String> p3 = new Pair<>(\"key\", \"other value\");\n        assertFalse(p1.equals(p3));\n\n        // Test with different objects but different key and value\n        Pair<String, String> p4 = new Pair<>(\"other key\", \"other value\");\n        assertFalse(p1.equals(p4));\n    }\n}", "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test that two pairs with the same key and value are equal\n        Pair<Integer, String> pair1 = new Pair<>(1, \"a\");\n        Pair<Integer, String> pair2 = new Pair<>(1, \"a\");\n        assertEquals(pair1, pair2);\n\n        // Test that two pairs with different keys are unequal\n        Pair<Integer, String> pair3 = new Pair<>(2, \"a\");\n        Pair<Integer, String> pair4 = new Pair<>(1, \"a\");\n        assertNotEquals(pair3, pair4);\n\n        // Test that two pairs with different values are unequal\n        Pair<Integer, String> pair5 = new Pair<>(1, \"b\");\n        Pair<Integer, String> pair6 = new Pair<>(1, \"a\");\n        assertNotEquals(pair5, pair6);\n    }\n}", "\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Create two pairs with different keys and values\n        Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair2 = new Pair<>(2, \"two\");\n        \n        // Check that the two pairs are not equal\n        assertNotEquals(pair1, pair2);\n        \n        // Create a third pair with the same keys and values as the first pair\n        Pair<Integer, String> pair3 = new Pair<>(1, \"one\");\n        \n        // Check that the two pairs are equal\n        assertEquals(pair1, pair3);\n    }\n}\n", "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Create two pairs with the same key and value\n        Pair<String, Integer> pair1 = new Pair<>(\"key\", 1);\n        Pair<String, Integer> pair2 = new Pair<>(\"key\", 1);\n\n        // Assert that both pairs are equal\n        assertEquals(pair1, pair2);\n    }\n}", "@Override\npublic boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (!(o instanceof Pair)) {\n        return false;\n    } else {\n        Pair<?, ?> oP = (Pair<?, ?>) o;\n        return key.equals(oP.key) && value.equals(oP.value);\n    }\n}", "\n@Test\npublic void equalsTest() {\n    Pair<String, Integer> pair1 = new Pair<>(\"key1\", 1);\n    Pair<String, Integer> pair2 = new Pair<>(\"key1\", 1);\n    assertTrue(pair1.equals(pair2)); // should be true because both pairs have the same key and value\n    \n    pair1 = new Pair<>(\"key1\", 1);\n    pair2 = new Pair<>(\"key2\", 2);\n    assertFalse(pair1.equals(pair2)); // should be false because both pairs have different keys\n}\n", "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test equality when both keys are non-null\n        Pair<String, Integer> p1 = new Pair<>(\"key\", 1);\n        Pair<String, Integer> p2 = new Pair<>(\"key\", 1);\n        assertTrue(p1.equals(p2));\n        \n        // Test equality when one key is null\n        p1 = new Pair<>(\"key\", 1);\n        p2 = new Pair<>(null, 1);\n        assertFalse(p1.equals(p2));\n        \n        // Test equality when both values are non-null\n        p1 = new Pair<>(\"key\", 1);\n        p2 = new Pair<>(\"key\", 1);\n        assertTrue(p1.equals(p2));\n        \n        // Test equality when one value is null\n        p1 = new Pair<>(\"key\", 1);\n        p2 = new Pair<>(\"key\", null);\n        assertFalse(p1.equals(p2));\n    }\n}"]
["package org.apache.commons.math4.legacy.core;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test when both key and value are null\n        Pair<String, Integer> pair1 = new Pair<>(\"key\", 1);\n        Pair<String, Integer> pair2 = new Pair<>(\"key\", 1);\n        assertEquals(pair1.hashCode(), pair2.hashCode());\n        assertTrue(pair1.equals(pair2));\n        assertTrue(pair2.equals(pair1));\n\n        // Test when key is null but value is not\n        Pair<String, Integer> pair3 = new Pair<>(\"key\", 1);\n        Pair<String, Integer> pair4 = new Pair<>(\"key\", 2);\n        assertNotEquals(pair3.hashCode(), pair4.hashCode());\n        assertFalse(pair3.equals(pair4));\n        assertFalse(pair4.equals(pair3));\n\n        // Test when key is not null but value is null\n        Pair<String, Integer> pair5 = new Pair<>(\"key\", 1);\n        Pair<String, Integer> pair6 = new Pair<>(\"key2\", 1);\n        assertNotEquals(pair5.hashCode(), pair6.hashCode());\n        assertFalse(pair5.equals(pair6));\n        assertFalse(pair6.equals(pair5));\n\n        // Test when both key and value are not null\n        Pair<String, Integer> pair7 = new Pair<>(\"key\", 1);\n        Pair<String, Integer> pair8 = new Pair<>(\"key2\", 2);\n        assertNotEquals(pair7.hashCode(), pair8.hashCode());\n        assertFalse(pair7.equals(pair8));\n        assertFalse(pair8.equals(pair7));\n    }\n}", "@Test\npublic void equalsTest() {\n    // Create two pairs with the same values\n    Pair<Integer, String> pair1 = new Pair<>(1, \"apple\");\n    Pair<Integer, String> pair2 = new Pair<>(1, \"apple\");\n    \n    // Test that they are equal\n    assertEquals(pair1, pair2);\n}", "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test null\n        assertFalse(Pair.equals(null, new Pair<String, Integer>(\"key\", 1)));\n        \n        // Test different types\n        assertFalse(Pair.equals(new Pair<Integer, String>(1, \"value\"), new Object()));\n        \n        // Test same keys and values\n        assertTrue(Pair.equals(new Pair<String, Integer>(\"key\", 1), new Pair<String, Integer>(\"key\", 1)));\n        \n        // Test different keys but same values\n        assertFalse(Pair.equals(new Pair<String, Integer>(\"key1\", 1), new Pair<String, Integer>(\"key2\", 1)));\n        \n        // Test different values but same key\n        assertFalse(Pair.equals(new Pair<String, Integer>(\"key\", 1), new Pair<String, Integer>(\"key\", 2)));\n    }\n}", "package org.apache.commons.math4.legacy.core;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test that two pairs with the same key and value are equal\n        Pair<String, Integer> p1 = new Pair<>(\"apple\", 5);\n        Pair<String, Integer> p2 = new Pair<>(\"apple\", 5);\n        assertTrue(p1.equals(p2));\n\n        // Test that two pairs with different keys are not equal\n        Pair<String, Integer> p3 = new Pair<>(\"orange\", 7);\n        assertFalse(p1.equals(p3));\n\n        // Test that two pairs with different values are not equal\n        Pair<String, Integer> p4 = new Pair<>(\"apple\", 9);\n        assertFalse(p1.equals(p4));\n    }\n}", "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test with null values\n        assertFalse(Pair.create(null, null).equals(Pair.create(\"key\", \"value\")));\n        assertFalse(Pair.create(\"key\", \"value\").equals(Pair.create(null, null)));\n\n        // Test with different keys and values\n        assertFalse(Pair.create(\"key1\", \"value1\").equals(Pair.create(\"key2\", \"value2\")));\n        assertFalse(Pair.create(\"key\", \"value1\").equals(Pair.create(\"key\", \"value2\")));\n\n        // Test with equal keys and values\n        Pair<String, String> pair = Pair.create(\"key\", \"value\");\n        assertTrue(pair.equals(Pair.create(\"key\", \"value\")));\n    }\n}", "\n@Test\npublic void equalsTest() {\n    // Test case 1: both key and value are null\n    Pair<String, String> pair1 = new Pair<>(\"\", \"\");\n    Pair<String, String> pair2 = new Pair<>(\"\", \"\");\n    assertTrue(pair1.equals(pair2));\n\n    // Test case 2: key is null but value is not null\n    pair1 = new Pair<>(\"\", \"foo\");\n    pair2 = new Pair<>(\"\", \"bar\");\n    assertFalse(pair1.equals(pair2));\n\n    // Test case 3: key is not null but value is null\n    pair1 = new Pair<>(\"foo\", \"\");\n    pair2 = new Pair<>(\"bar\", \"\");\n    assertTrue(pair1.equals(pair2));\n\n    // Test case 4: both key and value are not null\n    pair1 = new Pair<>(\"foo\", \"bar\");\n    pair2 = new Pair<>(\"foo\", \"bar\");\n    assertTrue(pair1.equals(pair2));\n}", "\n@Test\npublic void equalsTest() {\n    Pair<Integer, String> pair1 = new Pair<>(10, \"test\");\n    Pair<Integer, String> pair2 = new Pair<>(20, \"test\");\n    Pair<Integer, String> pair3 = new Pair<>(10, \"test\");\n    assertNotEquals(pair1.hashCode(), pair2.hashCode());\n    assertFalse(pair1.equals(null));\n    assertFalse(pair1.equals(\"\"));\n    assertTrue(pair1.equals(pair3));\n}", "package org.apache.commons.math4.legacy.core;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test that two pairs with the same key and value are equal\n        Pair<String, Integer> pair1 = new Pair<>(\"apple\", 5);\n        Pair<String, Integer> pair2 = new Pair<>(\"apple\", 5);\n        assertTrue(pair1.equals(pair2));\n\n        // Test that two pairs with different keys are not equal\n        pair1 = new Pair<>(\"apple\", 5);\n        pair2 = new Pair<>(\"banana\", 5);\n        assertFalse(pair1.equals(pair2));\n\n        // Test that two pairs with different values are not equal\n        pair1 = new Pair<>(\"apple\", 5);\n        pair2 = new Pair<>(\"apple\", 6);\n        assertFalse(pair1.equals(pair2));\n    }\n}", "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Create two instances of the Pair class with different keys and values\n        Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\n        Pair<Integer, String> pair2 = new Pair<>(2, \"two\");\n\n        // Check if the equals method returns true when comparing an instance with itself\n        assertTrue(pair1.equals(pair1));\n\n        // Check if the equals method returns false when comparing an instance with a different instance\n        assertFalse(pair1.equals(pair2));\n    }\n}", "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Test case 1: both key and value are null\n        Pair<String, Integer> pair1 = new Pair<>(null, null);\n        assertEquals(pair1, pair1);\n\n        // Test case 2: both key and value are not null\n        Pair<String, Integer> pair2 = new Pair<>(\"test\", 10);\n        assertEquals(pair2, pair2);\n\n        // Test case 3: key is null but value is not null\n        Pair<String, Integer> pair3 = new Pair<>(null, 10);\n        assertNotEquals(pair3, new Pair<>(\"test\", 10));\n\n        // Test case 4: key is not null but value is null\n        Pair<String, Integer> pair4 = new Pair<>(\"test\", null);\n        assertNotEquals(pair4, new Pair<>(\"test\", 10));\n    }\n}"]
Source code: 


public boolean addEdge(int from, int to) {
    if (this.vertexDoesExist(from) && this.vertexDoesExist(to)) {
        if (!this.adjacencyOfEdgeDoesExist(from, to)) {
            this.adjacency()[from][to] = AdjacencyMatrixGraph.EDGE_EXIST;
            this.adjacency()[to][from] = AdjacencyMatrixGraph.EDGE_EXIST;
            this.setNumberOfEdges(this.numberOfEdges() + 1);
            return true;
        }
    }

    return false;
}



No.1 generated result --------------------------

@Test
public void addEdgeTest() {
    AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph(4);
    assertTrue(graph.addEdge(0, 1));
    assertFalse(graph.addEdge(2, 3));
    assertEquals(1, graph.getNumberOfEdges());
}


No.2 generated result --------------------------

@Test
public void addEdgeTest() {
    // Test case 1: adding a new edge between two existing vertices
    MatrixGraphs graph = new MatrixGraphs();
    int fromVertex = 0;
    int toVertex = 1;
    assertFalse(graph.addEdge(fromVertex, toVertex));
    graph.addVertex(fromVertex);
    graph.addVertex(toVertex);
    assertTrue(graph.addEdge(fromVertex, toVertex));
    // Test case 2: adding an edge between a non-existent vertex and an existing vertex
    fromVertex = -1;
    toVertex = 0;
    assertFalse(graph.addEdge(fromVertex, toVertex));
    // Test case 3: adding an edge between two vertices with no edge already present
    fromVertex = 0;
    toVertex = 1;
    assertTrue(graph.addEdge(fromVertex, toVertex));
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class MatrixGraphsTest {
    @Test
    public void addEdgeTest() {
        MatrixGraph graph = new MatrixGraph(2, 10);
        assertEquals(graph.addEdge(0, 1), true);
        assertEquals(graph.numberOfEdges(), 1);
        assertEquals(graph.adjacency()[0][1], AdjacencyMatrixGraph.EDGE_EXIST);
    }
}


No.4 generated result --------------------------


package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class MatrixGraphsTest {
    @Test
    public void addEdgeTest() {
        MatrixGraph graph = new MatrixGraph(3);
        assertFalse(graph.addEdge(-1, 0)); // from vertex does not exist
        assertFalse(graph.addEdge(0, -1)); // to vertex does not exist
        assertTrue(graph.addEdge(0, 1)); // valid edge addition
        assertEquals(1, graph.numberOfEdges()); // number of edges is correct
    }
}



No.5 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class MatrixGraphsTest {
    @Test
    public void addEdgeTest() {
        AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph();
        int from = 0;
        int to = 1;
        boolean expectedResult = true;
        
        assertEquals(expectedResult, graph.addEdge(from, to));
    }
}


No.6 generated result --------------------------


@Test
public void addEdgeTest() {
    AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph();
    int vertex1 = 0;
    int vertex2 = 1;
    int vertex3 = 2;
    boolean result;

    // Test case 1: Verify that an edge can be added between two existing vertices.
    graph.addVertex(vertex1);
    graph.addVertex(vertex2);
    result = graph.addEdge(vertex1, vertex2);
    assertTrue(result);

    // Test case 2: Verify that an edge cannot be added between two non-existent vertices.
    result = graph.addEdge(vertex3, vertex2);
    assertFalse(result);

    // Test case 3: Verify that an edge cannot be added when both vertices are the same.
    result = graph.addEdge(vertex1, vertex1);
    assertFalse(result);
}


No.7 generated result --------------------------


@Test
public void addEdgeTest() {
    // Create a new instance of the AdjacencyMatrixGraph class
    AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph();

    // Add two vertices to the graph
    int vertex1 = graph.addVertex();
    int vertex2 = graph.addVertex();

    // Check that both vertices exist in the graph
    assertTrue(graph.vertexDoesExist(vertex1));
    assertTrue(graph.vertexDoesExist(vertex2));

    // Add an edge between the two vertices
    boolean result = graph.addEdge(vertex1, vertex2);

    // Check that the edge was added successfully
    assertTrue(result);

    // Check that both vertices are connected by the edge
    assertEquals(graph.adjacencyOfEdgeDoesExist(vertex1, vertex2), AdjacencyMatrixGraph.EDGE_EXIST);
    assertEquals(graph.adjacencyOfEdgeDoesExist(vertex2, vertex1), AdjacencyMatrixGraph.EDGE_EXIST);

    // Check that the number of edges in the graph is correct
    assertEquals(graph.numberOfEdges(), 1);
}


No.8 generated result --------------------------

@Test
public void addEdgeTest() {
    // Create a new AdjacencyMatrixGraph object
    AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph();
    
    // Add an edge to the graph
    int from = 1;
    int to = 2;
    boolean result = graph.addEdge(from, to);
    
    // Check that the edge was added successfully
    assertTrue(result);
    assertEquals(graph.numberOfEdges(), 1);
}


No.9 generated result --------------------------

Timeout


No.10 generated result --------------------------

@Test
public void addEdgeTest() {
    AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph(4);
    // Add edges to create a cycle
    assertTrue(graph.addEdge(0, 1));
    assertTrue(graph.addEdge(1, 2));
    assertTrue(graph.addEdge(2, 3));
    assertTrue(graph.addEdge(3, 0));
    
    // Check that the graph has a cycle
    assertTrue(graph.hasCycle());
}



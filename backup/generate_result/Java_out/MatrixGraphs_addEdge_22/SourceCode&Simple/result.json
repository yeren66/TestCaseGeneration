{
    "project_name": "Java",
    "file_name": "MatrixGraphs.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/graphs/MatrixGraphs.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.graphs",
    "docstring": "/**\n     * This method adds an edge to the graph between two specified vertices\n     *\n     * @param from the data of the vertex the edge is from\n     * @param to the data of the vertex the edge is going to\n     * @return returns true if the edge did not exist, return false if it\n     * already did\n     */",
    "source_code": "\npublic boolean addEdge(int from, int to) {\n    if (this.vertexDoesExist(from) && this.vertexDoesExist(to)) {\n        if (!this.adjacencyOfEdgeDoesExist(from, to)) {\n            this.adjacency()[from][to] = AdjacencyMatrixGraph.EDGE_EXIST;\n            this.adjacency()[to][from] = AdjacencyMatrixGraph.EDGE_EXIST;\n            this.setNumberOfEdges(this.numberOfEdges() + 1);\n            return true;\n        }\n    }\n\n    return false;\n}\n",
    "class_name": "MatrixGraphs",
    "method_name": "addEdge",
    "arguments": [
        "int from",
        "int to"
    ],
    "generate_test": [
        "\npackage com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MatrixGraphsTest {\n    @Test\n    public void addEdgeTest() {\n        AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph(3);\n        assertTrue(graph.addEdge(0, 1));\n        assertFalse(graph.addEdge(1, 0));\n        assertFalse(graph.addEdge(2, 3));\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MatrixGraphsTest {\n    @Test\n    public void addEdgeTest() {\n        AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph(4);\n        assertEquals(0, graph.numberOfEdges());\n\n        boolean added = graph.addEdge(1, 2);\n        assertTrue(added);\n        assertEquals(1, graph.numberOfEdges());\n\n        added = graph.addEdge(3, 4);\n        assertTrue(added);\n        assertEquals(2, graph.numberOfEdges());\n\n        added = graph.addEdge(2, 3);\n        assertFalse(added);\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MatrixGraphsTest {\n    @Test\n    public void addEdgeTest() {\n        AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph(4);\n\n        // Test adding an edge that already exists\n        assertFalse(graph.addEdge(1, 2)); // Edge (1, 2) should not be added because it already exists\n\n        // Test adding an edge that does not exist\n        assertTrue(graph.addEdge(3, 4)); // Edge (3, 4) should be added successfully\n\n        // Test adding an edge to a vertex that does not exist\n        assertFalse(graph.addEdge(5, 1)); // Edge (5, 1) should not be added because vertex 5 does not exist\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MatrixGraphsTest {\n    private AdjacencyMatrixGraph graph;\n\n    @BeforeEach\n    public void setUp() {\n        // Set up the graph with 4 vertices and 0 edges\n        this.graph = new AdjacencyMatrixGraph(4);\n    }\n\n    @Test\n    public void addEdgeTest() {\n        // Add an edge from vertex 1 to vertex 2\n        assertTrue(this.graph.addEdge(1, 2));\n        assertEquals(this.graph.numberOfEdges(), 1);\n        assertTrue(this.graph.adjacencyOfEdgeDoesExist(1, 2));\n        assertFalse(this.graph.adjacencyOfEdgeDoesExist(2, 1));\n    }\n}",
        "\npackage com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MatrixGraphsTest {\n    @Test\n    public void addEdgeTest() {\n        AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph(5);\n        assertFalse(graph.addEdge(-1, 0));\n        assertFalse(graph.addEdge(0, -1));\n        assertTrue(graph.addEdge(0, 1));\n        assertEquals(1, graph.numberOfEdges());\n        assertTrue(graph.addEdge(2, 3));\n        assertEquals(2, graph.numberOfEdges());\n    }\n}",
        "\npackage com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MatrixGraphsTest {\n    @Test\n    public void addEdgeTest() {\n        AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph(4);\n        graph.addEdge(0, 1);\n        graph.addEdge(1, 2);\n        graph.addEdge(3, 2);\n        assertTrue(graph.edgeDoesExist(0, 1));\n        assertTrue(graph.edgeDoesExist(1, 2));\n        assertTrue(graph.edgeDoesExist(3, 2));\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MatrixGraphsTest {\n    @Test\n    public void addEdgeTest() {\n        AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph(4);\n        assertFalse(graph.addEdge(-1, 0)); // invalid from vertex\n        assertFalse(graph.addEdge(0, -1)); // invalid to vertex\n        assertTrue(graph.addEdge(0, 1)); // valid edge\n        assertTrue(graph.adjacencyOfEdgeDoesExist(0, 1)); // check if edge exists\n        assertEquals(1, graph.numberOfEdges()); // check number of edges\n    }\n}",
        "\n@Test\npublic void addEdgeTest() {\n    AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph(5);\n    assertFalse(graph.addEdge(-1, 0)); // invalid from vertex index\n    assertFalse(graph.addEdge(0, -1)); // invalid to vertex index\n    assertFalse(graph.addEdge(3, 4)); // edge already exists\n\n    assertTrue(graph.addEdge(0, 1)); // valid edge addition\n    assertEquals(graph.numberOfEdges(), 1); // check number of edges\n    assertEquals(graph._adjacency[0][1], AdjacencyMatrixGraph.EDGE_EXIST); // check adjacency matrix\n\n    graph = new AdjacencyMatrixGraph(5);\n    assertTrue(graph.addEdge(0, 2)); // valid edge addition\n    assertEquals(graph.numberOfEdges(), 1); // check number of edges\n    assertEquals(graph._adjacency[0][2], AdjacencyMatrixGraph.EDGE_EXIST); // check adjacency matrix\n}",
        "@Test\npublic void addEdgeTest() {\n    AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph(5);\n    \n    // Add edges to the graph\n    graph.addEdge(1, 2);\n    graph.addEdge(3, 4);\n    graph.addEdge(5, 6);\n    \n    // Check if edges were added correctly\n    assertEquals(true, graph.adjacencyOfEdgeDoesExist(1, 2));\n    assertEquals(true, graph.adjacencyOfEdgeDoesExist(3, 4));\n    assertEquals(true, graph.adjacencyOfEdgeDoesExist(5, 6));\n    \n    // Check if the number of edges is correct\n    assertEquals(3, graph.numberOfEdges());\n}",
        "@Test\npublic void addEdgeTest() {\n    AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph(4);\n    int fromVertex = 1;\n    int toVertex = 2;\n    \n    boolean result = graph.addEdge(fromVertex, toVertex);\n    assertTrue(result);\n    \n    // Check that the edge was added to both vertices\n    assertEquals(graph.adjacency()[fromVertex][toVertex], AdjacencyMatrixGraph.EDGE_EXIST);\n    assertEquals(graph.adjacency()[toVertex][fromVertex], AdjacencyMatrixGraph.EDGE_EXIST);\n    \n    // Check that the number of edges was incremented\n    assertEquals(graph.numberOfEdges(), 1);\n}"
    ]
}
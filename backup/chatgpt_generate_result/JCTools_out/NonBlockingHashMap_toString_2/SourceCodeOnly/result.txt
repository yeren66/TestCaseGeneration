Source code: 


@Override
public String toString() {
  Iterator<Entry<TypeK,TypeV>> i = entrySet().iterator();
  if( !i.hasNext())
    return "{}";

  StringBuilder sb = new StringBuilder();
  sb.append('{');
  for (;;) {
    Entry<TypeK,TypeV> e = i.next();
    TypeK key = e.getKey();
    TypeV value = e.getValue();
    sb.append(key   == this ? "(this Map)" : key);
    sb.append('=');
    sb.append(value == this ? "(this Map)" : value);
    if( !i.hasNext())
      return sb.append('}').toString();
    sb.append(", ");
  }
}



No.1 generated result --------------------------

@Test
public void toStringTest() {
    NonBlockingHashMap<TypeK, TypeV> map = new NonBlockingHashMap<>();
    map.put("key1", "value1");
    map.put("key2", "value2");
    map.put("key3", "value3");
  
    String expected = "{key1=value1, key2=value2, key3=value3}";
    String actual = map.toString();
  
    assertEquals(expected, actual);
}


No.2 generated result --------------------------

@Test
public void toStringTest() {
    NonBlockingHashMap<TypeK, TypeV> map = new NonBlockingHashMap<>();
    map.put(key1, value1);
    map.put(key2, value2);
    
    String expectedOutput = "{key1=value1, key2=value2}";
    String actualOutput = map.toString();
    
    assertEquals(expectedOutput, actualOutput);
}


No.3 generated result --------------------------

@Test
public void toStringTest() {
    NonBlockingHashMap<String, Integer> map = new NonBlockingHashMap<>();
    map.put("A", 1);
    map.put("B", 2);
    map.put("C", 3);
    
    String expected = "{A=1, B=2, C=3}";
    String actual = map.toString();
    
    assertEquals(expected, actual);
}


No.4 generated result --------------------------

@Test
public void toStringTest() {
    NonBlockingHashMap<TypeK, TypeV> map = new NonBlockingHashMap<>();
    map.put(key1, value1);
    map.put(key2, value2);
    String expectedOutput = "{key1=value1, key2=value2}";
    
    String actualOutput = map.toString();
    
    assertEquals(expectedOutput, actualOutput);
}


No.5 generated result --------------------------

@Test
public void toStringTest() {
    NonBlockingHashMap<TypeK, TypeV> map = new NonBlockingHashMap<>();
    map.put(key1, value1);
    map.put(key2, value2);
    
    String expected = "{key1=value1, key2=value2}";
    String actual = map.toString();
    
    assertEquals(expected, actual);
}


No.6 generated result --------------------------

@Test
public void toStringTest() {
    NonBlockingHashMap<TypeK, TypeV> map = new NonBlockingHashMap<>();
    map.put(key, value);
    
    String expected = "{key=value}";
    String actual = map.toString();
    
    assertEquals(expected, actual);
}


No.7 generated result --------------------------

@Test
public void toStringTest() {
    NonBlockingHashMap<TypeK, TypeV> map = new NonBlockingHashMap<>();
    map.put(key1, value1);
    map.put(key2, value2);
    map.put(key3, value3);
    
    String expected = "{key1=value1, key2=value2, key3=value3}";
    String actual = map.toString();
    
    assertEquals(expected, actual);
}


No.8 generated result --------------------------

@Test
public void toStringTest() {
    NonBlockingHashMap<TypeK, TypeV> map = new NonBlockingHashMap<>();
    map.put(key1, value1);
    map.put(key2, value2);
    String expected = "{key1=value1, key2=value2}";
    String actual = map.toString();
    assertEquals(expected, actual);
}


No.9 generated result --------------------------

package org.jctools.maps;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NonBlockingHashMapTest {
    @Test
    public void toStringTest() {
        NonBlockingHashMap<TypeK, TypeV> map = new NonBlockingHashMap<>();
        map.put(new TypeK(), new TypeV());
        map.put(new TypeK(), new TypeV());
        
        String expected = "{key1=value1, key2=value2}";
        String actual = map.toString();
        
        assertEquals(expected, actual);
    }
}


No.10 generated result --------------------------

@Test
public void toStringTest() {
    NonBlockingHashMap<String, Integer> map = new NonBlockingHashMap<>();
    map.put("key1", 1);
    map.put("key2", 2);
    map.put("key3", 3);

    String expected = "{key1=1, key2=2, key3=3}";
    String actual = map.toString();

    assertEquals(expected, actual);
}



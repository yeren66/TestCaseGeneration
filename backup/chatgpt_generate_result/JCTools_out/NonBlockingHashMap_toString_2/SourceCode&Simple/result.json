{
    "project_name": "JCTools",
    "file_name": "NonBlockingHashMap.java",
    "relative_path": "JCTools/jctools-core/src/main/java/org/jctools/maps/NonBlockingHashMap.java",
    "execute_path": "JCTools",
    "package": "org.jctools.maps",
    "docstring": "/**\n   * Returns a string representation of this map.  The string representation\n   * consists of a list of key-value mappings in the order returned by the\n   * map's <tt>entrySet</tt> view's iterator, enclosed in braces\n   * (<tt>\"{}\"</tt>).  Adjacent mappings are separated by the characters\n   * <tt>\", \"</tt> (comma and space).  Each key-value mapping is rendered as\n   * the key followed by an equals sign (<tt>\"=\"</tt>) followed by the\n   * associated value.  Keys and values are converted to strings as by\n   * {@link String#valueOf(Object)}.\n   *\n   * @return a string representation of this map\n   */",
    "source_code": "\n@Override\npublic String toString() {\n  Iterator<Entry<TypeK,TypeV>> i = entrySet().iterator();\n  if( !i.hasNext())\n    return \"{}\";\n\n  StringBuilder sb = new StringBuilder();\n  sb.append('{');\n  for (;;) {\n    Entry<TypeK,TypeV> e = i.next();\n    TypeK key = e.getKey();\n    TypeV value = e.getValue();\n    sb.append(key   == this ? \"(this Map)\" : key);\n    sb.append('=');\n    sb.append(value == this ? \"(this Map)\" : value);\n    if( !i.hasNext())\n      return sb.append('}').toString();\n    sb.append(\", \");\n  }\n}\n",
    "class_name": "NonBlockingHashMap",
    "method_name": "toString",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void toStringTest() {\n    NonBlockingHashMap<Integer, String> map = new NonBlockingHashMap<>();\n    map.put(1, \"One\");\n    map.put(2, \"Two\");\n    map.put(3, \"Three\");\n    \n    String expected = \"{1=One, 2=Two, 3=Three}\";\n    String actual = map.toString();\n    \n    assertEquals(expected, actual);\n}",
        "@Test\npublic void toStringTest() {\n    NonBlockingHashMap<TypeK, TypeV> map = new NonBlockingHashMap<>();\n    map.put(key1, value1);\n    map.put(key2, value2);\n    String expected = \"{key1=value1, key2=value2}\";\n    assertEquals(expected, map.toString());\n}",
        "@Test\npublic void toStringTest() {\n    NonBlockingHashMap<TypeK, TypeV> map = new NonBlockingHashMap<>();\n    map.put(key1, value1);\n    map.put(key2, value2);\n    map.put(key3, value3);\n\n    String expected = \"{key1=value1, key2=value2, key3=value3}\";\n    String actual = map.toString();\n\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void toStringTest() {\n    NonBlockingHashMap<String, Integer> map = new NonBlockingHashMap<>();\n    map.put(\"A\", 1);\n    map.put(\"B\", 2);\n    map.put(\"C\", 3);\n\n    String expected = \"{A=1, B=2, C=3}\";\n    String actual = map.toString();\n\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void toStringTest() {\n    NonBlockingHashMap<TypeK, TypeV> map = new NonBlockingHashMap<>();\n    map.put(key1, value1);\n    map.put(key2, value2);\n    \n    String expectedToString = \"{\" + key1 + \"=\" + value1 + \", \" + key2 + \"=\" + value2 + \"}\";\n    String actualToString = map.toString();\n    \n    assertEquals(expectedToString, actualToString);\n}",
        "@Test\npublic void toStringTest() {\n  NonBlockingHashMap<TypeK, TypeV> map = new NonBlockingHashMap<>();\n  map.put(key1, value1);\n  map.put(key2, value2);\n  map.put(key3, value3);\n  \n  String expected = \"{key1=value1, key2=value2, key3=value3}\";\n  String actual = map.toString();\n  \n  assertEquals(expected, actual);\n}",
        "@Test\npublic void toStringTest() {\n    NonBlockingHashMap<TypeK, TypeV> map = new NonBlockingHashMap<>();\n    // Add some entries to the map\n    map.put(key1, value1);\n    map.put(key2, value2);\n    // Invoke the toString method and verify the output\n    String expected = \"{key1=value1, key2=value2}\";\n    assertEquals(expected, map.toString());\n}",
        "@Test\npublic void toStringTest() {\n    NonBlockingHashMap map = new NonBlockingHashMap();\n    map.put(\"key1\", \"value1\");\n    map.put(\"key2\", \"value2\");\n    map.put(\"key3\", \"value3\");\n    String expected = \"{key1=value1, key2=value2, key3=value3}\";\n    assertEquals(expected, map.toString());\n}",
        "@Test\npublic void toStringTest() {\n  NonBlockingHashMap<TypeK, TypeV> map = new NonBlockingHashMap<>();\n  map.put(key1, value1);\n  map.put(key2, value2);\n  String expected = \"{key1=value1, key2=value2}\";\n  String actual = map.toString();\n  assertEquals(expected, actual);\n}",
        "@Test\npublic void toStringTest() {\n   // Create a NonBlockingHashMap instance\n   NonBlockingHashMap<TypeK, TypeV> map = new NonBlockingHashMap<>();\n\n   // Add some key-value pairs to the map\n   map.put(key1, value1);\n   map.put(key2, value2);\n   map.put(key3, value3);\n\n   // Call the toString() method and assert the output\n   String expectedOutput = \"{key1=value1, key2=value2, key3=value3}\";\n   assertEquals(expectedOutput, map.toString());\n}"
    ]
}
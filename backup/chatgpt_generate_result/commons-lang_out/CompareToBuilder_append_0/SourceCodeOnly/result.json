{
    "project_name": "commons-lang",
    "file_name": "CompareToBuilder.java",
    "relative_path": "commons-lang/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java",
    "execute_path": "commons-lang",
    "package": "org.apache.commons.lang3.builder",
    "docstring": "/**\n     * Appends to the {@code builder} the deep comparison of\n     * two {@code boolean} arrays.\n     *\n     * <ol>\n     *  <li>Check if arrays are the same using {@code ==}</li>\n     *  <li>Check if for {@code null}, {@code null} is less than non-{@code null}</li>\n     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n     *  <li>Check array contents element by element using {@link #append(boolean, boolean)}</li>\n     * </ol>\n     *\n     * @param lhs  left-hand side array\n     * @param rhs  right-hand side array\n     * @return this\n     */",
    "source_code": "\npublic CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {\n    if (comparison != 0) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null) {\n        comparison = -1;\n        return this;\n    }\n    if (rhs == null) {\n        comparison = 1;\n        return this;\n    }\n    if (lhs.length != rhs.length) {\n        comparison = lhs.length < rhs.length ? -1 : 1;\n        return this;\n    }\n    for (int i = 0; i < lhs.length && comparison == 0; i++) {\n        append(lhs[i], rhs[i]);\n    }\n    return this;\n}\n",
    "class_name": "CompareToBuilder",
    "method_name": "append",
    "arguments": [
        "boolean[] lhs",
        "boolean[] rhs"
    ],
    "generate_test": [
        "@Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        boolean[] lhs = {true, false, true};\n        boolean[] rhs = {true, false, true};\n        \n        CompareToBuilder result = builder.append(lhs, rhs);\n        \n        assertSame(builder, result);\n        \n        boolean[] nullLhs = null;\n        result = builder.append(nullLhs, rhs);\n        \n        assertEquals(-1, builder.comparison);\n        assertSame(builder, result);\n        \n        result = builder.append(lhs, null);\n        \n        assertEquals(1, builder.comparison);\n        assertSame(builder, result);\n        \n        boolean[] differentLengthLhs = {true, true};\n        result = builder.append(differentLengthLhs, rhs);\n        \n        assertEquals(-1, builder.comparison);\n        assertSame(builder, result);\n        \n        boolean[] differentValuesLhs = {true, false, true};\n        result = builder.append(differentValuesLhs, rhs);\n        \n        assertEquals(0, builder.comparison);\n        assertSame(builder, result);\n    }",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        boolean[] lhs = {true, false, true};\n        boolean[] rhs = {true, false, true};\n        \n        int comparison = builder.append(lhs, rhs).toComparison();\n        assertEquals(0, comparison);\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    \n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        \n        // Test case 1: when both lhs and rhs are null\n        boolean[] lhs1 = null;\n        boolean[] rhs1 = null;\n        CompareToBuilder result1 = builder.append(lhs1, rhs1);\n        assertEquals(0, result1.build());\n\n        // Test case 2: when lhs is null and rhs is not null\n        boolean[] lhs2 = null;\n        boolean[] rhs2 = {true, false};\n        CompareToBuilder result2 = builder.append(lhs2, rhs2);\n        assertTrue(result2.build() < 0);\n        \n        // Test case 3: when lhs is not null and rhs is null\n        boolean[] lhs3 = {true, false};\n        boolean[] rhs3 = null;\n        CompareToBuilder result3 = builder.append(lhs3, rhs3);\n        assertTrue(result3.build() > 0);\n        \n        // Test case 4: when lhs and rhs have different lengths\n        boolean[] lhs4 = {true, false, false};\n        boolean[] rhs4 = {true, false};\n        CompareToBuilder result4 = builder.append(lhs4, rhs4);\n        assertTrue(result4.build() > 0);\n        \n        // Test case 5: when lhs and rhs have the same length but different values\n        boolean[] lhs5 = {true, false, false};\n        boolean[] rhs5 = {true, true, false};\n        CompareToBuilder result5 = builder.append(lhs5, rhs5);\n        assertTrue(result5.build() < 0);\n        \n        // Test case 6: when lhs and rhs are identical\n        boolean[] lhs6 = {true, false, false};\n        boolean[] rhs6 = {true, false, false};\n        CompareToBuilder result6 = builder.append(lhs6, rhs6);\n        assertEquals(0, result6.build());\n    }\n}",
        "@Test\npublic void appendTest() {\n    boolean[] lhs = {true, false, true};\n    boolean[] rhs = {true, false, true};\n\n    CompareToBuilder builder = new CompareToBuilder();\n    builder.append(lhs, rhs);\n\n    int result = builder.toComparison();\n    assertEquals(0, result);\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        boolean[] lhs = {true, false, true};\n        boolean[] rhs = {false, true, false};\n        CompareToBuilder result = builder.append(lhs, rhs);\n        \n        assertEquals(result, builder);\n        assertEquals(-1, builder.comparison);\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder compareToBuilder = new CompareToBuilder();\n        boolean[] lhs = {true, false, true};\n        boolean[] rhs = {true, false, true};\n        \n        CompareToBuilder result = compareToBuilder.append(lhs, rhs);\n        assertEquals(compareToBuilder, result);\n        \n        boolean[] nullLhs = null;\n        CompareToBuilder result2 = compareToBuilder.append(nullLhs, rhs);\n        assertEquals(-1, compareToBuilder.build());\n        \n        boolean[] nullRhs = null;\n        CompareToBuilder result3 = compareToBuilder.append(lhs, nullRhs);\n        assertEquals(1, compareToBuilder.build());\n        \n        boolean[] differentLengthLhs = {true, false, true};\n        boolean[] differentLengthRhs = {true, false};\n        CompareToBuilder result4 = compareToBuilder.append(differentLengthLhs, differentLengthRhs);\n        assertEquals(-1, compareToBuilder.build());\n        \n        boolean[] differentValuesLhs = {true, false, true};\n        boolean[] differentValuesRhs = {false, false, true};\n        CompareToBuilder result5 = compareToBuilder.append(differentValuesLhs, differentValuesRhs);\n        assertEquals(-1, compareToBuilder.build());\n    }\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        boolean[] lhs = {true, false, true};\n        boolean[] rhs = {true, false, true};\n        builder.append(lhs, rhs);\n        assertEquals(0, builder.toComparison());\n    }\n}",
        "@Test\npublic void appendTest() {\n    CompareToBuilder builder = new CompareToBuilder();\n    \n    // Test case 1: lhs and rhs are both null\n    boolean[] lhs1 = null;\n    boolean[] rhs1 = null;\n    CompareToBuilder result1 = builder.append(lhs1, rhs1);\n    assertEquals(0, result1.comparison);\n    \n    // Test case 2: lhs is null and rhs is not null\n    boolean[] lhs2 = null;\n    boolean[] rhs2 = {true, false, true};\n    CompareToBuilder result2 = builder.append(lhs2, rhs2);\n    assertEquals(-1, result2.comparison);\n    \n    // Test case 3: lhs and rhs have different lengths\n    boolean[] lhs3 = {true, false, true};\n    boolean[] rhs3 = {true, true, false, true};\n    CompareToBuilder result3 = builder.append(lhs3, rhs3);\n    assertEquals(-1, result3.comparison);\n    \n    // Test case 4: lhs and rhs have the same length and same boolean values\n    boolean[] lhs4 = {true, false, true};\n    boolean[] rhs4 = {true, false, true};\n    CompareToBuilder result4 = builder.append(lhs4, rhs4);\n    assertEquals(0, result4.comparison);\n    \n    // Test case 5: lhs and rhs have the same length, but different boolean values\n    boolean[] lhs5 = {true, false, true};\n    boolean[] rhs5 = {false, true, false};\n    CompareToBuilder result5 = builder.append(lhs5, rhs5);\n    assertEquals(-1, result5.comparison);\n}",
        "package org.apache.commons.lang3.builder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CompareToBuilderTest {\n    @Test\n    public void appendTest() {\n        CompareToBuilder builder = new CompareToBuilder();\n        \n        boolean[] lhs1 = {true, false, true};\n        boolean[] rhs1 = {true, false, true};\n        builder.append(lhs1, rhs1);\n        assertEquals(0, builder.toComparison());\n        \n        boolean[] lhs2 = {false, false, true};\n        boolean[] rhs2 = {true, true, true};\n        builder.append(lhs2, rhs2);\n        assertTrue(builder.toComparison() < 0);\n        \n        boolean[] lhs3 = null;\n        boolean[] rhs3 = {true, true, true};\n        builder.append(lhs3, rhs3);\n        assertTrue(builder.toComparison() < 0);\n        \n        boolean[] lhs4 = {true, false};\n        boolean[] rhs4 = {true, false, true};\n        builder.append(lhs4, rhs4);\n        assertTrue(builder.toComparison() > 0);\n        \n        boolean[] lhs5 = {true, false, true};\n        boolean[] rhs5 = null;\n        builder.append(lhs5, rhs5);\n        assertTrue(builder.toComparison() > 0);\n        \n        boolean[] lhs6 = {true, true};\n        boolean[] rhs6 = {true, true};\n        builder.append(lhs6, rhs6);\n        assertEquals(0, builder.toComparison());\n    }\n}",
        "boolean[] lhs = {true, false, true};\nboolean[] rhs = {true, false, true};\nCompareToBuilder builder = new CompareToBuilder();\nbuilder.append(lhs, rhs);\nint result = builder.toComparison();\nassertEquals(0, result);"
    ]
}
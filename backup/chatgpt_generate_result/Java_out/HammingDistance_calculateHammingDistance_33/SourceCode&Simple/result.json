{
    "project_name": "Java",
    "file_name": "HammingDistance.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/strings/HammingDistance.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.strings",
    "docstring": "/**\n     * calculate the hamming distance between two strings of equal length\n     *\n     * @param s1 the first string\n     * @param s2 the second string\n     * @return {@code int} hamming distance\n     * @throws Exception\n     */",
    "source_code": "\npublic static int calculateHammingDistance(String s1, String s2) throws Exception {\n    if (s1.length() != s2.length()) {\n        throw new Exception(\"String lengths must be equal\");\n    }\n\n    int stringLength = s1.length();\n    int counter = 0;\n\n    for (int i = 0; i < stringLength; i++) {\n        if (s1.charAt(i) != s2.charAt(i)) {\n            counter++;\n        }\n    }\n    return counter;\n}\n",
    "class_name": "HammingDistance",
    "method_name": "calculateHammingDistance",
    "arguments": [
        "String s1",
        "String s2"
    ],
    "generate_test": [
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        // Test case 1: when s1 and s2 are equal\n        try {\n            int result = HammingDistance.calculateHammingDistance(\"abc\", \"abc\");\n            assertEquals(0, result);\n        } catch (Exception e) {\n            fail(\"An exception should not be thrown for equal strings\");\n        }\n        \n        // Test case 2: when s1 and s2 have different characters at the same positions\n        try {\n            int result = HammingDistance.calculateHammingDistance(\"abc\", \"def\");\n            assertEquals(3, result);\n        } catch (Exception e) {\n            fail(\"An exception should not be thrown for strings with different lengths\");\n        }\n        \n        // Test case 3: when s1 and s2 have different lengths\n        try {\n            HammingDistance.calculateHammingDistance(\"abc\", \"abcd\");\n            fail(\"Exception should be thrown for strings with different lengths\");\n        } catch (Exception e) {\n            String expectedMessage = \"String lengths must be equal\";\n            assertEquals(expectedMessage, e.getMessage());\n        }\n    }\n}",
        "@Test\npublic void calculateHammingDistanceTest() {\n    try {\n        int actualResult = HammingDistance.calculateHammingDistance(\"apple\", \"apply\");\n        int expectedResult = 2;\n        assertEquals(expectedResult, actualResult);\n    } catch(Exception e) {\n        fail(\"An exception occurred: \" + e.getMessage());\n    }\n}",
        "\nassertEquals(0, HammingDistance.calculateHammingDistance(\"\", \"\"));\nassertEquals(3, HammingDistance.calculateHammingDistance(\"abc\", \"def\"));\nassertEquals(1, HammingDistance.calculateHammingDistance(\"hello\", \"helle\"));\n",
        "@Test\n    public void calculateHammingDistanceTest() throws Exception {\n        String s1 = \"abcde\";\n        String s2 = \"abfde\";\n        int expectedDistance = 1;\n        int actualDistance = HammingDistance.calculateHammingDistance(s1, s2);\n        assertEquals(expectedDistance, actualDistance);\n    }\n",
        "@Test\npublic void calculateHammingDistanceTest() {\n    try {\n        int result = HammingDistance.calculateHammingDistance(\"abc\", \"cba\");\n        assertEquals(2, result);\n    } catch (Exception e) {\n        fail(\"Exception should not be thrown\");\n    }\n}",
        "@Test\npublic void calculateHammingDistanceTest() {\n    try {\n        int result = HammingDistance.calculateHammingDistance(\"abc\", \"abc\");\n        assertEquals(0, result);\n    } catch (Exception e) {\n        fail(\"An exception should not have been thrown\");\n    }\n}",
        "@Test\npublic void calculateHammingDistanceTest() {\n    try {\n        assertEquals(0, HammingDistance.calculateHammingDistance(\"abcde\", \"abcde\"));\n        assertEquals(3, HammingDistance.calculateHammingDistance(\"abcde\", \"abxyz\"));\n        assertEquals(5, HammingDistance.calculateHammingDistance(\"abcde\", \"vwxyz\"));\n    } catch (Exception e) {\n        assertNull(e);\n    }\n}",
        "@Test\npublic void calculateHammingDistanceTest() {\n    try {\n        // Test case 1: s1 and s2 are equal strings\n        String s1 = \"abc\";\n        String s2 = \"abc\";\n        int expected1 = 0;\n        int result1 = HammingDistance.calculateHammingDistance(s1, s2);\n        assertEquals(expected1, result1);\n\n        // Test case 2: s1 and s2 have different characters at same positions\n        String s3 = \"abc\";\n        String s4 = \"abd\";\n        int expected2 = 1;\n        int result2 = HammingDistance.calculateHammingDistance(s3, s4);\n        assertEquals(expected2, result2);\n\n        // Test case 3: s1 and s2 have different lengths\n        String s5 = \"abcd\";\n        String s6 = \"abc\";\n        Exception exception = assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(s5, s6);\n        });\n        String expectedErrorMessage = \"String lengths must be equal\";\n        String actualErrorMessage = exception.getMessage();\n        assertTrue(actualErrorMessage.contains(expectedErrorMessage));\n    } catch (Exception e) {\n        fail(\"An exception occurred\");\n    }\n}",
        "@Test\npublic void calculateHammingDistanceTest() {\n    try {\n        int distance = 0;\n        \n        // Test case 1: Two equal strings\n        distance = HammingDistance.calculateHammingDistance(\"abc\", \"abc\");\n        assertEquals(0, distance);\n        \n        // Test case 2: Two strings with one character difference\n        distance = HammingDistance.calculateHammingDistance(\"abc\", \"abd\");\n        assertEquals(1, distance);\n        \n        // Test case 3: Two strings with same length but different characters\n        distance = HammingDistance.calculateHammingDistance(\"abc\", \"def\");\n        assertEquals(3, distance);\n        \n        // Test case 4: Two strings with different lengths\n        assertThrows(Exception.class, () -> {\n            HammingDistance.calculateHammingDistance(\"abc\", \"ab\");\n        });\n        \n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n",
        "package com.thealgorithms.strings;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HammingDistanceTest {\n    @Test\n    public void calculateHammingDistanceTest() {\n        try {\n            int expected = 2;\n            int actual = HammingDistance.calculateHammingDistance(\"101010\", \"111011\");\n            assertEquals(expected, actual);\n        } catch (Exception e) {\n            fail(\"An exception occurred: \" + e.getMessage());\n        }\n    }\n}"
    ]
}
{
    "project_name": "Java",
    "file_name": "FibonacciHeap.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/heaps/FibonacciHeap.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.heaps",
    "docstring": "/**\n     * Creates a node (of type HeapNode) which contains the given key, and inserts it into the heap.\n     *\n     * @pre key>=0\n     * @post (numOfnodes = = $prev numOfnodes + 1)\n     * @post empty == false\n     * $ret = the HeapNode we inserted\n     */",
    "source_code": "\npublic HeapNode insert(int key) {\n    HeapNode toInsert = new HeapNode(key); // creates the node\n    if (this.empty()) {\n        this.min = toInsert;\n    } else { // tree is not empty\n        min.setNext(toInsert);\n        this.updateMin(toInsert);\n    }\n    this.numOfHeapNodes++;\n    this.numOfTrees++;\n    return toInsert;\n}\n",
    "class_name": "FibonacciHeap",
    "method_name": "insert",
    "arguments": [
        "int key"
    ],
    "generate_test": [
        "@Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n        HeapNode node = heap.insert(10);\n        assertFalse(heap.empty());\n        assertEquals(1, heap.size());\n        assertEquals(node, heap.findMin());\n    }",
        "@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    HeapNode node = heap.insert(5);\n    \n    // Test if node's key is set correctly\n    assertEquals(5, node.getKey());\n    \n    // Test if min is updated correctly\n    assertEquals(node, heap.findMin());\n    \n    // Test if num of heap nodes is incremented correctly\n    assertEquals(1, heap.size());\n    \n    // Test if num of trees is incremented correctly\n    assertEquals(1, heap.numOfTrees);\n}",
        "@Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n        HeapNode node = heap.insert(5);\n        assertFalse(heap.empty());\n        assertEquals(1, heap.size());\n        assertEquals(5, node.getKey());\n    }",
        "@Test\npublic void insertTest() {\n    FibonacciHeap fibonacciHeap = new FibonacciHeap();\n    HeapNode node = fibonacciHeap.insert(5);\n    assertFalse(fibonacciHeap.empty());\n    assertEquals(node, fibonacciHeap.findMin());\n    assertEquals(1, fibonacciHeap.size());\n}",
        "package com.thealgorithms.datastructures.heaps;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciHeapTest {\n    @Test\n    public void insertTest() {\n        FibonacciHeap heap = new FibonacciHeap();\n        heap.insert(5);\n        heap.insert(3);\n        heap.insert(8);\n\n        assertEquals(3, heap.size());\n    }\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    HeapNode node = heap.insert(5);\n    assertNotNull(node);\n    assertEquals(5, node.getKey());\n    assertFalse(heap.empty());\n    assertEquals(1, heap.size());\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    HeapNode node1 = heap.insert(5);\n    HeapNode node2 = heap.insert(10);\n    HeapNode node3 = heap.insert(3);\n    \n    assertFalse(heap.empty());\n    assertEquals(3, heap.size());\n    assertEquals(node1, heap.findMin());\n}",
        "@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap();\n    \n    // Empty heap - insert one node\n    FibonacciHeap.HeapNode node1 = heap.insert(5);\n    assertFalse(heap.empty());\n    assertEquals(node1, heap.findMin());\n    assertEquals(1, heap.size());\n    \n    // Non-empty heap - insert more nodes\n    FibonacciHeap.HeapNode node2 = heap.insert(3);\n    assertEquals(node2, heap.findMin());\n    assertEquals(2, heap.size());\n    \n    FibonacciHeap.HeapNode node3 = heap.insert(7);\n    assertEquals(node2, heap.findMin());\n    assertEquals(3, heap.size());\n    \n    // Check that the nodes are correctly linked\n    assertEquals(node1.getNext(), node3);\n    assertEquals(node3.getNext(), node2);\n    assertEquals(node2.getNext(), node1);\n}",
        "@Test\n    public void insertTest() {\n        FibonacciHeap fibonacciHeap = new FibonacciHeap();\n        HeapNode node1 = fibonacciHeap.insert(5);\n        HeapNode node2 = fibonacciHeap.insert(10);\n        \n        // Check if the heap is not empty\n        assertFalse(fibonacciHeap.empty());\n        \n        // Check if the size of the heap is correct\n        assertEquals(2, fibonacciHeap.size());\n        \n        // Check if the min node is set correctly\n        assertEquals(node1, fibonacciHeap.findMin());\n        \n        // Check if the nodes are inserted correctly\n        assertEquals(node1, node2.prev);\n        assertEquals(node2, node1.next);\n        \n        // Check if the number of heap nodes is increased correctly\n        assertEquals(2, fibonacciHeap.numOfHeapNodes);\n        \n        // Check if the number of trees is increased correctly\n        assertEquals(2, fibonacciHeap.numOfTrees);\n        \n        // Insert another node\n        HeapNode node3 = fibonacciHeap.insert(3);\n        \n        // Check if the size of the heap is correct\n        assertEquals(3, fibonacciHeap.size());\n        \n        // Check if the min node is updated correctly\n        assertEquals(node3, fibonacciHeap.findMin());\n        \n        // Check if the nodes are inserted correctly\n        assertEquals(node3, node2.next);\n        assertEquals(node2, node3.prev);\n        assertEquals(node1, node3.next);\n        assertEquals(node3, node1.prev);\n        \n        // Check if the number of heap nodes is increased correctly\n        assertEquals(3, fibonacciHeap.numOfHeapNodes);\n        \n        // Check if the number of trees is increased correctly\n        assertEquals(3, fibonacciHeap.numOfTrees);\n    }",
        "@Test\npublic void insertTest() {\n    FibonacciHeap heap = new FibonacciHeap(); // create a FibonacciHeap object\n    HeapNode node = heap.insert(5); // insert a node with key 5\n    assertNotNull(node); // check if the inserted node is not null\n    assertEquals(5, node.getKey()); // check if the key of the inserted node is 5\n    assertFalse(heap.empty()); // check if the heap is not empty after inserting the node\n    assertEquals(1, heap.size()); // check if the size of the heap is 1 after inserting the node\n    assertEquals(node, heap.findMin()); // check if the inserted node is the minimum node in the heap\n}"
    ]
}
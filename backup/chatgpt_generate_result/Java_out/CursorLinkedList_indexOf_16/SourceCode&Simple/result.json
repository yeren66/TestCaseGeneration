{
    "project_name": "Java",
    "file_name": "CursorLinkedList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/CursorLinkedList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * @return the logical index of the element within the list , not the actual\n     * index of the [cursorSpace] array\n     */",
    "source_code": "\npublic int indexOf(T element) {\n    Objects.requireNonNull(element);\n    Node<T> iterator = cursorSpace[head];\n    for (int i = 0; i < count; i++) {\n        if (iterator.element.equals(element)) {\n            return i;\n        }\n        iterator = cursorSpace[iterator.next];\n    }\n\n    return -1;\n}\n",
    "class_name": "CursorLinkedList",
    "method_name": "indexOf",
    "arguments": [
        "T element"
    ],
    "generate_test": [
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    list.append(1);\n    list.append(2);\n    list.append(3);\n    \n    int index = list.indexOf(2);\n    assertEquals(1, index);\n    \n    index = list.indexOf(4);\n    assertEquals(-1, index);\n}",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> linkedList = new CursorLinkedList<>();\n    linkedList.append(1);\n    linkedList.append(2);\n    linkedList.append(3);\n    linkedList.append(4);\n\n    int index1 = linkedList.indexOf(2);\n    assertEquals(1, index1);\n\n    int index2 = linkedList.indexOf(5);\n    assertEquals(-1, index2);\n}",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    list.append(10);\n    list.append(20);\n    list.append(30);\n    \n    int index = list.indexOf(20);\n    \n    assertEquals(1, index);\n}",
        "\n@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<>();\n    list.append(10);\n    list.append(20);\n    list.append(30);\n    \n    int index1 = list.indexOf(20);\n    assertEquals(1, index1);\n    \n    int index2 = list.indexOf(40);\n    assertEquals(-1, index2);\n}\n",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList list = new CursorLinkedList();\n    list.append(\"apple\");\n    list.append(\"banana\");\n    list.append(\"orange\");\n    \n    int index = list.indexOf(\"banana\");\n    \n    assertEquals(1, index);\n}",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> list = new CursorLinkedList<Integer>();\n    list.append(1);\n    list.append(2);\n    list.append(3);\n    \n    assertEquals(0, list.indexOf(1));\n    assertEquals(1, list.indexOf(2));\n    assertEquals(2, list.indexOf(3));\n    assertEquals(-1, list.indexOf(4));\n}",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<String> list = new CursorLinkedList<>();\n    list.append(\"A\");\n    list.append(\"B\");\n    list.append(\"C\");\n    \n    int indexA = list.indexOf(\"A\");\n    int indexB = list.indexOf(\"B\");\n    int indexC = list.indexOf(\"C\");\n    int indexD = list.indexOf(\"D\");\n    \n    assertEquals(0, indexA);\n    assertEquals(1, indexB);\n    assertEquals(2, indexC);\n    assertEquals(-1, indexD);\n}",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList list = new CursorLinkedList();\n    list.append(10);\n    list.append(20);\n    list.append(30);\n    \n    int index = list.indexOf(20);\n    \n    // Verify that the index of 20 is 1\n    assertEquals(1, index);\n}",
        "@Test\npublic void indexOfTest() {\n    CursorLinkedList<Integer> cursorList = new CursorLinkedList<>();\n    cursorList.append(10); // add elements to the list\n    cursorList.append(20);\n    cursorList.append(30);\n    \n    assertEquals(0, cursorList.indexOf(10)); // test if the index of 10 is 0\n    assertEquals(1, cursorList.indexOf(20)); // test if the index of 20 is 1\n    assertEquals(2, cursorList.indexOf(30)); // test if the index of 30 is 2\n    assertEquals(-1, cursorList.indexOf(40)); // test if the index of 40 is -1\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CursorLinkedListTest {\n\n    @Test\n    public void indexOfTest() {\n        CursorLinkedList<Integer> list = new CursorLinkedList<>();\n        list.append(1);\n        list.append(2);\n        list.append(3);\n\n        assertEquals(1, list.indexOf(2));\n        assertEquals(2, list.indexOf(3));\n\n        assertEquals(-1, list.indexOf(4));\n    }\n}"
    ]
}
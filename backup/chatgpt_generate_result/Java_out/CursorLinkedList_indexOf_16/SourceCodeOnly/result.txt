Source code: 


public int indexOf(T element) {
    Objects.requireNonNull(element);
    Node<T> iterator = cursorSpace[head];
    for (int i = 0; i < count; i++) {
        if (iterator.element.equals(element)) {
            return i;
        }
        iterator = cursorSpace[iterator.next];
    }

    return -1;
}



No.1 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.add(10);
    list.add(20);
    list.add(30);

    assertEquals(0, list.indexOf(10));
    assertEquals(1, list.indexOf(20));
    assertEquals(2, list.indexOf(30));
    assertEquals(-1, list.indexOf(40));
}


No.2 generated result --------------------------

public int indexOf(T element) {
    Objects.requireNonNull(element);
    Node<T> iterator = cursorSpace[head];
    for (int i = 0; i < count; i++) {
        if (iterator.element.equals(element)) {
            return i;
        }
        iterator = cursorSpace[iterator.next];
    }

    return -1;
}


package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    @Test
    public void indexOfTest() {
        CursorLinkedList<Integer> list = new CursorLinkedList<>();
        list.add(1);
        list.add(2);
        list.add(3);

        int index = list.indexOf(2);
        assertEquals(1, index);

        int indexNotFound = list.indexOf(4);
        assertEquals(-1, indexNotFound);
    }
}


No.3 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.add(10);
    list.add(20);
    list.add(30);
    list.add(40);
    
    // Test case 1: element present at beginning
    int index1 = list.indexOf(10);
    assertEquals(0, index1);
    
    // Test case 2: element present in the middle
    int index2 = list.indexOf(30);
    assertEquals(2, index2);
    
    // Test case 3: element present at the end
    int index3 = list.indexOf(40);
    assertEquals(3, index3);
    
    // Test case 4: element not present
    int index4 = list.indexOf(50);
    assertEquals(-1, index4);
}


No.4 generated result --------------------------

public void indexOfTest() {
    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.add(1);
    list.add(2);
    list.add(3);
    
    assertEquals(1, list.indexOf(2));
    assertEquals(2, list.indexOf(3));
    assertEquals(-1, list.indexOf(4));
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    @Test
    public void indexOfTest() {
        CursorLinkedList<Integer> list = new CursorLinkedList<>();
        list.add(10);
        list.add(20);
        list.add(30);

        int index = list.indexOf(20);

        assertEquals(1, index);
    }
}


No.6 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.add(10);
    list.add(20);
    list.add(30);
    
    int index = list.indexOf(20);
    
    assertEquals(1, index);
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    @Test
    public void indexOfTest() {
        CursorLinkedList<Integer> list = new CursorLinkedList<>();
        
        list.add(5);
        list.add(10);
        list.add(15);
        list.add(20);
        
        assertEquals(2, list.indexOf(15)); // check if index of 15 is correct
        assertEquals(-1, list.indexOf(25)); // check if index of non-existing element is -1
        assertEquals(-1, list.indexOf(null)); // check if index of null element is -1
    }
}


No.8 generated result --------------------------

@Test
public void indexOfTest() {
    CursorLinkedList<Integer> list = new CursorLinkedList<>();
    list.add(1);
    list.add(2);
    list.add(3);
    list.add(4);
    
    int index1 = list.indexOf(2);
    assertEquals(1, index1);
    
    int index2 = list.indexOf(5);
    assertEquals(-1, index2);
    
    int index3 = list.indexOf(3);
    assertEquals(2, index3);
}


No.9 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CursorLinkedListTest {
    @Test
    public void indexOfTest() {
        CursorLinkedList<Integer> list = new CursorLinkedList<>();
        list.add(10);
        list.add(20);
        list.add(30);
        list.add(40);
        
        int index = list.indexOf(30);
        assertEquals(2, index);
        
        index = list.indexOf(50);
        assertEquals(-1, index);
    }
}


No.10 generated result --------------------------

assertEquals(2, list.indexOf(3));
assertEquals(-1, list.indexOf(7));
assertEquals(0, list.indexOf(1));



{
    "project_name": "Java",
    "file_name": "SegmentTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/SegmentTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": null,
    "source_code": "/* A function to get the sum of the elements from index l to index r. This will be called\n * internally*/\nprivate int getSumTree(int start, int end, int q_start, int q_end, int seg_index) {\n    if (q_start <= start && q_end >= end) {\n        return this.seg_t[seg_index];\n    }\n\n    if (q_start > end || q_end < start) {\n        return 0;\n    }\n\n    int mid = start + (end - start) / 2;\n    return (getSumTree(start, mid, q_start, q_end, seg_index * 2 + 1) + getSumTree(mid + 1, end, q_start, q_end, seg_index * 2 + 2));\n}\n",
    "class_name": "SegmentTree",
    "method_name": "getSumTree",
    "arguments": [
        "int start",
        "int end",
        "int q_start",
        "int q_end",
        "int seg_index"
    ],
    "generate_test": [
        "@Test\npublic void getSumTreeTest() {\n    SegmentTree segmentTree = new SegmentTree(10, new int[]{1, 3, 5, 7, 9, 11, 13, 15, 17, 19});\n    \n    int sum = segmentTree.getSum(2, 7);\n    \n    assertEquals(59, sum);\n}",
        "@Test\npublic void getSumTreeTest() {\n    // Scenario 1: Test when q_start and q_end are within the range of start and end\n    int start = 0;\n    int end = 5;\n    int q_start = 1;\n    int q_end = 3;\n    int seg_index = 0;\n    \n    SegmentTree segmentTree = new SegmentTree(6, new int[]{1, 2, 3, 4, 5, 6});\n    int expectedResult = 9;\n    int actualResult = segmentTree.getSumTree(start, end, q_start, q_end, seg_index);\n    assertEquals(expectedResult, actualResult);\n    \n    // Scenario 2: Test when q_start and q_end are outside the range of start and end\n    start = 0;\n    end = 5;\n    q_start = 6;\n    q_end = 9;\n    seg_index = 0;\n    \n    segmentTree = new SegmentTree(6, new int[]{1, 2, 3, 4, 5, 6});\n    expectedResult = 0;\n    actualResult = segmentTree.getSumTree(start, end, q_start, q_end, seg_index);\n    assertEquals(expectedResult, actualResult);\n    \n    // Scenario 3: Test when q_start is greater than end and q_end is less than start\n    start = 0;\n    end = 5;\n    q_start = 9;\n    q_end = 6;\n    seg_index = 0;\n    \n    segmentTree = new SegmentTree(6, new int[]{1, 2, 3, 4, 5, 6});\n    expectedResult = 0;\n    actualResult = segmentTree.getSumTree(start, end, q_start, q_end, seg_index);\n    assertEquals(expectedResult, actualResult);\n}",
        "@Test\npublic void getSumTreeTest() {\n    SegmentTree segmentTree = new SegmentTree(7, new int[]{1, 3, 5, 7, 9, 11, 13});\n    int sum = segmentTree.getSum(2, 5);\n    assertEquals(32, sum);\n}",
        "@Test\n    public void getSumTreeTest() {\n        SegmentTree segmentTree = new SegmentTree(5, new int[]{1, 3, 5, 7, 9});\n        int actual = segmentTree.getSum(1, 3);\n        int expected = 15;\n\n        assertEquals(expected, actual);\n    }",
        "@Test\npublic void getSumTreeTest() {\n    SegmentTree segmentTree = new SegmentTree(5, new int[]{1, 2, 3, 4, 5});\n    int sum = segmentTree.getSum(1, 3);\n    assertEquals(9, sum);\n}",
        "@Test\npublic void getSumTreeTest() {\n    SegmentTree segmentTree = new SegmentTree(5, new int[]{1, 2, 3, 4, 5});\n    int sum = segmentTree.getSum(1, 3);\n    assertEquals(9, sum);\n}",
        "@Test\npublic void getSumTreeTest() {\n    int[] arr = {1, 3, 5, 7, 9, 11};\n    SegmentTree segmentTree = new SegmentTree(arr.length, arr);\n    int sum = segmentTree.getSum(2, 4);\n    assertEquals(21, sum);\n}",
        "@Test\n    public void getSumTreeTest() {\n        SegmentTree segmentTree = new SegmentTree(5, new int[]{1, 2, 3, 4, 5});\n        \n        // Test case 1: getSumTree(0, 4, 0, 4, 0)\n        int expectedSum1 = 15;\n        int actualSum1 = segmentTree.getSumTree(0, 4, 0, 4, 0);\n        assertEquals(expectedSum1, actualSum1);\n        \n        // Test case 2: getSumTree(0, 4, 2, 3, 0)\n        int expectedSum2 = 7;\n        int actualSum2 = segmentTree.getSumTree(0, 4, 2, 3, 0);\n        assertEquals(expectedSum2, actualSum2);\n    }",
        "@Test\npublic void getSumTreeTest() {\n    SegmentTree segmentTree = new SegmentTree(5, new int[]{1, 2, 3, 4, 5});\n    int sum = segmentTree.getSum(1, 3);\n    assertEquals(9, sum);\n}",
        "@Test\npublic void getSumTreeTest() {\n    SegmentTree segmentTree = new SegmentTree(5, new int[]{1, 2, 3, 4, 5});\n    int sum = segmentTree.getSum(1, 3);\n    assertEquals(9, sum);\n}"
    ]
}
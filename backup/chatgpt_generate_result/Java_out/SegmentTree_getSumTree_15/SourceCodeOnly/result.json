{
    "project_name": "Java",
    "file_name": "SegmentTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/SegmentTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": null,
    "source_code": "/* A function to get the sum of the elements from index l to index r. This will be called\n * internally*/\nprivate int getSumTree(int start, int end, int q_start, int q_end, int seg_index) {\n    if (q_start <= start && q_end >= end) {\n        return this.seg_t[seg_index];\n    }\n\n    if (q_start > end || q_end < start) {\n        return 0;\n    }\n\n    int mid = start + (end - start) / 2;\n    return (getSumTree(start, mid, q_start, q_end, seg_index * 2 + 1) + getSumTree(mid + 1, end, q_start, q_end, seg_index * 2 + 2));\n}\n",
    "class_name": "SegmentTree",
    "method_name": "getSumTree",
    "arguments": [
        "int start",
        "int end",
        "int q_start",
        "int q_end",
        "int seg_index"
    ],
    "generate_test": [
        "@Test\npublic void getSumTreeTest() {\n    int[] seg_t = {1, 2, 3, 4, 5, 6, 7}; // example segment tree array\n    SegmentTree segmentTree = new SegmentTree(seg_t); // create a new instance of SegmentTree\n    int sum = segmentTree.getSumTree(0, seg_t.length - 1, 2, 5, 0); // calculate sum from index 2 to 5\n    assertEquals(18, sum); // assert that the calculated sum is equal to the expected sum\n}",
        "@Test\npublic void getSumTreeTest() {\n    SegmentTree tree = new SegmentTree(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10});\n    int sum = tree.getSumTree(0, 9, 2, 7, 0);\n    assertEquals(27, sum);\n}",
        "@Test\npublic void getSumTreeTest() {\n    SegmentTree tree = new SegmentTree(new int[]{1, 3, 5, 7, 9, 11});\n    assertEquals(6, tree.getSumTree(0, 5));\n    assertEquals(24, tree.getSumTree(1, 4));\n    assertEquals(5, tree.getSumTree(2, 2));\n    assertEquals(9, tree.getSumTree(3, 3));\n}",
        "@Test\npublic void getSumTreeTest() {\n    SegmentTree segmentTree = new SegmentTree();\n\n    // Test Case 1\n    int[] input1 = {1, 2, 3, 4, 5};\n    segmentTree.buildTree(input1);\n    assertEquals(segmentTree.getSumTree(0, 4, 0, 4, 0), 15);\n\n    // Test Case 2\n    int[] input2 = {2, 4, 6, 8, 10};\n    segmentTree.buildTree(input2);\n    assertEquals(segmentTree.getSumTree(1, 3, 0, 4, 0), 18);\n}",
        "@Test\npublic void getSumTreeTest() {\n    SegmentTree tree = new SegmentTree(new int[] {1, 3, 5, 7, 9, 11});\n    int sum = tree.getSumTree(0, tree.getLength() - 1, 2, 4, 0);\n    assertEquals(21, sum);\n}",
        "@Test\npublic void getSumTreeTest() {\n    SegmentTree tree = new SegmentTree(new int[]{1, 3, 5, 7, 9, 11});\n    int result = tree.getSumTree(0, 5, 1, 4, 0);\n    assertEquals(24, result);\n}",
        "@Test\npublic void getSumTreeTest() {\n    int[] arr = {1, 2, 3, 4, 5};\n    int[] seg_t = {0, 15, 6, 9, 1, 5, 4, 2, 3, 0, 0, 0, 0, 0, 0};\n    int q_start = 1;\n    int q_end = 4;\n    int seg_index = 0;\n    \n    SegmentTree segmentTree = new SegmentTree(arr);\n    segmentTree.seg_t = seg_t;\n    \n    int expectedSum = 14;\n    int actualSum = segmentTree.getSumTree(0, arr.length - 1, q_start, q_end, seg_index);\n    \n    assertEquals(expectedSum, actualSum);\n}",
        "@Test\npublic void getSumTreeTest() {\n    // Create instance of SegmentTree\n    SegmentTree segmentTree = new SegmentTree(new int[]{1, 3, 5, 7, 9, 11});\n\n    // Test case 1: Test when q_start = 0 and q_end = 2\n    int result1 = segmentTree.getSumTree(0, 5, 0, 2, 0);\n    assertEquals(9, result1);\n\n    // Test case 2: Test when q_start = 2 and q_end = 4\n    int result2 = segmentTree.getSumTree(0, 5, 2, 4, 0);\n    assertEquals(21, result2);\n\n    // Test case 3: Test when q_start = 1 and q_end = 3\n    int result3 = segmentTree.getSumTree(0, 5, 1, 3, 0);\n    assertEquals(15, result3);\n}",
        "@Test\npublic void getSumTreeTest() {\n    SegmentTree segmentTree = new SegmentTree(new int[]{1, 2, 3, 4, 5});\n    int sum = segmentTree.getSumTree(0, 4, 1, 3, 0);\n    assertEquals(9, sum);\n}",
        "@Test\npublic void getSumTreeTest() {\n    SegmentTree segmentTree = new SegmentTree(<FILL>);\n    int sum = segmentTree.getSumTree(0, segmentTree.arr.length - 1, <FILL>, <FILL>, 0);\n    assertEquals(<FILL expected sum>, sum);\n}"
    ]
}
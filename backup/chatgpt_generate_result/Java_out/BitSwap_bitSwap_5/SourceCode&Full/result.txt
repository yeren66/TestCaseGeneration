Source code: 

/*
 * @brief Swaps the bits at the position posA and posB from data
 */
public static int bitSwap(int data, final int posA, final int posB) {
    if (SingleBitOperations.getBit(data, posA) != SingleBitOperations.getBit(data, posB)) {
        data ^= (1 << posA) ^ (1 << posB);
    }
    return data;
}



No.1 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 10; // Example input data
        int posA = 2; // Example position A
        int posB = 4; // Example position B

        int expected = 26; // Expected output after swapping bits at posA and posB
        int actual = BitSwap.bitSwap(data, posA, posB);

        assertEquals(expected, actual); // Verify if the output matches the expected result
    }
}


No.2 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 5;
        int posA = 1;
        int posB = 3;
        
        int result = BitSwap.bitSwap(data, posA, posB);
        int expected = 13;
        
        assertEquals(expected, result);
    }
}


No.3 generated result --------------------------

@Test
public void bitSwapTest() {
    // Test case 1: Swapping bits with different values
    int data1 = 8; // 1000 in binary
    int posA1 = 3; // bit at position 3
    int posB1 = 1; // bit at position 1
    int expected1 = 10; // 1010 in binary
    int result1 = BitSwap.bitSwap(data1, posA1, posB1);
    assertEquals(expected1, result1, "Bit swap failed for test case 1");

    // Test case 2: Swapping bits with same values
    int data2 = 7; // 111 in binary
    int posA2 = 2; // bit at position 2
    int posB2 = 0; // bit at position 0
    int expected2 = 7; // 111 in binary (bits remain the same)
    int result2 = BitSwap.bitSwap(data2, posA2, posB2);
    assertEquals(expected2, result2, "Bit swap failed for test case 2");
}


No.4 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int result = BitSwap.bitSwap(10, 2, 3);
        assertEquals(14, result);
    }
}


No.5 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 0b10101010; // example data
        int expected = 0b01010101; // expected result after swapping
        int actual = BitSwap.bitSwap(data, 3, 7); // swapping bits at position 3 and 7
        
        assertEquals(expected, actual);
    }
}


No.6 generated result --------------------------

@Test
public void bitSwapTest() {
    // Test case 1: Swapping bits 1 and 3
    int result1 = BitSwap.bitSwap(10, 1, 3);
    assertEquals(14, result1);
    
    // Test case 2: Swapping bits 0 and 2
    int result2 = BitSwap.bitSwap(5, 0, 2);
    assertEquals(1, result2);
    
    // Test case 3: Swapping bits 2 and 4
    int result3 = BitSwap.bitSwap(17, 2, 4);
    assertEquals(13, result3);
}


No.7 generated result --------------------------

@Test
public void bitSwapTest() {
    int data = 5; // example data
    int expected = 9; // expected result after bit swap
    int posA = 1; // position of bit A
    int posB = 3; // position of bit B
    
    int result = BitSwap.bitSwap(data, posA, posB);
    
    assertEquals(expected, result);
}


No.8 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 5;
        int posA = 2;
        int posB = 4;

        int expectedResult = 21;
        int actualResult = BitSwap.bitSwap(data, posA, posB);
        assertEquals(expectedResult, actualResult);
    }
}


No.9 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 0b10101110;
        int posA = 2;
        int posB = 5;
        int expected = 0b11100010;
        
        int result = BitSwap.bitSwap(data, posA, posB);
        
        assertEquals(expected, result);
    }
}


No.10 generated result --------------------------

package com.thealgorithms.bitmanipulation;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class BitSwapTest {
    @Test
    public void bitSwapTest() {
        int data = 0b11001010; // Example input data
        int posA = 2; // Example position A
        int posB = 4; // Example position B
        
        // Perform the bit swap operation
        int result = BitSwap.bitSwap(data, posA, posB);
        
        // Verify the result
        assertEquals(0b11100010, result); // Expected output after bit swap
        
        // Additional test case
        int data2 = 0b00000000;
        int posA2 = 1;
        int posB2 = 5;
        
        int result2 = BitSwap.bitSwap(data2, posA2, posB2);
        
        assertEquals(0b00100000, result2);
    }
}



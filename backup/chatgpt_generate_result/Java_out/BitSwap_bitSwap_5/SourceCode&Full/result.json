{
    "project_name": "Java",
    "file_name": "BitSwap.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/bitmanipulation/BitSwap.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.bitmanipulation",
    "docstring": null,
    "source_code": "/*\n * @brief Swaps the bits at the position posA and posB from data\n */\npublic static int bitSwap(int data, final int posA, final int posB) {\n    if (SingleBitOperations.getBit(data, posA) != SingleBitOperations.getBit(data, posB)) {\n        data ^= (1 << posA) ^ (1 << posB);\n    }\n    return data;\n}\n",
    "class_name": "BitSwap",
    "method_name": "bitSwap",
    "arguments": [
        "int data",
        "int posA",
        "int posB"
    ],
    "generate_test": [
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 10; // Example input data\n        int posA = 2; // Example position A\n        int posB = 4; // Example position B\n\n        int expected = 26; // Expected output after swapping bits at posA and posB\n        int actual = BitSwap.bitSwap(data, posA, posB);\n\n        assertEquals(expected, actual); // Verify if the output matches the expected result\n    }\n}",
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 5;\n        int posA = 1;\n        int posB = 3;\n        \n        int result = BitSwap.bitSwap(data, posA, posB);\n        int expected = 13;\n        \n        assertEquals(expected, result);\n    }\n}",
        "@Test\npublic void bitSwapTest() {\n    // Test case 1: Swapping bits with different values\n    int data1 = 8; // 1000 in binary\n    int posA1 = 3; // bit at position 3\n    int posB1 = 1; // bit at position 1\n    int expected1 = 10; // 1010 in binary\n    int result1 = BitSwap.bitSwap(data1, posA1, posB1);\n    assertEquals(expected1, result1, \"Bit swap failed for test case 1\");\n\n    // Test case 2: Swapping bits with same values\n    int data2 = 7; // 111 in binary\n    int posA2 = 2; // bit at position 2\n    int posB2 = 0; // bit at position 0\n    int expected2 = 7; // 111 in binary (bits remain the same)\n    int result2 = BitSwap.bitSwap(data2, posA2, posB2);\n    assertEquals(expected2, result2, \"Bit swap failed for test case 2\");\n}",
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int result = BitSwap.bitSwap(10, 2, 3);\n        assertEquals(14, result);\n    }\n}",
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 0b10101010; // example data\n        int expected = 0b01010101; // expected result after swapping\n        int actual = BitSwap.bitSwap(data, 3, 7); // swapping bits at position 3 and 7\n        \n        assertEquals(expected, actual);\n    }\n}",
        "@Test\npublic void bitSwapTest() {\n    // Test case 1: Swapping bits 1 and 3\n    int result1 = BitSwap.bitSwap(10, 1, 3);\n    assertEquals(14, result1);\n    \n    // Test case 2: Swapping bits 0 and 2\n    int result2 = BitSwap.bitSwap(5, 0, 2);\n    assertEquals(1, result2);\n    \n    // Test case 3: Swapping bits 2 and 4\n    int result3 = BitSwap.bitSwap(17, 2, 4);\n    assertEquals(13, result3);\n}",
        "@Test\npublic void bitSwapTest() {\n    int data = 5; // example data\n    int expected = 9; // expected result after bit swap\n    int posA = 1; // position of bit A\n    int posB = 3; // position of bit B\n    \n    int result = BitSwap.bitSwap(data, posA, posB);\n    \n    assertEquals(expected, result);\n}",
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 5;\n        int posA = 2;\n        int posB = 4;\n\n        int expectedResult = 21;\n        int actualResult = BitSwap.bitSwap(data, posA, posB);\n        assertEquals(expectedResult, actualResult);\n    }\n}",
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 0b10101110;\n        int posA = 2;\n        int posB = 5;\n        int expected = 0b11100010;\n        \n        int result = BitSwap.bitSwap(data, posA, posB);\n        \n        assertEquals(expected, result);\n    }\n}",
        "package com.thealgorithms.bitmanipulation;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BitSwapTest {\n    @Test\n    public void bitSwapTest() {\n        int data = 0b11001010; // Example input data\n        int posA = 2; // Example position A\n        int posB = 4; // Example position B\n        \n        // Perform the bit swap operation\n        int result = BitSwap.bitSwap(data, posA, posB);\n        \n        // Verify the result\n        assertEquals(0b11100010, result); // Expected output after bit swap\n        \n        // Additional test case\n        int data2 = 0b00000000;\n        int posA2 = 1;\n        int posB2 = 5;\n        \n        int result2 = BitSwap.bitSwap(data2, posA2, posB2);\n        \n        assertEquals(0b00100000, result2);\n    }\n}"
    ]
}
{
    "project_name": "Java",
    "file_name": "IIRFilter.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/audiofilters/IIRFilter.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.audiofilters",
    "docstring": "/**\n     * Process a single sample\n     *\n     * @param sample the sample to process\n     * @return the processed sample\n     */",
    "source_code": "\npublic double process(double sample) {\n    double result = 0.0;\n\n    // Process\n    for (int i = 1; i <= order; i++) {\n        result += (coeffsB[i] * historyX[i - 1] - coeffsA[i] * historyY[i - 1]);\n    }\n    result = (result + coeffsB[0] * sample) / coeffsA[0];\n\n    // Feedback\n    for (int i = order - 1; i > 0; i--) {\n        historyX[i] = historyX[i - 1];\n        historyY[i] = historyY[i - 1];\n    }\n\n    historyX[0] = sample;\n    historyY[0] = result;\n\n    return result;\n}\n",
    "class_name": "IIRFilter",
    "method_name": "process",
    "arguments": [
        "double sample"
    ],
    "generate_test": [
        "public void processTest() {\n    IIRFilter iirFilter = new IIRFilter(3);\n    double[] coeffsA = {1.0, 0.5, 0.25, 0.125};\n    double[] coeffsB = {0.5, 0.25, 0.125, 1.0};\n    iirFilter.setCoeffs(coeffsA, coeffsB);\n    \n    double sample = 0.75;\n    double expected = 0.75;\n    double result = iirFilter.process(sample);\n    \n    assertEquals(expected, result, 0.001);\n}",
        "package com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        IIRFilter filter = new IIRFilter(3);\n        double[] aCoeffs = {1.0, 1.5, 0.5};\n        double[] bCoeffs = {0.7, 0.3, 0.9};\n        filter.setCoeffs(aCoeffs, bCoeffs);\n\n        // Test case 1\n        double sample1 = 0.5;\n        double expected1 = 0.175;\n        double result1 = filter.process(sample1);\n        assertEquals(expected1, result1);\n\n        // Test case 2\n        double sample2 = 1.25;\n        double expected2 = 0.6375;\n        double result2 = filter.process(sample2);\n        assertEquals(expected2, result2);\n\n        // Test case 3\n        double sample3 = -0.75;\n        double expected3 = 0.5125;\n        double result3 = filter.process(sample3);\n        assertEquals(expected3, result3);\n\n        // Test case 4\n        double sample4 = 0.2;\n        double expected4 = 0.275;\n        double result4 = filter.process(sample4);\n        assertEquals(expected4, result4);\n    }\n}",
        "package com.thealgorithms.audiofilters;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IIRFilterTest {\n    @Test\n    public void processTest() {\n        // Initialize the IIRFilter object\n        IIRFilter filter = new IIRFilter(3);\n        \n        // Set the coefficients\n        double[] aCoeffs = {0.5, -0.25, 0.1};\n        double[] bCoeffs = {0.2, 0.4, 0.6};\n        filter.setCoeffs(aCoeffs, bCoeffs);\n        \n        // Set the input sample\n        double sample = 0.8;\n        \n        // Call the process method\n        double result = filter.process(sample);\n        \n        // Check the expected output\n        double expected = 0.07692307692307693;\n        assertEquals(expected, result);\n        \n        // Check the historyX array after the process method call\n        double[] expectedHistoryX = {0.8, 0.0, 0.0};\n        assertArrayEquals(expectedHistoryX, filter.historyX);\n        \n        // Check the historyY array after the process method call\n        double[] expectedHistoryY = {0.09230769230769231, 0.0, 0.0};\n        assertArrayEquals(expectedHistoryY, filter.historyY);\n    }\n}",
        "@Test\npublic void processTest() {\n    IIRFilter filter = new IIRFilter(3);\n    double[] aCoeffs = {1.2, 2.3, 3.4};\n    double[] bCoeffs = {0.5, 0.6, 0.7};\n    filter.setCoeffs(aCoeffs, bCoeffs);\n    \n    double sample = 1.0;\n    double expectedResult = 0.0;\n    \n    // Get expected result manually\n    \n    double[] historyX = {0.0, 0.0, 0.0};\n    double[] historyY = {0.0, 0.0, 0.0};\n    for (int i = 1; i <= filter.getOrder(); i++) {\n        expectedResult += (bCoeffs[i] * historyX[i - 1] - aCoeffs[i] * historyY[i - 1]);\n    }\n    expectedResult = (expectedResult + bCoeffs[0] * sample) / aCoeffs[0];\n    \n    // Process\n    double actualResult = filter.process(sample);\n    \n    // Verify the expected result matches the actual result\n    assertEquals(expectedResult, actualResult);\n    \n    // Verify the historyX and historyY arrays have been updated correctly\n    assertArrayEquals(historyX, filter.getHistoryX());\n    assertArrayEquals(historyY, filter.getHistoryY());\n}",
        "public void processTest() {\n    IIRFilter filter = new IIRFilter(3);\n    double[] aCoeffs = {1.0, 2.0, 3.0};\n    double[] bCoeffs = {0.5, 0.5, 0.5};\n    filter.setCoeffs(aCoeffs, bCoeffs);\n\n    double sample = 1.5;\n    double expected = 2.0; // Expected result of the process method\n\n    double result = filter.process(sample);\n\n    assertEquals(expected, result, 0.0001);\n}",
        "@Test\npublic void processTest() {\n    // Set up\n    double[] coeffsA = {1.0, 2.0, 1.0};\n    double[] coeffsB = {0.5, 1.0, 0.5};\n    int order = 2;\n\n    IIRFilter filter = new IIRFilter(order);\n    filter.setCoeffs(coeffsA, coeffsB);\n\n    // Test\n    double sample = 2.0;\n    double expected = 3.0; // Fill in the expected result\n    double result = filter.process(sample);\n\n    // Assert\n    assertEquals(expected, result);\n}",
        "@Test\npublic void processTest() {\n    double sample = 1.0;\n    double[] aCoeffs = {1.0, 2.0, 3.0};\n    double[] bCoeffs = {4.0, 5.0, 6.0};\n    \n    IIRFilter filter = new IIRFilter(3);\n    filter.setCoeffs(aCoeffs, bCoeffs);\n    \n    double result = filter.process(sample);\n    \n    assertEquals(expectedValue, result);\n}",
        "@Test\npublic void processTest() {\n    IIRFilter filter = new IIRFilter(3);\n    double[] aCoeffs = {0.1, 0.2, 0.3};\n    double[] bCoeffs = {0.4, 0.5, 0.6};\n    filter.setCoeffs(aCoeffs, bCoeffs);\n\n    double sample = 0.7;\n    double expected = 0.865;\n\n    double result = filter.process(sample);\n\n    assertEquals(expected, result, 0.001);\n}",
        "@Test\npublic void processTest() {\n    IIRFilter filter = new IIRFilter(3);\n    double[] coeffsA = {1.0, 2.0, 1.0};\n    double[] coeffsB = {0.5, 1.0, 0.5};\n    filter.setCoeffs(coeffsA, coeffsB);\n\n    double[] historyX = {0.0, 0.0, 0.0};\n    double[] historyY = {0.0, 0.0, 0.0};\n\n    filter.historyX = historyX;\n    filter.historyY = historyY;\n\n    double sample = 2.0;\n    double expectedOutput = <output from process method>;\n\n    double result = filter.process(sample);\n    assertEquals(expectedOutput, result);\n}",
        "@Test\npublic void processTest() {\n    double sample = 0.5;\n    int order = 3;\n    double[] coeffsA = {0.2, 0.3, 0.4, 0.5};\n    double[] coeffsB = {0.1, 0.2, 0.3, 0.4};\n    double[] historyX = {0.1, 0.2, 0.3, 0.4};\n    double[] historyY = {0.2, 0.3, 0.4, 0.5};\n    \n    IIRFilter filter = new IIRFilter(order);\n    filter.setCoeffs(coeffsA, coeffsB);\n    double result = filter.process(sample);\n    \n    assert(result == <expect_result>);\n}"
    ]
}
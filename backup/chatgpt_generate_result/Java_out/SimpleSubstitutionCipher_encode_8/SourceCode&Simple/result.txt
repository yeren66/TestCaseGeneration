Source code: 


public static String encode(String message, String cipherSmall) {
    StringBuilder encoded = new StringBuilder();

    // This map is used to encode
    Map<Character, Character> cipherMap = new HashMap<>();

    char beginSmallLetter = 'a';
    char beginCapitalLetter = 'A';

    cipherSmall = cipherSmall.toLowerCase();
    String cipherCapital = cipherSmall.toUpperCase();

    // To handle Small and Capital letters
    for (int i = 0; i < cipherSmall.length(); i++) {
        cipherMap.put(beginSmallLetter++, cipherSmall.charAt(i));
        cipherMap.put(beginCapitalLetter++, cipherCapital.charAt(i));
    }

    for (int i = 0; i < message.length(); i++) {
        if (Character.isAlphabetic(message.charAt(i))) {
            encoded.append(cipherMap.get(message.charAt(i)));
        } else {
            encoded.append(message.charAt(i));
        }
    }

    return encoded.toString();
}



No.1 generated result --------------------------

@Test
    public void encodeTest() {
        String message = "Hello, World!";
        String cipherSmall = "bcdefghijklmnopqrstuvwxyza";
        
        String expected = "Ifmmp, Xpsme!";
        String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);
        
        assertEquals(expected, actual);
    }


No.2 generated result --------------------------

@Test
public void encodeTest() {
    String message = "Hello World";
    String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";
    String expected = "Svool Dliow";

    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);

    assertEquals(expected, actual);
}


No.3 generated result --------------------------

@Test
public void encodeTest() {
    String message = "Hello World!";
    String cipherSmall = "plmoknijbuhvygctfxrdzeswaq";
    String expected = "Ittqd Tqyql!";
    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);
    assertEquals(expected, actual);
}


No.4 generated result --------------------------

@Test
public void encodeTest() {
    String message = "Hello World";
    String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";

    String expected = "Svool Dliow";
    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);

    assertEquals(expected, actual);
}


No.5 generated result --------------------------

@Test
public void encodeTest() {
    String message = "Hello, World!";
    String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";
    
    String expectedOutput = "Svool, Dliow!";
    String actualOutput = SimpleSubstitutionCipher.encode(message, cipherSmall);
    
    assertEquals(expectedOutput, actualOutput);
}


No.6 generated result --------------------------

@Test
public void encodeTest() {
    String message = "Hello, World!";
    String cipherSmall = "hdyogul";
    String expected = "Hyylo, Wyrld!";
    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);
    assertEquals(expected, actual);
}


No.7 generated result --------------------------

@Test
public void encodeTest() {
    // Input
    String message = "Hello World";
    String cipherSmall = "qwertyuiopasdfghjklzxcvbnm";
    
    // Expected output
    String expected = "Itssg Pvwad";

    // Actual output
    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);
    
    // Assertion
    assertEquals(expected, actual);
}


No.8 generated result --------------------------

@Test
public void encodeTest() {
    String message = "Hello world";
    String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";

    String expected = "Svool dliow";
    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);

    assertEquals(expected, actual);
}


No.9 generated result --------------------------

@Test
public void encodeTest() {
    String message = "Hello World";
    String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";
    
    String expected = "Svool Dliow";
    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);
    
    assertEquals(expected, actual);
}


No.10 generated result --------------------------

@Test
public void encodeTest() {
    // Test case 1: Basic encode test
    String message = "Hello, World!";
    String cipherSmall = "defghijklmnopqrstuvwxyzabc";
    String expected = "GEEKk, Zbqk!";
    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);
    assertEquals(expected, actual);

    // Test case 2: Empty message
    message = "";
    cipherSmall = "defghijklmnopqrstuvwxyzabc";
    expected = "";
    actual = SimpleSubstitutionCipher.encode(message, cipherSmall);
    assertEquals(expected, actual);

    // Test case 3: All uppercase message
    message = "HELLO, WORLD!";
    cipherSmall = "defghijklmnopqrstuvwxyzabc";
    expected = "GEEKk, Zbqk!";
    actual = SimpleSubstitutionCipher.encode(message, cipherSmall);
    assertEquals(expected, actual);
}



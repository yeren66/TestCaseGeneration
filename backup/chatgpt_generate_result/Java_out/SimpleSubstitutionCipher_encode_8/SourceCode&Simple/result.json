{
    "project_name": "Java",
    "file_name": "SimpleSubstitutionCipher.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/SimpleSubstitutionCipher.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Encrypt text by replacing each element with its opposite character.\n     *\n     * @return Encrypted message\n     */",
    "source_code": "\npublic static String encode(String message, String cipherSmall) {\n    StringBuilder encoded = new StringBuilder();\n\n    // This map is used to encode\n    Map<Character, Character> cipherMap = new HashMap<>();\n\n    char beginSmallLetter = 'a';\n    char beginCapitalLetter = 'A';\n\n    cipherSmall = cipherSmall.toLowerCase();\n    String cipherCapital = cipherSmall.toUpperCase();\n\n    // To handle Small and Capital letters\n    for (int i = 0; i < cipherSmall.length(); i++) {\n        cipherMap.put(beginSmallLetter++, cipherSmall.charAt(i));\n        cipherMap.put(beginCapitalLetter++, cipherCapital.charAt(i));\n    }\n\n    for (int i = 0; i < message.length(); i++) {\n        if (Character.isAlphabetic(message.charAt(i))) {\n            encoded.append(cipherMap.get(message.charAt(i)));\n        } else {\n            encoded.append(message.charAt(i));\n        }\n    }\n\n    return encoded.toString();\n}\n",
    "class_name": "SimpleSubstitutionCipher",
    "method_name": "encode",
    "arguments": [
        "String message",
        "String cipherSmall"
    ],
    "generate_test": [
        "@Test\n    public void encodeTest() {\n        String message = \"Hello, World!\";\n        String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n        \n        String expected = \"Ifmmp, Xpsme!\";\n        String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);\n        \n        assertEquals(expected, actual);\n    }",
        "@Test\npublic void encodeTest() {\n    String message = \"Hello World\";\n    String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n    String expected = \"Svool Dliow\";\n\n    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);\n\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void encodeTest() {\n    String message = \"Hello World!\";\n    String cipherSmall = \"plmoknijbuhvygctfxrdzeswaq\";\n    String expected = \"Ittqd Tqyql!\";\n    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void encodeTest() {\n    String message = \"Hello World\";\n    String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n\n    String expected = \"Svool Dliow\";\n    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);\n\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void encodeTest() {\n    String message = \"Hello, World!\";\n    String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n    \n    String expectedOutput = \"Svool, Dliow!\";\n    String actualOutput = SimpleSubstitutionCipher.encode(message, cipherSmall);\n    \n    assertEquals(expectedOutput, actualOutput);\n}",
        "@Test\npublic void encodeTest() {\n    String message = \"Hello, World!\";\n    String cipherSmall = \"hdyogul\";\n    String expected = \"Hyylo, Wyrld!\";\n    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void encodeTest() {\n    // Input\n    String message = \"Hello World\";\n    String cipherSmall = \"qwertyuiopasdfghjklzxcvbnm\";\n    \n    // Expected output\n    String expected = \"Itssg Pvwad\";\n\n    // Actual output\n    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);\n    \n    // Assertion\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void encodeTest() {\n    String message = \"Hello world\";\n    String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n\n    String expected = \"Svool dliow\";\n    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);\n\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void encodeTest() {\n    String message = \"Hello World\";\n    String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n    \n    String expected = \"Svool Dliow\";\n    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);\n    \n    assertEquals(expected, actual);\n}",
        "@Test\npublic void encodeTest() {\n    // Test case 1: Basic encode test\n    String message = \"Hello, World!\";\n    String cipherSmall = \"defghijklmnopqrstuvwxyzabc\";\n    String expected = \"GEEKk, Zbqk!\";\n    String actual = SimpleSubstitutionCipher.encode(message, cipherSmall);\n    assertEquals(expected, actual);\n\n    // Test case 2: Empty message\n    message = \"\";\n    cipherSmall = \"defghijklmnopqrstuvwxyzabc\";\n    expected = \"\";\n    actual = SimpleSubstitutionCipher.encode(message, cipherSmall);\n    assertEquals(expected, actual);\n\n    // Test case 3: All uppercase message\n    message = \"HELLO, WORLD!\";\n    cipherSmall = \"defghijklmnopqrstuvwxyzabc\";\n    expected = \"GEEKk, Zbqk!\";\n    actual = SimpleSubstitutionCipher.encode(message, cipherSmall);\n    assertEquals(expected, actual);\n}"
    ]
}
Source code: 


public static List<TreeSet<Integer>> combination(int n, int k) {
    if (n <= 0) {
        return null;
    }
    length = k;
    Integer[] arr = new Integer[n];
    for (int i = 1; i <= n; i++) {
        arr[i - 1] = i;
    }
    return Combination.combination(arr, length);
}



No.1 generated result --------------------------

@Test
public void combinationTest() {
    List<TreeSet<Integer>> expected = new ArrayList<>();
    TreeSet<Integer> set1 = new TreeSet<>();
    set1.add(1);
    set1.add(2);
    set1.add(3);
    expected.add(set1);
    
    int n = 3;
    int k = 3;
  
    List<TreeSet<Integer>> result = ArrayCombination.combination(n, k);
    assertEquals(expected, result);
}


No.2 generated result --------------------------

### Response:

public void combinationTest() {
    List<TreeSet<Integer>> expected = new ArrayList<>();
    TreeSet<Integer> set1 = new TreeSet<>();
    set1.add(1);
    expected.add(set1);
    TreeSet<Integer> set2 = new TreeSet<>();
    set2.add(2);
    expected.add(set2);
    TreeSet<Integer> set3 = new TreeSet<>();
    set3.add(3);
    expected.add(set3);
    
    List<TreeSet<Integer>> actual = ArrayCombination.combination(3, 1);
    assertEquals(expected, actual);
}


No.3 generated result --------------------------

@Test
public void combinationTest() {
    int n = 5;
    int k = 3;
    
    List<TreeSet<Integer>> expected = new ArrayList<>();
    TreeSet<Integer> set1 = new TreeSet<>();
    set1.add(1);
    set1.add(2);
    set1.add(3);
    expected.add(set1);
    
    TreeSet<Integer> set2 = new TreeSet<>();
    set2.add(1);
    set2.add(2);
    set2.add(4);
    expected.add(set2);
    
    TreeSet<Integer> set3 = new TreeSet<>();
    set3.add(1);
    set3.add(2);
    set3.add(5);
    expected.add(set3);
    
    TreeSet<Integer> set4 = new TreeSet<>();
    set4.add(1);
    set4.add(3);
    set4.add(4);
    expected.add(set4);
    
    TreeSet<Integer> set5 = new TreeSet<>();
    set5.add(1);
    set5.add(3);
    set5.add(5);
    expected.add(set5);
    
    TreeSet<Integer> set6 = new TreeSet<>();
    set6.add(1);
    set6.add(4);
    set6.add(5);
    expected.add(set6);
    
    TreeSet<Integer> set7 = new TreeSet<>();
    set7.add(2);
    set7.add(3);
    set7.add(4);
    expected.add(set7);
    
    TreeSet<Integer> set8 = new TreeSet<>();
    set8.add(2);
    set8.add(3);
    set8.add(5);
    expected.add(set8);
    
    TreeSet<Integer> set9 = new TreeSet<>();
    set9.add(2);
    set9.add(4);
    set9.add(5);
    expected.add(set9);
    
    TreeSet<Integer> set10 = new TreeSet<>();
    set10.add(3);
    set10.add(4);
    set10.add(5);
    expected.add(set10);
    
    List<TreeSet<Integer>> result = ArrayCombination.combination(n, k);
    assertEquals(expected, result);
}


No.4 generated result --------------------------

@Test
public void combinationTest() {
    List<TreeSet<Integer>> expected = new ArrayList<>();
    TreeSet<Integer> set1 = new TreeSet<>();
    set1.add(1);
    set1.add(2);
    set1.add(3);
    expected.add(set1);
    TreeSet<Integer> set2 = new TreeSet<>();
    set2.add(1);
    set2.add(2);
    set2.add(4);
    expected.add(set2);
    TreeSet<Integer> set3 = new TreeSet<>();
    set3.add(1);
    set3.add(2);
    set3.add(5);
    expected.add(set3);
    List<TreeSet<Integer>> actual = ArrayCombination.combination(5, 3);
    assertEquals(expected, actual);
}


No.5 generated result --------------------------

@Test
public void combinationTest() {
    List<TreeSet<Integer>> expected = new ArrayList<>();
    TreeSet<Integer> set1 = new TreeSet<>();
    set1.add(1); set1.add(2); set1.add(3);
    expected.add(set1);
    TreeSet<Integer> set2 = new TreeSet<>();
    set2.add(1); set2.add(2); set2.add(4);
    expected.add(set2);
    TreeSet<Integer> set3 = new TreeSet<>();
    set3.add(1); set3.add(3); set3.add(4);
    expected.add(set3);
    TreeSet<Integer> set4 = new TreeSet<>();
    set4.add(2); set4.add(3); set4.add(4);
    expected.add(set4);
    
    List<TreeSet<Integer>> actual = ArrayCombination.combination(4, 3);
    
    assertEquals(expected, actual);
}


No.6 generated result --------------------------

@Test
public void combinationTest() {
    int n = 5;
    int k = 3;
    List<TreeSet<Integer>> expected = new ArrayList<>();
    TreeSet<Integer> combination1 = new TreeSet<>();
    combination1.add(1);
    combination1.add(2);
    combination1.add(3);
    expected.add(combination1);
    
    TreeSet<Integer> combination2 = new TreeSet<>();
    combination2.add(1);
    combination2.add(2);
    combination2.add(4);
    expected.add(combination2);
    
    TreeSet<Integer> combination3 = new TreeSet<>();
    combination3.add(1);
    combination3.add(2);
    combination3.add(5);
    expected.add(combination3);
    
    TreeSet<Integer> combination4 = new TreeSet<>();
    combination4.add(1);
    combination4.add(3);
    combination4.add(4);
    expected.add(combination4);
    
    TreeSet<Integer> combination5 = new TreeSet<>();
    combination5.add(1);
    combination5.add(3);
    combination5.add(5);
    expected.add(combination5);
    
    TreeSet<Integer> combination6 = new TreeSet<>();
    combination6.add(1);
    combination6.add(4);
    combination6.add(5);
    expected.add(combination6);
    
    TreeSet<Integer> combination7 = new TreeSet<>();
    combination7.add(2);
    combination7.add(3);
    combination7.add(4);
    expected.add(combination7);
    
    TreeSet<Integer> combination8 = new TreeSet<>();
    combination8.add(2);
    combination8.add(3);
    combination8.add(5);
    expected.add(combination8);
    
    TreeSet<Integer> combination9 = new TreeSet<>();
    combination9.add(2);
    combination9.add(4);
    combination9.add(5);
    expected.add(combination9);
    
    TreeSet<Integer> combination10 = new TreeSet<>();
    combination10.add(3);
    combination10.add(4);
    combination10.add(5);
    expected.add(combination10);
    
    List<TreeSet<Integer>> result = ArrayCombination.combination(n, k);
    assertEquals(expected, result);
}


No.7 generated result --------------------------

public static List<TreeSet<Integer>> combination(int n, int k) {
    if (n <= 0) {
        return null;
    }
    length = k;
    Integer[] arr = new Integer[n];
    for (int i = 1; i <= n; i++) {
        arr[i - 1] = i;
    }
    return Combination.combination(arr, length);
}

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        List<TreeSet<Integer>> result = combination(5, 3);
        List<TreeSet<Integer>> expected = new ArrayList<>();
        TreeSet<Integer> set1 = new TreeSet<>(Arrays.asList(1, 2, 3));
        TreeSet<Integer> set2 = new TreeSet<>(Arrays.asList(1, 2, 4));
        TreeSet<Integer> set3 = new TreeSet<>(Arrays.asList(1, 2, 5));
        TreeSet<Integer> set4 = new TreeSet<>(Arrays.asList(1, 3, 4));
        TreeSet<Integer> set5 = new TreeSet<>(Arrays.asList(1, 3, 5));
        TreeSet<Integer> set6 = new TreeSet<>(Arrays.asList(1, 4, 5));
        TreeSet<Integer> set7 = new TreeSet<>(Arrays.asList(2, 3, 4));
        TreeSet<Integer> set8 = new TreeSet<>(Arrays.asList(2, 3, 5));
        TreeSet<Integer> set9 = new TreeSet<>(Arrays.asList(2, 4, 5));
        TreeSet<Integer> set10 = new TreeSet<>(Arrays.asList(3, 4, 5));
        expected.add(set1);
        expected.add(set2);
        expected.add(set3);
        expected.add(set4);
        expected.add(set5);
        expected.add(set6);
        expected.add(set7);
        expected.add(set8);
        expected.add(set9);
        expected.add(set10);
        assertEquals(expected, result);
    }
}


No.8 generated result --------------------------

@Test
public void combinationTest() {
    int n = 5;
    int k = 3;
    List<TreeSet<Integer>> expected = new ArrayList<>();
    
    TreeSet<Integer> set1 = new TreeSet<>();
    set1.add(1);
    set1.add(2);
    set1.add(3);
    expected.add(set1);
    
    TreeSet<Integer> set2 = new TreeSet<>();
    set2.add(1);
    set2.add(2);
    set2.add(4);
    expected.add(set2);
    
    TreeSet<Integer> set3 = new TreeSet<>();
    set3.add(1);
    set3.add(2);
    set3.add(5);
    expected.add(set3);
    
    TreeSet<Integer> set4 = new TreeSet<>();
    set4.add(1);
    set4.add(3);
    set4.add(4);
    expected.add(set4);
    
    TreeSet<Integer> set5 = new TreeSet<>();
    set5.add(1);
    set5.add(3);
    set5.add(5);
    expected.add(set5);
    
    TreeSet<Integer> set6 = new TreeSet<>();
    set6.add(1);
    set6.add(4);
    set6.add(5);
    expected.add(set6);
    
    TreeSet<Integer> set7 = new TreeSet<>();
    set7.add(2);
    set7.add(3);
    set7.add(4);
    expected.add(set7);
    
    TreeSet<Integer> set8 = new TreeSet<>();
    set8.add(2);
    set8.add(3);
    set8.add(5);
    expected.add(set8);
    
    TreeSet<Integer> set9 = new TreeSet<>();
    set9.add(2);
    set9.add(4);
    set9.add(5);
    expected.add(set9);
    
    TreeSet<Integer> set10 = new TreeSet<>();
    set10.add(3);
    set10.add(4);
    set10.add(5);
    expected.add(set10);
    
    List<TreeSet<Integer>> actual = ArrayCombination.combination(n, k);
    
    assertEquals(expected, actual);
}


No.9 generated result --------------------------

public static List<TreeSet<Integer>> combination(int n, int k) {
    if (n <= 0) {
        return null;
    }
    length = k;
    Integer[] arr = new Integer[n];
    for (int i = 1; i <= n; i++) {
        arr[i - 1] = i;
    }
    return Combination.combination(arr, length);
}

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        List<TreeSet<Integer>> expectedResult = new ArrayList<>();

        TreeSet<Integer> set1 = new TreeSet<>();
        set1.add(1);
        set1.add(2);
        set1.add(3);
        expectedResult.add(set1);

        TreeSet<Integer> set2 = new TreeSet<>();
        set2.add(1);
        set2.add(2);
        set2.add(4);
        expectedResult.add(set2);

        // Additional test cases...

        List<TreeSet<Integer>> result = combination(4, 3);
        assertIterableEquals(expectedResult, result);
    }
}


No.10 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ArrayCombinationTest {
    @Test
    public void combinationTest() {
        int n = 5;
        int k = 2;
        List<TreeSet<Integer>> expected = new ArrayList<>();
        <FILL>
        
        List<TreeSet<Integer>> result = ArrayCombination.combination(n, k);
        assertEquals(expected, result);
    }
}



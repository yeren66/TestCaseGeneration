{
    "project_name": "Java",
    "file_name": "AVLTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/AVLTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": null,
    "source_code": "private Node rotateLeft(Node a) {\n    Node b = a.right;\n    b.parent = a.parent;\n\n    a.right = b.left;\n\n    if (a.right != null) {\n        a.right.parent = a;\n    }\n\n    b.left = a;\n    a.parent = b;\n\n    if (b.parent != null) {\n        if (b.parent.right == a) {\n            b.parent.right = b;\n        } else {\n            b.parent.left = b;\n        }\n    }\n\n    setBalance(a, b);\n\n    return b;\n}\n",
    "class_name": "AVLTree",
    "method_name": "rotateLeft",
    "arguments": [
        "Node a"
    ],
    "generate_test": [
        "@Test\n    public void rotateLeftTest() {\n        AVLTree tree = new AVLTree();\n        \n        // Create nodes\n        AVLTree.Node a = tree.new Node(1, null);\n        AVLTree.Node b = tree.new Node(2, null);\n        \n        // Set up node relationships\n        a.right = b;\n        b.parent = a;\n        \n        // Call method to be tested\n        AVLTree.Node result = tree.rotateLeft(a);\n        \n        // Assert expected output\n        assertNull(a.parent);\n        assertNull(a.right);\n        assertNull(b.parent);\n        assertNull(b.left);\n        assertEquals(b, result);\n    }",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree tree = new AVLTree();\n    tree.insert(1);\n    tree.insert(2);\n    tree.insert(3);\n    tree.insert(4);\n    \n    // Perform the rotateLeft operation\n    AVLTree.Node result = tree.rotateLeft(tree.root);\n    \n    // Assert that the rotation is correct\n    assertEquals(3, result.key);\n    assertEquals(2, result.left.key);\n    assertEquals(4, result.right.key);\n    assertEquals(1, result.left.left.key);\n    assertNull(result.left.right);\n    assertNull(result.right.left);\n    assertNull(result.right.right);\n}",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree tree = new AVLTree();\n    AVLTree.Node a = tree.new Node(1, null);\n    AVLTree.Node b = tree.new Node(2, a);\n    AVLTree.Node c = tree.new Node(3, a);\n    a.right = b;\n    b.left = c;\n    \n    AVLTree.Node result = tree.rotateLeft(a);\n    \n    assertEquals(result.key, 2);\n    assertEquals(result.left, c);\n    assertEquals(result.right, a);\n    assertEquals(a.parent, result);\n    assertEquals(c.parent, result.left);\n}",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree tree = new AVLTree();\n    \n    // Create nodes for testing\n    AVLTree.Node a = tree.new Node(1, null);\n    AVLTree.Node b = tree.new Node(2, a);\n    AVLTree.Node c = tree.new Node(3, b);\n    \n    // Initialize relationships between nodes\n    a.right = b;\n    b.right = c;\n    \n    // Perform the rotateLeft operation\n    AVLTree.Node result = tree.rotateLeft(a);\n    \n    // Check if the parent of the original left node is set correctly\n    assertEquals(result, b);\n    assertEquals(b.parent, result);\n    \n    // Check if the left child of node b is set correctly\n    assertEquals(result.left, a);\n    \n    // Check if the right child of node a is set correctly\n    assertEquals(a.right, null);\n    \n    // Check if the parent of node a is set correctly\n    assertEquals(a.parent, result);\n    \n    // Check if the parent of the original parent node is set correctly\n    assertEquals(result.parent, null);\n    \n    // Check the balance of nodes a and b\n    assertEquals(a.balance, 0);\n    assertEquals(b.balance, 0);\n    \n    // Check the height of nodes a and b\n    assertEquals(a.height, 1);\n    assertEquals(b.height, 2);\n}",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree avlTree = new AVLTree();\n    \n    // Creating the nodes\n    AVLTree.Node nodeA = avlTree.new Node(1, null);\n    AVLTree.Node nodeB = avlTree.new Node(2, nodeA);\n    AVLTree.Node nodeC = avlTree.new Node(3, nodeB);\n    \n    // Setting up the tree structure\n    nodeA.right = nodeB;\n    nodeB.right = nodeC;\n    \n    // Rotating left\n    AVLTree.Node result = avlTree.rotateLeft(nodeA);\n    \n    // Asserting the changes\n    assertEquals(nodeC, result);\n    assertNull(nodeA.parent);\n    assertEquals(nodeC, nodeA.right);\n    assertNull(nodeB.parent);\n    assertEquals(nodeA, nodeB.left);\n    assertEquals(nodeB, nodeC.parent);\n    assertNull(nodeC.left);\n    assertEquals(nodeA, nodeC.right);\n    // Asserting balance changes\n    // ...\n}",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree tree = new AVLTree();\n    AVLTree.Node a = tree.new Node(5, null);\n    AVLTree.Node b = tree.new Node(10, null);\n    a.right = b;\n    b.parent = a;\n\n    a = tree.rotateLeft(a);\n\n    assertEquals(b, a); \n    assertEquals(null, a.right);\n    assertEquals(null, b.parent);\n}",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree avlTree = new AVLTree();\n    avlTree.insert(10);\n    avlTree.insert(20);\n    avlTree.insert(30);\n    \n    AVLTree.Node node = avlTree.root;\n    AVLTree.Node rotatedNode = avlTree.rotateLeft(node);\n    \n    // Perform assertions to check if the rotation is correct\n    \n    // Assert that the parent of 'node' is now the same as the parent of 'rotatedNode'\n    assertEquals(node.parent, rotatedNode.parent);\n    \n    // Assert that the left child of 'node' is now null\n    assertNull(node.left);\n    \n    // Assert that the right child of 'node' is now same as 'rotatedNode'\n    assertEquals(node.right, rotatedNode);\n    \n    // Assert that the parent of 'rotatedNode' is now 'node'\n    assertEquals(rotatedNode.parent, node);\n    \n    // Assert that the left child of 'rotatedNode' is now 'node'\n    assertEquals(rotatedNode.left, node);\n}",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree tree = new AVLTree();\n    AVLTree.Node a = tree.new Node(1, null);\n    AVLTree.Node b = tree.new Node(2, a);\n    AVLTree.Node c = tree.new Node(3, b);\n\n    b.right = c;\n\n    AVLTree.Node result = tree.rotateLeft(b);\n\n    assertEquals(1, result.key);\n    assertEquals(3, result.left.key);\n    assertNull(result.right);\n}",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree tree = new AVLTree();\n    AVLTree.Node a = tree.new Node(1, null);\n    AVLTree.Node b = tree.new Node(2, a);\n    \n    a.right = b;\n    \n    AVLTree.Node result = tree.rotateLeft(a);\n    \n    // Assertion\n    assertEquals(b, result);\n    assertEquals(a, result.parent);\n    assertEquals(null, result.left);\n    assertEquals(null, result.right);\n    assertEquals(a, result.parent.left);\n    assertEquals(null, result.parent.right);\n}",
        "@Test\npublic void rotateLeftTest() {\n    AVLTree avlTree = new AVLTree();\n    AVLTree.Node a = avlTree.new Node(5, null);\n    AVLTree.Node b = avlTree.new Node(10, a);\n    avlTree.root = a;\n    a.right = b;\n    b.parent = a;\n    \n    AVLTree.Node result = avlTree.rotateLeft(a);\n    \n    assertEquals(b, result);\n    assertEquals(a, b.parent);\n    assertNull(b.right);\n    assertEquals(a, b.left);\n    assertNull(a.right);\n    assertNull(a.parent.right);\n    assertNull(a.parent.left);\n    // additional assertions for balance and height\n}"
    ]
}
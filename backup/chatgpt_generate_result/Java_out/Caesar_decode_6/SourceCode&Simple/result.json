{
    "project_name": "Java",
    "file_name": "Caesar.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/Caesar.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Decrypt message by shifting back every Latin char to previous the ASCII\n     * Example : B - 1 -> A\n     *\n     * @return message\n     */",
    "source_code": "\npublic String decode(String encryptedMessage, int shift) {\n    StringBuilder decoded = new StringBuilder();\n\n    shift %= 26;\n\n    final int length = encryptedMessage.length();\n    for (int i = 0; i < length; i++) {\n        char current = encryptedMessage.charAt(i);\n        if (isCapitalLatinLetter(current)) {\n            current -= shift;\n            decoded.append((char) (current < 'A' ? current + 26 : current)); // 26 = number of latin letters\n        } else if (isSmallLatinLetter(current)) {\n            current -= shift;\n            decoded.append((char) (current < 'a' ? current + 26 : current)); // 26 = number of latin letters\n        } else {\n            decoded.append(current);\n        }\n    }\n    return decoded.toString();\n}\n",
    "class_name": "Caesar",
    "method_name": "decode",
    "arguments": [
        "String encryptedMessage",
        "int shift"
    ],
    "generate_test": [
        "@Test\npublic void decodeTest() {\n    Caesar caesar = new Caesar();\n    String encryptedMessage = \"Dro Orjv Lqir\";\n    int shift = 3;\n    String decodedMessage = caesar.decode(encryptedMessage, shift);\n    assertEquals(\"Any Life Hack\", decodedMessage);\n}",
        "@Test\npublic void decodeTest() {\n    Caesar caesar = new Caesar();\n    String encryptedMessage = \"Ymj xywnslx tk ijhwbyd\";\n    int shift = 5;\n    String expected = \"The universe is expanding\";\n\n    String decoded = caesar.decode(encryptedMessage, shift);\n\n    assertEquals(expected, decoded);\n}",
        "@Test\npublic void decodeTest() {\n   Caesar caesar = new Caesar();\n   \n   String encryptedMessage = \"Bpmzo\";\n   int shift = 2;\n   \n   String expectedDecodedMessage = \"Znlxm\";\n   String actualDecodedMessage = caesar.decode(encryptedMessage, shift);\n   \n   assertEquals(expectedDecodedMessage, actualDecodedMessage);\n}",
        "@Test\npublic void decodeTest() {\n    Caesar caesar = new Caesar();\n    \n    // Test case 1: alphanumeric encrypted message, shift = 2\n    String encryptedMessage1 = \"Abc1\";\n    int shift1 = 2;\n    String expected1 = \"YZa1\";\n    String actual1 = caesar.decode(encryptedMessage1, shift1);\n    assertEquals(expected1, actual1);\n    \n    // Test case 2: encrypted message with capital letters only, shift = 5\n    String encryptedMessage2 = \"HELLO\";\n    int shift2 = 5;\n    String expected2 = \"CZGGJ\";\n    String actual2 = caesar.decode(encryptedMessage2, shift2);\n    assertEquals(expected2, actual2);\n    \n    // Test case 3: encrypted message with small letters only, shift = 3\n    String encryptedMessage3 = \"world\";\n    int shift3 = 3;\n    String expected3 = \"tlwka\";\n    String actual3 = caesar.decode(encryptedMessage3, shift3);\n    assertEquals(expected3, actual3);\n    \n    // Test case 4: empty encrypted message, shift = 1\n    String encryptedMessage4 = \"\";\n    int shift4 = 1;\n    String expected4 = \"\";\n    String actual4 = caesar.decode(encryptedMessage4, shift4);\n    assertEquals(expected4, actual4);\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CaesarTest {\n    @Test\n    public void decodeTest() {\n        Caesar caesar = new Caesar();\n        String encodedMessage = \"F xli xlmw xs tloyd\";\n        int shift = 4;\n        String expectedDecodedMessage = \"B the text is pink\";\n        \n        String actualDecodedMessage = caesar.decode(encodedMessage, shift);\n        assertEquals(expectedDecodedMessage, actualDecodedMessage);\n    }\n}",
        "@Test\npublic void decodeTest() {\n    Caesar caesar = new Caesar();\n    String encryptedMessage = \"Xlm gsrh rh ziv nlilw\";\n    int shift = 4;\n    String expected = \"The doctor is not real\";\n    String actual = caesar.decode(encryptedMessage, shift);\n    assertEquals(expected, actual);\n}",
        "\n@Test\npublic void decodeTest() {\n    Caesar caesar = new Caesar();\n    \n    // Test case 1: with shift = 3\n    String encryptedMessage1 = \"LwkHuhwPhvvdjh\";\n    String expected1 = \"ItsConsoleOutput\";\n    String actual1 = caesar.decode(encryptedMessage1, 3);\n    assertEquals(expected1, actual1);\n    \n    // Test case 2: with shift = 5\n    String encryptedMessage2 = \"XmtBtwi\";\n    String expected2 = \"SpeUsing\";\n    String actual2 = caesar.decode(encryptedMessage2, 5);\n    assertEquals(expected2, actual2);\n    \n    // Test case 3: with shift = 10\n    String encryptedMessage3 = \"ByjWywMbecom?eb!D!\"\n    String expected3 = \"RoxRedLobster?is!A!\";\n    String actual3 = caesar.decode(encryptedMessage3, 10);\n    assertEquals(expected3, actual3);\n}\n",
        "assertEquals(\"Hello, World!\", new Caesar().decode(\"Ebiil, Tloia!\", 4));",
        "@Test\npublic void decodeTest() {\n    Caesar caesar = new Caesar();\n    String encryptedMessage = \"Khoor Zruog\";\n    int shift = 3;\n    String expected = \"Hello World\";\n    \n    String actual = caesar.decode(encryptedMessage, shift);\n    \n    assertEquals(expected, actual);\n}",
        "@Test\npublic void decodeTest() {\n    Caesar caesar = new Caesar();\n    String encryptedMessage = \"Zaynxm!\";\n    int shift = 5;\n    String expected = \"Uvtisr!\";\n    String actual = caesar.decode(encryptedMessage, shift);\n    assertEquals(expected, actual);\n}"
    ]
}
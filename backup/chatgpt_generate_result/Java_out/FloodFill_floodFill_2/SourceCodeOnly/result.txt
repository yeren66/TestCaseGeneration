Source code: 


public static void floodFill(final int[][] image, final int x, final int y, final int newColor, final int oldColor) {
    if (newColor == oldColor || x < 0 || x >= image.length || y < 0 || y >= image[x].length || getPixel(image, x, y) != oldColor) {
        return;
    }

    putPixel(image, x, y, newColor);

    /* Recursively check for horizontally & vertically adjacent coordinates */
    floodFill(image, x + 1, y, newColor, oldColor);
    floodFill(image, x - 1, y, newColor, oldColor);
    floodFill(image, x, y + 1, newColor, oldColor);
    floodFill(image, x, y - 1, newColor, oldColor);

    /* Recursively check for diagonally adjacent coordinates  */
    floodFill(image, x + 1, y - 1, newColor, oldColor);
    floodFill(image, x - 1, y + 1, newColor, oldColor);
    floodFill(image, x + 1, y + 1, newColor, oldColor);
    floodFill(image, x - 1, y - 1, newColor, oldColor);
}



No.1 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = { {1, 1, 1}, {1, 1, 0}, {1, 0, 1} };
    int x = 1;
    int y = 1;
    int newColor = 2;
    int oldColor = 1;

    FloodFill.floodFill(image, x, y, newColor, oldColor);

    int[][] expectedImage = { {2, 2, 2}, {2, 2, 0}, {2, 0, 1} };
    assertArrayEquals(expectedImage, image);
}


No.2 generated result --------------------------

@Test
    public void floodFillTest() {
        int[][] image = {{1, 1, 1, 1},
                         {1, 2, 2, 1},
                         {1, 2, 2, 1},
                         {1, 1, 1, 1}};
        
        int[][] expected = {{1, 1, 1, 1},
                            {1, 3, 3, 1},
                            {1, 3, 3, 1},
                            {1, 1, 1, 1}};
        
        FloodFill.floodFill(image, 1, 1, 3, 2);
        assertArrayEquals(expected, image);
    }


No.3 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = {{1, 0, 0}, {0, 1, 1}, {0, 1, 0}};
    int[][] expectedImage = {{1, 2, 2}, {2, 1, 1}, {2, 1, 2}};
    FloodFill.floodFill(image, 0, 0, 2, 1);
    assertArrayEquals(expectedImage, image);
}


No.4 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = {
        {1, 1, 1, 1},
        {1, 2, 2, 1},
        {1, 1, 2, 1},
        {1, 1, 2, 1}
    };
    int x = 1;
    int y = 1;
    int newColor = 3;
    int oldColor = 2;

    FloodFill.floodFill(image, x, y, newColor, oldColor);

    int[][] expectedImage = {
        {1, 1, 1, 1},
        {1, 3, 3, 1},
        {1, 1, 3, 1},
        {1, 1, 3, 1}
    };

    assertArrayEquals(expectedImage, image);
}


No.5 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = {{1, 1, 1}, {1, 1, 0}, {1, 0, 1}};
    int x = 1;
    int y = 1;
    int newColor = 2;
    int oldColor = 1;
    
    // Before flood fill
    assertArrayEquals(new int[][]{{1, 1, 1}, {1, 1, 0}, {1, 0, 1}}, image);

    FloodFill.floodFill(image, x, y, newColor, oldColor);

    // After flood fill
    assertArrayEquals(new int[][]{{2, 2, 2}, {2, 2, 0}, {2, 0, 1}}, image);
}


No.6 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};
    
    // Declare the expected image after flood fill
    int[][] expectedImage = {{2, 2, 2}, {2, 2, 2}, {2, 2, 2}};
    
    FloodFill.floodFill(image, 1, 1, 2, 1);
    
    // Assert that the image after flood fill matches the expected image
    assertArrayEquals(expectedImage, image);
}


No.7 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = new int[][]{{1, 1, 1}, {1, 0, 1}, {1, 1, 1}};
    int x = 1;
    int y = 1;
    int newColor = 2;
    int oldColor = 1;

    int[][] expectedImage = new int[][]{{2, 2, 2}, {2, 0, 2}, {2, 2, 2}};

    FloodFill.floodFill(image, x, y, newColor, oldColor);

    assertArrayEquals(expectedImage, image);
}


No.8 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = {{1, 1, 1}, {1, 1, 0}, {1, 0, 1}};
    int x = 1;
    int y = 1;
    int newColor = 2;
    int oldColor = 1;
    
    floodFill(image, x, y, newColor, oldColor);
    
    int[][] expected = {{2, 2, 2}, {2, 2, 0}, {2, 0, 1}};
    
    assertArrayEquals(expected, image);
}


No.9 generated result --------------------------

@Test
public void floodFillTest() {
    // Given
    int[][] image = {
            {1, 1, 1, 1},
            {1, 0, 0, 1},
            {1, 0, 0, 1},
            {1, 1, 1, 1}
    };
    int x = 1;
    int y = 1;
    int newColor = 2;
    int oldColor = 0;
    
    // When
    floodFill(image, x, y, newColor, oldColor);
    
    // Then
    int[][] expected = {
            {1, 1, 1, 1},
            {1, 2, 2, 1},
            {1, 2, 2, 1},
            {1, 1, 1, 1}
    };
    assertArrayEquals(expected, image);
}


No.10 generated result --------------------------

@Test
public void floodFillTest() {
    int[][] image = {{1, 1, 1},
                    {1, 0, 1},
                    {1, 1, 1}};
    int[][] expected = {{2, 2, 2},
                        {2, 0, 2},
                        {2, 2, 2}};
    FloodFill.floodFill(image, 1, 1, 2, 1);
    assertArrayEquals(expected, image);
}



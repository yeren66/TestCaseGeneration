{
    "project_name": "Java",
    "file_name": "FloodFill.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/backtracking/FloodFill.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.backtracking",
    "docstring": "/**\n     * Fill the 2D image with new color\n     *\n     * @param image The image to be filled\n     * @param x The x co-ordinate at which color is to be filled\n     * @param y The y co-ordinate at which color is to be filled\n     * @param newColor The new color which to be filled in the image\n     * @param oldColor The old color which is to be replaced in the image\n     */",
    "source_code": "\npublic static void floodFill(final int[][] image, final int x, final int y, final int newColor, final int oldColor) {\n    if (newColor == oldColor || x < 0 || x >= image.length || y < 0 || y >= image[x].length || getPixel(image, x, y) != oldColor) {\n        return;\n    }\n\n    putPixel(image, x, y, newColor);\n\n    /* Recursively check for horizontally & vertically adjacent coordinates */\n    floodFill(image, x + 1, y, newColor, oldColor);\n    floodFill(image, x - 1, y, newColor, oldColor);\n    floodFill(image, x, y + 1, newColor, oldColor);\n    floodFill(image, x, y - 1, newColor, oldColor);\n\n    /* Recursively check for diagonally adjacent coordinates  */\n    floodFill(image, x + 1, y - 1, newColor, oldColor);\n    floodFill(image, x - 1, y + 1, newColor, oldColor);\n    floodFill(image, x + 1, y + 1, newColor, oldColor);\n    floodFill(image, x - 1, y - 1, newColor, oldColor);\n}\n",
    "class_name": "FloodFill",
    "method_name": "floodFill",
    "arguments": [
        "int[][] image",
        "int x",
        "int y",
        "int newColor",
        "int oldColor"
    ],
    "generate_test": [
        "@Test\npublic void floodFillTest() {\n    int[][] image = {\n        {1, 1, 1, 1},\n        {1, 1, 1, 1},\n        {1, 1, 1, 1},\n        {1, 1, 1, 1}\n    };\n    int x = 1;\n    int y = 1;\n    int newColor = 2;\n    int oldColor = 1;\n\n    FloodFill.floodFill(image, x, y, newColor, oldColor);\n\n    int[][] expectedImage = {\n        {2, 2, 2, 2},\n        {2, 2, 2, 2},\n        {2, 2, 2, 2},\n        {2, 2, 2, 2}\n    };\n\n    assertArrayEquals(expectedImage, image);\n}",
        "@Test\npublic void floodFillTest() {\n    int[][] image = {{1, 1, 1}, {1, 1, 0}, {1, 0, 1}};\n    FloodFill.floodFill(image, 1, 1, 2, 0);\n    \n    int[][] expectedImage = {{1, 1, 1}, {1, 1, 2}, {1, 2, 1}};\n    assertArrayEquals(expectedImage, image);\n}",
        "@Test\npublic void floodFillTest() {\n    int[][] image = {{1, 1, 1}, {1, 0, 1}, {1, 1, 1}};\n    int x = 1;\n    int y = 1;\n    int newColor = 2;\n    int oldColor = 1;\n    \n    FloodFill.floodFill(image, x, y, newColor, oldColor);\n    \n    int[][] expectedImage = {{2, 2, 2}, {2, 0, 2}, {2, 2, 2}};\n    assertArrayEquals(expectedImage, image);\n}",
        "@Test\npublic void floodFillTest() {\n    int[][] image = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};\n    int x = 1;\n    int y = 1;\n    int newColor = 0;\n    int oldColor = 1;\n\n    FloodFill.floodFill(image, x, y, newColor, oldColor);\n\n    int[][] expected = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}};\n    assertArrayEquals(expected, image);\n}",
        "@Test\npublic void floodFillTest() {\n    int[][] image = {\n        {1, 1, 1},\n        {1, 1, 1},\n        {1, 1, 1}\n    };\n    int x = 1;\n    int y = 1;\n    int newColor = 2;\n    int oldColor = 1;\n\n    FloodFill.floodFill(image, x, y, newColor, oldColor);\n\n    /* Validate that the image has been updated correctly */\n    int[][] expectedImage = {\n        {2, 2, 2},\n        {2, 2, 2},\n        {2, 2, 2}\n    };\n    assertArrayEquals(expectedImage, image);\n}",
        "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FloodFillTest {\n    @Test\n    public void floodFillTest() {\n        int[][] image = {{1, 1, 1},\n                         {1, 1, 0},\n                         {1, 0, 1}};\n        int x = 1;\n        int y = 1;\n        int newColor = 2;\n        int oldColor = 1;\n        \n        FloodFill.floodFill(image, x, y, newColor, oldColor);\n        \n        int[][] expected = {{2, 2, 2},\n                            {2, 2, 0},\n                            {2, 0, 1}};\n        assertArrayEquals(expected, image);\n    }\n}",
        "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FloodFillTest {\n    @Test\n    public void floodFillTest() {\n        int[][] image = {{1, 1, 1}, {1, 1, 0}, {1, 0, 1}};\n        int x = 1;\n        int y = 1;\n        int newColor = 2;\n        int oldColor = 1;\n\n        FloodFill.floodFill(image, x, y, newColor, oldColor);\n\n        int[][] expectedImage = {{2, 2, 2}, {2, 2, 0}, {2, 0, 1}};\n\n        assertArrayEquals(expectedImage, image);\n    }\n}",
        "package com.thealgorithms.backtracking;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FloodFillTest {\n    @Test\n    public void floodFillTest() {\n        int[][] image = {{1, 1, 1}, {1, 1, 0}, {1, 0, 1}};\n        int x = 1;\n        int y = 1;\n        int newColor = 2;\n        int oldColor = 1;\n\n        FloodFill.floodFill(image, x, y, newColor, oldColor);\n\n        int[][] expectedImage = {{2, 2, 2}, {2, 2, 0}, {2, 0, 1}};\n        assertArrayEquals(expectedImage, image);\n    }\n}",
        "@Test\npublic void floodFillTest() {\n    int[][] image = {{1, 1, 1}, {1, 1, 0}, {1, 0, 1}};\n    int x = 1;\n    int y = 1;\n    int newColor = 2;\n    int oldColor = image[x][y];\n\n    FloodFill.floodFill(image, x, y, newColor, oldColor);\n\n    int[][] expectedResult = {{2, 2, 2}, {2, 2, 0}, {2, 0, 1}};\n    assertArrayEquals(expectedResult, image);\n}",
        "@Test\npublic void floodFillTest() {\n    // Create a test image\n    int[][] image = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};\n\n    // Set the initial position and colors\n    int x = 0;\n    int y = 0;\n    int oldColor = 1;\n    int newColor = 2;\n    \n    // Call the floodFill method\n    FloodFill.floodFill(image, x, y, newColor, oldColor);\n    \n    // Verify that the pixels have been filled with newColor\n    assertEquals(newColor, image[0][0]);\n    assertEquals(newColor, image[0][1]);\n    assertEquals(newColor, image[0][2]);\n    assertEquals(newColor, image[1][0]);\n    assertEquals(newColor, image[1][1]);\n    assertEquals(newColor, image[1][2]);\n    assertEquals(newColor, image[2][0]);\n    assertEquals(newColor, image[2][1]);\n    assertEquals(newColor, image[2][2]);\n}"
    ]
}
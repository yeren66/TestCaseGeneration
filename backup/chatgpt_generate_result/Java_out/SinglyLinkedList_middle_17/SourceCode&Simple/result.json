{
    "project_name": "Java",
    "file_name": "SinglyLinkedList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/SinglyLinkedList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * Return the node in the middle of the list\n     * If the length of the list is even then return item number length/2\n     * @return middle node of the list\n     */",
    "source_code": "\npublic Node middle() {\n    if (head == null) {\n        return null;\n    }\n    Node firstCounter = head;\n    Node secondCounter = firstCounter.next;\n    while (secondCounter != null && secondCounter.next != null) {\n        firstCounter = firstCounter.next;\n        secondCounter = secondCounter.next.next;\n    }\n    return firstCounter;\n}\n",
    "class_name": "SinglyLinkedList",
    "method_name": "middle",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    Node node1 = new Node(1);\n    Node node2 = new Node(2);\n    Node node3 = new Node(3);\n    Node node4 = new Node(4);\n    Node node5 = new Node(5);\n  \n    list.setHead(node1);\n    node1.next = node2;\n    node2.next = node3;\n    node3.next = node4;\n    node4.next = node5;\n  \n    Node result = list.middle();\n    assertEquals(3, result.value, \"Expected middle node value: 3\");\n}",
        "\n// Given\nSinglyLinkedList list = new SinglyLinkedList();\nlist.insert(1);\nlist.insert(2);\nlist.insert(3);\nlist.insert(4);\nlist.insert(5);\n\n// When\nNode result = list.middle();\n\n// Then\nassertEquals(3, result.value);\n",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    Node node1 = new Node(1);\n    Node node2 = new Node(2);\n    Node node3 = new Node(3);\n    Node node4 = new Node(4);\n\n    // Constructing the linked list: 1 -> 2 -> 3 -> 4\n    list.setHead(node1);\n    node1.next = node2;\n    node2.next = node3;\n    node3.next = node4;\n\n    // Test the middle() method\n    Node middleNode = list.middle();\n    \n    // Expected output: node2\n    assertEquals(node2, middleNode);\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    Node node1 = new Node(1);\n    Node node2 = new Node(2);\n    Node node3 = new Node(3);\n    Node node4 = new Node(4);\n    Node node5 = new Node(5);\n    \n    list.setHead(node1);\n    node1.next = node2;\n    node2.next = node3;\n    node3.next = node4;\n    node4.next = node5;\n    \n    Node expectedResult = node3;\n    Node actualResult = list.middle();\n    \n    assertEquals(expectedResult, actualResult);\n}",
        "@Test\npublic void middleTest() {\n    // Create a SinglyLinkedList object\n    SinglyLinkedList list = new SinglyLinkedList();\n    \n    // Add elements to the list\n    list.insert(1);\n    list.insert(2);\n    list.insert(3);\n    list.insert(4);\n    list.insert(5);\n    \n    // Call the middle() method and store the result in a variable\n    Node middleNode = list.middle();\n    \n    // Check if the middleNode value is equal to 3\n    assertEquals(3, middleNode.value);\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    Node head = new Node(1);\n    Node node2 = new Node(2);\n    Node node3 = new Node(3);\n    Node node4 = new Node(4);\n    Node node5 = new Node(5);\n    head.next = node2;\n    node2.next = node3;\n    node3.next = node4;\n    node4.next = node5;\n    list.setHead(head);\n  \n    Node middleNode = list.middle();\n    assertEquals(3, middleNode.value);\n}",
        "@Test\npublic void middleTest() {\n   SinglyLinkedList list = new SinglyLinkedList();\n   Node node1 = new Node(1);\n   Node node2 = new Node(2);\n   Node node3 = new Node(3);\n   Node node4 = new Node(4);\n   Node node5 = new Node(5);\n\n   list.setHead(node1);\n   node1.next = node2;\n   node2.next = node3;\n   node3.next = node4;\n   node4.next = node5;\n\n   Node middleNode = list.middle();\n\n   assertEquals(node3, middleNode);\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    Node head = new Node(1);\n    Node node2 = new Node(2);\n    Node node3 = new Node(3);\n    Node node4 = new Node(4);\n    Node node5 = new Node(5);\n    head.next = node2;\n    node2.next = node3;\n    node3.next = node4;\n    node4.next = node5;\n    list.setHead(head);\n    \n    Node middleNode = list.middle();\n    assertEquals(3, middleNode.value);\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n\n    // Create nodes\n    Node node1 = new Node(1);\n    Node node2 = new Node(2);\n    Node node3 = new Node(3);\n    Node node4 = new Node(4);\n    Node node5 = new Node(5);\n\n    // Connect nodes\n    list.setHead(node1);\n    node1.next = node2;\n    node2.next = node3;\n    node3.next = node4;\n    node4.next = node5;\n\n    // Call middle() method\n    Node middleNode = list.middle();\n\n    // Assert the expected output\n    assertEquals(node3, middleNode);\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    assertNull(list.middle());\n\n    list.insert(1);\n    assertEquals(1, list.middle().value);\n\n    list.insert(2);\n    assertEquals(1, list.middle().value);\n\n    list.insert(3);\n    assertEquals(2, list.middle().value);\n\n    list.insert(4);\n    assertEquals(2, list.middle().value);\n\n    list.insert(5);\n    assertEquals(3, list.middle().value);\n}"
    ]
}
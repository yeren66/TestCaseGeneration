Source code: 


public Node middle() {
    if (head == null) {
        return null;
    }
    Node firstCounter = head;
    Node secondCounter = firstCounter.next;
    while (secondCounter != null && secondCounter.next != null) {
        firstCounter = firstCounter.next;
        secondCounter = secondCounter.next.next;
    }
    return firstCounter;
}



No.1 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    Node node1 = new Node(1);
    Node node2 = new Node(2);
    Node node3 = new Node(3);
    Node node4 = new Node(4);
    Node node5 = new Node(5);
  
    list.setHead(node1);
    node1.next = node2;
    node2.next = node3;
    node3.next = node4;
    node4.next = node5;
  
    Node result = list.middle();
    assertEquals(3, result.value, "Expected middle node value: 3");
}


No.2 generated result --------------------------


// Given
SinglyLinkedList list = new SinglyLinkedList();
list.insert(1);
list.insert(2);
list.insert(3);
list.insert(4);
list.insert(5);

// When
Node result = list.middle();

// Then
assertEquals(3, result.value);



No.3 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    Node node1 = new Node(1);
    Node node2 = new Node(2);
    Node node3 = new Node(3);
    Node node4 = new Node(4);

    // Constructing the linked list: 1 -> 2 -> 3 -> 4
    list.setHead(node1);
    node1.next = node2;
    node2.next = node3;
    node3.next = node4;

    // Test the middle() method
    Node middleNode = list.middle();
    
    // Expected output: node2
    assertEquals(node2, middleNode);
}


No.4 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    Node node1 = new Node(1);
    Node node2 = new Node(2);
    Node node3 = new Node(3);
    Node node4 = new Node(4);
    Node node5 = new Node(5);
    
    list.setHead(node1);
    node1.next = node2;
    node2.next = node3;
    node3.next = node4;
    node4.next = node5;
    
    Node expectedResult = node3;
    Node actualResult = list.middle();
    
    assertEquals(expectedResult, actualResult);
}


No.5 generated result --------------------------

@Test
public void middleTest() {
    // Create a SinglyLinkedList object
    SinglyLinkedList list = new SinglyLinkedList();
    
    // Add elements to the list
    list.insert(1);
    list.insert(2);
    list.insert(3);
    list.insert(4);
    list.insert(5);
    
    // Call the middle() method and store the result in a variable
    Node middleNode = list.middle();
    
    // Check if the middleNode value is equal to 3
    assertEquals(3, middleNode.value);
}


No.6 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    Node head = new Node(1);
    Node node2 = new Node(2);
    Node node3 = new Node(3);
    Node node4 = new Node(4);
    Node node5 = new Node(5);
    head.next = node2;
    node2.next = node3;
    node3.next = node4;
    node4.next = node5;
    list.setHead(head);
  
    Node middleNode = list.middle();
    assertEquals(3, middleNode.value);
}


No.7 generated result --------------------------

@Test
public void middleTest() {
   SinglyLinkedList list = new SinglyLinkedList();
   Node node1 = new Node(1);
   Node node2 = new Node(2);
   Node node3 = new Node(3);
   Node node4 = new Node(4);
   Node node5 = new Node(5);

   list.setHead(node1);
   node1.next = node2;
   node2.next = node3;
   node3.next = node4;
   node4.next = node5;

   Node middleNode = list.middle();

   assertEquals(node3, middleNode);
}


No.8 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    Node head = new Node(1);
    Node node2 = new Node(2);
    Node node3 = new Node(3);
    Node node4 = new Node(4);
    Node node5 = new Node(5);
    head.next = node2;
    node2.next = node3;
    node3.next = node4;
    node4.next = node5;
    list.setHead(head);
    
    Node middleNode = list.middle();
    assertEquals(3, middleNode.value);
}


No.9 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();

    // Create nodes
    Node node1 = new Node(1);
    Node node2 = new Node(2);
    Node node3 = new Node(3);
    Node node4 = new Node(4);
    Node node5 = new Node(5);

    // Connect nodes
    list.setHead(node1);
    node1.next = node2;
    node2.next = node3;
    node3.next = node4;
    node4.next = node5;

    // Call middle() method
    Node middleNode = list.middle();

    // Assert the expected output
    assertEquals(node3, middleNode);
}


No.10 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    assertNull(list.middle());

    list.insert(1);
    assertEquals(1, list.middle().value);

    list.insert(2);
    assertEquals(1, list.middle().value);

    list.insert(3);
    assertEquals(2, list.middle().value);

    list.insert(4);
    assertEquals(2, list.middle().value);

    list.insert(5);
    assertEquals(3, list.middle().value);
}



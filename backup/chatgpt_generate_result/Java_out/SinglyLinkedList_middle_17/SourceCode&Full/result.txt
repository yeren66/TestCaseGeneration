Source code: 


public Node middle() {
    if (head == null) {
        return null;
    }
    Node firstCounter = head;
    Node secondCounter = firstCounter.next;
    while (secondCounter != null && secondCounter.next != null) {
        firstCounter = firstCounter.next;
        secondCounter = secondCounter.next.next;
    }
    return firstCounter;
}



No.1 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    list.insertHead(1);
    list.insertHead(2);
    list.insertHead(3);
    list.insertHead(4);
    list.insertHead(5);

    Node middleNode = list.middle();

    assertEquals(3, middleNode.value);
}


No.2 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    Node node1 = new Node(1);
    Node node2 = new Node(2);
    Node node3 = new Node(3);
    Node node4 = new Node(4);
    list.setHead(node1);
    node1.next = node2;
    node2.next = node3;
    node3.next = node4;

    Node middleNode = list.middle();
    assertEquals(2, middleNode.value);
}


No.3 generated result --------------------------


    @Test
    public void middleTest() {
        SinglyLinkedList list = new SinglyLinkedList();
        list.insert(1);
        list.insert(2);
        list.insert(3);
        list.insert(4);
        list.insert(5);
        Node middleNode = list.middle();
        assertEquals(3, middleNode.value);
    }



No.4 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        SinglyLinkedList list = new SinglyLinkedList();
        list.insert(1);
        list.insert(2);
        list.insert(3);
        list.insert(4);
        list.insert(5);
        
        Node middleNode = list.middle();
        
        assertEquals(3, middleNode.value);
    }
}


No.5 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        SinglyLinkedList list = new SinglyLinkedList();
        // Create a test list
        list.insert(1);
        list.insert(2);
        list.insert(3);
        list.insert(4);

        // Get the middle node
        Node middleNode = list.middle();

        // Assert the middle node value is expected
        assertEquals(2, middleNode.value);
    }
}


No.6 generated result --------------------------

@Test
    public void middleTest() {
        SinglyLinkedList list = new SinglyLinkedList();
        list.insert(1);
        list.insert(2);
        list.insert(3);
        list.insert(4);
        list.insert(5);
        
        Node expectedMiddleNode = list.getHead().next.next;
        Node actualMiddleNode = list.middle();
        
        assertEquals(expectedMiddleNode, actualMiddleNode);
    }


No.7 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    Node node1 = new Node(1);
    Node node2 = new Node(2);
    Node node3 = new Node(3);
    Node node4 = new Node(4);
    node1.next = node2;
    node2.next = node3;
    node3.next = node4;
    list.setHead(node1);
    Node middleNode = list.middle();
    assertEquals(2, middleNode.value);
}


No.8 generated result --------------------------

package com.thealgorithms.datastructures.lists;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class SinglyLinkedListTest {
    @Test
    public void middleTest() {
        // Create a SinglyLinkedList object
        SinglyLinkedList list = new SinglyLinkedList();
        
        // Insert elements into the list
        list.insert(1);
        list.insert(2);
        list.insert(3);
        list.insert(4);
        list.insert(5);
        
        // Call the middle() method
        Node result = list.middle();
        
        // Assert the value of the middle node
        assertEquals(3, result.value);
    }
}


No.9 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    list.insert(1);
    list.insert(2);
    list.insert(3);
    list.insert(4);
    list.insert(5);
    
    Node middleNode = list.middle();
    
    // Assert that the value of the middle node is 3
    assertEquals(3, middleNode.value);
}


No.10 generated result --------------------------

@Test
public void middleTest() {
    SinglyLinkedList list = new SinglyLinkedList();
    list.insert(1);
    list.insert(2);
    list.insert(3);
    list.insert(4);
    list.insert(5);

    // Get the middle node
    Node middleNode = list.middle();

    // Check if the middle node is correct
    assertEquals(3, middleNode.value);
}



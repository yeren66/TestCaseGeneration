{
    "project_name": "Java",
    "file_name": "SinglyLinkedList.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/SinglyLinkedList.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * Return the node in the middle of the list\n     * If the length of the list is even then return item number length/2\n     * @return middle node of the list\n     */",
    "source_code": "\npublic Node middle() {\n    if (head == null) {\n        return null;\n    }\n    Node firstCounter = head;\n    Node secondCounter = firstCounter.next;\n    while (secondCounter != null && secondCounter.next != null) {\n        firstCounter = firstCounter.next;\n        secondCounter = secondCounter.next.next;\n    }\n    return firstCounter;\n}\n",
    "class_name": "SinglyLinkedList",
    "method_name": "middle",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    Node expected = new Node(3); // Assuming there are 5 elements in the list\n    list.add(1);\n    list.add(2);\n    list.add(3);\n    list.add(4);\n    list.add(5);\n    \n    Node actual = list.middle();\n    \n    assertEquals(expected, actual, \"Incorrect middle node\");\n}",
        "public Node expectedMiddle = middle();\npublic void middleTest() {\n    SinglyLinkedList singlyLinkedList = new SinglyLinkedList();\n    // Add nodes to the linked list\n    singlyLinkedList.add(1);\n    singlyLinkedList.add(2);\n    singlyLinkedList.add(3);\n    singlyLinkedList.add(4);\n    singlyLinkedList.add(5);\n    \n    // Call the middle() method\n    Node actualMiddle = singlyLinkedList.middle();\n    \n    // Assert that the actual middle node is equal to the expected middle node\n    assertEquals(expectedMiddle, actualMiddle);\n}",
        "@Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        \n        // Case 1: Empty list\n        assertEquals(null, list.middle());\n        \n        // Case 2: List with one node\n        list.insert(5);\n        assertEquals(5, list.middle().data);\n        \n        // Case 3: List with odd number of nodes\n        list.insert(10);\n        list.insert(15);\n        list.insert(20);\n        list.insert(25);\n        assertEquals(15, list.middle().data);\n        \n        // Case 4: List with even number of nodes\n        list.insert(30);\n        assertEquals(20, list.middle().data);\n    }\n",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    Node node1 = new Node(1);\n    Node node2 = new Node(2);\n    Node node3 = new Node(3);\n    Node node4 = new Node(4);\n    list.add(node1);\n    list.add(node2);\n    list.add(node3);\n    list.add(node4);\n    Node middleNode = list.middle();\n    assertEquals(node2, middleNode);\n}",
        "@Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        assertNull(list.middle());\n        \n        list.add(1);\n        assertEquals(1, list.middle().getData());\n        \n        list.add(2);\n        list.add(3);\n        assertEquals(2, list.middle().getData());\n        \n        list.add(4);\n        list.add(5);\n        list.add(6);\n        assertEquals(3, list.middle().getData());\n        \n        list.add(7);\n        list.add(8);\n        list.add(9);\n        list.add(10);\n        assertEquals(5, list.middle().getData());\n    }",
        "public void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    // Add nodes to the linked list\n    list.add(1);\n    list.add(2);\n    list.add(3);\n    list.add(4);\n    \n    // Invoke the middle method\n    Node result = list.middle();\n    \n    // Verify the result\n    assertEquals(3, result.getData());\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    list.add(1);\n    list.add(2);\n    list.add(3);\n    list.add(4);\n    list.add(5);\n    Node expected = list.getNodeAt(2);\n    Node actual = list.middle();\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    assertNull(list.middle());\n    \n    list.add(1);\n    assertEquals(1, list.middle().getData());\n    \n    list.add(2);\n    assertEquals(1, list.middle().getData());\n    \n    list.add(3);\n    assertEquals(2, list.middle().getData());\n    \n    list.add(4);\n    assertEquals(2, list.middle().getData());\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    public void middleTest() {\n        SinglyLinkedList list = new SinglyLinkedList();\n        Node node1 = new Node(1);\n        Node node2 = new Node(2);\n        Node node3 = new Node(3);\n        Node node4 = new Node(4);\n        Node node5 = new Node(5);\n        \n        list.add(node1);\n        list.add(node2);\n        list.add(node3);\n        list.add(node4);\n        list.add(node5);\n        \n        Node middleNode = list.middle();\n        \n        assertEquals(node3, middleNode);\n    }\n}",
        "@Test\npublic void middleTest() {\n    SinglyLinkedList list = new SinglyLinkedList();\n    Node expected = new Node(3);\n    \n    list.add(1);\n    list.add(2);\n    list.add(3);\n    list.add(4);\n    list.add(5);\n    \n    Node actual = list.middle();\n    \n    assertEquals(expected, actual);\n}"
    ]
}
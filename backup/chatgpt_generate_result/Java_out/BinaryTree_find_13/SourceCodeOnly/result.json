{
    "project_name": "Java",
    "file_name": "BinaryTree.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/trees/BinaryTree.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.trees",
    "docstring": "/**\n     * Method to find a Node with a certain value\n     *\n     * @param key Value being looked for\n     * @return The node if it finds it, otherwise returns the parent\n     */",
    "source_code": "\npublic Node find(int key) {\n    Node current = root;\n    while (current != null) {\n        if (key < current.data) {\n            if (current.left == null) {\n                return current; // The key isn't exist, returns the parent\n            }\n            current = current.left;\n        } else if (key > current.data) {\n            if (current.right == null) {\n                return current;\n            }\n            current = current.right;\n        } else { // If you find the value return it\n            return current;\n        }\n    }\n    return null;\n}\n",
    "class_name": "BinaryTree",
    "method_name": "find",
    "arguments": [
        "int key"
    ],
    "generate_test": [
        "@Test\npublic void findTest() {\n    BinaryTree binaryTree = new BinaryTree();\n    \n    // Test case: Key exists in the tree\n    Node existingNode = binaryTree.find(7);\n    assertNotNull(existingNode);\n    assertEquals(7, existingNode.data);\n    \n    // Test case: Key doesn't exist in the tree\n    Node nonExistingNode = binaryTree.find(10);\n    assertNull(nonExistingNode);\n    \n    // Test case: Key is smaller than all values in the tree\n    Node smallerNode = binaryTree.find(1);\n    assertNotNull(smallerNode);\n    assertEquals(3, smallerNode.data);\n    \n    // Test case: Key is larger than all values in the tree\n    Node largerNode = binaryTree.find(20);\n    assertNotNull(largerNode);\n    assertEquals(18, largerNode.data);\n}",
        "@Test\npublic void findTest() {\n    BinaryTree tree = new BinaryTree();\n    Node root = new Node(5);\n    Node node1 = new Node(3);\n    Node node2 = new Node(7);\n    Node node3 = new Node(2);\n    Node node4 = new Node(4);\n    Node node5 = new Node(6);\n    Node node6 = new Node(8);\n    root.left = node1;\n    root.right = node2;\n    node1.left = node3;\n    node1.right = node4;\n    node2.left = node5;\n    node2.right = node6;\n    \n    // Test case 1: key = 5 (root value)\n    assertEquals(root, tree.find(5));\n    \n    // Test case 2: key = 3 (existing value in the left subtree)\n    assertEquals(node1, tree.find(3));\n    \n    // Test case 3: key = 7 (existing value in the right subtree)\n    assertEquals(node2, tree.find(7));\n    \n    // Test case 4: key = 2 (existing value in the left subtree of left subtree)\n    assertEquals(node3, tree.find(2));\n    \n    // Test case 5: key = 4 (existing value in the right subtree of left subtree)\n    assertEquals(node4, tree.find(4));\n    \n    // Test case 6: key = 6 (existing value in the left subtree of right subtree)\n    assertEquals(node5, tree.find(6));\n    \n    // Test case 7: key = 8 (existing value in the right subtree of right subtree)\n    assertEquals(node6, tree.find(8));\n    \n    // Test case 8: key = 10 (non-existing value, returns the parent node with the appropriate position in the tree)\n    assertEquals(node6, tree.find(10));\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        // Create a binary tree\n        BinaryTree tree = new BinaryTree();\n        \n        // Add nodes to the binary tree\n        \n        // Test case 1: Finding an existing value in the binary tree\n        Node existingNode = new Node(5); // Assuming there is a node with value 5 in the binary tree\n        tree.addChild(existingNode);\n        Node result = tree.find(5);\n        assertEquals(existingNode, result);\n        \n        // Test case 2: Finding a non-existing value in the binary tree\n        int nonExistingValue = 10; // Assuming there is no node with value 10 in the binary tree\n        Node parentNode = new Node(7); // Assuming the parent for nonExistingValue is 7\n        tree.addChild(parentNode);\n        Node result2 = tree.find(nonExistingValue);\n        assertEquals(parentNode, result2);\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        BinaryTree binaryTree = new BinaryTree();\n        // Test when key is present in the tree\n        Node node1 = new Node(10);\n        Node node2 = new Node(20);\n        node1.right = node2;\n        binaryTree.root = node1;\n        assertEquals(node2, binaryTree.find(20));\n        \n        // Test when key is not present in the tree\n        Node node3 = new Node(30);\n        node2.right = node3;\n        assertEquals(node3, binaryTree.find(40));\n        \n        // Test when tree is empty\n        binaryTree.root = null;\n        assertNull(binaryTree.find(50));\n    }\n}",
        "@Test\npublic void findTest() {\n    BinaryTree binaryTree = new BinaryTree();\n    binaryTree.insert(10);\n    binaryTree.insert(5);\n    binaryTree.insert(15);\n    binaryTree.insert(12);\n    binaryTree.insert(20);\n    \n    Node result = binaryTree.find(12);\n    \n    assertEquals(12, result.data);\n}",
        "@Test\npublic void findTest() {\n    // Create a binary tree and populate it with nodes\n    BinaryTree tree = new BinaryTree();\n    tree.insert(5);\n    tree.insert(3);\n    tree.insert(7);\n    tree.insert(2);\n    tree.insert(4);\n    tree.insert(6);\n    tree.insert(8);\n\n    // Test the find method\n    Node result = tree.find(4);\n    assertEquals(4, result.data);\n}",
        "### JUNIT Test case:\npackage com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        BinaryTree tree = new BinaryTree();\n        \n        // Test case 1: Key is found in the tree\n        Node result1 = tree.find(5);\n        assertEquals(5, result1.data);\n        \n        // Test case 2: Key is not found in the tree, returns parent\n        Node result2 = tree.find(8);\n        assertNull(result2);\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        BinaryTree binaryTree = new BinaryTree();\n        \n        // Test case 1: Key is less than the root data\n        Node result1 = binaryTree.find(4);\n        assertNull(result1); // The key doesn't exist, so result should be null\n        \n        // Test case 2: Key is greater than the root data\n        Node result2 = binaryTree.find(8);\n        assertNull(result2); // The key doesn't exist, so result should be null\n        \n        // Test case 3: Key is equal to the root data\n        Node result3 = binaryTree.find(6);\n        assertNotNull(result3); // The key exists, so result should not be null\n        \n        // Test case 4: Key exists as a left child of some node\n        Node result4 = binaryTree.find(2);\n        assertNotNull(result4); // The key exists, so result should not be null\n        \n        // Test case 5: Key exists as a right child of some node\n        Node result5 = binaryTree.find(10);\n        assertNotNull(result5); // The key exists, so result should not be null\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        BinaryTree binaryTree = new BinaryTree();\n        \n        // Test case 1: key exists in the tree\n        Node result1 = binaryTree.find(5);\n        assertNotNull(result1);\n        assertEquals(5, result1.data);\n        \n        // Test case 2: key doesn't exist in the tree\n        Node result2 = binaryTree.find(10);\n        assertNotNull(result2);\n        assertEquals(9, result2.data); // Assuming you want to return the parent node when key is not found\n        \n        // Test case 3: empty tree\n        BinaryTree emptyTree = new BinaryTree();\n        Node result3 = emptyTree.find(3);\n        assertNull(result3);\n    }\n}",
        "package com.thealgorithms.datastructures.trees;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n    @Test\n    public void findTest() {\n        BinaryTree binaryTree = new BinaryTree();\n        \n        // Create nodes and populate the binary tree\n        Node root = new Node(5);\n        root.left = new Node(3);\n        root.right = new Node(7);\n        root.left.left = new Node(2);\n        root.left.right = new Node(4);\n        root.right.left = new Node(6);\n        root.right.right = new Node(8);\n        \n        binaryTree.root = root;\n        \n        // Test case 1: Key exists in the binary tree\n        Node node1 = binaryTree.find(4);\n        assertNotNull(node1);\n        assertEquals(4, node1.data);\n        \n        // Test case 2: Key does not exist in the binary tree\n        Node node2 = binaryTree.find(9);\n        assertNotNull(node2);\n        assertEquals(8, node2.data);\n    }\n}"
    ]
}
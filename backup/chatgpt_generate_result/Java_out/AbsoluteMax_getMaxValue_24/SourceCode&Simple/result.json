{
    "project_name": "Java",
    "file_name": "AbsoluteMax.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/AbsoluteMax.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * Finds the absolute maximum value among the given numbers.\n     *\n     * @param numbers The numbers to compare.\n     * @return The absolute maximum value.\n     * @throws IllegalArgumentException If the input array is empty or null.\n     */",
    "source_code": "\npublic static int getMaxValue(int... numbers) {\n    if (numbers == null || numbers.length == 0) {\n        throw new IllegalArgumentException(\"Numbers array cannot be empty or null\");\n    }\n    int absMax = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (Math.abs(numbers[i]) > Math.abs(absMax)) {\n            absMax = numbers[i];\n        }\n    }\n    return absMax;\n}\n",
    "class_name": "AbsoluteMax",
    "method_name": "getMaxValue",
    "arguments": [
        "int numbers"
    ],
    "generate_test": [
        "@Test\npublic void getMaxValueTest() {\n    int result = AbsoluteMax.getMaxValue(-1, 2, -3, 4, -5);\n    assertEquals(5, result);\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        // Test with positive numbers\n        int result1 = AbsoluteMax.getMaxValue(1, 2, 3, 4);\n        assertEquals(4, result1);\n        \n        // Test with negative and positive numbers\n        int result2 = AbsoluteMax.getMaxValue(-1, -2, 3, 4);\n        assertEquals(-4, result2);\n        \n        // Test with only negative numbers\n        int result3 = AbsoluteMax.getMaxValue(-5, -3, -2, -1);\n        assertEquals(-5, result3);\n        \n        // Test with a single number\n        int result4 = AbsoluteMax.getMaxValue(9);\n        assertEquals(9, result4);\n        \n        // Test with an empty array\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        });\n    }\n}",
        "@Test\npublic void getMaxValueTest() {\n    int result = AbsoluteMax.getMaxValue(1, -4, 10, -20, 5);\n    assertEquals(20, result);\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        // Test case 1: Valid input\n        int result1 = AbsoluteMax.getMaxValue(10, -5, 7, -2);\n        assertEquals(10, result1);\n        \n        // Test case 2: Numbers array is empty (IllegalArgumentException expected)\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        });\n        \n        // Test case 3: Numbers array is null (IllegalArgumentException expected)\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(null);\n        });\n    }\n}",
        "@Test\npublic void getMaxValueTest() {\n    int result = AbsoluteMax.getMaxValue(1, -5, 10, -8, 3);\n    assertEquals(10, result);\n}",
        "public class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        // Test case 1: Testing with positive numbers\n        int result1 = AbsoluteMax.getMaxValue(-1, 2, 5, 4, 3);\n        assertEquals(5, result1);\n        \n        // Test case 2: Testing with negative numbers\n        int result2 = AbsoluteMax.getMaxValue(-5, -3, -2, -1);\n        assertEquals(-5, result2);\n        \n        // Test case 3: Testing with positive and negative numbers\n        int result3 = AbsoluteMax.getMaxValue(-10, 20, -30, 40, -50);\n        assertEquals(-50, result3);\n        \n        // Test case 4: Testing with only one number\n        int result4 = AbsoluteMax.getMaxValue(6);\n        assertEquals(6, result4);\n        \n        // Test case 5: Testing with an empty numbers array\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue();\n        });\n    }\n}",
        "@Test\npublic void getMaxValueTest() {\n    // Test case 1: numbers = {1, -3, 5, -7, 9}\n    int[] numbers = {1, -3, 5, -7, 9};\n    int expectedValue = 9;\n    int actualValue = AbsoluteMax.getMaxValue(numbers);\n    assertEquals(expectedValue, actualValue);\n    \n    // Test case 2: numbers = {-2, -4, -6, -8, -10}\n    numbers = {-2, -4, -6, -8, -10};\n    expectedValue = -2;\n    actualValue = AbsoluteMax.getMaxValue(numbers);\n    assertEquals(expectedValue, actualValue);\n    \n    // Test case 3: numbers = {0, 0, 0, 0, 0}\n    numbers = {0, 0, 0, 0, 0};\n    expectedValue = 0;\n    actualValue = AbsoluteMax.getMaxValue(numbers);\n    assertEquals(expectedValue, actualValue);\n}",
        "@Test\npublic void getMaxValueTest() {\n    // Test case with positive numbers\n    int result1 = AbsoluteMax.getMaxValue(1, 2, 3, 4);\n    assertEquals(4, result1);\n    \n    // Test case with negative numbers\n    int result2 = AbsoluteMax.getMaxValue(-1, -2, -3, -4);\n    assertEquals(-4, result2);\n    \n    // Test case with mixed positive and negative numbers\n    int result3 = AbsoluteMax.getMaxValue(-1, 2, -3, 4);\n    assertEquals(-4, result3);\n    \n    // Test case with zero and positive numbers\n    int result4 = AbsoluteMax.getMaxValue(0, 2, 3, 4);\n    assertEquals(4, result4);\n    \n    // Test case with zero and negative numbers\n    int result5 = AbsoluteMax.getMaxValue(0, -2, -3, -4);\n    assertEquals(-4, result5);\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AbsoluteMaxTest {\n    @Test\n    public void getMaxValueTest() {\n        int[] numbers = {1, -5, 10, -15, 20};\n        int result = AbsoluteMax.getMaxValue(numbers);\n        assertEquals(20, result);\n        \n        int[] emptyArray = {};\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(emptyArray);\n        });\n        \n        int[] nullArray = null;\n        assertThrows(IllegalArgumentException.class, () -> {\n            AbsoluteMax.getMaxValue(nullArray);\n        });\n    }\n}",
        "\nint[] testArray = {1, -2, 3, -4, 5};\nint expectedResult = 5;\nint actualResult = AbsoluteMax.getMaxValue(testArray);\nassertEquals(expectedResult, actualResult);\n"
    ]
}
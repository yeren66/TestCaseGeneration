{
    "project_name": "Java",
    "file_name": "ConnectedComponent.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/graphs/ConnectedComponent.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.graphs",
    "docstring": "/**\n     * Main method used for counting the connected components. Iterates through\n     * the array of nodes to do a depth first search to get all nodes of the\n     * graph from the actual node. These nodes are added to the array\n     * markedNodes and will be ignored if they are chosen in the nodeList.\n     *\n     * @return returns the amount of unconnected graphs\n     */",
    "source_code": "\npublic int countGraphs() {\n    int count = 0;\n    Set<Node> markedNodes = new HashSet<Node>();\n\n    for (Node n : nodeList) {\n        if (!markedNodes.contains(n)) {\n            markedNodes.add(n);\n            markedNodes.addAll(depthFirstSearch(n, new ArrayList<Node>()));\n            count++;\n        }\n    }\n\n    return count;\n}\n",
    "class_name": "Graph",
    "method_name": "countGraphs",
    "arguments": [],
    "generate_test": [
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        Graph graph = new Graph();\n\n        // Create nodes\n        Graph.Node nodeA = graph.new Node(\"A\");\n        Graph.Node nodeB = graph.new Node(\"B\");\n        Graph.Node nodeC = graph.new Node(\"C\");\n        Graph.Node nodeD = graph.new Node(\"D\");\n\n        // Add nodes to the graph\n        graph.addNode(nodeA);\n        graph.addNode(nodeB);\n        graph.addNode(nodeC);\n        graph.addNode(nodeD);\n\n        // Create edges\n        Graph.Edge edge1 = graph.new Edge(nodeA, nodeB);\n        Graph.Edge edge2 = graph.new Edge(nodeB, nodeC);\n        Graph.Edge edge3 = graph.new Edge(nodeC, nodeD);\n\n        // Add edges to the graph\n        graph.addEdge(edge1);\n        graph.addEdge(edge2);\n        graph.addEdge(edge3);\n\n        // Assert the expected count of graphs\n        int expectedCount = 1;\n        int actualCount = graph.countGraphs();\n        assertEquals(expectedCount, actualCount);\n    }\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    graph.addEdge(\"A\", \"B\");\n    graph.addEdge(\"B\", \"C\");\n    graph.addEdge(\"D\", \"E\");\n    graph.addEdge(\"E\", \"F\");\n    \n    int result = graph.countGraphs();\n    assertEquals(2, result);\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    graph.addEdge(\"A\", \"B\");\n    graph.addEdge(\"B\", \"C\");\n    graph.addEdge(\"D\", \"E\");\n    graph.addEdge(\"E\", \"F\");\n    \n    int result = graph.countGraphs();\n    \n    assertEquals(2, result);\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    graph.addEdge(1, 2);\n    graph.addEdge(2, 3);\n    graph.addEdge(4, 5);\n    graph.addEdge(6, 7);\n\n    int result = graph.countGraphs();\n\n    assertEquals(2, result);\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    Graph.Node node1 = graph.new Node(\"A\"); // Instantiate Node\n    Graph.Node node2 = graph.new Node(\"B\");\n    Graph.Node node3 = graph.new Node(\"C\");\n    graph.addNode(node1); // Add nodes to nodeList\n    graph.addNode(node2);\n    graph.addNode(node3);\n\n    graph.addEdge(node1, node2); // Add edges\n    graph.addEdge(node2, node3);\n\n    int result = graph.countGraphs();\n    assertEquals(1, result);\n}",
        "// Instantiate a new Graph object\nGraph graph = new Graph();\n\n// Add some nodes and edges to the graph\ngraph.addEdge(\"A\", \"B\");\ngraph.addEdge(\"B\", \"C\");\ngraph.addEdge(\"C\", \"D\");\ngraph.addEdge(\"E\", \"F\");\n\n// Call the \"countGraphs\" method and store the result\nint result = graph.countGraphs();\n\n// Assert that the result is equal to the expected number of graphs\nassertEquals(2, result);",
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    graph.addEdge(\"A\", \"B\");\n    graph.addEdge(\"B\", \"C\");\n    graph.addEdge(\"D\", \"E\");\n    graph.addEdge(\"F\", \"G\");\n    \n    int result = graph.countGraphs();\n    assertEquals(3, result);\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class GraphTest {\n    @Test\n    public void countGraphsTest() {\n        Graph graph = new Graph();\n        \n        // Populate the nodeList and edgeList\n        graph.addNode(new Graph.Node(\"A\"));\n        graph.addNode(new Graph.Node(\"B\"));\n        graph.addNode(new Graph.Node(\"C\"));\n        graph.addNode(new Graph.Node(\"D\"));\n        \n        graph.addEdge(\"A\", \"B\");\n        graph.addEdge(\"B\", \"C\");\n        graph.addEdge(\"C\", \"D\");\n        \n        int expectedCount = 1; // The graph has only 1 connected component\n        \n        assertEquals(expectedCount, graph.countGraphs());\n    }\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph g = new Graph();\n    Graph.Node node1 = g.new Node(1);\n    Graph.Node node2 = g.new Node(2);\n    Graph.Node node3 = g.new Node(3);\n    g.addEdge(node1, node2);\n    g.addEdge(node2, node3);\n    \n    int result = g.countGraphs();\n    \n    assertEquals(1, result);\n}",
        "@Test\npublic void countGraphsTest() {\n    Graph graph = new Graph();\n    \n    Graph.Node node1 = graph.new Node(\"A\");\n    Graph.Node node2 = graph.new Node(\"B\");\n    Graph.Node node3 = graph.new Node(\"C\");\n    Graph.Node node4 = graph.new Node(\"D\");\n    Graph.Node node5 = graph.new Node(\"E\");\n    \n    graph.nodeList.add(node1);\n    graph.nodeList.add(node2);\n    graph.nodeList.add(node3);\n    graph.nodeList.add(node4);\n    graph.nodeList.add(node5);\n    \n    graph.addEdge(node1, node2);\n    graph.addEdge(node2, node3);\n    graph.addEdge(node3, node1);\n    graph.addEdge(node4, node5);\n    \n    int result = graph.countGraphs();\n    \n    assertEquals(2, result);\n}"
    ]
}
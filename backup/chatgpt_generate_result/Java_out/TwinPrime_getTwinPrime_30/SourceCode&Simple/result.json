{
    "project_name": "Java",
    "file_name": "TwinPrime.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/TwinPrime.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * This method returns twin prime of the integer value passed as argument\n     *\n     * @param input_number Integer value of which twin prime is to be found\n     * @return (number + 2) if number and (number + 2) are prime, -1 otherwise\n     */",
    "source_code": "\nstatic int getTwinPrime(int inputNumber) {\n\n    // if inputNumber and (inputNumber + 2) are both prime\n    // then return (inputNumber + 2) as a result\n    if (PrimeCheck.isPrime(inputNumber) && PrimeCheck.isPrime(inputNumber + 2)) {\n        return inputNumber + 2;\n    }\n    // if any one from inputNumber and (inputNumber + 2) or if both of them are not prime\n    // then return -1 as a result\n    return -1;\n}\n",
    "class_name": "TwinPrime",
    "method_name": "getTwinPrime",
    "arguments": [
        "int inputNumber"
    ],
    "generate_test": [
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        assertEquals(3, TwinPrime.getTwinPrime(1));\n        assertEquals(-1, TwinPrime.getTwinPrime(5));\n        assertEquals(-1, TwinPrime.getTwinPrime(6));\n        assertEquals(7, TwinPrime.getTwinPrime(3));\n        assertEquals(-1, TwinPrime.getTwinPrime(10));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: inputNumber is a twin prime\n        int result1 = TwinPrime.getTwinPrime(3);\n        assertEquals(5, result1);\n        \n        // Test case 2: inputNumber is not a twin prime\n        int result2 = TwinPrime.getTwinPrime(6);\n        assertEquals(-1, result2);\n    }\n}",
        "@Test\npublic void getTwinPrimeTest() {\n    // test case 1\n    int result1 = TwinPrime.getTwinPrime(3);\n    assertEquals(5, result1, \"Expected twin prime: 5\");\n    \n    // test case 2\n    int result2 = TwinPrime.getTwinPrime(11);\n    assertEquals(13, result2, \"Expected twin prime: 13\");\n    \n    // test case 3\n    int result3 = TwinPrime.getTwinPrime(7);\n    assertEquals(-1, result3, \"Expected -1 as neither twin prime is found\");\n    \n    // test case 4\n    int result4 = TwinPrime.getTwinPrime(2);\n    assertEquals(-1, result4, \"Expected -1 as (2 + 2) is not prime\");\n}",
        "@Test\npublic void getTwinPrimeTest() {\n    // Test case 1: inputNumber is a twin prime\n    int result1 = TwinPrime.getTwinPrime(3);\n    assertEquals(5, result1);\n\n    // Test case 2: inputNumber is not a twin prime\n    int result2 = TwinPrime.getTwinPrime(4);\n    assertEquals(-1, result2);\n\n    // Test case 3: inputNumber is a large twin prime\n    int result3 = TwinPrime.getTwinPrime(17);\n    assertEquals(19, result3);\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        int result = TwinPrime.getTwinPrime(5);\n        assertEquals(7, result);\n\n        result = TwinPrime.getTwinPrime(11);\n        assertEquals(13, result);\n\n        result = TwinPrime.getTwinPrime(17);\n        assertEquals(19, result);\n    }\n}",
        "@Test\npublic void getTwinPrimeTest() {\n    // Test case 1: (inputNumber = 3) and (inputNumber + 2 = 5) are both prime\n    // Expected output: 5\n    assertEquals(5, TwinPrime.getTwinPrime(3));\n\n    // Test case 2: (inputNumber = 11) and (inputNumber + 2 = 13) are both prime\n    // Expected output: 13\n    assertEquals(13, TwinPrime.getTwinPrime(11));\n\n    // Test case 3: (inputNumber = 17) and (inputNumber + 2 = 19) are both prime\n    // Expected output: 19\n    assertEquals(19, TwinPrime.getTwinPrime(17));\n\n    // Test case 4: (inputNumber = 23) is prime, but (inputNumber + 2 = 25) is not prime\n    // Expected output: -1\n    assertEquals(-1, TwinPrime.getTwinPrime(23));\n\n    // Test case 5: (inputNumber = 29) is not prime, but (inputNumber + 2 = 31) is prime\n    // Expected output: -1\n    assertEquals(-1, TwinPrime.getTwinPrime(29));\n\n    // Test case 6: Both (inputNumber = 37) and (inputNumber + 2 = 39) are not prime\n    // Expected output: -1\n    assertEquals(-1, TwinPrime.getTwinPrime(37));\n}",
        "@Test\npublic void getTwinPrimeTest() {\n    assertEquals(3, TwinPrime.getTwinPrime(1));\n    assertEquals(5, TwinPrime.getTwinPrime(3));\n    assertEquals(11, TwinPrime.getTwinPrime(7));\n    assertEquals(-1, TwinPrime.getTwinPrime(4));\n    assertEquals(-1, TwinPrime.getTwinPrime(10));\n}",
        "@Test\npublic void getTwinPrimeTest() {\n    int result = TwinPrime.getTwinPrime(3);\n    assertEquals(5, result);\n}",
        "@Test\npublic void getTwinPrimeTest() {\n    // Test case 1: when inputNumber is a twin prime\n    int result1 = TwinPrime.getTwinPrime(3);\n    assertEquals(5, result1);\n\n    // Test case 2: when inputNumber is not a twin prime\n    int result2 = TwinPrime.getTwinPrime(4);\n    assertEquals(-1, result2);\n}",
        "@Test\npublic void getTwinPrimeTest() {\n    // test case 1: both inputNumber and inputNumber + 2 are prime\n    int result1 = TwinPrime.getTwinPrime(3);\n    assertEquals(5, result1);\n\n    // test case 2: only one of the numbers is prime\n    int result2 = TwinPrime.getTwinPrime(4);\n    assertEquals(-1, result2);\n\n    // test case 3: both inputNumber and inputNumber + 2 are not prime\n    int result3 = TwinPrime.getTwinPrime(10);\n    assertEquals(-1, result3);\n}"
    ]
}
{
    "project_name": "Java",
    "file_name": "TwinPrime.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/TwinPrime.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * This method returns twin prime of the integer value passed as argument\n     *\n     * @param input_number Integer value of which twin prime is to be found\n     * @return (number + 2) if number and (number + 2) are prime, -1 otherwise\n     */",
    "source_code": "\nstatic int getTwinPrime(int inputNumber) {\n\n    // if inputNumber and (inputNumber + 2) are both prime\n    // then return (inputNumber + 2) as a result\n    if (PrimeCheck.isPrime(inputNumber) && PrimeCheck.isPrime(inputNumber + 2)) {\n        return inputNumber + 2;\n    }\n    // if any one from inputNumber and (inputNumber + 2) or if both of them are not prime\n    // then return -1 as a result\n    return -1;\n}\n",
    "class_name": "TwinPrime",
    "method_name": "getTwinPrime",
    "arguments": [
        "int inputNumber"
    ],
    "generate_test": [
        "public void getTwinPrimeTest() {\n        assertEquals(3, getTwinPrime(1));\n        assertEquals(5, getTwinPrime(3));\n        assertEquals(-1, getTwinPrime(4));\n        assertEquals(-1, getTwinPrime(6));\n        assertEquals(-1, getTwinPrime(7));\n        assertEquals(11, getTwinPrime(9));\n        assertEquals(-1, getTwinPrime(10));\n        assertEquals(-1, getTwinPrime(12));\n        assertEquals(-1, getTwinPrime(13));\n        assertEquals(17, getTwinPrime(15));\n        assertEquals(-1, getTwinPrime(16));\n    }",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test when both inputNumber and (inputNumber + 2) are prime\n        assertEquals(3, getTwinPrime(1));\n        \n        // Test when only inputNumber is prime\n        assertEquals(-1, getTwinPrime(2));\n        \n        // Test when only (inputNumber + 2) is prime\n        assertEquals(-1, getTwinPrime(3));\n        \n        // Test when both inputNumber and (inputNumber + 2) are not prime\n        assertEquals(-1, getTwinPrime(4));\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        int result1 = TwinPrime.getTwinPrime(3);\n        assertEquals(5, result1);\n\n        int result2 = TwinPrime.getTwinPrime(17);\n        assertEquals(19, result2);\n\n        int result3 = TwinPrime.getTwinPrime(5);\n        assertEquals(-1, result3);\n\n        int result4 = TwinPrime.getTwinPrime(10);\n        assertEquals(-1, result4);\n    }\n}",
        "@Test\npublic void getTwinPrimeTest(){\n    // Test inputNumber = 3, expected output = 5\n    assertEquals(5, getTwinPrime(3));\n    \n    // Test inputNumber = 17, expected output = 19\n    assertEquals(19, getTwinPrime(17));\n    \n    // Test inputNumber = 11, expected output = -1\n    assertEquals(-1, getTwinPrime(11));\n    \n    // Test inputNumber = 19, expected output = -1\n    assertEquals(-1, getTwinPrime(19));\n    \n    // Test inputNumber = 31, expected output = 31\n    assertEquals(-1, getTwinPrime(31));\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case where inputNumber is prime and inputNumber + 2 is prime\n        assertEquals(5, getTwinPrime(3), \"Input: 3, Expected Output: 5\");\n        \n        // Test case where inputNumber is prime and inputNumber + 2 is not prime\n        assertEquals(-1, getTwinPrime(7), \"Input: 7, Expected Output: -1\");\n        \n        // Test case where inputNumber is not prime and inputNumber + 2 is prime\n        assertEquals(-1, getTwinPrime(6), \"Input: 6, Expected Output: -1\");\n        \n        // Test case where inputNumber is not prime and inputNumber + 2 is not prime\n        assertEquals(-1, getTwinPrime(10), \"Input: 10, Expected Output: -1\");\n    }\n}",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TwinPrimeTest {\n    @Test\n    public void getTwinPrimeTest() {\n        // Test case 1: inputNumber = 3\n        int result1 = TwinPrime.getTwinPrime(3);\n        assertEquals(5, result1);\n\n        // Test case 2: inputNumber = 5\n        int result2 = TwinPrime.getTwinPrime(5);\n        assertEquals(7, result2);\n\n        // Test case 3: inputNumber = 7\n        int result3 = TwinPrime.getTwinPrime(7);\n        assertEquals(11, result3);\n\n        // Test case 4: inputNumber = 11\n        int result4 = TwinPrime.getTwinPrime(11);\n        assertEquals(13, result4);\n\n        // Test case 5: inputNumber = 13\n        int result5 = TwinPrime.getTwinPrime(13);\n        assertEquals(17, result5);\n\n        // Test case 6: inputNumber = 17\n        int result6 = TwinPrime.getTwinPrime(17);\n        assertEquals(19, result6);\n\n        // Test case 7: inputNumber = 19\n        int result7 = TwinPrime.getTwinPrime(19);\n        assertEquals(-1, result7);\n    }\n}",
        "@Test\npublic void getTwinPrimeTest() {\n    assertEquals(3, getTwinPrime(1));\n    assertEquals(5, getTwinPrime(3));\n    assertEquals(-1, getTwinPrime(6));\n}",
        "public void getTwinPrimeTest() {\n    int result1 = TwinPrime.getTwinPrime(3);\n    assertEquals(5, result1);\n    \n    int result2 = TwinPrime.getTwinPrime(11);\n    assertEquals(13, result2);\n    \n    int result3 = TwinPrime.getTwinPrime(4);\n    assertEquals(-1, result3);\n}",
        "@Test\npublic void getTwinPrimeTest() {\n    assertEquals(3, getTwinPrime(1));\n    assertEquals(5, getTwinPrime(3));\n    assertEquals(17, getTwinPrime(13));\n    assertEquals(-1, getTwinPrime(4));\n    assertEquals(-1, getTwinPrime(7));\n}",
        "@Test\npublic void getTwinPrimeTest() {\n    assertEquals(3, TwinPrime.getTwinPrime(1));\n    assertEquals(5, TwinPrime.getTwinPrime(3));\n    assertEquals(17, TwinPrime.getTwinPrime(13));\n    assertEquals(19, TwinPrime.getTwinPrime(17));\n    assertEquals(-1, TwinPrime.getTwinPrime(4));\n    assertEquals(-1, TwinPrime.getTwinPrime(9));\n    assertEquals(-1, TwinPrime.getTwinPrime(11));\n}"
    ]
}
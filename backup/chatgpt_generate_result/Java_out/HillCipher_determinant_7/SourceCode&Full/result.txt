Source code: 

// Determinant calculator
public static int determinant(int[][] a, int n) {
    int det = 0, sign = 1, p = 0, q = 0;

    if (n == 1) {
        det = a[0][0];
    } else {
        int[][] b = new int[n - 1][n - 1];
        for (int x = 0; x < n; x++) {
            p = 0;
            q = 0;
            for (int i = 1; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (j != x) {
                        b[p][q++] = a[i][j];
                        if (q % (n - 1) == 0) {
                            p++;
                            q = 0;
                        }
                    }
                }
            }
            det = det + a[0][x] * determinant(b, n - 1) * sign;
            sign = -sign;
        }
    }
    return det;
}



No.1 generated result --------------------------

@Test
public void determinantTest() {
    int[][] matrix1 = {{1,2},{3,4}};
    int n1 = 2;
    int result1 = HillCipher.determinant(matrix1, n1);
    assertEquals(-2, result1);
    
    int[][] matrix2 = {{1,2,3},{4,5,6},{7,8,9}};
    int n2 = 3;
    int result2 = HillCipher.determinant(matrix2, n2);
    assertEquals(0, result2);
    
    int[][] matrix3 = {{3,2,1},{1,5,2},{2,6,3}};
    int n3 = 3;
    int result3 = HillCipher.determinant(matrix3, n3);
    assertEquals(29, result3);
}


No.2 generated result --------------------------

    @Test
    public void determinantTest() {
        int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
        int result = HillCipher.determinant(matrix, 3);
        assertEquals(0, result);
    }


No.3 generated result --------------------------

@Test
public void determinantTest() {
    int[][] a = {{1, 2}, {3, 4}};
    int n = 2;
    int expected = -2;
    
    int result = HillCipher.determinant(a, n);
    
    assertEquals(expected, result);
}


No.4 generated result --------------------------

@Test
public void determinantTest() {
    int[][] a = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    int n = 3;
    int expectedDet = 0;
    
    HillCipher.validateDeterminant(a, n);
    int actualDet = HillCipher.determinant(a, n);
    
    assertEquals(expectedDet, actualDet);
}


No.5 generated result --------------------------

@Test
public void determinantTest() {
    int[][] a = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };

    int n = 3;
    int expected = -3;
    int result = HillCipher.determinant(a, n);
    assertEquals(expected, result);
}


No.6 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HillCipherTest {
    @Test
    public void determinantTest() {
        int[][] matrix = { 
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        int det = HillCipher.determinant(matrix, 3);
        assertEquals(-3, det);
    }
}


No.7 generated result --------------------------

        // Test case for determinant method
        @Test
        public void determinantTest() {
            int[][] matrix = {{1,2,3}, {4,5,6}, {7,8,9}};
            int det = HillCipher.determinant(matrix, 3);
            assertEquals(0, det);
        }


No.8 generated result --------------------------

@Test
public void determinantTest() {
    int[][] a = {{1, 2}, {3, 4}};
    int expected = -2;
    int actual = HillCipher.determinant(a, 2);
    assertEquals(expected, actual);

    int[][] b = {{1}};
    expected = 1;
    actual = HillCipher.determinant(b, 1);
    assertEquals(expected, actual);

    int[][] c = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    expected = 0;
    actual = HillCipher.determinant(c, 3);
    assertEquals(expected, actual);
}


No.9 generated result --------------------------

@Test
    public void determinantTest() {
        int[][] matrix = {{1, 2}, {3, 4}};
        int det = HillCipher.determinant(matrix, 2);
        assertEquals(-2, det);
    }


No.10 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HillCipherTest {
    @Test
    public void determinantTest() {
        int[][] matrix = {{1, 2}, {3, 4}};
        int determinant = HillCipher.determinant(matrix, 2);
        assertEquals(-2, determinant);
    }
}



Source code: 

// Determinant calculator
public static int determinant(int[][] a, int n) {
    int det = 0, sign = 1, p = 0, q = 0;

    if (n == 1) {
        det = a[0][0];
    } else {
        int[][] b = new int[n - 1][n - 1];
        for (int x = 0; x < n; x++) {
            p = 0;
            q = 0;
            for (int i = 1; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (j != x) {
                        b[p][q++] = a[i][j];
                        if (q % (n - 1) == 0) {
                            p++;
                            q = 0;
                        }
                    }
                }
            }
            det = det + a[0][x] * determinant(b, n - 1) * sign;
            sign = -sign;
        }
    }
    return det;
}



No.1 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HillCipherTest {
    @Test
    public void determinantTest() {
        int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
        int expected = -3;
        int actual = HillCipher.determinant(matrix, 3);
        assertEquals(expected, actual);
    }
}


No.2 generated result --------------------------

@Test
public void determinantTest() {
    int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    int n = 3;
    int expectedDeterminant = -9;
    
    int actualDeterminant = HillCipher.determinant(matrix, n);
    
    assertEquals(expectedDeterminant, actualDeterminant);
}


No.3 generated result --------------------------

@Test
public void determinantTest() {
    int[][] matrix = {{1, 2}, {3, 4}};
    int result = HillCipher.determinant(matrix, 2);
    assertEquals(-2, result);
}


No.4 generated result --------------------------

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HillCipherTest {

    @Test
    public void determinantTest() {
        int[][] matrix = {{3, 2, 1}, {4, 5, 6}, {9, 8, 7}};
        int expectedDeterminant = 15;
        
        int actualDeterminant = HillCipher.determinant(matrix, 3);

        assertEquals(expectedDeterminant, actualDeterminant);
    }
}


No.5 generated result --------------------------

@Test
public void determinantTest() {
    int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    int expectedDeterminant = 0;
  
    int actualDeterminant = HillCipher.determinant(matrix, matrix.length);

    assertEquals(expectedDeterminant, actualDeterminant);
}


No.6 generated result --------------------------

@Test
public void determinantTest() {
    int[][] a = {{3, 2, 1}, {6, 4, 2}, {9, 6, 3}};
    int n = 3;
    int expectedDet = 0;
    int actualDet = HillCipher.determinant(a, n);
    assertEquals(expectedDet, actualDet);
}


No.7 generated result --------------------------

@Test
public void determinantTest() {
    int[][] a = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    int det = 0;  // Fill with expected determinant value

    int result = HillCipher.determinant(a, 3);

    assertEquals(result, det);
}


No.8 generated result --------------------------

@Test
public void determinantTest() {
    int[][] matrix = {{2, 4}, {3, 1}};
    int result = HillCipher.determinant(matrix, 2);
    assertEquals(-10, result);
}


No.9 generated result --------------------------

@Test
public void determinantTest() {
    int[][] matrix = { {2, -1, 3}, {0, 4, -2}, {-1, 2, 0} };
    int det = HillCipher.determinant(matrix, 3);
    assertEquals(-36, det);
}


No.10 generated result --------------------------

@Test
public void determinantTest() {
    int[][] a = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    int n = 3;
    int expected = 0;
    int actual = HillCipher.determinant(a, n);
    assertEquals(expected, actual);
}



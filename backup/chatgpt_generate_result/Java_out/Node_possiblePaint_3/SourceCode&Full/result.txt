Source code: 

static int possiblePaint(ArrayList<Node> nodes, int n, int m) {

    // Create a visited array of n nodes
    ArrayList<Integer> visited = new ArrayList<Integer>();
    for (int i = 0; i < n + 1; i++) {
        visited.add(0);
    }

    // maxColors used till now are 1 as
    // all nodes are painted color 1
    int maxColors = 1;

    for (int sv = 1; sv <= n; sv++) {
        if (visited.get(sv) > 0) {
            continue;
        }

        // If the starting point is unvisited,
        // mark it visited and push it in queue
        visited.set(sv, 1);
        Queue<Integer> q = new LinkedList<>();
        q.add(sv);

        // BFS
        while (q.size() != 0) {
            int top = q.peek();
            q.remove();

            // Checking all adjacent nodes
            // to "top" edge in our queue
            for (int it : nodes.get(top).edges) {

                // If the color of the
                // adjacent node is same, increase it by
                // 1
                if (nodes.get(top).color == nodes.get(it).color) {
                    nodes.get(it).color += 1;
                }

                // If number of colors used exceeds m,
                // return 0
                maxColors = Math.max(maxColors, Math.max(nodes.get(top).color, nodes.get(it).color));
                if (maxColors > m) return 0;

                // If the adjacent node is not visited,
                // mark it visited and push it in queue
                if (visited.get(it) == 0) {
                    visited.set(it, 1);
                    q.add(it);
                }
            }
        }
    }
    return 1;
}



No.1 generated result --------------------------

@Test
public void possiblePaintTest() {
    ArrayList<Node> nodes = new ArrayList<>();
    Node node1 = new Node();
    node1.color = 1;
    node1.edges.add(2);
    node1.edges.add(3);
    nodes.add(node1);
    
    Node node2 = new Node();
    node2.color = 2;
    node2.edges.add(1);
    nodes.add(node2);
    
    Node node3 = new Node();
    node3.color = 1;
    node3.edges.add(1);
    node3.edges.add(2);
    nodes.add(node3);
    
    int n = 3;
    int m = 2;
    
    int result = MColoring.possiblePaint(nodes, n, m);
    
    assertEquals(1, result); // Expected output is 1
}


No.2 generated result --------------------------


package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeTest {
    @Test
    public void possiblePaintTest() {
        // Create a list of nodes
        ArrayList<Node> nodes = new ArrayList<Node>();

        // Create nodes and add edges
        Node node1 = new Node();
        node1.color = 1;
        node1.edges.add(2);
        nodes.add(node1);

        Node node2 = new Node();
        node2.color = 2;
        node2.edges.add(1);
        nodes.add(node2);

        // Call the method to be tested
        int result = MColoring.possiblePaint(nodes, 2, 2);
        
        // Check the expected result
        assertEquals(1, result);
    }
}



No.3 generated result --------------------------

@Test
public void possiblePaintTest() {
    ArrayList<Node> nodes = new ArrayList<Node>();
    int n = 5; // number of nodes
    int m = 3; // maximum number of colors
    // Add nodes with their adjacent edges
    for (int i = 0; i <= n; i++) {
        nodes.add(new Node());
    }
    nodes.get(1).edges.add(2);
    nodes.get(2).edges.add(1);
    nodes.get(2).edges.add(3);
    nodes.get(3).edges.add(2);
    nodes.get(3).edges.add(4);
    nodes.get(4).edges.add(3);
    nodes.get(4).edges.add(5);
    nodes.get(5).edges.add(4);
    
    int result = possiblePaint(nodes, n, m);
    assertEquals(1, result);
}


No.4 generated result --------------------------

@Test
public void possiblePaintTest() {
    // Create sample nodes
    ArrayList<Node> nodes = new ArrayList<Node>();
    Node node1 = new Node();
    Node node2 = new Node();
    Node node3 = new Node();
    
    // Add edges to nodes
    node1.edges.add(2);
    node2.edges.add(1);
    node2.edges.add(3);
    node3.edges.add(2);
    
    // Add nodes to the list
    nodes.add(null);
    nodes.add(node1);
    nodes.add(node2);
    nodes.add(node3);
    
    int n = 3;
    int m = 2;
    
    // Perform the unit test
    int result = MColoring.possiblePaint(nodes, n, m);
    
    // Assert the result
    assertEquals(1, result);
}


No.5 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

public class NodeTest {
    @Test
    public void possiblePaintTest() {
        ArrayList<Node> nodes = new ArrayList<Node>();
        Node node1 = new Node();
        node1.color = 1;
        Set<Integer> edges1 = new HashSet<Integer>();
        edges1.add(2);
        node1.edges = edges1;
        nodes.add(node1);

        Node node2 = new Node();
        node2.color = 2;
        Set<Integer> edges2 = new HashSet<Integer>();
        edges2.add(1);
        edges2.add(3);
        node2.edges = edges2;
        nodes.add(node2);

        Node node3 = new Node();
        node3.color = 1;
        Set<Integer> edges3 = new HashSet<Integer>();
        edges3.add(2);
        node3.edges = edges3;
        nodes.add(node3);

        int n = 3;
        int m = 2;

        int expectedOutput = 1;
        int actualOutput = MColoring.possiblePaint(nodes, n, m);

        assertEquals(expectedOutput, actualOutput);
    }
}


No.6 generated result --------------------------

@Test
public void possiblePaintTest() {
    ArrayList<Node> nodes = new ArrayList<Node>();
    Node node1 = new Node();
    Node node2 = new Node();
    Node node3 = new Node();
    nodes.add(node1);
    nodes.add(node2);
    nodes.add(node3);
    node1.edges.add(2);
    node1.edges.add(3);
    node2.edges.add(1);
    node2.edges.add(3);
    node3.edges.add(1);
    node3.edges.add(2);

    int n = 3;
    int m = 3;
    int expectedOutput = 1;
    int actualOutput = MColoring.possiblePaint(nodes, n, m);
    assertEquals(expectedOutput, actualOutput);
}


No.7 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeTest {
    @Test
    public void possiblePaintTest() {
        ArrayList<Node> nodes = new ArrayList<>();
        Node node1 = new Node();
        node1.color = 1;
        node1.edges.add(2);
        nodes.add(node1);
        
        Node node2 = new Node();
        node2.color = 1;
        node2.edges.add(1);
        node2.edges.add(3);
        nodes.add(node2);
        
        Node node3 = new Node();
        node3.color = 1;
        node3.edges.add(2);
        nodes.add(node3);
        
        int n = 3;
        int m = 2;
        
        int expectedResult = 1;
        int actualResult = MColoring.possiblePaint(nodes, n, m);
        
        assertEquals(expectedResult, actualResult);
    }
}


No.8 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

public class NodeTest {
    @Test
    public void possiblePaintTest() {
        // Create nodes
        ArrayList<Node> nodes = new ArrayList<Node>();
        Node node1 = new Node();
        node1.color = 1;
        node1.edges.add(2);
        node1.edges.add(3);
        Node node2 = new Node();
        node2.color = 2;
        node2.edges.add(1);
        Node node3 = new Node();
        node3.color = 1;
        node3.edges.add(1);
        node3.edges.add(2);
        nodes.add(null); // index 0 is not used
        nodes.add(node1);
        nodes.add(node2);
        nodes.add(node3);
        
        int n = nodes.size() - 1;
        int m = 2;
        
        // Call the method and check the result
        int result = possiblePaint(nodes, n, m);
        assertEquals(1, result);
    }
}


No.9 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeTest {
    @Test
    public void possiblePaintTest() {
        // Creating nodes
        ArrayList<Node> nodes = new ArrayList<>();
        Node node1 = new Node();
        Node node2 = new Node();
        Node node3 = new Node();
        Node node4 = new Node();
        
        // Adding edges to the nodes
        node1.edges.add(2);
        node1.edges.add(3);
        node2.edges.add(1);
        node2.edges.add(3);
        node3.edges.add(1);
        node3.edges.add(2);
        node3.edges.add(4);
        node4.edges.add(3);
        
        // Adding nodes to the list
        nodes.add(node1);
        nodes.add(node2);
        nodes.add(node3);
        nodes.add(node4);
        
        // Calling the method and asserting the result
        int result = MColoring.possiblePaint(nodes, 4, 2);
        assertEquals(1, result);
    }
}


No.10 generated result --------------------------

package com.thealgorithms.backtracking;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class NodeTest {
    @Test
    public void possiblePaintTest() {
        ArrayList<Node> nodes = new ArrayList<>();
        Node node1 = new Node();
        node1.color = 1;
        nodes.add(node1);
        Node node2 = new Node();
        node2.color = 2;
        nodes.add(node2);
        Node node3 = new Node();
        node3.color = 1;
        nodes.add(node3);
        // Add edges
        nodes.get(1).edges.add(2);
        nodes.get(2).edges.add(1);
        nodes.get(1).edges.add(3);
        nodes.get(3).edges.add(1);
        
        int n = nodes.size();
        int m = 3;
        
        int expected = 1; // Expected output
        
        int actual = possiblePaint(nodes, n, m);
        assertEquals(expected, actual);
    }
}



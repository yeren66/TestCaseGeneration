Source code: 


public static String decode(String encryptedMessage, String cipherSmall) {
    StringBuilder decoded = new StringBuilder();

    Map<Character, Character> cipherMap = new HashMap<>();

    char beginSmallLetter = 'a';
    char beginCapitalLetter = 'A';

    cipherSmall = cipherSmall.toLowerCase();
    String cipherCapital = cipherSmall.toUpperCase();

    for (int i = 0; i < cipherSmall.length(); i++) {
        cipherMap.put(cipherSmall.charAt(i), beginSmallLetter++);
        cipherMap.put(cipherCapital.charAt(i), beginCapitalLetter++);
    }

    for (int i = 0; i < encryptedMessage.length(); i++) {
        if (Character.isAlphabetic(encryptedMessage.charAt(i))) {
            decoded.append(cipherMap.get(encryptedMessage.charAt(i)));
        } else {
            decoded.append(encryptedMessage.charAt(i));
        }
    }

    return decoded.toString();
}



No.1 generated result --------------------------

@Test
public void decodeTest() {
    String encryptedMessage = "J mfjy ytnslj";
    String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";
    String expected = "I love testing";
    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);
    assertEquals(expected, actual);
}


No.2 generated result --------------------------

@Test
public void decodeTest() {
    String encryptedMessage = "Lstuuxw wxta pbbu!";
    String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";
    String expected = "Goodbye java team!";
    
    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);
    
    assertEquals(expected, actual);
}


No.3 generated result --------------------------

@Test
public void decodeTest() {
    String encryptedMessage = "Kbdsj kbds";
    String cipherSmall = "bda"; // example cipher key

    String expected = "Hello hello";
    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);

    assertEquals(expected, actual);
}


No.4 generated result --------------------------

@Test
public void decodeTest() {
    String encryptedMessage = "ybuui jt tffl yfjxfj";
    String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";
    String expectedDecodedMessage = "please be kind rewind";

    String actualDecodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);

    assertEquals(expectedDecodedMessage, actualDecodedMessage);
}


No.5 generated result --------------------------

@Test
public void decodeTest() {
    String encryptedMessage = "Qudlbv Zrug";
    String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";

    // Expected output
    String expected = "Twister Code";

    // Actual output
    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);

    // Assertion
    assertEquals(expected, actual);
}


No.6 generated result --------------------------

@Test
public void decodeTest() {
    String encryptedMessage = "gGedcba";
    String cipherSmall = "gfedcba";

    String expected = "hisgfed";
    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);

    assertEquals(expected, actual);
}


No.7 generated result --------------------------

@Test
public void decodeTest() {
    String encryptedMessage = "thkkucenersrctmr";
    String cipherSmall = "zyxwvutsrqponmlkjihgfedcba";

    String expected = "thealgorithmsciphers";
    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);

    assertEquals(expected, actual);
}


No.8 generated result --------------------------

@Test
    public void decodeTest() {
        String encryptedMessage = "fv";
        String cipherSmall = "bc";
        String expected = "ab";

        String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);

        assertEquals(expected, actual);
    }


No.9 generated result --------------------------

@Test
public void decodeTest() {
    String encryptedMessage = "Kfksrybk sw zl ibjvvinzf";
    String cipherSmall = "plmoknijuhbygvtfcrdxeszawq";
    String expected = "Semester is in full swing";
    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);
    assertEquals(expected, actual);
}


No.10 generated result --------------------------

@Test
public void decodeTest() {
    String encryptedMessage = "s xtpkx";
    String cipherSmall = "qwerty";

    String expected = "a quick";
    String decodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);

    assertEquals(expected, decodedMessage);
}



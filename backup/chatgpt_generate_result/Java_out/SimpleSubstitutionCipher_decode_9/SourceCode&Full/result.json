{
    "project_name": "Java",
    "file_name": "SimpleSubstitutionCipher.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/SimpleSubstitutionCipher.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Decrypt message by replacing each element with its opposite character in\n     * cipher.\n     *\n     * @return message\n     */",
    "source_code": "\npublic static String decode(String encryptedMessage, String cipherSmall) {\n    StringBuilder decoded = new StringBuilder();\n\n    Map<Character, Character> cipherMap = new HashMap<>();\n\n    char beginSmallLetter = 'a';\n    char beginCapitalLetter = 'A';\n\n    cipherSmall = cipherSmall.toLowerCase();\n    String cipherCapital = cipherSmall.toUpperCase();\n\n    for (int i = 0; i < cipherSmall.length(); i++) {\n        cipherMap.put(cipherSmall.charAt(i), beginSmallLetter++);\n        cipherMap.put(cipherCapital.charAt(i), beginCapitalLetter++);\n    }\n\n    for (int i = 0; i < encryptedMessage.length(); i++) {\n        if (Character.isAlphabetic(encryptedMessage.charAt(i))) {\n            decoded.append(cipherMap.get(encryptedMessage.charAt(i)));\n        } else {\n            decoded.append(encryptedMessage.charAt(i));\n        }\n    }\n\n    return decoded.toString();\n}\n",
    "class_name": "SimpleSubstitutionCipher",
    "method_name": "decode",
    "arguments": [
        "String encryptedMessage",
        "String cipherSmall"
    ],
    "generate_test": [
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"J mfjy ytnslj\";\n    String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n    String expected = \"I love testing\";\n    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"Lstuuxw wxta pbbu!\";\n    String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n    String expected = \"Goodbye java team!\";\n    \n    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n    \n    assertEquals(expected, actual);\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"Kbdsj kbds\";\n    String cipherSmall = \"bda\"; // example cipher key\n\n    String expected = \"Hello hello\";\n    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"ybuui jt tffl yfjxfj\";\n    String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n    String expectedDecodedMessage = \"please be kind rewind\";\n\n    String actualDecodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n\n    assertEquals(expectedDecodedMessage, actualDecodedMessage);\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"Qudlbv Zrug\";\n    String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n\n    // Expected output\n    String expected = \"Twister Code\";\n\n    // Actual output\n    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n\n    // Assertion\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"gGedcba\";\n    String cipherSmall = \"gfedcba\";\n\n    String expected = \"hisgfed\";\n    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"thkkucenersrctmr\";\n    String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n\n    String expected = \"thealgorithmsciphers\";\n    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n\n    assertEquals(expected, actual);\n}",
        "@Test\n    public void decodeTest() {\n        String encryptedMessage = \"fv\";\n        String cipherSmall = \"bc\";\n        String expected = \"ab\";\n\n        String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n\n        assertEquals(expected, actual);\n    }",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"Kfksrybk sw zl ibjvvinzf\";\n    String cipherSmall = \"plmoknijuhbygvtfcrdxeszawq\";\n    String expected = \"Semester is in full swing\";\n    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"s xtpkx\";\n    String cipherSmall = \"qwerty\";\n\n    String expected = \"a quick\";\n    String decodedMessage = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n\n    assertEquals(expected, decodedMessage);\n}"
    ]
}
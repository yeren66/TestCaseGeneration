{
    "project_name": "Java",
    "file_name": "SimpleSubstitutionCipher.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/ciphers/SimpleSubstitutionCipher.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.ciphers",
    "docstring": "/**\n     * Decrypt message by replacing each element with its opposite character in\n     * cipher.\n     *\n     * @return message\n     */",
    "source_code": "\npublic static String decode(String encryptedMessage, String cipherSmall) {\n    StringBuilder decoded = new StringBuilder();\n\n    Map<Character, Character> cipherMap = new HashMap<>();\n\n    char beginSmallLetter = 'a';\n    char beginCapitalLetter = 'A';\n\n    cipherSmall = cipherSmall.toLowerCase();\n    String cipherCapital = cipherSmall.toUpperCase();\n\n    for (int i = 0; i < cipherSmall.length(); i++) {\n        cipherMap.put(cipherSmall.charAt(i), beginSmallLetter++);\n        cipherMap.put(cipherCapital.charAt(i), beginCapitalLetter++);\n    }\n\n    for (int i = 0; i < encryptedMessage.length(); i++) {\n        if (Character.isAlphabetic(encryptedMessage.charAt(i))) {\n            decoded.append(cipherMap.get(encryptedMessage.charAt(i)));\n        } else {\n            decoded.append(encryptedMessage.charAt(i));\n        }\n    }\n\n    return decoded.toString();\n}\n",
    "class_name": "SimpleSubstitutionCipher",
    "method_name": "decode",
    "arguments": [
        "String encryptedMessage",
        "String cipherSmall"
    ],
    "generate_test": [
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"KZPP GSRG Y ZW UJJKT!\";\n    String cipherSmall = \"pbdwfihjuoecqtymklsrnaxzvg\";\n    \n    String expectedOutput = \"THIS IS A TEST CASE!\";\n    String actualOutput = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n    \n    assertEquals(expectedOutput, actualOutput);\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"xifq q eiqm\";\n    String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n    String expected = \"send a mail\";\n    \n    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n    \n    assertEquals(expected, actual);\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"v zhlz\";\n    String cipherSmall = \"pqrstuvwxyabcdefghijklmno\";\n\n    String expected = \"i love\";\n    String actual = decode(encryptedMessage, cipherSmall);\n\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"jxyoc\";\n    String cipherSmall = \"xyzab\";\n    String expected = \"help\";\n\n    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"Grj qe gkiye\";\n    String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n\n    String expectedResult = \"The is thing\";\n    String actualResult = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n\n    assertEquals(expectedResult, actualResult);\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"Ifmmp Xpsme\";\n    String cipherSmall = \"bcdefghijklmnopqrstuvwxyza\";\n\n    String expected = \"Hello World\";\n    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"Fyyf fp fjxy\";\n    String cipherSmall = \"defghijklmnopqrstuvwxyzabc\";\n    String expected = \"Test is done\";\n    \n    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n    \n    assertEquals(expected, actual);\n}",
        "public void decodeTest() {\n    String encryptedMessage = \"Lipps, asvph!\";\n    String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n\n    String expected = \"Hello, world!\";\n    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n\n    assertEquals(expected, actual);\n}",
        "package com.thealgorithms.ciphers;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Map;\nimport java.util.HashMap;\n\npublic class SimpleSubstitutionCipherTest {\n    @Test\n    public void decodeTest() {\n        String encryptedMessage = \"mjqqt\";\n        String cipherSmall = \"bcdef\";\n        \n        String expected = \"hello\";\n        String actual = decode(encryptedMessage, cipherSmall);\n        \n        assertEquals(expected, actual);\n    }\n    \n    public static String decode(String encryptedMessage, String cipherSmall) {\n        StringBuilder decoded = new StringBuilder();\n\n        Map<Character, Character> cipherMap = new HashMap<>();\n\n        char beginSmallLetter = 'a';\n        char beginCapitalLetter = 'A';\n\n        cipherSmall = cipherSmall.toLowerCase();\n        String cipherCapital = cipherSmall.toUpperCase();\n\n        for (int i = 0; i < cipherSmall.length(); i++) {\n            cipherMap.put(cipherSmall.charAt(i), beginSmallLetter++);\n            cipherMap.put(cipherCapital.charAt(i), beginCapitalLetter++);\n        }\n\n        for (int i = 0; i < encryptedMessage.length(); i++) {\n            if (Character.isAlphabetic(encryptedMessage.charAt(i))) {\n                decoded.append(cipherMap.get(encryptedMessage.charAt(i)));\n            } else {\n                decoded.append(encryptedMessage.charAt(i));\n            }\n        }\n\n        return decoded.toString();\n    }\n}",
        "@Test\npublic void decodeTest() {\n    String encryptedMessage = \"Vo uij!\";\n    String cipherSmall = \"zyxwvutsrqponmlkjihgfedcba\";\n    String expected = \"Hi mom!\";\n    \n    String actual = SimpleSubstitutionCipher.decode(encryptedMessage, cipherSmall);\n    \n    assertEquals(expected, actual);\n}"
    ]
}
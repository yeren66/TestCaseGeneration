{
    "project_name": "Java",
    "file_name": "FFT.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/maths/FFT.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.maths",
    "docstring": "/**\n     * Iterative In-Place Radix-2 Cooley-Tukey Fast Fourier Transform Algorithm\n     * with Bit-Reversal. The size of the input signal must be a power of 2. If\n     * it isn't then it is padded with zeros and the output FFT will be bigger\n     * than the input signal.\n     *\n     * <p>\n     * More info:\n     * https://www.algorithm-archive.org/contents/cooley_tukey/cooley_tukey.html\n     * https://www.geeksforgeeks.org/iterative-fast-fourier-transformation-polynomial-multiplication/\n     * https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm\n     * https://cp-algorithms.com/algebra/fft.html\n     *  @param x The discrete signal which is then converted to the FFT or the\n     * IFFT of signal x.\n     * @param inverse True if you want to find the inverse FFT.\n     * @return\n     */",
    "source_code": "\npublic static ArrayList<Complex> fft(ArrayList<Complex> x, boolean inverse) {\n    /* Pad the signal with zeros if necessary */\n    paddingPowerOfTwo(x);\n    int N = x.size();\n    int log2N = findLog2(N);\n    x = fftBitReversal(N, log2N, x);\n    int direction = inverse ? -1 : 1;\n\n    /* Main loop of the algorithm */\n    for (int len = 2; len <= N; len *= 2) {\n        double angle = -2 * Math.PI / len * direction;\n        Complex wlen = new Complex(Math.cos(angle), Math.sin(angle));\n        for (int i = 0; i < N; i += len) {\n            Complex w = new Complex(1, 0);\n            for (int j = 0; j < len / 2; j++) {\n                Complex u = x.get(i + j);\n                Complex v = w.multiply(x.get(i + j + len / 2));\n                x.set(i + j, u.add(v));\n                x.set(i + j + len / 2, u.subtract(v));\n                w = w.multiply(wlen);\n            }\n        }\n    }\n    x = inverseFFT(N, inverse, x);\n    return x;\n}\n",
    "class_name": "FFT",
    "method_name": "fft",
    "arguments": [
        "ArrayList<Complex> x",
        "boolean inverse"
    ],
    "generate_test": [
        "@Test\npublic void fftTest() {\n    ArrayList<Complex> input = new ArrayList<>();\n    input.add(new Complex(1, 0));\n    input.add(new Complex(2, 0));\n    input.add(new Complex(3, 0));\n    input.add(new Complex(4, 0));\n\n    ArrayList<Complex> actualOutput = FFT.fft(input, false);\n\n    ArrayList<Complex> expectedOutput = new ArrayList<>();\n    expectedOutput.add(new Complex(10, 0));\n    expectedOutput.add(new Complex(-2, 2));\n    expectedOutput.add(new Complex(-2, 0));\n    expectedOutput.add(new Complex(-2, -2));\n\n    for (int i = 0; i < actualOutput.size(); i++) {\n        assertEquals(expectedOutput.get(i).getReal(), actualOutput.get(i).getReal(), 0.000001);\n        assertEquals(expectedOutput.get(i).getImaginary(), actualOutput.get(i).getImaginary(), 0.000001);\n    }\n}",
        "@Test\npublic void fftTest() {\n    // Create input ArrayList\n    ArrayList<Complex> input = new ArrayList<>();\n    \n    // Populate input ArrayList with Complex numbers\n    // (code to populate the ArrayList with numbers)\n    \n    // Call FFT.fft() method\n    ArrayList<Complex> result = FFT.fft(input, false);\n    \n    // Perform assertions to verify the correctness of the output\n    // (code to perform assertions)\n}",
        "@Test\npublic void fftTest() {\n    ArrayList<Complex> input = new ArrayList<>();\n    input.add(new Complex(2, 0));\n    input.add(new Complex(5, 0));\n    input.add(new Complex(1, 0));\n    input.add(new Complex(4, 0));\n\n    ArrayList<Complex> expectedOutput = new ArrayList<>();\n    expectedOutput.add(new Complex(12, 0));\n    expectedOutput.add(new Complex(-3, -5));\n    expectedOutput.add(new Complex(-6, 0));\n    expectedOutput.add(new Complex(-3, 5));\n\n    ArrayList<Complex> result = FFT.fft(input, false);\n    assertEquals(expectedOutput, result);\n}",
        "    @Test\n    public void fftTest() {\n        ArrayList<Complex> input = new ArrayList<>();\n        input.add(new Complex(1, 0));\n        input.add(new Complex(2, 0));\n        input.add(new Complex(3, 0));\n        input.add(new Complex(4, 0));\n        \n        ArrayList<Complex> expectedOutput = new ArrayList<>();\n        expectedOutput.add(new Complex(10, 0));\n        expectedOutput.add(new Complex(-2, 2));\n        expectedOutput.add(new Complex(-2, 0));\n        expectedOutput.add(new Complex(-2, -2));\n        \n        ArrayList<Complex> result = FFT.fft(input, false);\n        \n        for (int i = 0; i < result.size(); i++) {\n            assertEquals(expectedOutput.get(i).getReal(), result.get(i).getReal(), 0.001);\n            assertEquals(expectedOutput.get(i).getImaginary(), result.get(i).getImaginary(), 0.001);\n        }\n    }",
        "    @Test\n    public void fftTest() {\n        ArrayList<Complex> x = new ArrayList<>();\n        x.add(new Complex(1, 0));\n        x.add(new Complex(2, 0));\n        x.add(new Complex(3, 0));\n        x.add(new Complex(4, 0));\n        ArrayList<Complex> expectedOutput = new ArrayList<>();\n        expectedOutput.add(new Complex(10, 0));\n        expectedOutput.add(new Complex(-2, 2));\n        expectedOutput.add(new Complex(-2, 0));\n        expectedOutput.add(new Complex(-2, -2));\n        \n        ArrayList<Complex> actualOutput = FFT.fft(x, false);\n        \n        assertEquals(expectedOutput, actualOutput);\n    }",
        "package com.thealgorithms.maths;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FFTTest {\n    @Test\n    public void fftTest() {\n        // Create input ArrayList\n        ArrayList<Complex> input = new ArrayList<>();\n        input.add(new Complex(1, 0));\n        input.add(new Complex(2, 0));\n        input.add(new Complex(3, 0));\n        input.add(new Complex(4, 0));\n\n        // Perform FFT\n        ArrayList<Complex> result = FFT.fft(input, false);\n\n        // Verify the output\n        assertEquals(result.get(0).getReal(), 10.0, 0.0001);\n        assertEquals(result.get(1).getReal(), -2.0, 0.0001);\n        assertEquals(result.get(2).getReal(), -2.0, 0.0001);\n        assertEquals(result.get(3).getReal(), -2.0, 0.0001);\n        assertEquals(result.get(0).getImaginary(), 0.0, 0.0001);\n        assertEquals(result.get(1).getImaginary(), 2.0, 0.0001);\n        assertEquals(result.get(2).getImaginary(), 0.0, 0.0001);\n        assertEquals(result.get(3).getImaginary(), -2.0, 0.0001);\n    }\n}",
        "@Test\npublic void fftTest() {\n    // Initialize input data\n    ArrayList<FFT.Complex> input = new ArrayList<>();\n    input.add(new FFT.Complex(1, 0));\n    input.add(new FFT.Complex(2, 0));\n    input.add(new FFT.Complex(3, 0));\n    input.add(new FFT.Complex(4, 0));\n    \n    // Expected output\n    ArrayList<FFT.Complex> expectedOutput = new ArrayList<>();\n    expectedOutput.add(new FFT.Complex(10, 0));\n    expectedOutput.add(new FFT.Complex(-2, 2));\n    expectedOutput.add(new FFT.Complex(-2, 0));\n    expectedOutput.add(new FFT.Complex(-2, -2));\n    \n    // Perform the FFT\n    ArrayList<FFT.Complex> result = FFT.fft(input, false);\n    \n    // Assert the result matches the expected output\n    assertEquals(expectedOutput, result);\n}",
        "@Test\npublic void fftTest() {\n    ArrayList<Complex> input = new ArrayList<>();\n    input.add(new Complex(1, 0));\n    input.add(new Complex(2, 0));\n    input.add(new Complex(3, 0));\n    input.add(new Complex(4, 0));\n    \n    ArrayList<Complex> expectedResult = new ArrayList<>();\n    expectedResult.add(new Complex(10, 0));\n    expectedResult.add(new Complex(-2, 2));\n    expectedResult.add(new Complex(-2, 0));\n    expectedResult.add(new Complex(-2, -2));\n    \n    ArrayList<Complex> actualResult = FFT.fft(input, false);\n    \n    for (int i = 0; i < actualResult.size(); i++) {\n        assertEquals(expectedResult.get(i).getReal(), actualResult.get(i).getReal(), 0.001);\n        assertEquals(expectedResult.get(i).getImaginary(), actualResult.get(i).getImaginary(), 0.001);\n    }\n}",
        "@Test\n    public void fftTest() {\n        ArrayList<Complex> input = new ArrayList<>();\n        input.add(new Complex(1, 0));\n        input.add(new Complex(2, 0));\n        input.add(new Complex(3, 0));\n        input.add(new Complex(4, 0));\n\n        ArrayList<Complex> expected = new ArrayList<>();\n        expected.add(new Complex(10, 0));\n        expected.add(new Complex(-2, 2));\n        expected.add(new Complex(-2, 0));\n        expected.add(new Complex(-2, -2));\n\n        ArrayList<Complex> result = FFT.fft(input, false);\n        for (int i = 0; i < result.size(); i++) {\n            assertEquals(expected.get(i).getReal(), result.get(i).getReal(), 0.001);\n            assertEquals(expected.get(i).getImaginary(), result.get(i).getImaginary(), 0.001);\n        }\n    }",
        "@Test\npublic void fftTest() {\n    ArrayList<Complex> input = new ArrayList<>();\n    input.add(new Complex(1, 0));\n    input.add(new Complex(2, 0));\n    input.add(new Complex(3, 0));\n    input.add(new Complex(4, 0));\n\n    ArrayList<Complex> expectedOutput = new ArrayList<>();\n    expectedOutput.add(new Complex(10, 0));\n    expectedOutput.add(new Complex(-2, 2));\n    expectedOutput.add(new Complex(-2, 0));\n    expectedOutput.add(new Complex(-2, -2));\n\n    ArrayList<Complex> actualOutput = FFT.fft(input, false);\n\n    assertEquals(expectedOutput, actualOutput);\n}"
    ]
}
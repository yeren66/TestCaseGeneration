Source code: 


@Override
public <T extends Comparable<T>> T[] sort(T[] unsorted) {
    int n = unsorted.length;
    heapify(unsorted, n);
    while (n > 1) {
        swap(unsorted, 1, n--);
        siftDown(unsorted, 1, n);
    }
    return unsorted;
}



No.1 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        Integer[] unsorted = {5, 3, 8, 2, 1, 4};
        HeapSort heapSort = new HeapSort();
        Integer[] sorted = heapSort.sort(unsorted);
        Integer[] expected = {1, 2, 3, 4, 5, 8};
        assertArrayEquals(expected, sorted);
    }
}


No.2 generated result --------------------------

@Test
public void sortTest() {
    HeapSort heapSort = new HeapSort();
    Integer[] unsorted = {6, 2, 9, 1, 5};
    Integer[] expected = {1, 2, 5, 6, 9};
    Integer[] result = heapSort.sort(unsorted);
    assertArrayEquals(expected, result);
}


No.3 generated result --------------------------

@Test
public void sortTest() {
    Integer[] unsorted = {5, 2, 8, 9, 1, 3};
    HeapSort heapSort = new HeapSort();
    Integer[] sorted = heapSort.sort(unsorted);
    
    Integer[] expected = {1, 2, 3, 5, 8, 9};
    
    assertArrayEquals(expected, sorted);
}


No.4 generated result --------------------------

@Test
public void sortTest() {
    Integer[] unsorted = {7, 3, 9, 2, 5};
    Integer[] expected = {2, 3, 5, 7, 9};
    
    HeapSort heapSort = new HeapSort();
    Integer[] sorted = heapSort.sort(unsorted);
    
    assertArrayEquals(expected, sorted);
}


No.5 generated result --------------------------

### JUNIT Test case:

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    private HeapSort heapSort;
    
    @BeforeEach
    public void setUp() {
        heapSort = new HeapSort();
    }
    
    @Test
    public void sortTest() {
        Integer[] unsorted = {5, 2, 7, 1, 3};
        Integer[] expected = {1, 2, 3, 5, 7};
        
        Integer[] sorted = heapSort.sort(unsorted);
        
        assertArrayEquals(expected, sorted);
    }
}


No.6 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        Integer[] unsorted = {5, 9, 3, 1, 8};
        HeapSort heapSort = new HeapSort();
        Integer[] sorted = heapSort.sort(unsorted);
        Integer[] expected = {1, 3, 5, 8, 9};
        assertArrayEquals(expected, sorted);
    }
}


No.7 generated result --------------------------

@Test
public void sortTest() {
    Integer[] unsorted = {4, 2, 6, 8, 3, 1, 9, 5, 7};
    Integer[] expected = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    HeapSort heapSort = new HeapSort();
    Integer[] sorted = heapSort.sort(unsorted);
    assertArrayEquals(expected, sorted);
}


No.8 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        HeapSort heapSort = new HeapSort();
        
        // Test case 1 - array with unique values
        Integer[] unsorted1 = {5, 2, 7, 1, 9};
        Integer[] sorted1 = {1, 2, 5, 7, 9};
        assertArrayEquals(sorted1, heapSort.sort(unsorted1));
        
        // Test case 2 - array with duplicate values
        Integer[] unsorted2 = {3, 6, 2, 3, 6};
        Integer[] sorted2 = {2, 3, 3, 6, 6};
        assertArrayEquals(sorted2, heapSort.sort(unsorted2));
        
        // Test case 3 - empty array
        Integer[] unsorted3 = {};
        Integer[] sorted3 = {};
        assertArrayEquals(sorted3, heapSort.sort(unsorted3));
        
        // Test case 4 - array with single element
        Integer[] unsorted4 = {8};
        Integer[] sorted4 = {8};
        assertArrayEquals(sorted4, heapSort.sort(unsorted4));
    }
}


No.9 generated result --------------------------

@Test
public void sortTest() {
    HeapSort heapSort = new HeapSort();
    Integer[] unsorted = {5, 2, 8, 3, 1};
    Integer[] sorted = {1, 2, 3, 5, 8};
    assertArrayEquals(sorted, heapSort.sort(unsorted));
}


No.10 generated result --------------------------

@Test
public void sortTest() {
    HeapSort heapSort = new HeapSort();
    Integer[] unsorted = {5, 2, 9, 1, 3};
    Integer[] sorted = {1, 2, 3, 5, 9};
    
    Integer[] result = heapSort.sort(unsorted);
    
    assertArrayEquals(sorted, result);
}



Source code: 


@Override
public <T extends Comparable<T>> T[] sort(T[] unsorted) {
    int n = unsorted.length;
    heapify(unsorted, n);
    while (n > 1) {
        swap(unsorted, 1, n--);
        siftDown(unsorted, 1, n);
    }
    return unsorted;
}



No.1 generated result --------------------------

@Test
    public void sortTest() {
        HeapSort heapSort = new HeapSort();
        Integer[] unsorted = {5, 2, 8, 3, 1, 9, 4};
        Integer[] sorted = heapSort.sort(unsorted);

        Integer[] expected = {1, 2, 3, 4, 5, 8, 9};
        assertArrayEquals(expected, sorted);
    }


No.2 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        Integer[] unsorted = {9, 5, 2, 8, 1, 7, 3};
        HeapSort heapSort = new HeapSort();
        Integer[] sorted = heapSort.sort(unsorted);
        Integer[] expected = {1, 2, 3, 5, 7, 8, 9};
        assertArrayEquals(expected, sorted);
    }
}


No.3 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        HeapSort heapSort = new HeapSort();
        
        // Test case 1: Sorting an empty array
        Integer[] arr1 = new Integer[0];
        Integer[] expected1 = new Integer[0];
        assertArrayEquals(expected1, heapSort.sort(arr1));
        
        // Test case 2: Sorting an array with one element
        Integer[] arr2 = {5};
        Integer[] expected2 = {5};
        assertArrayEquals(expected2, heapSort.sort(arr2));
        
        // Test case 3: Sorting an array with multiple elements
        Integer[] arr3 = {7, 2, 10, 3, 5};
        Integer[] expected3 = {2, 3, 5, 7, 10};
        assertArrayEquals(expected3, heapSort.sort(arr3));
    }
}


No.4 generated result --------------------------

@Test
public void sortTest() {
    HeapSort heapSort = new HeapSort();
    Integer[] unsorted = {5, 2, 8, 1, 9};
    Integer[] expected = {1, 2, 5, 8, 9};
    Integer[] sorted = heapSort.sort(unsorted);
    assertArrayEquals(expected, sorted);
}


No.5 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        HeapSort heapSort = new HeapSort();
        Integer[] unsorted = {5, 3, 8, 2, 1, 9};
        Integer[] sorted = heapSort.sort(unsorted);
        Integer[] expected = {1, 2, 3, 5, 8, 9};
        assertArrayEquals(expected, sorted);
    }
}


No.6 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        Integer[] unsorted = {5, 3, 8, 2, 1};
        Integer[] expected = {1, 2, 3, 5, 8};
        
        HeapSort heapSort = new HeapSort();
        Integer[] sorted = heapSort.sort(unsorted);
        
        assertArrayEquals(expected, sorted);
    }
}


No.7 generated result --------------------------

@Test
public void sortTest() {
    Integer[] unsorted = {5, 3, 8, 2, 1};
    Integer[] expected = {1, 2, 3, 5, 8};
    
    HeapSort heapSort = new HeapSort();
    Integer[] actual = heapSort.sort(unsorted);
    
    assertArrayEquals(expected, actual);
}


No.8 generated result --------------------------

@Test
public void sortTest() {
    Integer[] unsorted = {4, 2, 8, 1, 5};
    HeapSort heapSort = new HeapSort();
    Integer[] sorted = heapSort.sort(unsorted);
    Integer[] expected = {1, 2, 4, 5, 8};
    assertArrayEquals(expected, sorted);
}


No.9 generated result --------------------------

@Test
public void sortTest() {
    HeapSort heapSort = new HeapSort();
    
    // Test case 1: Test with an array of integers
    Integer[] input1 = {5, 3, 7, 1, 4};
    Integer[] expected1 = {1, 3, 4, 5, 7};
    assertArrayEquals(expected1, heapSort.sort(input1));
    
    // Test case 2: Test with an array of doubles
    Double[] input2 = {2.5, 1.8, 3.2, 1.2};
    Double[] expected2 = {1.2, 1.8, 2.5, 3.2};
    assertArrayEquals(expected2, heapSort.sort(input2));
    
    // Test case 3: Test with an array of strings
    String[] input3 = {"apple", "banana", "orange", "pear"};
    String[] expected3 = {"apple", "banana", "orange", "pear"};
    assertArrayEquals(expected3, heapSort.sort(input3));
}


No.10 generated result --------------------------

package com.thealgorithms.sorts;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    @Test
    public void sortTest() {
        HeapSort heapSort = new HeapSort();
        
        // Create an array of Integers
        Integer[] unsortedIntegers = {5, 2, 8, 1, 9};
        
        // Call the sort() method and store the sorted array
        Integer[] sortedIntegers = heapSort.sort(unsortedIntegers);
        
        // Create an array of Strings
        String[] unsortedStrings = {"b", "a", "c"};
        
        // Call the sort() method and store the sorted array
        String[] sortedStrings = heapSort.sort(unsortedStrings);
        
        // Create an array of Doubles
        Double[] unsortedDoubles = {3.2, 1.5, 2.7};
        
        // Call the sort() method and store the sorted array
        Double[] sortedDoubles = heapSort.sort(unsortedDoubles);
        
        // Assert that the sorted arrays are equal to the expected sorted arrays
        assertArrayEquals(new Integer[]{1, 2, 5, 8, 9}, sortedIntegers);
        assertArrayEquals(new String[]{"a", "b", "c"}, sortedStrings);
        assertArrayEquals(new Double[]{1.5, 2.7, 3.2}, sortedDoubles);
    }
}



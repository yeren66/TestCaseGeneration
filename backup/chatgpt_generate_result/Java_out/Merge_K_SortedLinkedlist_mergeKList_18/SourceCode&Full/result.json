{
    "project_name": "Java",
    "file_name": "Merge_K_SortedLinkedlist.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/Merge_K_SortedLinkedlist.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * This function merge K sorted LinkedList\n     *\n     * @param a array of LinkedList\n     * @param N size of array\n     * @return node\n     */",
    "source_code": "\nNode mergeKList(Node[] a, int N) {\n    // Min Heap\n    PriorityQueue<Node> min = new PriorityQueue<>(Comparator.comparingInt(x -> x.data));\n\n    // adding head of all linkedList in min heap\n    min.addAll(Arrays.asList(a).subList(0, N));\n\n    // Make new head among smallest heads in K linkedList\n    Node head = min.poll();\n    min.add(head.next);\n    Node curr = head;\n\n    // merging LinkedList\n    while (!min.isEmpty()) {\n        Node temp = min.poll();\n        curr.next = temp;\n        curr = temp;\n\n        // Add Node in min Heap only if temp.next is not null\n        if (temp.next != null) {\n            min.add(temp.next);\n        }\n    }\n\n    return head;\n}\n",
    "class_name": "Merge_K_SortedLinkedlist",
    "method_name": "mergeKList",
    "arguments": [
        "Node a",
        "int N"
    ],
    "generate_test": [
        "@Test\npublic void mergeKListTest() {\n    Merge_K_SortedLinkedlist ml = new Merge_K_SortedLinkedlist();\n    Merge_K_SortedLinkedlist.Node[] lists = new Merge_K_SortedLinkedlist.Node[3];\n    \n    // Create LinkedList 1\n    Merge_K_SortedLinkedlist.Node head1 = ml.new Node();\n    head1.data = 1;\n    head1.next = ml.new Node();\n    head1.next.data = 4;\n    head1.next.next = ml.new Node();\n    head1.next.next.data = 5;\n    lists[0] = head1;\n    \n    // Create LinkedList 2\n    Merge_K_SortedLinkedlist.Node head2 = ml.new Node();\n    head2.data = 1;\n    head2.next = ml.new Node();\n    head2.next.data = 3;\n    head2.next.next = ml.new Node();\n    head2.next.next.data = 4;\n    lists[1] = head2;\n    \n    // Create LinkedList 3\n    Merge_K_SortedLinkedlist.Node head3 = ml.new Node();\n    head3.data = 2;\n    head3.next = ml.new Node();\n    head3.next.data = 6;\n    lists[2] = head3;\n    \n    Merge_K_SortedLinkedlist.Node merged = ml.mergeKList(lists, 3);\n    \n    // Ensure the merged linked list is sorted correctly\n    assertEquals(1, merged.data);\n    assertEquals(1, merged.next.data);\n    assertEquals(2, merged.next.next.data);\n    assertEquals(3, merged.next.next.next.data);\n    assertEquals(4, merged.next.next.next.next.data);\n    assertEquals(4, merged.next.next.next.next.next.data);\n    assertEquals(5, merged.next.next.next.next.next.next.data);\n    assertEquals(6, merged.next.next.next.next.next.next.next.data);\n    assertNull(merged.next.next.next.next.next.next.next.next);\n}",
        "@Test\npublic void mergeKListTest() {\n    Merge_K_SortedLinkedlist mergeSort = new Merge_K_SortedLinkedlist();\n    Merge_K_SortedLinkedlist.Node[] arr = new Merge_K_SortedLinkedlist.Node[3];\n\n    Merge_K_SortedLinkedlist.Node node1 = mergeSort.new Node();\n    node1.data = 1;\n\n    Merge_K_SortedLinkedlist.Node node2 = mergeSort.new Node();\n    node2.data = 4;\n\n    Merge_K_SortedLinkedlist.Node node3 = mergeSort.new Node();\n    node3.data = 5;\n\n    Merge_K_SortedLinkedlist.Node node4 = mergeSort.new Node();\n    node4.data = 2;\n\n    Merge_K_SortedLinkedlist.Node node5 = mergeSort.new Node();\n    node5.data = 3;\n\n    Merge_K_SortedLinkedlist.Node node6 = mergeSort.new Node();\n    node6.data = 6;\n\n    Merge_K_SortedLinkedlist.Node node7 = mergeSort.new Node();\n    node7.data = 7;\n\n    node1.next = node2;\n    node2.next = node3;\n\n    node4.next = node5;\n    node5.next = node6;\n\n    node7.next = null;\n\n    arr[0] = node1;\n    arr[1] = node4;\n    arr[2] = node7;\n\n    Merge_K_SortedLinkedlist.Node mergedList = mergeSort.mergeKList(arr, 3);\n\n    String expectedOutput = \"1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> null\";\n    \n    // Assert that the merged list has the expected output\n    String actualOutput = getListAsString(mergedList);\n    assertEquals(expectedOutput, actualOutput);\n}\n\nprivate String getListAsString(Merge_K_SortedLinkedlist.Node node) {\n    StringBuilder sb = new StringBuilder();\n    while (node != null) {\n        sb.append(node.data).append(\" -> \");\n        node = node.next;\n    }\n    sb.append(\"null\");\n    return sb.toString();\n}",
        "@Test\npublic void mergeKListTest() {\n    Merge_K_SortedLinkedlist mergeSortedLinkedList = new Merge_K_SortedLinkedlist();\n    \n    // Create input data\n    Merge_K_SortedLinkedlist.Node[] a = new Merge_K_SortedLinkedlist.Node[3];\n    Merge_K_SortedLinkedlist.Node list1 = mergeSortedLinkedList.new Node();\n    list1.data = 1;\n    list1.next = mergeSortedLinkedList.new Node();\n    list1.next.data = 4;\n    list1.next.next = mergeSortedLinkedList.new Node();\n    list1.next.next.data = 5;\n    a[0] = list1;\n\n    Merge_K_SortedLinkedlist.Node list2 = mergeSortedLinkedList.new Node();\n    list2.data = 1;\n    list2.next = mergeSortedLinkedList.new Node();\n    list2.next.data = 3;\n    list2.next.next = mergeSortedLinkedList.new Node();\n    list2.next.next.data = 4;\n    a[1] = list2;\n\n    Merge_K_SortedLinkedlist.Node list3 = mergeSortedLinkedList.new Node();\n    list3.data = 2;\n    list3.next = mergeSortedLinkedList.new Node();\n    list3.next.data = 6;\n    a[2] = list3;\n\n    // Expected output\n    Merge_K_SortedLinkedlist.Node expected = mergeSortedLinkedList.new Node();\n    expected.data = 1;\n    expected.next = mergeSortedLinkedList.new Node();\n    expected.next.data = 1;\n    expected.next.next = mergeSortedLinkedList.new Node();\n    expected.next.next.data = 2;\n    expected.next.next.next = mergeSortedLinkedList.new Node();\n    expected.next.next.next.data = 3;\n    expected.next.next.next.next = mergeSortedLinkedList.new Node();\n    expected.next.next.next.next.data = 4;\n    expected.next.next.next.next.next = mergeSortedLinkedList.new Node();\n    expected.next.next.next.next.next.data = 4;\n    expected.next.next.next.next.next.next = mergeSortedLinkedList.new Node();\n    expected.next.next.next.next.next.next.data = 5;\n    expected.next.next.next.next.next.next.next = mergeSortedLinkedList.new Node();\n    expected.next.next.next.next.next.next.next.data = 6;\n\n    // Invoke the method to be tested\n    Merge_K_SortedLinkedlist.Node actual = mergeSortedLinkedList.mergeKList(a, 3);\n\n    // Compare the actual and expected output\n    while (actual != null && expected != null) {\n        assertEquals(actual.data, expected.data);\n        actual = actual.next;\n        expected = expected.next;\n    }\n    assertNull(actual);\n    assertNull(expected);\n}",
        "@Test\npublic void mergeKListTest() {\n    // Create the input array of linked lists\n    Merge_K_SortedLinkedlist.Node list1 = new Merge_K_SortedLinkedlist.Node();\n    list1.data = 1;\n    list1.next = new Merge_K_SortedLinkedlist.Node();\n    list1.next.data = 4;\n    list1.next.next = new Merge_K_SortedLinkedlist.Node();\n    list1.next.next.data = 5;\n    list1.next.next.next = null;\n\n    Merge_K_SortedLinkedlist.Node list2 = new Merge_K_SortedLinkedlist.Node();\n    list2.data = 1;\n    list2.next = new Merge_K_SortedLinkedlist.Node();\n    list2.next.data = 3;\n    list2.next.next = new Merge_K_SortedLinkedlist.Node();\n    list2.next.next.data = 4;\n    list2.next.next.next = null;\n\n    Merge_K_SortedLinkedlist.Node list3 = new Merge_K_SortedLinkedlist.Node();\n    list3.data = 2;\n    list3.next = new Merge_K_SortedLinkedlist.Node();\n    list3.next.data = 6;\n    list3.next.next = null;\n\n    Merge_K_SortedLinkedlist.Node[] input = {list1, list2, list3};\n\n    // Call the mergeKList method\n    Merge_K_SortedLinkedlist merge = new Merge_K_SortedLinkedlist();\n    Merge_K_SortedLinkedlist.Node result = merge.mergeKList(input, 3);\n\n    // Define the expected output\n    Merge_K_SortedLinkedlist.Node expected = new Merge_K_SortedLinkedlist.Node();\n    expected.data = 1;\n    expected.next = new Merge_K_SortedLinkedlist.Node();\n    expected.next.data = 1;\n    expected.next.next = new Merge_K_SortedLinkedlist.Node();\n    expected.next.next.data = 2;\n    expected.next.next.next = new Merge_K_SortedLinkedlist.Node();\n    expected.next.next.next.data = 3;\n    expected.next.next.next.next = new Merge_K_SortedLinkedlist.Node();\n    expected.next.next.next.next.data = 4;\n    expected.next.next.next.next.next = new Merge_K_SortedLinkedlist.Node();\n    expected.next.next.next.next.next.data = 4;\n    expected.next.next.next.next.next.next = new Merge_K_SortedLinkedlist.Node();\n    expected.next.next.next.next.next.next.data = 5;\n    expected.next.next.next.next.next.next.next = new Merge_K_SortedLinkedlist.Node();\n    expected.next.next.next.next.next.next.next.data = 6;\n    expected.next.next.next.next.next.next.next.next = null;\n\n    // Compare the actual and expected outputs\n    assertEquals(expected.data, result.data);\n    assertEquals(expected.next.data, result.next.data);\n    assertEquals(expected.next.next.data, result.next.next.data);\n    assertEquals(expected.next.next.next.data, result.next.next.next.data);\n    assertEquals(expected.next.next.next.next.data, result.next.next.next.next.data);\n    assertEquals(expected.next.next.next.next.next.data, result.next.next.next.next.next.data);\n    assertEquals(expected.next.next.next.next.next.next.data, result.next.next.next.next.next.next.data);\n    assertEquals(expected.next.next.next.next.next.next.next.data, result.next.next.next.next.next.next",
        "@Test\n    public void mergeKListTest() {\n        Merge_K_SortedLinkedlist linkedListMerger = new Merge_K_SortedLinkedlist();\n\n        Merge_K_SortedLinkedlist.Node[] lists = {null};\n        int k = lists.length;\n\n        Merge_K_SortedLinkedlist.Node mergedList = linkedListMerger.mergeKList(lists, k);\n\n        // ASSERTION\n        assertNull(mergedList);\n    }",
        "\n// Create the input LinkedLists\nMerge_K_SortedLinkedlist.Node list1 = new Merge_K_SortedLinkedlist.Node();\nlist1.data = 1;\nMerge_K_SortedLinkedlist.Node list1Node1 = new Merge_K_SortedLinkedlist.Node();\nlist1Node1.data = 4;\nlist1.next = list1Node1;\n\nMerge_K_SortedLinkedlist.Node list2 = new Merge_K_SortedLinkedlist.Node();\nlist2.data = 2;\nMerge_K_SortedLinkedlist.Node list2Node1 = new Merge_K_SortedLinkedlist.Node();\nlist2Node1.data = 5;\nlist2.next = list2Node1;\n\nMerge_K_SortedLinkedlist.Node list3 = new Merge_K_SortedLinkedlist.Node();\nlist3.data = 3;\nMerge_K_SortedLinkedlist.Node list3Node1 = new Merge_K_SortedLinkedlist.Node();\nlist3Node1.data = 6;\nlist3.next = list3Node1;\n\nMerge_K_SortedLinkedlist.Node[] lists = {list1, list2, list3};\nMerge_K_SortedLinkedlist obj = new Merge_K_SortedLinkedlist();\nMerge_K_SortedLinkedlist.Node result = obj.mergeKList(lists, lists.length);\n\n// Verify the merged LinkedList\nint[] expected = {1, 2, 3, 4, 5, 6};\nint i = 0;\nwhile (result != null) {\n    assertEquals(expected[i++], result.data);\n    result = result.next;\n}\n",
        "@Test\npublic void mergeKListTest() {\n    Merge_K_SortedLinkedlist merge = new Merge_K_SortedLinkedlist();\n\n    // Create LinkedLists\n    Merge_K_SortedLinkedlist.Node[] lists = new Merge_K_SortedLinkedlist.Node[3];\n    for (int i = 0; i < 3; i++) {\n        lists[i] = merge.new Node();\n        lists[i].data = i;\n    }\n\n    // Set next pointers for LinkedLists\n    lists[0].next = merge.new Node();\n    lists[0].next.data = 1;\n    lists[0].next.next = merge.new Node();\n    lists[0].next.next.data = 3;\n\n    lists[1].next = merge.new Node();\n    lists[1].next.data = 2;\n\n    lists[2].next = merge.new Node();\n    lists[2].next.data = 4;\n\n    // Merge LinkedLists\n    Merge_K_SortedLinkedlist.Node result = merge.mergeKList(lists, 3);\n\n    // Check if the merged LinkedList is sorted\n    int[] expected = {0, 1, 2, 3, 4};\n    int index = 0;\n    while (result != null) {\n        assertEquals(expected[index], result.data);\n        result = result.next;\n        index++;\n    }\n}",
        "@Test\n    public void mergeKListTest() {\n        Node[] a = new Node[3];\n        a[0] = new Node(1);\n        a[0].next = new Node(4);\n        a[0].next.next = new Node(5);\n\n        a[1] = new Node(1);\n        a[1].next = new Node(3);\n        a[1].next.next = new Node(4);\n\n        a[2] = new Node(2);\n        a[2].next = new Node(6);\n\n        Merge_K_SortedLinkedlist merge = new Merge_K_SortedLinkedlist();\n        Node result = merge.mergeKList(a, 3);\n\n        int[] expected = {1, 1, 2, 3, 4, 4, 5, 6};\n        int index = 0;\n        while (result != null) {\n            assertEquals(expected[index++], result.data);\n            result = result.next;\n        }\n    }",
        "@Test\npublic void mergeKListTest() {\n    Merge_K_SortedLinkedlist testObject = new Merge_K_SortedLinkedlist();\n\n    // Create an array of Nodes for testing\n    Merge_K_SortedLinkedlist.Node[] nodes = new Merge_K_SortedLinkedlist.Node[3];\n    for (int i = 0; i < 3; i++) {\n        nodes[i] = new Merge_K_SortedLinkedlist.Node();\n        nodes[i].data = i;\n        nodes[i].next = i < 2 ? nodes[i + 1] : null;\n    }\n\n    // Call the mergeKList method and get the result\n    Merge_K_SortedLinkedlist.Node result = testObject.mergeKList(nodes, 3);\n\n    // Compare the expected output with the actual output\n    assertEquals(0, result.data);\n    assertEquals(1, result.next.data);\n    assertEquals(2, result.next.next.data);\n}",
        "@Test\npublic void mergeKListTest() {\n    Merge_K_SortedLinkedlist mergeSortedLists = new Merge_K_SortedLinkedlist();\n    \n    // Create the input LinkedLists\n    LinkedList<Integer> list1 = new LinkedList<>();\n    list1.add(1);\n    list1.add(4);\n    list1.add(5);\n    \n    LinkedList<Integer> list2 = new LinkedList<>();\n    list2.add(1);\n    list2.add(3);\n    list2.add(4);\n    \n    LinkedList<Integer> list3 = new LinkedList<>();\n    list3.add(2);\n    list3.add(6);\n    \n    // Convert LinkedLists to Nodes\n    Merge_K_SortedLinkedlist.Node[] nodes = new Merge_K_SortedLinkedlist.Node[3];\n    nodes[0] = convertListToNodes(list1);\n    nodes[1] = convertListToNodes(list2);\n    nodes[2] = convertListToNodes(list3);\n    \n    // Merge the LinkedLists\n    Merge_K_SortedLinkedlist.Node merged = mergeSortedLists.mergeKList(nodes, 3);\n    \n    // Convert the merged Node to LinkedList\n    LinkedList<Integer> mergedList = convertNodeToList(merged);\n    \n    // Verify the merged LinkedList\n    LinkedList<Integer> expected = new LinkedList<>();\n    expected.add(1);\n    expected.add(1);\n    expected.add(2);\n    expected.add(3);\n    expected.add(4);\n    expected.add(4);\n    expected.add(5);\n    expected.add(6);\n    \n    assertEquals(expected, mergedList);\n}\n\nprivate Merge_K_SortedLinkedlist.Node convertListToNodes(LinkedList<Integer> list) {\n    Merge_K_SortedLinkedlist.Node head = null;\n    Merge_K_SortedLinkedlist.Node curr = null;\n    \n    for (int i : list) {\n        Merge_K_SortedLinkedlist.Node newNode = new Merge_K_SortedLinkedlist.Node();\n        newNode.data = i;\n        \n        if (head == null) {\n            head = newNode;\n            curr = newNode;\n        } else {\n            curr.next = newNode;\n            curr = newNode;\n        }\n    }\n    \n    return head;\n}\n\nprivate LinkedList<Integer> convertNodeToList(Merge_K_SortedLinkedlist.Node node) {\n    LinkedList<Integer> list = new LinkedList<>();\n    Merge_K_SortedLinkedlist.Node curr = node;\n    \n    while (curr != null) {\n        list.add(curr.data);\n        curr = curr.next;\n    }\n    \n    return list;\n}"
    ]
}
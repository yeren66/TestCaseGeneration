{
    "project_name": "Java",
    "file_name": "Merge_K_SortedLinkedlist.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/lists/Merge_K_SortedLinkedlist.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.lists",
    "docstring": "/**\n     * This function merge K sorted LinkedList\n     *\n     * @param a array of LinkedList\n     * @param N size of array\n     * @return node\n     */",
    "source_code": "\nNode mergeKList(Node[] a, int N) {\n    // Min Heap\n    PriorityQueue<Node> min = new PriorityQueue<>(Comparator.comparingInt(x -> x.data));\n\n    // adding head of all linkedList in min heap\n    min.addAll(Arrays.asList(a).subList(0, N));\n\n    // Make new head among smallest heads in K linkedList\n    Node head = min.poll();\n    min.add(head.next);\n    Node curr = head;\n\n    // merging LinkedList\n    while (!min.isEmpty()) {\n        Node temp = min.poll();\n        curr.next = temp;\n        curr = temp;\n\n        // Add Node in min Heap only if temp.next is not null\n        if (temp.next != null) {\n            min.add(temp.next);\n        }\n    }\n\n    return head;\n}\n",
    "class_name": "Merge_K_SortedLinkedlist",
    "method_name": "mergeKList",
    "arguments": [
        "Node a",
        "int N"
    ],
    "generate_test": [
        "Node[] linkedLists = new Node[3];\n\n// Adding elements to the linkedLists\n\nMerge_K_SortedLinkedlist obj = new Merge_K_SortedLinkedlist();\n\nNode result = obj.mergeKList(linkedLists, 3);\n\n// Asserting the expected output with the actual output\n\nassertEquals(expectedOutput, result);\n",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n    @Test\n    public void mergeKListTest() {\n        Merge_K_SortedLinkedlist merge = new Merge_K_SortedLinkedlist();\n        \n        // Creating linked lists\n        Merge_K_SortedLinkedlist.Node[] lists = new Merge_K_SortedLinkedlist.Node[3];\n\n        lists[0] = new Merge_K_SortedLinkedlist.Node();\n        lists[0].data = 1;\n        lists[0].next = new Merge_K_SortedLinkedlist.Node();\n        lists[0].next.data = 4;\n        lists[0].next.next = new Merge_K_SortedLinkedlist.Node();\n        lists[0].next.next.data = 5;\n        lists[0].next.next.next = null;\n\n        lists[1] = new Merge_K_SortedLinkedlist.Node();\n        lists[1].data = 1;\n        lists[1].next = new Merge_K_SortedLinkedlist.Node();\n        lists[1].next.data = 3;\n        lists[1].next.next = new Merge_K_SortedLinkedlist.Node();\n        lists[1].next.next.data = 4;\n        lists[1].next.next.next = null;\n\n        lists[2] = new Merge_K_SortedLinkedlist.Node();\n        lists[2].data = 2;\n        lists[2].next = new Merge_K_SortedLinkedlist.Node();\n        lists[2].next.data = 6;\n        lists[2].next.next = null;\n\n        // Expected output\n        Merge_K_SortedLinkedlist.Node expectedOutput = new Merge_K_SortedLinkedlist.Node();\n        expectedOutput.data = 1;\n        expectedOutput.next = new Merge_K_SortedLinkedlist.Node();\n        expectedOutput.next.data = 1;\n        expectedOutput.next.next = new Merge_K_SortedLinkedlist.Node();\n        expectedOutput.next.next.data = 2;\n        expectedOutput.next.next.next = new Merge_K_SortedLinkedlist.Node();\n        expectedOutput.next.next.next.data = 3;\n        expectedOutput.next.next.next.next = new Merge_K_SortedLinkedlist.Node();\n        expectedOutput.next.next.next.next.data = 4;\n        expectedOutput.next.next.next.next.next = new Merge_K_SortedLinkedlist.Node();\n        expectedOutput.next.next.next.next.next.data = 4;\n        expectedOutput.next.next.next.next.next.next = new Merge_K_SortedLinkedlist.Node();\n        expectedOutput.next.next.next.next.next.next.data = 5;\n        expectedOutput.next.next.next.next.next.next.next = new Merge_K_SortedLinkedlist.Node();\n        expectedOutput.next.next.next.next.next.next.next.data = 6;\n        expectedOutput.next.next.next.next.next.next.next.next = null;\n\n        // Actual output\n        Merge_K_SortedLinkedlist.Node actualOutput = merge.mergeKList(lists, 3);\n\n        // Asserting the output\n        assertEquals(expectedOutput.data, actualOutput.data);\n        assertEquals(expectedOutput.next.data, actualOutput.next.data);\n        assertEquals(expectedOutput.next.next.data, actualOutput.next.next.data);\n        assertEquals(expectedOutput.next.next.next.data, actualOutput.next.next.next.data);\n        assertEquals(expectedOutput.next.next.next.next.data, actualOutput.next.next.next.next.data);\n        assertEquals(expectedOutput.next.next.next.next.next.data, actualOutput.next.next.next.next.next.data);\n        assertEquals(expectedOutput.next.next.next.next.next.next.data, actualOutput.next.next.next.next.next.next.data);\n        assertEquals(expectedOutput.next.next.next.next.next.next.next.data, actualOutput.next.next.next.next.next.next.next.data);\n    }\n}",
        "@Test\n    public void mergeKListTest() {\n        Merge_K_SortedLinkedlist mergeObj = new Merge_K_SortedLinkedlist();\n        \n        // create linked lists\n        Merge_K_SortedLinkedlist.Node[] lists = new Merge_K_SortedLinkedlist.Node[3];\n        lists[0] = new Merge_K_SortedLinkedlist.Node();\n        lists[0].data = 1;\n        lists[0].next = new Merge_K_SortedLinkedlist.Node();\n        lists[0].next.data = 4;\n        lists[0].next.next = new Merge_K_SortedLinkedlist.Node();\n        lists[0].next.next.data = 5;\n        lists[0].next.next.next = null;\n\n        lists[1] = new Merge_K_SortedLinkedlist.Node();\n        lists[1].data = 1;\n        lists[1].next = new Merge_K_SortedLinkedlist.Node();\n        lists[1].next.data = 3;\n        lists[1].next.next = new Merge_K_SortedLinkedlist.Node();\n        lists[1].next.next.data = 4;\n        lists[1].next.next.next = null;\n\n        lists[2] = new Merge_K_SortedLinkedlist.Node();\n        lists[2].data = 2;\n        lists[2].next = new Merge_K_SortedLinkedlist.Node();\n        lists[2].next.data = 6;\n        lists[2].next.next = null;\n\n        Merge_K_SortedLinkedlist.Node result = mergeObj.mergeKList(lists, 3);\n\n        // assert the merged linked list values\n        assertEquals(result.data, 1);\n        assertEquals(result.next.data, 1);\n        assertEquals(result.next.next.data, 2);\n        assertEquals(result.next.next.next.data, 3);\n        assertEquals(result.next.next.next.next.data, 4);\n        assertEquals(result.next.next.next.next.next.data, 4);\n        assertEquals(result.next.next.next.next.next.next.data, 5);\n        assertEquals(result.next.next.next.next.next.next.next.data, 6);\n        assertEquals(result.next.next.next.next.next.next.next.next, null);\n    }",
        "@Test\npublic void mergeKListTest() {\n    Merge_K_SortedLinkedlist obj = new Merge_K_SortedLinkedlist();\n    \n    // Create test data\n    Merge_K_SortedLinkedlist.Node[] kLists = new Merge_K_SortedLinkedlist.Node[3];\n    // LinkedList 1\n    Merge_K_SortedLinkedlist.Node node1 = obj.new Node();\n    node1.data = 1;\n    Merge_K_SortedLinkedlist.Node node2 = obj.new Node();\n    node2.data = 4;\n    Merge_K_SortedLinkedlist.Node node3 = obj.new Node();\n    node3.data = 5;\n    node1.next = node2;\n    node2.next = node3;\n    node3.next = null;\n    kLists[0] = node1;\n    \n    // LinkedList 2\n    Merge_K_SortedLinkedlist.Node node4 = obj.new Node();\n    node4.data = 1;\n    Merge_K_SortedLinkedlist.Node node5 = obj.new Node();\n    node5.data = 3;\n    Merge_K_SortedLinkedlist.Node node6 = obj.new Node();\n    node6.data = 4;\n    node4.next = node5;\n    node5.next = node6;\n    node6.next = null;\n    kLists[1] = node4;\n    \n    // LinkedList 3\n    Merge_K_SortedLinkedlist.Node node7 = obj.new Node();\n    node7.data = 2;\n    Merge_K_SortedLinkedlist.Node node8 = obj.new Node();\n    node8.data = 6;\n    node7.next = node8;\n    node8.next = null;\n    kLists[2] = node7;\n    \n    // Expected merged list\n    Merge_K_SortedLinkedlist.Node expected = obj.new Node();\n    expected.data = 1;\n    expected.next = obj.new Node();\n    expected.next.data = 1;\n    expected.next.next = obj.new Node();\n    expected.next.next.data = 2;\n    expected.next.next.next = obj.new Node();\n    expected.next.next.next.data = 3;\n    expected.next.next.next.next = obj.new Node();\n    expected.next.next.next.next.data = 4;\n    expected.next.next.next.next.next = obj.new Node();\n    expected.next.next.next.next.next.data = 4;\n    expected.next.next.next.next.next.next = obj.new Node();\n    expected.next.next.next.next.next.next.data = 5;\n    expected.next.next.next.next.next.next.next = obj.new Node();\n    expected.next.next.next.next.next.next.next.data = 6;\n    expected.next.next.next.next.next.next.next.next = null;\n    \n    Merge_K_SortedLinkedlist.Node mergedList = obj.mergeKList(kLists, 3);\n    \n    // Comparing each node of the mergedList with the expected merged list\n    while (mergedList != null && expected != null) {\n        assertEquals(expected.data, mergedList.data);\n        mergedList = mergedList.next;\n        expected = expected.next;\n    }\n    \n    // Both mergedList and expected should be null at the end\n    assertNull(mergedList);\n    assertNull(expected);\n}",
        "@Test\npublic void mergeKListTest() {\n    Merge_K_SortedLinkedlist testObject = new Merge_K_SortedLinkedlist();\n    Merge_K_SortedLinkedlist.Node a1 = testObject.new Node();\n    a1.data = 1;\n    Merge_K_SortedLinkedlist.Node a2 = testObject.new Node();\n    a2.data = 3;\n    Merge_K_SortedLinkedlist.Node a3 = testObject.new Node();\n    a3.data = 5;\n    a1.next = a2;\n    a2.next = a3;\n\n    Merge_K_SortedLinkedlist.Node b1 = testObject.new Node();\n    b1.data = 2;\n    Merge_K_SortedLinkedlist.Node b2 = testObject.new Node();\n    b2.data = 4;\n    b1.next = b2;\n\n    Merge_K_SortedLinkedlist.Node c1 = testObject.new Node();\n    c1.data = 6;\n\n    Merge_K_SortedLinkedlist.Node[] input = new Merge_K_SortedLinkedlist.Node[]{a1, b1, c1};\n\n    Merge_K_SortedLinkedlist.Node result = testObject.mergeKList(input, 3);\n\n    int[] expectedOutput = new int[]{1, 2, 3, 4, 5, 6};\n    int i = 0;\n    while (result != null) {\n        assertEquals(expectedOutput[i], result.data);\n        result = result.next;\n        i++;\n    }\n}",
        "@Test\npublic void mergeKListTest() {\n    // Create test input\n    Merge_K_SortedLinkedlist merge = new Merge_K_SortedLinkedlist();\n    Merge_K_SortedLinkedlist.Node[] a = new Merge_K_SortedLinkedlist.Node[3];\n    \n    Merge_K_SortedLinkedlist.Node node1 = merge.new Node();\n    node1.data = 1;\n    node1.next = merge.new Node();\n    node1.next.data = 4;\n    node1.next.next = merge.new Node();\n    node1.next.next.data = 5;\n\n    a[0] = node1;\n\n    Merge_K_SortedLinkedlist.Node node2 = merge.new Node();\n    node2.data = 1;\n    node2.next = merge.new Node();\n    node2.next.data = 3;\n    node2.next.next = merge.new Node();\n    node2.next.next.data = 4;\n\n    a[1] = node2;\n\n    Merge_K_SortedLinkedlist.Node node3 = merge.new Node();\n    node3.data = 2;\n    node3.next = merge.new Node();\n    node3.next.data = 6;\n\n    a[2] = node3;\n\n    // Call the method and capture the result\n    Merge_K_SortedLinkedlist.Node head = merge.mergeKList(a, 3);\n\n    // Validate the result\n    assertEquals(1, head.data);\n    assertEquals(1, head.next.data);\n    assertEquals(2, head.next.next.data);\n    assertEquals(3, head.next.next.next.data);\n    assertEquals(4, head.next.next.next.next.data);\n    assertEquals(4, head.next.next.next.next.next.data);\n    assertEquals(5, head.next.next.next.next.next.next.data);\n    assertEquals(6, head.next.next.next.next.next.next.next.data);\n    assertNull(head.next.next.next.next.next.next.next.next);\n}",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n    @Test\n    public void mergeKListTest() {\n        // Create the test input\n        Merge_K_SortedLinkedlist listMerger = new Merge_K_SortedLinkedlist();\n        Merge_K_SortedLinkedlist.Node[] input = new Merge_K_SortedLinkedlist.Node[3];\n        \n        Merge_K_SortedLinkedlist.Node n1 = new Merge_K_SortedLinkedlist.Node();\n        n1.data = 1;\n        n1.next = new Merge_K_SortedLinkedlist.Node();\n        n1.next.data = 4;\n        n1.next.next = new Merge_K_SortedLinkedlist.Node();\n        n1.next.next.data = 5;\n        input[0] = n1;\n        \n        Merge_K_SortedLinkedlist.Node n2 = new Merge_K_SortedLinkedlist.Node();\n        n2.data = 1;\n        n2.next = new Merge_K_SortedLinkedlist.Node();\n        n2.next.data = 3;\n        n2.next.next = new Merge_K_SortedLinkedlist.Node();\n        n2.next.next.data = 4;\n        input[1] = n2;\n        \n        Merge_K_SortedLinkedlist.Node n3 = new Merge_K_SortedLinkedlist.Node();\n        n3.data = 2;\n        n3.next = new Merge_K_SortedLinkedlist.Node();\n        n3.next.data = 6;\n        input[2] = n3;\n        \n        // Perform the test\n        Merge_K_SortedLinkedlist.Node result = listMerger.mergeKList(input, 3);\n        \n        // Verify the result\n        assertEquals(1, result.data);\n        assertEquals(1, result.next.data);\n        assertEquals(2, result.next.next.data);\n        assertEquals(3, result.next.next.next.data);\n        assertEquals(4, result.next.next.next.next.data);\n        assertEquals(4, result.next.next.next.next.next.data);\n        assertEquals(5, result.next.next.next.next.next.next.data);\n        assertEquals(6, result.next.next.next.next.next.next.next.data);\n        assertNull(result.next.next.next.next.next.next.next.next);\n    }\n}",
        "Node[] a = new Node[3];\n        \n// Create the first linked list: 1->3->5\na[0] = new Node();\na[0].data = 1;\na[0].next = new Node();\na[0].next.data = 3;\na[0].next.next = new Node();\na[0].next.next.data = 5;\na[0].next.next.next = null;\n        \n// Create the second linked list: 2->4->6\na[1] = new Node();\na[1].data = 2;\na[1].next = new Node();\na[1].next.data = 4;\na[1].next.next = new Node();\na[1].next.next.data = 6;\na[1].next.next.next = null;\n\n// Create the third linked list: 0->8->9\na[2] = new Node();\na[2].data = 0;\na[2].next = new Node();\na[2].next.data = 8;\na[2].next.next = new Node();\na[2].next.next.data = 9;\na[2].next.next.next = null;\n\n// Call the mergeKList method and store the returned head\nNode head = mergeKList(a, 3);\n\n// Test if the list has been merged correctly\nassertEquals(0, head.data);\nassertEquals(1, head.next.data);\nassertEquals(2, head.next.next.data);\nassertEquals(3, head.next.next.next.data);\nassertEquals(4, head.next.next.next.next.data);\nassertEquals(5, head.next.next.next.next.next.data);\nassertEquals(6, head.next.next.next.next.next.next.data);\nassertEquals(8, head.next.next.next.next.next.next.next.data);\nassertEquals(9, head.next.next.next.next.next.next.next.next.data);\nassertNull(head.next.next.next.next.next.next.next.next.next);",
        "Node[] a = new Node[3];\nNode n1 = new Node();\nNode n2 = new Node();\nNode n3 = new Node();\na[0] = n1;\na[1] = n2;\na[2] = n3;\n\nn1.data = 1;\nn2.data = 4;\nn3.data = 5;\n\nn1.next = new Node();\nn1.next.data = 2;\nn1.next.next = new Node();\nn1.next.next.data = 3;\n\nn2.next = new Node();\nn2.next.data = 3;\nn2.next.next = new Node();\nn2.next.next.data = 6;\n\nn3.next = new Node();\nn3.next.data = 6;\nn3.next.next = new Node();\nn3.next.next.data = 8;\n\nMerge_K_SortedLinkedlist obj = new Merge_K_SortedLinkedlist();\nMerge_K_SortedLinkedlist.Node result = obj.mergeKList(a, 3);\n\n// Testing the merged LinkedList\nassertEquals(1, result.data);\nassertEquals(2, result.next.data);\nassertEquals(3, result.next.next.data);\nassertEquals(3, result.next.next.next.data);\nassertEquals(4, result.next.next.next.next.data);\nassertEquals(5, result.next.next.next.next.next.data);\nassertEquals(6, result.next.next.next.next.next.next.data);\nassertEquals(6, result.next.next.next.next.next.next.next.data);\nassertEquals(8, result.next.next.next.next.next.next.next.next.data);",
        "package com.thealgorithms.datastructures.lists;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Merge_K_SortedLinkedlistTest {\n    @Test\n    public void mergeKListTest() {\n        // Create sample linked list nodes\n        Merge_K_SortedLinkedlist.Node node1 = new Merge_K_SortedLinkedlist.Node();\n        node1.data = 1;\n\n        Merge_K_SortedLinkedlist.Node node2 = new Merge_K_SortedLinkedlist.Node();\n        node2.data = 2;\n\n        Merge_K_SortedLinkedlist.Node node3 = new Merge_K_SortedLinkedlist.Node();\n        node3.data = 3;\n\n        Merge_K_SortedLinkedlist.Node node4 = new Merge_K_SortedLinkedlist.Node();\n        node4.data = 4;\n\n        Merge_K_SortedLinkedlist.Node node5 = new Merge_K_SortedLinkedlist.Node();\n        node5.data = 5;\n\n        // Set the next pointers\n        node1.next = node2;\n        node2.next = node3;\n        node3.next = null;\n\n        node4.next = node5;\n        node5.next = null;\n\n        // Create an array of linked lists\n        Merge_K_SortedLinkedlist.Node[] arr = new Merge_K_SortedLinkedlist.Node[2];\n        arr[0] = node1;\n        arr[1] = node4;\n\n        // Merge the linked lists\n        Merge_K_SortedLinkedlist list = new Merge_K_SortedLinkedlist();\n        Merge_K_SortedLinkedlist.Node mergedListHead = list.mergeKList(arr, 2);\n\n        // Verify the merged list\n        Merge_K_SortedLinkedlist.Node curr = mergedListHead;\n        int[] expectedOutput = {1, 2, 3, 4, 5};\n        int i = 0;\n        while (curr != null) {\n            assertEquals(expectedOutput[i++], curr.data);\n            curr = curr.next;\n        }\n    }\n}"
    ]
}
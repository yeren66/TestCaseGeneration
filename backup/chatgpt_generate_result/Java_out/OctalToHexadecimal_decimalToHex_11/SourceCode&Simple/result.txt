Source code: 


public static String decimalToHex(int d) {
    String digits = "0123456789ABCDEF";
    if (d <= 0) {
        return "0";
    }
    String hex = "";
    while (d > 0) {
        int digit = d % 16;
        hex = digits.charAt(digit) + hex;
        d = d / 16;
    }
    return hex;
}



No.1 generated result --------------------------

@Test
public void decimalToHexTest() {
    // Test case 1: Test for decimal value 10
    assertEquals("A", decimalToHex(10));
    
    // Test case 2: Test for decimal value 15
    assertEquals("F", decimalToHex(15));
    
    // Test case 3: Test for decimal value 255
    assertEquals("FF", decimalToHex(255));
    
    // Test case 4: Test for decimal value 16
    assertEquals("10", decimalToHex(16));
    
    // Test case 5: Test for decimal value 0
    assertEquals("0", decimalToHex(0));
}


No.2 generated result --------------------------

@Test
public void decimalToHexTest() {
    // Test Case 1: decimalToHex(0) should return "0"
    assertEquals("0", OctalToHexadecimal.decimalToHex(0));
    
    // Test Case 2: decimalToHex(10) should return "A"
    assertEquals("A", OctalToHexadecimal.decimalToHex(10));
    
    // Test Case 3: decimalToHex(16) should return "10"
    assertEquals("10", OctalToHexadecimal.decimalToHex(16));
    
    // Test Case 4: decimalToHex(255) should return "FF"
    assertEquals("FF", OctalToHexadecimal.decimalToHex(255));
    
    // Test Case 5: decimalToHex(4096) should return "1000"
    assertEquals("1000", OctalToHexadecimal.decimalToHex(4096));
}


No.3 generated result --------------------------

package com.thealgorithms.conversions;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class OctalToHexadecimalTest {
    @Test
    public void decimalToHexTest() {
        // Test when d is positive
        int d1 = 255;
        String expected1 = "FF";
        String actual1 = OctalToHexadecimal.decimalToHex(d1);
        assertEquals(expected1, actual1);

        // Test when d is 0
        int d2 = 0;
        String expected2 = "0";
        String actual2 = OctalToHexadecimal.decimalToHex(d2);
        assertEquals(expected2, actual2);

        // Test when d is negative
        int d3 = -15;
        String expected3 = "0";
        String actual3 = OctalToHexadecimal.decimalToHex(d3);
        assertEquals(expected3, actual3);
    }
}


No.4 generated result --------------------------

@Test
public void decimalToHexTest() {
    // Test case 1: d = 0
    int d1 = 0;
    String expected1 = "0";
    String result1 = OctalToHexadecimal.decimalToHex(d1);
    assertEquals(expected1, result1);

    // Test case 2: d = 10
    int d2 = 10;
    String expected2 = "A";
    String result2 = OctalToHexadecimal.decimalToHex(d2);
    assertEquals(expected2, result2);

    // Test case 3: d = 255
    int d3 = 255;
    String expected3 = "FF";
    String result3 = OctalToHexadecimal.decimalToHex(d3);
    assertEquals(expected3, result3);

    // Test case 4: d = 4096
    int d4 = 4096;
    String expected4 = "1000";
    String result4 = OctalToHexadecimal.decimalToHex(d4);
    assertEquals(expected4, result4);
}


No.5 generated result --------------------------

@Test
public void decimalToHexTest() {
    // Test case 1: d = 0
    int d1 = 0;
    String expectedHex1 = "0";
    String actualHex1 = OctalToHexadecimal.decimalToHex(d1);
    assertEquals(expectedHex1, actualHex1);

    // Test case 2: d = 10
    int d2 = 10;
    String expectedHex2 = "A";
    String actualHex2 = OctalToHexadecimal.decimalToHex(d2);
    assertEquals(expectedHex2, actualHex2);

    // Test case 3: d = 16
    int d3 = 16;
    String expectedHex3 = "10";
    String actualHex3 = OctalToHexadecimal.decimalToHex(d3);
    assertEquals(expectedHex3, actualHex3);

    // Test case 4: d = 255
    int d4 = 255;
    String expectedHex4 = "FF";
    String actualHex4 = OctalToHexadecimal.decimalToHex(d4);
    assertEquals(expectedHex4, actualHex4);

    // Test case 5: d = -5
    int d5 = -5;
    String expectedHex5 = "0";
    String actualHex5 = OctalToHexadecimal.decimalToHex(d5);
    assertEquals(expectedHex5, actualHex5);
}


No.6 generated result --------------------------

@Test
public void decimalToHexTest() {
    // Test cases for positive numbers
    assertEquals("0", OctalToHexadecimal.decimalToHex(0));
    assertEquals("1", OctalToHexadecimal.decimalToHex(1));
    assertEquals("A", OctalToHexadecimal.decimalToHex(10));
    assertEquals("FF", OctalToHexadecimal.decimalToHex(255));
    
    // Test case for negative number
    assertEquals("0", OctalToHexadecimal.decimalToHex(-1));
}


No.7 generated result --------------------------

@Test
public void decimalToHexTest() {
    // Test case 1: Positive value
    int input1 = 255;
    String expectedResult1 = "FF";
    String actualResult1 = OctalToHexadecimal.decimalToHex(input1);
    assertEquals(expectedResult1, actualResult1, "Input: " + input1);
    
    // Test case 2: Zero value
    int input2 = 0;
    String expectedResult2 = "0";
    String actualResult2 = OctalToHexadecimal.decimalToHex(input2);
    assertEquals(expectedResult2, actualResult2, "Input: " + input2);
    
    // Test case 3: Negative value
    int input3 = -10;
    String expectedResult3 = "0";
    String actualResult3 = OctalToHexadecimal.decimalToHex(input3);
    assertEquals(expectedResult3, actualResult3, "Input: " + input3);
}


No.8 generated result --------------------------

@Test
public void decimalToHexTest() {
    int decimal = 255;
    String expectedHex = "FF";
    String actualHex = OctalToHexadecimal.decimalToHex(decimal);
    assertEquals(expectedHex, actualHex);
}


No.9 generated result --------------------------

@Test
public void decimalToHexTest() {
    // Test case 1: d = 0
    int d1 = 0;
    String expected1 = "0";
    String result1 = OctalToHexadecimal.decimalToHex(d1);
    assertEquals(expected1, result1);
    
    // Test case 2: d = 10
    int d2 = 10;
    String expected2 = "A";
    String result2 = OctalToHexadecimal.decimalToHex(d2);
    assertEquals(expected2, result2);
    
    // Test case 3: d = 255
    int d3 = 255;
    String expected3 = "FF";
    String result3 = OctalToHexadecimal.decimalToHex(d3);
    assertEquals(expected3, result3);
}


No.10 generated result --------------------------

@Test
public void decimalToHexTest() {
    // Test case 1: decimalToHex(0) should return "0"
    assertEquals("0", OctalToHexadecimal.decimalToHex(0));

    // Test case 2: decimalToHex(10) should return "A"
    assertEquals("A", OctalToHexadecimal.decimalToHex(10));

    // Test case 3: decimalToHex(255) should return "FF"
    assertEquals("FF", OctalToHexadecimal.decimalToHex(255));

    // Test case 4: decimalToHex(16) should return "10"
    assertEquals("10", OctalToHexadecimal.decimalToHex(16));
}



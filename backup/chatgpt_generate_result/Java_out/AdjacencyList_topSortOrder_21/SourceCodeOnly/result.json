{
    "project_name": "Java",
    "file_name": "KahnsAlgorithm.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/graphs/KahnsAlgorithm.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.graphs",
    "docstring": "/**\n     * Returns an ArrayList with vertices arranged in topological order\n     */",
    "source_code": "\nArrayList<E> topSortOrder() {\n    calculateInDegree();\n    Queue<E> q = new LinkedList<E>();\n\n    for (E vertex : inDegree.keySet()) {\n        if (inDegree.get(vertex) == 0) {\n            q.add(vertex);\n        }\n    }\n\n    ArrayList<E> answer = new ArrayList<>();\n\n    while (!q.isEmpty()) {\n        E current = q.poll();\n        answer.add(current);\n        for (E adjacent : graph.getAdjacents(current)) {\n            inDegree.put(adjacent, inDegree.get(adjacent) - 1);\n            if (inDegree.get(adjacent) == 0) {\n                q.add(adjacent);\n            }\n        }\n    }\n\n    return answer;\n}\n",
    "class_name": "AdjacencyList",
    "method_name": "topSortOrder",
    "arguments": [],
    "generate_test": [
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.Queue;\n\npublic class AdjacencyListTest {\n    @Test\n    public void topSortOrderTest() {\n        AdjacencyList<Integer> graph = new AdjacencyList<>(); // Assuming the AdjacencyList class is parameterized with Integer\n        graph.addEdge(1, 2);\n        graph.addEdge(2, 3);\n        graph.addEdge(3, 4);\n\n        ArrayList<Integer> expected = new ArrayList<>();\n        expected.add(1);\n        expected.add(2);\n        expected.add(3);\n        expected.add(4);\n\n        ArrayList<Integer> actual = graph.topSortOrder();\n\n        assertEquals(expected, actual);\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.Queue;\n\npublic class AdjacencyListTest {\n    @Test\n    public void topSortOrderTest() {\n        AdjacencyList<Integer> graph = new AdjacencyList<>();\n        // Add test data to the graph\n\n        ArrayList<Integer> expected = new ArrayList<>();\n        expected.add(1);\n        expected.add(2);\n        expected.add(3);\n        expected.add(4);\n        expected.add(5);\n\n        assertEquals(expected, graph.topSortOrder());\n    }\n}",
        "@Test\npublic void topSortOrderTest() {\n    ArrayList<Integer> expected = new ArrayList<>();\n    expected.add(1);\n    expected.add(2);\n    expected.add(4);\n    expected.add(3);\n    \n    ArrayList<Integer> actual = new AdjacencyList().topSortOrder();\n    \n    assertEquals(expected, actual);\n}",
        "@Test\npublic void topSortOrderTest() {\n    AdjacencyList<String> graph = new AdjacencyList<>();\n    // Add vertices and edges to the graph\n\n    ArrayList<String> expected = new ArrayList<>();\n    expected.add(\"A\");\n    expected.add(\"B\");\n    expected.add(\"C\");\n\n    ArrayList<String> result = graph.topSortOrder();\n\n    assertEquals(expected, result);\n}",
        "ArrayList<E> graph = new ArrayList<>(); // create a graph\n        graph.add(new E()); // add vertices to the graph\n        graph.add(new E());\n        graph.add(new E());\n        graph.add(new E());\n\n        // add edges to the graph\n        graph.get(0).addAdjacent(graph.get(1));\n        graph.get(0).addAdjacent(graph.get(3));\n        graph.get(1).addAdjacent(graph.get(2));\n\n        // create an instance of the class that contains the topSortOrder() method\n        ClassName className = new ClassName();\n\n        // invoke the topSortOrder() method and obtain the result\n        ArrayList<E> result = className.topSortOrder();\n\n        // create an array list containing the expected order of vertices after topological sorting\n        ArrayList<E> expected = new ArrayList<>();\n        expected.add(graph.get(0)); // vertex 0 will be the first one after topological sorting\n        expected.add(graph.get(1)); // vertex 1 will be the second one after topological sorting\n        expected.add(graph.get(2)); // vertex 2 will be the third one after topological sorting\n        expected.add(graph.get(3)); // vertex 3 will be the fourth one after topological sorting\n\n        // compare the result with the expected order of vertices\n        assertEquals(expected, result);",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdjacencyListTest {\n    @Test\n    public void topSortOrderTest() {\n        ArrayList<Integer> expected = new ArrayList<>();\n        expected.add(1);\n        expected.add(2);\n        expected.add(3);\n        \n        AdjacencyList<Integer> graph = new AdjacencyList<>();\n        // Add vertices and edges to the graph\n        \n        ArrayList<Integer> actual = graph.topSortOrder();\n        assertEquals(expected, actual);\n    }\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdjacencyListTest {\n    @Test\n    public void topSortOrderTest() {\n        AdjacencyList<String> graph = new AdjacencyList<>();\n        graph.addEdge(\"A\", \"B\");\n        graph.addEdge(\"B\", \"C\");\n        graph.addEdge(\"C\", \"D\");\n        graph.addEdge(\"D\", \"E\");\n        graph.addEdge(\"E\", \"F\");\n        \n        ArrayList<String> expected = new ArrayList<>();\n        expected.add(\"A\");\n        expected.add(\"B\");\n        expected.add(\"C\");\n        expected.add(\"D\");\n        expected.add(\"E\");\n        expected.add(\"F\");\n        \n        ArrayList<String> actual = graph.topSortOrder();\n        \n        assertEquals(expected, actual);\n    }\n}",
        "In order to complete the unit test for the given Java source code, you can follow the steps below:\n\npackage com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class AdjacencyListTest {\n    @Test\n    public void topSortOrderTest() {\n        // Create an instance of the AdjacencyList class\n        AdjacencyList<Integer> graph = new AdjacencyList<>();\n        \n        // Add vertices to the graph\n        graph.addVertex(1);\n        graph.addVertex(2);\n        graph.addVertex(3);\n        graph.addVertex(4);\n        \n        // Add edges to the graph\n        graph.addEdge(1, 2);\n        graph.addEdge(2, 3);\n        graph.addEdge(3, 4);\n        \n        // Calculate the topological sort of the graph\n        ArrayList<Integer> expectedResult = new ArrayList<>(Arrays.asList(1, 2, 3, 4));\n        ArrayList<Integer> actualResult = graph.topSortOrder();\n        \n        // Assert that the actual result matches the expected result\n        assertEquals(expectedResult, actualResult);\n    }\n}",
        "@Test\npublic void topSortOrderTest() {\n    // Given\n    ArrayList<E> expected = new ArrayList<>();\n    expected.add(vertex1);\n    expected.add(vertex2);\n    expected.add(vertex3);\n    expected.add(vertex4);\n  \n    // When\n    ArrayList<E> result = adjList.topSortOrder();\n    \n    // Then\n    assertEquals(expected, result);\n}",
        "@Test\n    public void topSortOrderTest() {\n        AdjacencyList<Integer> graph = new AdjacencyList<>();\n        graph.addEdge(1, 2);\n        graph.addEdge(1, 3);\n        graph.addEdge(2, 4);\n        graph.addEdge(3, 4);\n        \n        ArrayList<Integer> expected = new ArrayList<>();\n        expected.add(1);\n        expected.add(2);\n        expected.add(3);\n        expected.add(4);\n        \n        ArrayList<Integer> actual = graph.topSortOrder();\n        \n        assertEquals(expected, actual);\n    }"
    ]
}
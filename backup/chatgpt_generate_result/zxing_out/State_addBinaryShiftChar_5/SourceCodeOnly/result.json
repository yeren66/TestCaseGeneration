{
    "project_name": "zxing",
    "file_name": "State.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/aztec/encoder/State.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.aztec.encoder",
    "docstring": null,
    "source_code": "// Create a new state representing this state, but an additional character\n// output in Binary Shift mode.\nState addBinaryShiftChar(int index) {\n  Token token = this.token;\n  int mode = this.mode;\n  int bitCount = this.bitCount;\n  if (this.mode == HighLevelEncoder.MODE_PUNCT || this.mode == HighLevelEncoder.MODE_DIGIT) {\n    int latch = HighLevelEncoder.LATCH_TABLE[mode][HighLevelEncoder.MODE_UPPER];\n    token = token.add(latch & 0xFFFF, latch >> 16);\n    bitCount += latch >> 16;\n    mode = HighLevelEncoder.MODE_UPPER;\n  }\n  int deltaBitCount =\n      (binaryShiftByteCount == 0 || binaryShiftByteCount == 31) ? 18 :\n      (binaryShiftByteCount == 62) ? 9 : 8;\n  State result = new State(token, mode, binaryShiftByteCount + 1, bitCount + deltaBitCount);\n  if (result.binaryShiftByteCount == 2047 + 31) {\n    // The string is as long as it's allowed to be.  We should end it.\n    result = result.endBinaryShift(index + 1);\n  }\n  return result;\n}\n",
    "class_name": "State",
    "method_name": "addBinaryShiftChar",
    "arguments": [
        "int index"
    ],
    "generate_test": [
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        // Create a new state\n        State initialState = new State(new Token(), HighLevelEncoder.MODE_UPPER, 0, 0);\n        State finalState = initialState.addBinaryShiftChar(0);\n        \n        // Assert statements\n        assertEquals(HighLevelEncoder.MODE_UPPER, finalState.getMode());\n        assertEquals(1, finalState.getBinaryShiftByteCount());\n        assertEquals(18, finalState.getBitCount());\n    }\n}",
        "\npackage com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        State state = new State(new Token(), HighLevelEncoder.MODE_LOWER, 0, 0);\n        State result = state.addBinaryShiftChar(0);\n        assertEquals(new Token(), result.token);\n        assertEquals(HighLevelEncoder.MODE_LOWER, result.mode);\n        assertEquals(1, result.binaryShiftByteCount);\n        assertEquals(8, result.bitCount);\n    }\n}\n",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        // Create a new state representing this state, but an additional character\n        // output in Binary Shift mode.\n        State state = new State(new Token(), HighLevelEncoder.MODE_UPPER, 0, 0);\n        State newState = state.addBinaryShiftChar(0);\n        Token expectedToken = new Token().add(0x6, 0x4);\n        int expectedMode = HighLevelEncoder.MODE_UPPER;\n        int expectedBitCount = 4;\n\n        // Assert\n        assertEquals(expectedToken, newState.getToken());\n        assertEquals(expectedMode, newState.getMode());\n        assertEquals(1, newState.getBinaryShiftByteCount());\n        assertEquals(expectedBitCount, newState.getBitCount());\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        Token token = new Token();\n        State state = new State(token, 0, 0, 0);\n        int index = 0;\n        \n        State expectedResult = new State(token, 0, 1, 0);\n        State actualResult = state.addBinaryShiftChar(index);\n        \n        assertEquals(expectedResult, actualResult);\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        // Create the initial state\n        State initialState = new State(token, mode, binaryShiftByteCount, bitCount);\n\n        // Call the method to be tested\n        State result = initialState.addBinaryShiftChar(index);\n\n        // Assert the expected output\n        assertEquals(expectedToken, result.getToken());\n        assertEquals(expectedMode, result.getMode());\n        assertEquals(expectedBinaryShiftByteCount, result.getBinaryShiftByteCount());\n        assertEquals(expectedBitCount, result.getBitCount());\n    }\n}",
        "@Test\npublic void addBinaryShiftCharTest() {\n    Token token = new Token();\n    State state = new State(token, HighLevelEncoder.MODE_UPPER, 0, 0);\n    State result = state.addBinaryShiftChar(0);\n    \n    assertEquals(HighLevelEncoder.MODE_UPPER, result.getMode());\n    assertEquals(1, result.getBinaryShiftByteCount());\n    assertEquals(18, result.getBitCount());\n}",
        "@Test\npublic void addBinaryShiftCharTest() {\n    State initialState = new State(token, mode, binaryShiftByteCount, bitCount);\n    State expectedState = new State(token, mode, binaryShiftByteCount + 1, bitCount + deltaBitCount);\n    \n    State actualState = initialState.addBinaryShiftChar(index);\n    \n    assertEquals(expectedState, actualState);\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        State initialState = new State(token, mode, binaryShiftByteCount, bitCount);\n        int index = 0;\n        \n        State newState = initialState.addBinaryShiftChar(index);\n        \n        // Assert the properties of the newState\n        \n        // Assert the token property\n        assertEquals(initialState.getToken(), newState.getToken());\n        \n        // Assert the mode property\n        assertEquals(initialState.getMode(), newState.getMode());\n        \n        // Assert the binaryShiftByteCount property\n        assertEquals(initialState.getBinaryShiftByteCount() + 1, newState.getBinaryShiftByteCount());\n        \n        // Assert the bitCount property\n        int deltaBitCount =\n              (initialState.getBinaryShiftByteCount() == 0 || initialState.getBinaryShiftByteCount() == 31) ? 18 :\n              (initialState.getBinaryShiftByteCount() == 62) ? 9 : 8;\n          \n        assertEquals(initialState.getBitCount() + deltaBitCount, newState.getBitCount());\n        \n    }\n}",
        "@Test\npublic void addBinaryShiftCharTest() {\n    State state = new State(token, mode, bitCount, binaryShiftByteCount);\n    State result = state.addBinaryShiftChar(1);\n    assertEquals(expectedToken, result.token);\n    assertEquals(expectedMode, result.mode);\n    assertEquals(expectedBitCount, result.bitCount);\n    assertEquals(expectedBinaryShiftByteCount, result.binaryShiftByteCount);\n    if (expectedBinaryShiftByteCount == 2047 + 31) {\n        result = result.endBinaryShift(2);\n        assertEquals(expectedToken, result.token);\n        assertEquals(expectedMode, result.mode);\n        assertEquals(expectedBitCount, result.bitCount);\n        assertEquals(expectedBinaryShiftByteCount, result.binaryShiftByteCount);\n    }\n}",
        "package com.google.zxing.aztec.encoder;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StateTest {\n    @Test\n    public void addBinaryShiftCharTest() {\n        State initialState = new State(new Token(), HighLevelEncoder.MODE_DIGIT, 0, 0);\n        State newState = initialState.addBinaryShiftChar(0);\n        assertEquals(HighLevelEncoder.MODE_UPPER, newState.getMode());\n        assertEquals(1, newState.getBinaryShiftByteCount());\n        assertEquals(8, newState.getBitCount());\n    }\n}"
    ]
}
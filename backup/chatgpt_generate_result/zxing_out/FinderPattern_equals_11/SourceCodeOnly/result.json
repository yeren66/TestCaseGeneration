{
    "project_name": "zxing",
    "file_name": "FinderPattern.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/oned/rss/FinderPattern.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.oned.rss",
    "docstring": null,
    "source_code": "@Override\npublic boolean equals(Object o) {\n  if (!(o instanceof FinderPattern)) {\n    return false;\n  }\n  FinderPattern that = (FinderPattern) o;\n  return value == that.value;\n}\n",
    "class_name": "FinderPattern",
    "method_name": "equals",
    "arguments": [
        "Object o"
    ],
    "generate_test": [
        "@Test\npublic void equalsTest() {\n    FinderPattern fp1 = new FinderPattern(1);\n    FinderPattern fp2 = new FinderPattern(1);\n    FinderPattern fp3 = new FinderPattern(2);\n  \n    assertTrue(fp1.equals(fp1));\n    assertFalse(fp1.equals(null));\n    assertFalse(fp1.equals(\"test\"));\n    assertTrue(fp1.equals(fp2));\n    assertFalse(fp1.equals(fp3));\n}",
        "@Override\npublic boolean equals(Object o) {\n  if (!(o instanceof FinderPattern)) {\n    return false;\n  }\n  FinderPattern that = (FinderPattern) o;\n  return value == that.value;\n}\n\n@Test\npublic void equalsTest() {\n    FinderPattern pattern1 = new FinderPattern(5); // create a FinderPattern object with value 5\n    FinderPattern pattern2 = new FinderPattern(5); // create another FinderPattern object with value 5\n    FinderPattern pattern3 = new FinderPattern(10); // create a FinderPattern object with value 10\n\n    // Test case 1: pattern1 and pattern2 have the same value, so they should be equal\n    assertTrue(pattern1.equals(pattern2));\n\n    // Test case 2: pattern1 and pattern3 have different values, so they should not be equal\n    assertFalse(pattern1.equals(pattern3));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern pattern1 = new FinderPattern();\n    pattern1.setValue(5);\n    FinderPattern pattern2 = new FinderPattern();\n    pattern2.setValue(5);\n    \n    // Test case 1: Two FinderPattern objects with the same value\n    assertTrue(pattern1.equals(pattern2));\n    \n    FinderPattern pattern3 = new FinderPattern();\n    pattern3.setValue(10);\n    \n    // Test case 2: Two FinderPattern objects with different values\n    assertFalse(pattern1.equals(pattern3));\n    \n    // Test case 3: Comparing with a non-FinderPattern object\n    Object obj = new Object();\n    assertFalse(pattern1.equals(obj));\n    \n    // Test case 4: Comparing with a null object\n    assertFalse(pattern1.equals(null));\n}",
        "package com.google.zxing.oned.rss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n    @Test\n    public void equalsTest() {\n        FinderPattern pattern1 = new FinderPattern(5); // create a FinderPattern object with value 5\n        FinderPattern pattern2 = new FinderPattern(5); // create another FinderPattern object with value 5\n        FinderPattern pattern3 = new FinderPattern(10); // create a FinderPattern object with value 10\n\n        // Object should be equal to itself\n        assertEquals(pattern1, pattern1);\n\n        // Object should be equal to another object with the same value\n        assertEquals(pattern1, pattern2);\n\n        // Object should not be equal to another object with a different value\n        assertNotEquals(pattern1, pattern3);\n    }\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern pattern1 = new FinderPattern(5);\n    FinderPattern pattern2 = new FinderPattern(5);\n    FinderPattern pattern3 = new FinderPattern(10);\n    \n    // Test case 1: pattern1 and pattern2 have the same value, should return true\n    assertTrue(pattern1.equals(pattern2));\n    \n    // Test case 2: pattern1 and pattern3 have different values, should return false\n    assertFalse(pattern1.equals(pattern3));\n    \n    // Test case 3: pattern1 and pattern2 are the same object, should return true\n    assertTrue(pattern1.equals(pattern1));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern pattern1 = new FinderPattern(3);\n    FinderPattern pattern2 = new FinderPattern(3);\n    FinderPattern pattern3 = new FinderPattern(5);\n    \n    assertTrue(pattern1.equals(pattern2));\n    assertFalse(pattern1.equals(pattern3));\n    assertFalse(pattern1.equals(null));\n    assertFalse(pattern1.equals(\"string\"));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern finderPattern1 = new FinderPattern(5); // Create a FinderPattern object with value 5\n    FinderPattern finderPattern2 = new FinderPattern(5); // Create another FinderPattern object with value 5\n    FinderPattern finderPattern3 = new FinderPattern(7); // Create a FinderPattern object with value 7\n    \n    // Test case 1: Check if a FinderPattern object is equal to itself\n    assertTrue(finderPattern1.equals(finderPattern1), \"FinderPattern object should be equal to itself\");\n    \n    // Test case 2: Check if two FinderPattern objects with the same value are equal\n    assertTrue(finderPattern1.equals(finderPattern2), \"FinderPattern objects with the same value should be equal\");\n    \n    // Test case 3: Check if two FinderPattern objects with different values are not equal\n    assertFalse(finderPattern1.equals(finderPattern3), \"FinderPattern objects with different values should not be equal\");\n    \n    // Test case 4: Check if a FinderPattern object is not equal to a null object\n    assertFalse(finderPattern1.equals(null), \"FinderPattern object should not be equal to a null object\");\n    \n    // Test case 5: Check if a FinderPattern object is not equal to an object of a different class\n    assertFalse(finderPattern1.equals(\"FinderPattern\"), \"FinderPattern object should not be equal to an object of a different class\");\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern pattern1 = new FinderPattern(5);\n    FinderPattern pattern2 = new FinderPattern(5);\n    FinderPattern pattern3 = new FinderPattern(6);\n\n    assertTrue(pattern1.equals(pattern2));\n    assertFalse(pattern1.equals(pattern3));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern pattern1 = new FinderPattern(1);\n    FinderPattern pattern2 = new FinderPattern(1);\n    FinderPattern pattern3 = new FinderPattern(2);\n    \n    // Test 1: Comparing the pattern with itself\n    assertTrue(pattern1.equals(pattern1));\n    \n    // Test 2: Comparing pattern1 with pattern2\n    assertTrue(pattern1.equals(pattern2));\n    \n    // Test 3: Comparing pattern1 with pattern3\n    assertFalse(pattern1.equals(pattern3));\n    \n    // Test 4: Comparing pattern1 with null\n    assertFalse(pattern1.equals(null));\n    \n    // Test 5: Comparing pattern1 with an object of a different class\n    assertFalse(pattern1.equals(\"not a FinderPattern\"));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern pattern1 = new FinderPattern(1);\n    FinderPattern pattern2 = new FinderPattern(1);\n    FinderPattern pattern3 = new FinderPattern(2);\n    assertFalse(pattern1.equals(null));\n    assertTrue(pattern1.equals(pattern1));\n    assertTrue(pattern1.equals(pattern2));\n    assertFalse(pattern1.equals(pattern3));\n}"
    ]
}
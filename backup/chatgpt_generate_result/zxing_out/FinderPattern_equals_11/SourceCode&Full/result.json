{
    "project_name": "zxing",
    "file_name": "FinderPattern.java",
    "relative_path": "zxing/core/src/main/java/com/google/zxing/oned/rss/FinderPattern.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.oned.rss",
    "docstring": null,
    "source_code": "@Override\npublic boolean equals(Object o) {\n  if (!(o instanceof FinderPattern)) {\n    return false;\n  }\n  FinderPattern that = (FinderPattern) o;\n  return value == that.value;\n}\n",
    "class_name": "FinderPattern",
    "method_name": "equals",
    "arguments": [
        "Object o"
    ],
    "generate_test": [
        "@Test\npublic void equalsTest() {\n    FinderPattern pattern1 = new FinderPattern(1, new int[]{0, 10}, 0, 10, 1);\n    FinderPattern pattern2 = new FinderPattern(1, new int[]{0, 10}, 0, 10, 1);\n    FinderPattern pattern3 = new FinderPattern(2, new int[]{0, 10}, 0, 10, 1);\n    \n    assertTrue(pattern1.equals(pattern2));\n    assertFalse(pattern1.equals(pattern3));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern pattern1 = new FinderPattern(1, new int[]{0, 1}, 0, 1, 0);\n    FinderPattern pattern2 = new FinderPattern(1, new int[]{0, 1}, 0, 1, 0);\n    FinderPattern pattern3 = new FinderPattern(2, new int[]{2, 3}, 0, 1, 0);\n    \n    assertTrue(pattern1.equals(pattern2), \"Expected pattern1 to be equal to pattern2\");\n    assertFalse(pattern1.equals(pattern3), \"Expected pattern1 to be not equal to pattern3\");\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern finderPattern1 = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);\n    FinderPattern finderPattern2 = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);\n    FinderPattern finderPattern3 = new FinderPattern(2, new int[]{1, 2}, 3, 4, 5);\n    \n    assertTrue(finderPattern1.equals(finderPattern2));\n    assertFalse(finderPattern1.equals(finderPattern3));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern pattern1 = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);\n    FinderPattern pattern2 = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);\n    FinderPattern pattern3 = new FinderPattern(2, new int[]{1, 2}, 3, 4, 5);\n    \n    assertTrue(pattern1.equals(pattern2), \"Expected pattern1 to be equal to pattern2\");\n    assertFalse(pattern1.equals(pattern3), \"Expected pattern1 to not be equal to pattern3\");\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern pattern1 = new FinderPattern(1, new int[]{0, 1}, 0, 1, 0);\n    FinderPattern pattern2 = new FinderPattern(1, new int[]{0, 1}, 0, 1, 0);\n    FinderPattern pattern3 = new FinderPattern(2, new int[]{0, 1}, 0, 1, 0);\n\n    assertTrue(pattern1.equals(pattern2));\n    assertFalse(pattern1.equals(pattern3));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern fp1 = new FinderPattern(1, new int[]{0, 1}, 0, 1, 0);\n    FinderPattern fp2 = new FinderPattern(1, new int[]{0, 1}, 0, 1, 0);\n    \n    assertTrue(fp1.equals(fp2));\n    assertTrue(fp2.equals(fp1));\n    \n    FinderPattern fp3 = new FinderPattern(2, new int[]{0, 1}, 0, 1, 0);\n    \n    assertFalse(fp1.equals(fp3));\n    assertFalse(fp3.equals(fp1));\n}",
        "package com.google.zxing.oned.rss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n    @Test\n    public void equalsTest() {\n        FinderPattern pattern1 = new FinderPattern(1, new int[] {0, 1}, 0, 1, 0);\n        FinderPattern pattern2 = new FinderPattern(1, new int[] {0, 1}, 0, 1, 0);\n        FinderPattern pattern3 = new FinderPattern(2, new int[] {0, 1}, 0, 1, 0);\n\n        assertEquals(pattern1, pattern1); // Same object should be equal\n        assertEquals(pattern1, pattern2); // Objects with same value should be equal\n        assertNotEquals(pattern1, pattern3); // Objects with different value should not be equal\n        assertNotEquals(pattern1, null); // Objects should not be equal to null\n        assertNotEquals(pattern1, \"string\"); // Objects should not be equal to different class\n\n        assertEquals(pattern1.hashCode(), pattern2.hashCode()); // Hash code should be equal for equal objects\n    }\n}",
        "package com.google.zxing.oned.rss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FinderPatternTest {\n    @Test\n    public void equalsTest() {\n        FinderPattern pattern1 = new FinderPattern(1, new int[]{0, 1}, 2, 3, 4);\n        FinderPattern pattern2 = new FinderPattern(1, new int[]{0, 1}, 2, 3, 4);\n        FinderPattern pattern3 = new FinderPattern(2, new int[]{0, 1}, 2, 3, 4);\n        \n        assertTrue(pattern1.equals(pattern2));\n        assertFalse(pattern1.equals(pattern3));\n    }\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern pattern1 = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);\n    FinderPattern pattern2 = new FinderPattern(1, new int[]{1, 2}, 3, 4, 5);\n    FinderPattern pattern3 = new FinderPattern(2, new int[]{1, 2}, 3, 4, 5);\n    \n    assertTrue(pattern1.equals(pattern2));\n    assertTrue(pattern2.equals(pattern1));\n    assertFalse(pattern1.equals(pattern3));\n    assertFalse(pattern3.equals(pattern1));\n}",
        "@Test\npublic void equalsTest() {\n    FinderPattern pattern1 = new FinderPattern(1, new int[]{0, 1}, 0, 1, 0);\n    FinderPattern pattern2 = new FinderPattern(1, new int[]{0, 1}, 0, 1, 0);\n    FinderPattern pattern3 = new FinderPattern(2, new int[]{0, 1}, 0, 1, 0);\n    \n    assertTrue(pattern1.equals(pattern2));\n    assertFalse(pattern1.equals(pattern3));\n}"
    ]
}
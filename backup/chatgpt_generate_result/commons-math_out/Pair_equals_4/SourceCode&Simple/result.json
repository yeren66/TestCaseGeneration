{
    "project_name": "commons-math",
    "file_name": "Pair.java",
    "relative_path": "commons-math/commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/Pair.java",
    "execute_path": "commons-math/commons-math-legacy-core",
    "package": "org.apache.commons.math4.legacy.core",
    "docstring": "/**\n     * Compare the specified object with this entry for equality.\n     *\n     * @param o Object.\n     * @return {@code true} if the given object is also a map entry and\n     * the two entries represent the same mapping.\n     */",
    "source_code": "\n@Override\npublic boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (!(o instanceof Pair)) {\n        return false;\n    } else {\n        Pair<?, ?> oP = (Pair<?, ?>) o;\n        return (key == null ?\n                oP.key == null :\n                key.equals(oP.key)) &&\n            (value == null ?\n             oP.value == null :\n             value.equals(oP.value));\n    }\n}\n",
    "class_name": "Pair",
    "method_name": "equals",
    "arguments": [
        "Object o"
    ],
    "generate_test": [
        "@Test\npublic void equalsTest() {\n    Pair<String, Integer> pair1 = new Pair<>(\"key\", 1);\n    Pair<String, Integer> pair2 = new Pair<>(\"key\", 1);\n    Pair<String, Integer> pair3 = new Pair<>(\"key\", 2);\n    \n    assertTrue(pair1.equals(pair2));\n    assertFalse(pair1.equals(pair3));\n}",
        "Pair<Integer, String> pair1 = Pair.create(1, \"One\");\nPair<Integer, String> pair2 = Pair.create(1, \"One\");\nPair<Integer, String> pair3 = Pair.create(2, \"Two\");\n\n// Testing equality between pair1 and itself\nassertTrue(pair1.equals(pair1));\n\n// Testing equality between pair1 and pair2\nassertTrue(pair1.equals(pair2));\n\n// Testing equality between pair1 and pair3\nassertFalse(pair1.equals(pair3));\n\n// Testing equality between pair2 and pair3\nassertFalse(pair2.equals(pair3));",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        // Arrange\n        Pair<String, Integer> pair1 = new Pair<>(\"key\", 10);\n        Pair<String, Integer> pair2 = new Pair<>(\"key\", 10);\n        Pair<String, Integer> pair3 = new Pair<>(\"key\", 20);\n        Pair<String, Integer> pair4 = new Pair<>(\"key2\", 10);\n\n        // Act & Assert\n        assertTrue(pair1.equals(pair1)); // Same object\n        assertTrue(pair1.equals(pair2)); // Same key and value\n        assertFalse(pair1.equals(pair3)); // Different value\n        assertFalse(pair1.equals(pair4)); // Different key\n        assertFalse(pair1.equals(null)); // Null comparison\n        assertFalse(pair1.equals(\"key\")); // Different class\n    }\n}",
        "@Test\npublic void equalsTest() {\n    Pair<Integer, String> pair1 = new Pair<>(1, \"abc\");\n    Pair<Integer, String> pair2 = new Pair<>(1, \"abc\");\n    Pair<Integer, String> pair3 = new Pair<>(2, \"def\");\n\n    assertTrue(pair1.equals(pair2));\n    assertFalse(pair1.equals(pair3));\n    assertFalse(pair2.equals(pair3));\n    assertTrue(pair1.equals(pair1)); // Check self equality\n    assertFalse(pair1.equals(null)); // Check null equality\n}",
        "@Test\npublic void equalsTest() {\n    Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\n    Pair<Integer, String> pair2 = new Pair<>(1, \"one\");\n    Pair<Integer, String> pair3 = new Pair<>(2, \"two\");\n\n    // Test equal pairs\n    assertTrue(pair1.equals(pair2));\n    assertTrue(pair2.equals(pair1));\n\n    // Test not equal pairs\n    assertFalse(pair1.equals(pair3));\n    assertFalse(pair3.equals(pair1));\n}",
        "@Test\npublic void equalsTest() {\n    Pair<Integer, String> pair1 = new Pair<>(1, \"Hello\");\n    Pair<Integer, String> pair2 = new Pair<>(1, \"Hello\");\n    Pair<Integer, String> pair3 = new Pair<>(2, \"World\");\n\n    // Test case 1: Comparing a pair with itself should return true\n    assertTrue(pair1.equals(pair1));\n\n    // Test case 2: Comparing two equal pairs should return true\n    assertTrue(pair1.equals(pair2));\n\n    // Test case 3: Comparing two unequal pairs should return false\n    assertFalse(pair1.equals(pair3));\n}",
        "@Test\npublic void equalsTest() {\n    Pair<String, Integer> pair1 = Pair.create(\"a\", 1);\n    Pair<String, Integer> pair2 = Pair.create(\"a\", 1);\n    Pair<String, Integer> pair3 = Pair.create(\"b\", 2);\n    \n    assertTrue(pair1.equals(pair1)); // Exact same object, returns true\n    \n    assertTrue(pair1.equals(pair2)); // Same key-value pairs, returns true\n    \n    assertFalse(pair1.equals(pair3)); // Different key-value pairs, returns false\n    \n    assertFalse(pair1.equals(\"a\")); // Comparing to a different object type, returns false\n}",
        "@Test\npublic void equalsTest() {\n    Pair<String, Integer> pair1 = new Pair<>(\"key\", 1);\n    Pair<String, Integer> pair2 = new Pair<>(\"key\", 1);\n    Pair<String, Integer> pair3 = new Pair<>(\"key\", 2);\n    \n    assertTrue(pair1.equals(pair1)); // When comparing with itself, should return true\n    assertTrue(pair1.equals(pair2)); // When comparing with another pair with the same key and value, should return true\n    assertFalse(pair1.equals(null)); // When comparing with null, should return false\n    assertFalse(pair1.equals(pair3)); // When comparing with another pair with different value, should return false\n}",
        "package org.apache.commons.math4.legacy.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PairTest {\n    @Test\n    public void equalsTest() {\n        Pair<String, Integer> pair1 = new Pair<>(\"A\", 1);\n        Pair<String, Integer> pair2 = new Pair<>(\"A\", 1);\n        Pair<String, Integer> pair3 = new Pair<>(\"B\", 2);\n\n        assertTrue(pair1.equals(pair2));\n        assertFalse(pair1.equals(pair3));\n    }\n}",
        "@Test\npublic void equalsTest() {\n    // Arrange\n    Pair<Integer, String> pair1 = new Pair<>(1, \"one\");\n    Pair<Integer, String> pair2 = new Pair<>(1, \"one\");\n    \n    // Act\n    boolean result = pair1.equals(pair2);\n    \n    // Assert\n    assertTrue(result);\n}"
    ]
}
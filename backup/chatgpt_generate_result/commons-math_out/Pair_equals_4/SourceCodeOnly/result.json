{
    "project_name": "commons-math",
    "file_name": "Pair.java",
    "relative_path": "commons-math/commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/Pair.java",
    "execute_path": "commons-math/commons-math-legacy-core",
    "package": "org.apache.commons.math4.legacy.core",
    "docstring": "/**\n     * Compare the specified object with this entry for equality.\n     *\n     * @param o Object.\n     * @return {@code true} if the given object is also a map entry and\n     * the two entries represent the same mapping.\n     */",
    "source_code": "\n@Override\npublic boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (!(o instanceof Pair)) {\n        return false;\n    } else {\n        Pair<?, ?> oP = (Pair<?, ?>) o;\n        return (key == null ?\n                oP.key == null :\n                key.equals(oP.key)) &&\n            (value == null ?\n             oP.value == null :\n             value.equals(oP.value));\n    }\n}\n",
    "class_name": "Pair",
    "method_name": "equals",
    "arguments": [
        "Object o"
    ],
    "generate_test": [
        "@Test\n    public void equalsTest() {\n        Pair<String, Integer> pair1 = new Pair<>(\"foo\", 1);\n        Pair<String, Integer> pair2 = new Pair<>(\"foo\", 1);\n        Pair<String, Integer> pair3 = new Pair<>(\"bar\", 2);\n        \n        assertTrue(pair1.equals(pair2));\n        assertTrue(pair2.equals(pair1));\n        \n        assertFalse(pair1.equals(pair3));\n        assertFalse(pair3.equals(pair1));\n        \n        assertFalse(pair2.equals(pair3));\n        assertFalse(pair3.equals(pair2));\n    }",
        "java\nassertEquals(pair1.equals(pair2), pair2.equals(pair1));\nassertEquals(pair1.equals(pair2), pair1.equals(pair1));\nassertEquals(pair1.equals(pair2), pair2.equals(pair2));\nassertEquals(pair1.equals(pair2), pair1.equals(pair3));",
        "@Test\npublic void equalsTest() {\n    Pair<String, Integer> pair1 = new Pair<>(\"key\", 1);\n    Pair<String, Integer> pair2 = new Pair<>(\"key\", 1);\n    Pair<String, Integer> pair3 = new Pair<>(\"key\", 2);\n    Pair<String, Integer> pair4 = new Pair<>(null, null);\n    \n    // Check if pair1 is equal to itself\n    assertTrue(pair1.equals(pair1));\n    \n    // Check if pair1 is equal to pair2\n    assertTrue(pair1.equals(pair2));\n    \n    // Check if pair1 is equal to pair3\n    assertFalse(pair1.equals(pair3));\n    \n    // Check if pair1 is equal to pair4\n    assertFalse(pair1.equals(pair4));\n}",
        "@Test\npublic void equalsTest() {\n    Pair<String, Integer> pair1 = new Pair<>(\"a\", 1);\n    Pair<String, Integer> pair2 = new Pair<>(\"a\", 1);\n    Pair<String, Integer> pair3 = new Pair<>(\"b\", 2);\n\n    // Assert that pair1 is equal to pair2\n    assertTrue(pair1.equals(pair2));\n\n    // Assert that pair2 is equal to pair1\n    assertTrue(pair2.equals(pair1));\n\n    // Assert that pair1 is not equal to pair3\n    assertFalse(pair1.equals(pair3));\n\n    // Assert that pair3 is not equal to pair1\n    assertFalse(pair3.equals(pair1));\n}",
        "@Test\npublic void equalsTest() {\n    Pair<String, Integer> pair1 = new Pair<>(\"A\", 1);\n    Pair<String, Integer> pair2 = new Pair<>(\"A\", 1);\n    Pair<String, Integer> pair3 = new Pair<>(\"A\", 2);\n    \n    assertTrue(pair1.equals(pair2)); // Asserting that pair1 is equal to pair2\n    assertFalse(pair1.equals(pair3)); // Asserting that pair1 is not equal to pair3\n    \n    Pair<String, Integer> nullPair1 = new Pair<>(null, 1);\n    Pair<String, Integer> nullPair2 = new Pair<>(null, 1);\n    \n    assertTrue(nullPair1.equals(nullPair2)); // Asserting that nullPair1 is equal to nullPair2\n    \n    Pair<String, Integer> nullPair3 = new Pair<>(\"A\", null);\n    \n    assertFalse(nullPair1.equals(nullPair3)); // Asserting that nullPair1 is not equal to nullPair3\n    \n    Pair<String, Integer> nullPair4 = new Pair<>(null, null);\n    \n    assertTrue(nullPair4.equals(null)); // Asserting that nullPair4 is equal to null\n    \n    Pair<Integer, Integer> integerPair1 = new Pair<>(1, 1);\n    Pair<Integer, Integer> integerPair2 = new Pair<>(1, 1);\n    \n    assertTrue(integerPair1.equals(integerPair2)); // Asserting that integerPair1 is equal to integerPair2\n}",
        "@Test\npublic void equalsTest() {\n    Pair<Object, Object> pair1 = new Pair<>(\"key1\", \"value1\");\n    Pair<Object, Object> pair2 = new Pair<>(\"key1\", \"value1\");\n    Pair<Object, Object> pair3 = new Pair<>(\"key2\", \"value2\");\n\n    // Test when both pairs have the same key and value\n    assertTrue(pair1.equals(pair2));\n    \n    // Test when both pairs have different keys and values\n    assertFalse(pair1.equals(pair3));\n    \n    // Test when comparing with null\n    assertFalse(pair1.equals(null));\n    \n    // Test when comparing with invalid object type\n    assertFalse(pair1.equals(\"key1\"));\n}",
        "@Test\npublic void equalsTest() {\n    Pair<String, Integer> pair1 = new Pair<>(\"key\", 1);\n    Pair<String, Integer> pair2 = new Pair<>(\"key\", 1);\n    Pair<String, Integer> pair3 = new Pair<>(\"key\", 2);\n    \n    // Test equal pairs\n    assertTrue(pair1.equals(pair2));\n    assertTrue(pair2.equals(pair1));\n    \n    // Test not equal pairs\n    assertFalse(pair1.equals(pair3));\n    assertFalse(pair3.equals(pair1));\n    \n    // Test null cases\n    Pair<String, Integer> pair4 = new Pair<>(null, null);\n    Pair<String, Integer> pair5 = new Pair<>(null, 1);\n    Pair<String, Integer> pair6 = new Pair<>(\"key\", null);\n    \n    assertTrue(pair4.equals(pair4)); // Should be true for same object\n    assertTrue(pair4.equals(pair5));\n    assertTrue(pair5.equals(pair4));\n    assertFalse(pair4.equals(pair6));\n    assertFalse(pair6.equals(pair4));\n}",
        "@Test\npublic void equalsTest() {\n    Pair<Integer, String> p1 = new Pair<>(1, \"hello\");\n    Pair<Integer, String> p2 = new Pair<>(1, \"hello\");\n    Pair<Integer, String> p3 = new Pair<>(2, \"world\");\n    \n    // Test equal pairs\n    assertTrue(p1.equals(p2));\n    \n    // Test unequal pairs\n    assertFalse(p1.equals(p3));\n    \n    // Test with different types\n    assertFalse(p1.equals(\"hello\"));\n    \n    // Test with null values\n    Pair<Integer, String> p4 = new Pair<>(null, null);\n    Pair<Integer, String> p5 = new Pair<>(null, \"test\");\n    Pair<Integer, String> p6 = new Pair<>(1, null);\n    \n    assertTrue(p4.equals(new Pair<>(null, null)));\n    assertFalse(p4.equals(p1));\n    assertFalse(p5.equals(p1));\n    assertFalse(p6.equals(p1));\n}",
        "@Test\npublic void equalsTest() {\n    Object obj1 = new Object();\n    Object obj2 = new Object();\n    Pair<Object, Object> pair1 = new Pair<>(obj1, obj2);\n    Pair<Object, Object> pair2 = new Pair<>(obj1, obj2);\n    Pair<Object, Object> pair3 = new Pair<>(obj1, null);\n    \n    // Test equality between pair1 and pair2\n    assertTrue(pair1.equals(pair2));\n    \n    // Test equality between pair1 and pair3\n    assertFalse(pair1.equals(pair3));\n    \n    // Test equality between pair1 and null\n    assertFalse(pair1.equals(null));\n    \n    // Test equality between pair1 and a different type of object\n    assertFalse(pair1.equals(obj1));\n    \n    // Test equality between pair1 and pair1\n    assertTrue(pair1.equals(pair1));\n}",
        "@Test\npublic void equalsTest() {\n    Pair<Integer, String> pair1 = new Pair<>(1, \"One\");\n    Pair<Integer, String> pair2 = new Pair<>(1, \"One\");\n    Pair<Integer, String> pair3 = new Pair<>(2, \"Two\");\n\n    // Test when both pairs have equal keys and equal values\n    assertTrue(pair1.equals(pair2));\n    assertTrue(pair2.equals(pair1));\n    \n    // Test when both pairs have null keys and null values\n    Pair<String, Integer> pair4 = new Pair<>(null, null);\n    Pair<String, Integer> pair5 = new Pair<>(null, null);\n    assertTrue(pair4.equals(pair5));\n    assertTrue(pair5.equals(pair4));\n    \n    // Test when both pairs have different keys or different values\n    assertFalse(pair1.equals(pair3));\n    assertFalse(pair2.equals(pair3));\n    assertFalse(pair3.equals(pair1));\n    \n    // Test when comparing with a non-Pair object\n    assertFalse(pair1.equals(\"One\"));\n\n    // Test when comparing with null\n    assertFalse(pair1.equals(null));\n}"
    ]
}
{
    "project_name": "commons-math",
    "file_name": "Pair.java",
    "relative_path": "commons-math/commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/Pair.java",
    "execute_path": "commons-math/commons-math-legacy-core",
    "package": "org.apache.commons.math4.legacy.core",
    "docstring": "/**\n     * Compute a hash code.\n     *\n     * @return the hash code value.\n     */",
    "source_code": "\n@Override\npublic int hashCode() {\n    int result = key == null ? 0 : key.hashCode();\n\n    final int h = value == null ? 0 : value.hashCode();\n    result = 37 * result + h ^ (h >>> 16);\n\n    return result;\n}\n",
    "class_name": "Pair",
    "method_name": "hashCode",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void hashCodeTest() {\n    Pair pair = new Pair(\"key\", \"value\");\n    int expectedHashCode = pair.getKey().hashCode();\n    expectedHashCode = 37 * expectedHashCode + pair.getValue().hashCode() ^ (pair.getValue().hashCode() >>> 16);\n    int actualHashCode = pair.hashCode();\n    assertEquals(expectedHashCode, actualHashCode);\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair<String, Integer> pair = new Pair<>(\"key\", 5);\n    int expectedHashCode = 37 * (\"key\".hashCode()) + (5 == null ? 0 : 5.hashCode());\n    \n    assertEquals(expectedHashCode, pair.hashCode());\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair pair = new Pair(\"key\", \"value\");\n    int expectedHashCode = pair.hashCode();\n    int actualHashCode = 37 * (pair.getKey() == null ? 0 : pair.getKey().hashCode()) + (pair.getValue() == null ? 0 : pair.getValue().hashCode());\n\n    assertEquals(expectedHashCode, actualHashCode);\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair<String, Integer> pair = new Pair<>(\"key\", 10);\n    int expected = pair.hashCode();\n    int actual = pair.hashCode();\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair pair = new Pair(\"key\", \"value\");\n\n    assertEquals(pair.hashCode(), pair.hashCode());\n    \n    Pair pair2 = new Pair(null, \"value\");\n    assertEquals(pair2.hashCode(), pair2.hashCode());\n    \n    Pair pair3 = new Pair(\"key\", null);\n    assertEquals(pair3.hashCode(), pair3.hashCode());\n    \n    Pair pair4 = new Pair(null, null);\n    assertEquals(pair4.hashCode(), pair4.hashCode());\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair<String, Integer> pair = new Pair<>(\"A\", 1);\n    int expectedHashCode = 37 * (pair.getKey() == null ? 0 : pair.getKey().hashCode());\n    expectedHashCode += (pair.getValue() == null ? 0 : pair.getValue().hashCode());\n    expectedHashCode ^= (expectedHashCode >>> 16);\n    \n    int actualHashCode = pair.hashCode();\n    \n    assertEquals(expectedHashCode, actualHashCode);\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair pair1 = new Pair(\"key1\", \"value1\");\n    Pair pair2 = new Pair(\"key2\", \"value2\");\n\n    int hash1 = pair1.hashCode();\n    int hash2 = pair2.hashCode();\n    \n    assertNotEquals(hash1, hash2);\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair pair = new Pair(\"key\", \"value\");\n    int expected = pair.hashCode();\n    int actual = pair.hashCode();\n    assertEquals(expected, actual);\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair pair = new Pair(\"key\", \"value\");\n    int expectedHashCode = 37 * pair.getKey().hashCode() + pair.getValue().hashCode();\n    assertEquals(expectedHashCode, pair.hashCode());\n}",
        "@Test\npublic void hashCodeTest() {\n    Pair<String, Integer> pair = new Pair<>(\"key\", 5);\n    int expectedHashCode = pair.getKey() == null ? 0 : pair.getKey().hashCode();\n    int h = pair.getValue() == null ? 0 : pair.getValue().hashCode();\n    expectedHashCode = 37 * expectedHashCode + h ^ (h >>> 16);\n\n    int actualHashCode = pair.hashCode();\n\n    assertEquals(expectedHashCode, actualHashCode);\n}"
    ]
}
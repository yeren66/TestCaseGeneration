{
    "project_name": "jfreechart",
    "file_name": "JSONUtils.java",
    "relative_path": "jfreechart/src/main/java/org/jfree/data/json/JSONUtils.java",
    "execute_path": "jfreechart",
    "package": "org.jfree.data.json",
    "docstring": "/**\n     * Returns a string containing the data in JSON format.  The format is\n     * an array of arrays, where each sub-array represents one data value.\n     * The sub-array should contain two items, first the item key as a string\n     * and second the item value as a number.  For example:\n     * {@code [[\"Key A\", 1.0], [\"Key B\", 2.0]]}\n     * <br><br>\n     * Note that this method can be used with instances of {@link PieDataset}.\n     * \n     * @param data  the data ({@code null} not permitted).\n     * \n     * @return A string in JSON format. \n     */",
    "source_code": "\npublic static String writeKeyedValues(KeyedValues data) {\n    Args.nullNotPermitted(data, \"data\");\n    StringWriter sw = new StringWriter();\n    try {\n        writeKeyedValues(data, sw);\n    } catch (IOException ex) {\n        throw new RuntimeException(ex);\n    }\n    return sw.toString();\n}\n",
    "class_name": "JSONUtils",
    "method_name": "writeKeyedValues",
    "arguments": [
        "KeyedValues data"
    ],
    "generate_test": [
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        KeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"A\", 100);\n        data.addValue(\"B\", 200);\n        data.addValue(\"C\", 300);\n\n        String expectedOutput = \"A=100\\nB=200\\nC=300\\n\";\n\n        String result = JSONUtils.writeKeyedValues(data);\n        assertEquals(expectedOutput, result);\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        // create a KeyedValues object for testing\n        KeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"A\", 1.0);\n        data.addValue(\"B\", 2.0);\n        data.addValue(\"C\", 3.0);\n\n        // call the method and get the result\n        String result = JSONUtils.writeKeyedValues(data);\n\n        // assert the result\n        assertEquals(\"{\\\"A\\\":1.0,\\\"B\\\":2.0,\\\"C\\\":3.0}\", result);\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        // Create a sample KeyedValues object\n        KeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"A\", 1);\n        data.addValue(\"B\", 2);\n        data.addValue(\"C\", 3);\n\n        // Call the writeKeyedValues() method\n        String result = JSONUtils.writeKeyedValues(data);\n\n        // Assertions\n        assertEquals(\"{\\\"data\\\":[{\\\"key\\\":\\\"A\\\",\\\"value\\\":1},{\\\"key\\\":\\\"B\\\",\\\"value\\\":2},{\\\"key\\\":\\\"C\\\",\\\"value\\\":3}]}\", result);\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        // Create a sample KeyedValues object\n        KeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"A\", 10);\n        data.addValue(\"B\", 20);\n        data.addValue(\"C\", 30);\n\n        // Expected output\n        String expectedOutput = \"A=10, B=20, C=30\";\n\n        // Call the method under test\n        String actualOutput = JSONUtils.writeKeyedValues(data);\n\n        // Compare the expected output with the actual output\n        assertEquals(expectedOutput, actualOutput);\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        KeyedValues data = new KeyedValuesStub(); // Replace with your test data\n        \n        String result = JSONUtils.writeKeyedValues(data);\n        \n        assertNotNull(result);\n        // Add additional assertions to verify the correctness of the output\n    }\n}",
        "@Test\npublic void writeKeyedValuesTest() {\n    // create a test KeyedValues object\n    KeyedValues data = new DefaultKeyedValues();\n    data.addValue(\"A\", 1);\n    data.addValue(\"B\", 2);\n    data.addValue(\"C\", 3);\n\n    // call the writeKeyedValues method and assert the result\n    String result = JSONUtils.writeKeyedValues(data);\n    assertEquals(\"{\\\"A\\\":1.0,\\\"B\\\":2.0,\\\"C\\\":3.0}\", result);\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        // Create a sample KeyedValues object\n        KeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"A\", 10);\n        data.addValue(\"B\", 20);\n\n        // Call the method to be tested\n        String result = JSONUtils.writeKeyedValues(data);\n\n        // Assert that the result is not null\n        assertNotNull(result);\n\n        // Assert that the result is a non-empty string\n        assertTrue(result.length() > 0);\n\n        // Add additional assertions if necessary\n    }\n}",
        "package org.jfree.data.json;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        // Create a KeyedValues object\n        KeyedValues data = new KeyedValues() {\n            @Override\n            public int getItemCount() {\n                return 0;\n            }\n\n            @Override\n            public Number getValue(int index) {\n                return null;\n            }\n\n            @Override\n            public Comparable getKey(int index) {\n                return null;\n            }\n\n            @Override\n            public int getIndex(Comparable key) {\n                return 0;\n            }\n\n            @Override\n            public List getKeys() {\n                return null;\n            }\n\n            @Override\n            public Number getValue(Comparable key) {\n                return null;\n            }\n        };\n\n        // Call the writeKeyedValues method\n        String result = JSONUtils.writeKeyedValues(data);\n\n        // Assert the expected output\n        assertEquals(\"\", result); // replace \"\" with your expected output\n    }\n}",
        "import java.io.IOException;\n\nimport java.io.StringWriter;\n\nimport org.jfree.data.KeyedValues;\n\nimport org.jfree.data.json.JSONUtils;\n\npublic class JSONUtilsTest {\n    @Test\n    public void writeKeyedValuesTest() {\n        // Create the KeyedValues data\n        KeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"A\", 10);\n        data.addValue(\"B\", 20);\n        data.addValue(\"C\", 30);\n        \n        // Call the method to test\n        String result = JSONUtils.writeKeyedValues(data);\n        \n        // Assert the result\n        assertEquals(\"{\\\"A\\\":10.0,\\\"B\\\":20.0,\\\"C\\\":30.0}\", result);\n    }\n}",
        "@Test\npublic void writeKeyedValuesTest() {\n    // Creating a sample KeyedValues object\n    KeyedValues data = new DefaultKeyedValues();\n    data.addValue(\"A\", 1.0);\n    data.addValue(\"B\", 2.0);\n    data.addValue(\"C\", 3.0);\n    \n    // Invoking the method and capturing the result\n    String result = JSONUtils.writeKeyedValues(data);\n    \n    // Asserting the expected result\n    assertEquals(\"A=1.0, B=2.0, C=3.0\", result);\n}"
    ]
}
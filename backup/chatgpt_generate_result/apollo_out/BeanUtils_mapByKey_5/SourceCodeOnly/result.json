{
    "project_name": "apollo",
    "file_name": "BeanUtils.java",
    "relative_path": "apollo/apollo-common/src/main/java/com/ctrip/framework/apollo/common/utils/BeanUtils.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.common.utils",
    "docstring": "/**\n   * \u7528\u4e8e\u5c06\u4e00\u4e2a\u5217\u8868\u8f6c\u6362\u4e3a\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\u7684\u67d0\u4e2a\u5c5e\u6027\u6620\u5c04\u5230\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\n   *\n   * <pre>\n   *      List<UserDTO> userList = userService.queryUsers();\n   *      Map<Integer, userDTO> userIdToUser = BeanUtil.mapByKey(\"userId\", userList);\n   * </pre>\n   *\n   * @param key \u5c5e\u6027\u540d\n   */",
    "source_code": "\n@SuppressWarnings(\"unchecked\")\npublic static <K, V> Map<K, V> mapByKey(String key, List<?> list) {\n  Map<K, V> map = new HashMap<>();\n  if (CollectionUtils.isEmpty(list)) {\n    return map;\n  }\n  try {\n    Class<?> clazz = list.get(0).getClass();\n    Field field = deepFindField(clazz, key);\n    if (field == null) {\n        throw new IllegalArgumentException(\"Could not find the key\");\n    }\n    field.setAccessible(true);\n    for (Object o : list) {\n      map.put((K) field.get(o), (V) o);\n    }\n  } catch (Exception e) {\n    throw new BeanUtilsException(e);\n  }\n  return map;\n}\n",
    "class_name": "BeanUtils",
    "method_name": "mapByKey",
    "arguments": [
        "String key",
        "List<> list"
    ],
    "generate_test": [
        "@Test\npublic void mapByKeyTest() {\n    List<Object> list = new ArrayList<>();\n    list.add(new Person(\"John\", 25));\n    list.add(new Person(\"Jane\", 30));\n    list.add(new Person(\"Mike\", 35));\n    Map<String, Person> expectedMap = new HashMap<>();\n    expectedMap.put(\"John\", new Person(\"John\", 25));\n    expectedMap.put(\"Jane\", new Person(\"Jane\", 30));\n    expectedMap.put(\"Mike\", new Person(\"Mike\", 35));\n    \n    Map<String, Person> actualMap = BeanUtils.mapByKey(\"name\", list);\n    \n    assertEquals(expectedMap, actualMap);\n}",
        "@Test\npublic void mapByKeyTest() {\n    List<Person> list = new ArrayList<>();\n    Person person1 = new Person(\"John\", 25);\n    Person person2 = new Person(\"Alice\", 30);\n    Person person3 = new Person(\"Bob\", 35);\n    list.add(person1);\n    list.add(person2);\n    list.add(person3);\n    \n    Map<String, Person> resultMap = mapByKey(\"name\", list);\n    \n    assertEquals(3, resultMap.size());\n    assertEquals(person1, resultMap.get(\"John\"));\n    assertEquals(person2, resultMap.get(\"Alice\"));\n    assertEquals(person3, resultMap.get(\"Bob\"));\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.*;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        // Create a test list with some objects\n        List<TestObject> list = new ArrayList<>();\n        list.add(new TestObject(1, \"One\"));\n        list.add(new TestObject(2, \"Two\"));\n        list.add(new TestObject(3, \"Three\"));\n\n        // Call the mapByKey method and store the result\n        Map<Integer, TestObject> result = BeanUtils.mapByKey(\"id\", list);\n\n        // Verify the result\n        assertEquals(3, result.size());\n        assertEquals(\"One\", result.get(1).getValue());\n        assertEquals(\"Two\", result.get(2).getValue());\n        assertEquals(\"Three\", result.get(3).getValue());\n    }\n\n    // TestObject class for testing purposes\n    private static class TestObject {\n        private int id;\n        private String value;\n\n        public TestObject(int id, String value) {\n            this.id = id;\n            this.value = value;\n        }\n\n        public int getId() {\n            return id;\n        }\n\n        public String getValue() {\n            return value;\n        }\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.*;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        List<Object> list = new ArrayList<>();\n        // <FILL> - add objects to the list\n        \n        Map<String, Object> expectedMap = new HashMap<>();\n        // <FILL> - create a map containing the expected key-value pairs\n        \n        Map<String, Object> actualMap = BeanUtils.mapByKey(\"key\", list);\n        \n        assertEquals(expectedMap, actualMap);\n    }\n}",
        "@Test\npublic void mapByKeyTest() {\n    List<Person> personList = new ArrayList<>();\n    Person person1 = new Person(\"John\", 25);\n    Person person2 = new Person(\"Emily\", 30);\n    personList.add(person1);\n    personList.add(person2);\n\n    Map<String, Person> resultMap = BeanUtils.mapByKey(\"name\", personList);\n\n    assertNotNull(resultMap);\n    assertEquals(2, resultMap.size());\n    assertEquals(person1, resultMap.get(\"John\"));\n    assertEquals(person2, resultMap.get(\"Emily\"));\n}",
        "@Test\npublic void mapByKeyTest() {\n    List<String> list = new ArrayList<>();\n    list.add(\"apple\");\n    list.add(\"banana\");\n    list.add(\"cherry\");\n\n    Map<String, String> expected = new HashMap<>();\n    expected.put(\"apple\", \"apple\");\n    expected.put(\"banana\", \"banana\");\n    expected.put(\"cherry\", \"cherry\");\n\n    Map<String, String> result = BeanUtils.mapByKey(\"toString\", list);\n\n    assertEquals(expected, result);\n}",
        "@Test\npublic void mapByKeyTest() {\n    List<Object> list = new ArrayList<>();\n    list.add(new MyClass(\"key1\", \"value1\"));\n    list.add(new MyClass(\"key2\", \"value2\"));\n    \n    Map<String, MyClass> expected = new HashMap<>();\n    expected.put(\"key1\", new MyClass(\"key1\", \"value1\"));\n    expected.put(\"key2\", new MyClass(\"key2\", \"value2\"));\n    \n    Map<String, MyClass> actual = BeanUtils.mapByKey(\"key\", list);\n    \n    assertEquals(expected, actual);\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        // Create a list of objects\n        List<MyClass> myList = new ArrayList<>();\n        myList.add(new MyClass(\"key1\", \"value1\"));\n        myList.add(new MyClass(\"key2\", \"value2\"));\n        myList.add(new MyClass(\"key3\", \"value3\"));\n        \n        // Call the method to be tested\n        Map<String, MyClass> resultMap = BeanUtils.mapByKey(\"key\", myList);\n        \n        // Verify the result\n        assertNotNull(resultMap);\n        assertEquals(3, resultMap.size());\n        assertEquals(\"value1\", resultMap.get(\"key1\").getValue());\n        assertEquals(\"value2\", resultMap.get(\"key2\").getValue());\n        assertEquals(\"value3\", resultMap.get(\"key3\").getValue());\n    }\n    \n    private class MyClass {\n        private String key;\n        private String value;\n        \n        public MyClass(String key, String value) {\n            this.key = key;\n            this.value = value;\n        }\n        \n        public String getKey() {\n            return key;\n        }\n        \n        public String getValue() {\n            return value;\n        }\n    }\n}",
        "Map<String, Object> resultMap = BeanUtilsTest.mapByKey(\"key\", new ArrayList<>());\nassertEquals(0, resultMap.size());",
        "@Test\npublic void mapByKeyTest() {\n    List<Integer> list = Arrays.asList(1, 2, 3);\n    Map<Integer, Integer> expectedMap = new HashMap<>();\n    expectedMap.put(1, 1);\n    expectedMap.put(2, 2);\n    expectedMap.put(3, 3);\n    \n    Map<Integer, Integer> actualMap = BeanUtils.mapByKey(\"key\", list);\n    \n    assertEquals(expectedMap, actualMap);\n}"
    ]
}
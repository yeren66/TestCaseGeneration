{
    "project_name": "apollo",
    "file_name": "BeanUtils.java",
    "relative_path": "apollo/apollo-common/src/main/java/com/ctrip/framework/apollo/common/utils/BeanUtils.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.common.utils",
    "docstring": "/**\n   * \u7528\u4e8e\u5c06\u4e00\u4e2a\u5217\u8868\u8f6c\u6362\u4e3a\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\u7684\u67d0\u4e2a\u5c5e\u6027\u6620\u5c04\u5230\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\n   *\n   * <pre>\n   *      List<UserDTO> userList = userService.queryUsers();\n   *      Map<Integer, userDTO> userIdToUser = BeanUtil.mapByKey(\"userId\", userList);\n   * </pre>\n   *\n   * @param key \u5c5e\u6027\u540d\n   */",
    "source_code": "\n@SuppressWarnings(\"unchecked\")\npublic static <K, V> Map<K, V> mapByKey(String key, List<?> list) {\n  Map<K, V> map = new HashMap<>();\n  if (CollectionUtils.isEmpty(list)) {\n    return map;\n  }\n  try {\n    Class<?> clazz = list.get(0).getClass();\n    Field field = deepFindField(clazz, key);\n    if (field == null) {\n        throw new IllegalArgumentException(\"Could not find the key\");\n    }\n    field.setAccessible(true);\n    for (Object o : list) {\n      map.put((K) field.get(o), (V) o);\n    }\n  } catch (Exception e) {\n    throw new BeanUtilsException(e);\n  }\n  return map;\n}\n",
    "class_name": "BeanUtils",
    "method_name": "mapByKey",
    "arguments": [
        "String key",
        "List<> list"
    ],
    "generate_test": [
        "@Test\npublic void mapByKeyTest() {\n    // Test data\n    List<UserDTO> userList = new ArrayList<>();\n    UserDTO user1 = new UserDTO();\n    user1.setUserId(1);\n    user1.setUserName(\"John\");\n    UserDTO user2 = new UserDTO();\n    user2.setUserId(2);\n    user2.setUserName(\"Jane\");\n    userList.add(user1);\n    userList.add(user2);\n    \n    // Invoking the method to be tested\n    Map<Integer, UserDTO> resultMap = BeanUtils.mapByKey(\"userId\", userList);\n    \n    // Assertions\n    assertEquals(user1, resultMap.get(1));\n    assertEquals(user2, resultMap.get(2));\n}\n",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.*;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        List<UserDTO> users = new ArrayList<>();\n        users.add(new UserDTO(1, \"John\"));\n        users.add(new UserDTO(2, \"Jane\"));\n        \n        // Act\n        Map<Integer, UserDTO> map = BeanUtils.mapByKey(\"userId\", users);\n        \n        // Assert\n        assertNotNull(map);\n        assertEquals(2, map.size());\n        assertTrue(map.containsKey(1));\n        assertTrue(map.containsKey(2));\n        assertEquals(users.get(0), map.get(1));\n        assertEquals(users.get(1), map.get(2));\n    }\n}",
        "@Test\npublic void mapByKeyTest() {\n    // Given\n    List<UserDTO> userList = new ArrayList<>();\n    UserDTO user1 = new UserDTO();\n    user1.setUserId(1);\n    user1.setUserName(\"John\");\n    userList.add(user1);\n    UserDTO user2 = new UserDTO();\n    user2.setUserId(2);\n    user2.setUserName(\"Jane\");\n    userList.add(user2);\n\n    // When\n    Map<Integer, UserDTO> resultMap = BeanUtils.mapByKey(\"userId\", userList);\n\n    // Then\n    assertEquals(2, resultMap.size());\n    assertEquals(user1, resultMap.get(1));\n    assertEquals(user2, resultMap.get(2));\n}",
        "@SuppressWarnings(\"unchecked\")\n@Test\npublic void mapByKeyTest() {\n    // Given\n    String key = \"userId\";\n    List<UserDTO> userList = new ArrayList<>();\n    userList.add(new UserDTO(1, \"John\"));\n    userList.add(new UserDTO(2, \"Jane\"));\n\n    // When\n    Map<Integer, UserDTO> result = BeanUtils.mapByKey(key, userList);\n    \n    // Then\n    assertEquals(2, result.size());\n    assertEquals(\"John\", result.get(1).getName());\n    assertEquals(\"Jane\", result.get(2).getName());\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        List<UserDTO> userList = userService.queryUsers();\n        Map<Integer, UserDTO> userIdToUser = BeanUtil.mapByKey(\"userId\", userList);\n\n        for (UserDTO user : userList) {\n            assertEquals(user, userIdToUser.get(user.getUserId()));\n        }\n    }\n}",
        "package com.ctrip.framework.apollo.common.utils;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.*;\n\npublic class BeanUtilsTest {\n    @Test\n    public void mapByKeyTest() {\n        // Prepare test data\n        List<UserDTO> userList = new ArrayList<>();\n        UserDTO user1 = new UserDTO();\n        user1.setUserId(1);\n        user1.setUsername(\"user1\");\n        userList.add(user1);\n        UserDTO user2 = new UserDTO();\n        user2.setUserId(2);\n        user2.setUsername(\"user2\");\n        userList.add(user2);\n        \n        // Invoke the method to be tested\n        Map<Integer, UserDTO> map = BeanUtils.mapByKey(\"userId\", userList);\n        \n        // Assertions\n        assertNotNull(map);\n        assertEquals(2, map.size());\n        assertTrue(map.containsKey(1));\n        assertTrue(map.containsKey(2));\n        assertEquals(user1, map.get(1));\n        assertEquals(user2, map.get(2));\n    }\n}",
        "@Test\npublic void mapByKeyTest() {\n    List<UserDTO> userList = new ArrayList<>();\n    userList.add(new UserDTO(1, \"John\"));\n    userList.add(new UserDTO(2, \"Jane\"));\n    \n    Map<Integer, UserDTO> expectedMap = new HashMap<>();\n    expectedMap.put(1, new UserDTO(1, \"John\"));\n    expectedMap.put(2, new UserDTO(2, \"Jane\"));\n    \n    Map<Integer, UserDTO> actualMap = BeanUtils.mapByKey(\"userId\", userList);\n    \n    assertEquals(expectedMap, actualMap);\n}",
        "@Test\npublic void mapByKeyTest() {\n    List<UserDTO> userList = new ArrayList<>();\n    UserDTO user1 = new UserDTO();\n    user1.setUserId(1);\n    user1.setUsername(\"John\");\n    userList.add(user1);\n\n    UserDTO user2 = new UserDTO();\n    user2.setUserId(2);\n    user2.setUsername(\"Jane\");\n    userList.add(user2);\n\n    Map<Integer, UserDTO> map = BeanUtils.mapByKey(\"userId\", userList);\n\n    assertEquals(user1, map.get(1));\n    assertEquals(user2, map.get(2));\n}",
        "@Test\npublic void mapByKeyTest() {\n    List<Foo> list = new ArrayList<>();\n    Foo foo1 = new Foo(\"key1\");\n    Foo foo2 = new Foo(\"key2\");\n    list.add(foo1);\n    list.add(foo2);\n    \n    Map<String, Foo> map = BeanUtils.mapByKey(\"key\", list);\n    \n    assertEquals(map.get(\"key1\"), foo1);\n    assertEquals(map.get(\"key2\"), foo2);\n}",
        "@Test\npublic void mapByKeyTest() {\n    // Given\n    String key = \"userId\";\n    List<UserDTO> userList = new ArrayList<>();\n    UserDTO user1 = new UserDTO(1, \"John\");\n    UserDTO user2 = new UserDTO(2, \"Alice\");\n    userList.add(user1);\n    userList.add(user2);\n    \n    // When\n    Map<Integer, UserDTO> result = BeanUtils.mapByKey(key, userList);\n    \n    // Then\n    assertEquals(2, result.size()); // Assert that the size of the map is correct\n    assertEquals(user1, result.get(1)); // Assert that the value for key 1 is user1\n    assertEquals(user2, result.get(2)); // Assert that the value for key 2 is user2\n}"
    ]
}
{
    "project_name": "apollo",
    "file_name": "DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl.java",
    "relative_path": "apollo/apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/registry/DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.biz.registry",
    "docstring": "/**\n   * if the serviceName is same with self, always return self's instance\n   * @return never be empty list when serviceName is same with self\n   */",
    "source_code": "\n@Override\npublic List<ServiceInstance> getInstances(String serviceName) {\n  if (Objects.equals(serviceName, this.selfInstance.getServiceName())) {\n    List<ServiceInstance> serviceInstances = this.delegate.getInstances(serviceName);\n    if (containSelf(serviceInstances, this.selfInstance)) {\n      // contains self instance already\n      return serviceInstances;\n    }\n\n    // add self instance to result\n    List<ServiceInstance> result = new ArrayList<>(serviceInstances.size() + 1);\n    result.add(this.selfInstance);\n    result.addAll(serviceInstances);\n    return result;\n  } else {\n    return this.delegate.getInstances(serviceName);\n  }\n}\n",
    "class_name": "DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl",
    "method_name": "getInstances",
    "arguments": [
        "String serviceName"
    ],
    "generate_test": [
        "@Test\n    public void getInstancesTest() {\n        // Create an instance of DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl\n        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl();\n        \n        // Set the selfInstance property of the decorator\n        \n        // Call the getInstances method with a serviceName that is equal to the selfInstance's serviceName\n        List<ServiceInstance> result = decorator.getInstances(decorator.getSelfInstance().getServiceName());\n        \n        // Assert that the result is not null\n        \n        // Assert that the result contains the selfInstance\n        \n        // Assert that the result contains all the serviceInstances from the delegate\n        \n        // Call the getInstances method with a serviceName that is not equal to the selfInstance's serviceName\n        List<ServiceInstance> result2 = decorator.getInstances(\"someServiceName\");\n        \n        // Assert that the result2 is not null\n        \n        // Assert that the result2 is equal to the result from the delegate\n    }",
        "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    @Test\n    public void getInstancesTest() {\n        // Create an instance of the class under test\n        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl();\n\n        // Set up test data\n        String serviceName = \"exampleService\";\n        ServiceInstance selfInstance = new ServiceInstance(); // Create a mock instance of ServiceInstance\n        List<ServiceInstance> serviceInstances = new ArrayList<>(); // Create a mock list of ServiceInstances\n        serviceInstances.add(new ServiceInstance()); // Add some mock ServiceInstances to the list\n\n        // Set the selfInstance and delegate field values in the decorator to the mock values\n        decorator.setSelfInstance(selfInstance);\n        decorator.setDelegate(new DelegateClassMock(serviceInstances));\n\n        // Call the method under test\n        List<ServiceInstance> result = decorator.getInstances(serviceName);\n\n        // Assert the result\n        assertNotNull(result);\n        assertEquals(serviceInstances.size() + 1, result.size());\n        assertEquals(selfInstance, result.get(0));\n        assertEquals(serviceInstances, result.subList(1, result.size()));\n    }\n}",
        "@Test\npublic void getInstancesTest() {\n  // Step1: Create a DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl object\n  DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl();\n\n  // Step2: Set up necessary variables, such as serviceName and selfInstance\n  String serviceName = \"exampleService\";\n  ServiceInstance selfInstance = new ServiceInstance();\n\n  // Step3: Set up the delegate and mock its behavior\n  DiscoveryClient delegate = Mockito.mock(DiscoveryClient.class);\n  when(delegate.getInstances(serviceName)).thenReturn(new ArrayList<>());\n\n  // Step4: Set up the decorator with the delegate and self instance\n  decorator.setDelegate(delegate);\n  decorator.setSelfInstance(selfInstance);\n\n  // Step5: Call the method under test\n  List<ServiceInstance> result = decorator.getInstances(serviceName);\n  \n  // Step6: Assert the expected result\n  // Create the expected result\n  List<ServiceInstance> expected = new ArrayList<>();\n  expected.add(selfInstance);\n\n  // Verify the result\n  assertEquals(expected, result);\n}",
        "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    @Test\n    public void getInstancesTest() {\n        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl();\n        ServiceInstance selfInstance = new ServiceInstance(\"selfInstance\", \"localhost\", 8080);\n        decorator.setSelfInstance(selfInstance);\n\n        // Test case for serviceName equal to selfInstance.getServiceName()\n        List<ServiceInstance> expected = new ArrayList<>();\n        expected.add(selfInstance);\n        expected.add(new ServiceInstance(\"instance1\", \"localhost\", 8081));\n        expected.add(new ServiceInstance(\"instance2\", \"localhost\", 8082));\n        List<ServiceInstance> actual = decorator.getInstances(\"selfInstance\");\n        assertEquals(expected, actual, \"Test case failed for serviceName equal to selfInstance.getServiceName()\");\n\n        // Test case for serviceName not equal to selfInstance.getServiceName()\n        expected = new ArrayList<>();\n        expected.add(new ServiceInstance(\"instance3\", \"localhost\", 8083));\n        expected.add(new ServiceInstance(\"instance4\", \"localhost\", 8084));\n        actual = decorator.getInstances(\"serviceName\");\n        assertEquals(expected, actual, \"Test case failed for serviceName not equal to selfInstance.getServiceName()\");\n    }\n}",
        "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    \n    @Test\n    public void getInstancesTest() {\n        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl instance = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl();\n        \n        // Test case 1: Service name equals self instance's service name\n        String serviceName1 = \"exampleService\";\n        List<ServiceInstance> expectedResult1 = new ArrayList<>();\n        // Add self instance to the expected result\n        expectedResult1.add(instance.selfInstance);\n        // Add all service instances to the expected result\n        expectedResult1.addAll(instance.delegate.getInstances(serviceName1));\n        \n        List<ServiceInstance> actualResult1 = instance.getInstances(serviceName1);\n        \n        assertEquals(expectedResult1, actualResult1);\n        \n        // Test case 2: Service name does not equal self instance's service name\n        String serviceName2 = \"anotherService\";\n        List<ServiceInstance> expectedResult2 = instance.delegate.getInstances(serviceName2);\n        \n        List<ServiceInstance> actualResult2 = instance.getInstances(serviceName2);\n        \n        assertEquals(expectedResult2, actualResult2);\n    }\n}",
        "@Test\npublic void getInstancesTest() {\n  String serviceName = \"testService\";\n  DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl client = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl();\n\n  client.selfInstance = new ServiceInstance(\"localhost\", 8080, \"testService\");\n  client.delegate = new DatabaseDiscoveryClient();\n\n  // Test case 1: When serviceName is equal to selfInstance's serviceName\n  List<ServiceInstance> serviceInstances1 = client.getInstances(serviceName);\n  assertTrue(serviceInstances1.contains(client.selfInstance));\n\n  // Test case 2: When serviceName is not equal to selfInstance's serviceName\n  serviceName = \"otherService\";\n  List<ServiceInstance> serviceInstances2 = client.getInstances(serviceName);\n  assertFalse(serviceInstances2.contains(client.selfInstance));\n}",
        "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    @Test\n    public void getInstancesTest() {\n        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl();\n        // Call the getInstances method and pass a test service name\n        // Verify that the returned list contains the selfInstance added to the result\n        List<ServiceInstance> instances = decorator.getInstances(\"testService\");\n        assertTrue(instances.contains(decorator.selfInstance));\n    }\n}",
        "@Override\npublic List<ServiceInstance> getInstances(String serviceName) {\n  if (Objects.equals(serviceName, this.selfInstance.getServiceName())) {\n    List<ServiceInstance> serviceInstances = this.delegate.getInstances(serviceName);\n    if (containSelf(serviceInstances, this.selfInstance)) {\n      // contains self instance already\n      return serviceInstances;\n    }\n\n    // add self instance to result\n    List<ServiceInstance> result = new ArrayList<>(serviceInstances.size() + 1);\n    result.add(this.selfInstance);\n    result.addAll(serviceInstances);\n    return result;\n  } else {\n    return this.delegate.getInstances(serviceName);\n  }\n}\n\n    \n\n### JUNIT Test case:\npackage com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    @Test\n    public void getInstancesTest() {\n        // Create a mock instance of DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl\n        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = mock(DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl.class);\n\n        // Create the self instance\n        ServiceInstance selfInstance = new ServiceInstance();\n        selfInstance.setServiceName(\"testService\"); // Replace with actual service name\n\n        // Create the delegate instance\n        DatabaseDiscoveryClientImpl delegate = mock(DatabaseDiscoveryClientImpl.class);\n        when(decorator.getDelegate()).thenReturn(delegate);\n        \n        // Create the list of service instances\n        List<ServiceInstance> serviceInstances = new ArrayList<>();\n        serviceInstances.add(selfInstance);\n        when(delegate.getInstances(anyString())).thenReturn(serviceInstances); // replace anyString() with actual service name\n\n        // Call the getInstances method on the decorator\n        List<ServiceInstance> result = decorator.getInstances(\"testService\"); // Replace with actual service name\n\n        // Verify that the delegate's getInstances method was called with the correct argument\n        verify(delegate, times(1)).getInstances(\"testService\");\n\n        // Verify that the result contains the self instance in the first position\n        assertEquals(selfInstance, result.get(0));\n\n        // Verify that the result contains all the service instances from the delegate\n        assertEquals(serviceInstances.size(), result.size() - 1); // Subtract 1 to exclude the self instance\n        assertTrue(result.containsAll(serviceInstances.subList(1, serviceInstances.size()))); // Exclude the self instance\n    }\n}",
        "\npackage com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    @Test\n    public void getInstancesTest() {\n        // create an instance of the class under test\n        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl();\n        \n        // set up the self instance\n        ServiceInstance selfInstance = new ServiceInstance();\n        decorator.setSelfInstance(selfInstance);\n        \n        // set up the service name\n        String serviceName = \"testService\";\n        \n        // set up the mock delegate\n        DatabaseDiscoveryClient mockDelegate = Mockito.mock(DatabaseDiscoveryClient.class);\n        decorator.setDelegate(mockDelegate);\n        \n        // set up the mock service instances\n        List<ServiceInstance> serviceInstances = new ArrayList<>();\n        ServiceInstance instance1 = new ServiceInstance();\n        ServiceInstance instance2 = new ServiceInstance();\n        ServiceInstance instance3 = new ServiceInstance();\n        serviceInstances.add(instance1);\n        serviceInstances.add(instance2);\n        serviceInstances.add(instance3);\n        \n        // specify behavior of delegate.getInstances()\n        Mockito.when(mockDelegate.getInstances(serviceName)).thenReturn(serviceInstances);\n        \n        // invoke the method under test\n        List<ServiceInstance> result = decorator.getInstances(serviceName);\n        \n        // verify the result\n        assertEquals(serviceInstances.size() + 1, result.size());\n        assertEquals(selfInstance, result.get(0));\n        assertTrue(result.contains(instance1));\n        assertTrue(result.contains(instance2));\n        assertTrue(result.contains(instance3));\n    }\n}\n",
        "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.Mockito;\nimport java.util.List;\nimport org.springframework.cloud.client.ServiceInstance;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n  \n    @Test\n    public void getInstancesTest() {\n        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl();\n        List<ServiceInstance> serviceInstances = // create a mock list of ServiceInstance objects\n        Mockito.when(decorator.getInstances(\"serviceName\")).thenReturn(serviceInstances);\n        \n        // Test when serviceName is equal to selfInstance.getServiceName()\n        List<ServiceInstance> result1 = decorator.getInstances(\"serviceName\");\n        \n        // Check that the self instance is added to the result list\n        assertEquals(serviceInstances.size() + 1, result1.size());\n        assertTrue(result1.contains(decorator.selfInstance));\n        assertTrue(result1.containsAll(serviceInstances));\n        \n        // Test when serviceName is not equal to selfInstance.getServiceName()\n        List<ServiceInstance> result2 = decorator.getInstances(\"otherServiceName\");\n        \n        // Check that the delegate's getInstances method is called\n        Mockito.verify(decorator.delegate).getInstances(\"otherServiceName\");\n        assertEquals(serviceInstances, result2);\n    }\n}"
    ]
}
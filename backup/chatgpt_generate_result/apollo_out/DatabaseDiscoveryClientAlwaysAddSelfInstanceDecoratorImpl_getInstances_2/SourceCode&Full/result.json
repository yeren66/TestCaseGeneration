{
    "project_name": "apollo",
    "file_name": "DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl.java",
    "relative_path": "apollo/apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/registry/DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.biz.registry",
    "docstring": "/**\n   * if the serviceName is same with self, always return self's instance\n   * @return never be empty list when serviceName is same with self\n   */",
    "source_code": "\n@Override\npublic List<ServiceInstance> getInstances(String serviceName) {\n  if (Objects.equals(serviceName, this.selfInstance.getServiceName())) {\n    List<ServiceInstance> serviceInstances = this.delegate.getInstances(serviceName);\n    if (containSelf(serviceInstances, this.selfInstance)) {\n      // contains self instance already\n      return serviceInstances;\n    }\n\n    // add self instance to result\n    List<ServiceInstance> result = new ArrayList<>(serviceInstances.size() + 1);\n    result.add(this.selfInstance);\n    result.addAll(serviceInstances);\n    return result;\n  } else {\n    return this.delegate.getInstances(serviceName);\n  }\n}\n",
    "class_name": "DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl",
    "method_name": "getInstances",
    "arguments": [
        "String serviceName"
    ],
    "generate_test": [
        "@Test\npublic void getInstancesTest() {\n    // Arrange\n    DatabaseDiscoveryClient delegate = mock(DatabaseDiscoveryClient.class);\n    ServiceInstance selfInstance = new ServiceInstance(\"self\", new URI(\"http://localhost\"), \"cluster\");\n    DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n    List<ServiceInstance> serviceInstances = new ArrayList<>();\n    serviceInstances.add(new ServiceInstance(\"instance1\", new URI(\"http://localhost:8080\"), \"cluster\"));\n    \n    // Act\n    when(delegate.getInstances(\"self\")).thenReturn(serviceInstances);\n    List<ServiceInstance> result = decorator.getInstances(\"self\");\n    \n    // Assert\n    assertTrue(result.contains(selfInstance));\n    assertEquals(serviceInstances.size() + 1, result.size());\n}",
        "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    @Test\n    public void getInstancesTest() {\n        DatabaseDiscoveryClient delegate = new DatabaseDiscoveryClient() {\n            @Override\n            public List<ServiceInstance> getInstances(String serviceName) {\n                List<ServiceInstance> serviceInstances = new ArrayList<>();\n                serviceInstances.add(new ServiceInstance(\"ServiceA\", \"http://localhost:8080\", \"clusterA\"));\n                serviceInstances.add(new ServiceInstance(\"ServiceA\", \"http://localhost:8081\", \"clusterA\"));\n                serviceInstances.add(new ServiceInstance(\"ServiceB\", \"http://localhost:8082\", \"clusterB\"));\n                return serviceInstances;\n            // this is a mock delegate to be used in the test, you may need to customize it based on your specific implementation and needs\n            // replace the above code with your actual implementation\n            }\n        };\n\n        ServiceInstance selfInstance = new ServiceInstance(\"ServiceA\", \"http://localhost:8083\", \"clusterA\");\n\n        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n\n        List<ServiceInstance> instances = decorator.getInstances(\"ServiceA\");\n\n        assertEquals(4, instances.size());\n        assertEquals(selfInstance, instances.get(0));\n        assertEquals(\"ServiceA\", instances.get(1).getServiceName());\n        assertEquals(\"http://localhost:8080\", instances.get(1).getUri());\n        assertEquals(\"clusterA\", instances.get(1).getCluster());\n        assertEquals(\"ServiceA\", instances.get(2).getServiceName());\n        assertEquals(\"http://localhost:8081\", instances.get(2).getUri());\n        assertEquals(\"clusterA\", instances.get(2).getCluster());\n        // validate the rest of the instances\n    }\n}",
        "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    @Test\n    public void getInstancesTest() {\n        // Arrange\n        DatabaseDiscoveryClient delegate = // create DatabaseDiscoveryClient object\n        ServiceInstance selfInstance = // create ServiceInstance object\n        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = \n                new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n        \n        String serviceName = \"exampleService\";\n        \n        // Act\n        List<ServiceInstance> instances = decorator.getInstances(serviceName);\n        \n        // Assert\n        assertNotNull(instances);\n        assertEquals(1, instances.size());\n        assertEquals(selfInstance, instances.get(0));\n    }\n}",
        "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    @Test\n    public void getInstancesTest() {\n        DatabaseDiscoveryClient delegate = new DatabaseDiscoveryClient() {\n            @Override\n            public List<ServiceInstance> getInstances(String serviceName) {\n                // implementation for the delegate's getInstances method\n            }\n        };\n        ServiceInstance selfInstance = new ServiceInstance(\"self\", new URI(\"http://localhost\"), \"cluster\");\n        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n        List<ServiceInstance> result = decorator.getInstances(\"testService\");\n        // Assertion statements for the test case\n    }\n}",
        "public class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    @Test\n    public void getInstancesTest() {\n        // Create the necessary objects for testing\n        DatabaseDiscoveryClient delegate = mock(DatabaseDiscoveryClient.class); // Assuming you are using a mocking framework like Mockito\n        ServiceInstance selfInstance = createSelfInstance(); // Implement this method to create a mock ServiceInstance object\n\n        // Create an instance of the class to be tested\n        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator =\n            new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n\n        // Set up the mock behavior for delegate.getInstances(serviceName)\n        String serviceName = \"exampleService\";\n        List<ServiceInstance> serviceInstances = createServiceInstances(); // Implement this method to create a list of mock ServiceInstance objects\n        when(delegate.getInstances(serviceName)).thenReturn(serviceInstances);\n\n        // Call the method being tested\n        List<ServiceInstance> result = decorator.getInstances(serviceName);\n\n        // Verify the result using assertions\n        assertNotNull(result);\n        assertEquals(serviceInstances.size() + 1, result.size());\n        assertTrue(result.contains(selfInstance));\n        assertTrue(result.containsAll(serviceInstances));\n    }\n}",
        "@Test\npublic void getInstancesTest() {\n    // Create mock objects\n    DatabaseDiscoveryClient delegate = Mockito.mock(DatabaseDiscoveryClient.class);\n    ServiceInstance selfInstance = new ServiceInstance(\"serviceName\", new URI(\"http://localhost:8080\"), \"cluster\");\n\n    // Create instance of DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl\n    DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n\n    // Create a list of service instances\n    List<ServiceInstance> serviceInstances = new ArrayList<>();\n    serviceInstances.add(new ServiceInstance(\"serviceName\", new URI(\"http://localhost:8081\"), \"cluster\"));\n    serviceInstances.add(new ServiceInstance(\"serviceName\", new URI(\"http://localhost:8082\"), \"cluster\"));\n\n    // Mock the behavior of delegate.getInstances() method\n    Mockito.when(delegate.getInstances(Mockito.eq(\"serviceName\"))).thenReturn(serviceInstances);\n\n    // Call the method under test\n    List<ServiceInstance> result = decorator.getInstances(\"serviceName\");\n\n    // Verify the result\n    assertNotNull(result);\n    assertEquals(serviceInstances.size() + 1, result.size());\n    assertTrue(result.contains(selfInstance));\n    assertTrue(result.containsAll(serviceInstances));\n}",
        "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    @Test\n    public void getInstancesTest() {\n        // Arrange\n        String serviceName = \"exampleService\";\n        DatabaseDiscoveryClient delegate = new DatabaseDiscoveryClientImpl();\n        ServiceInstance selfInstance = new ServiceInstance(\"localhost\", 8080, \"exampleService\");\n        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n\n        // Act\n        List<ServiceInstance> result = decorator.getInstances(serviceName);\n\n        // Assert\n        assertNotNull(result);\n        assertTrue(result.contains(selfInstance));\n    }\n}",
        "@Test\npublic void getInstancesTest() {\n  DatabaseDiscoveryClient delegate = Mockito.mock(DatabaseDiscoveryClient.class);\n  ServiceInstance selfInstance = new ServiceInstance(\"serviceName\", new URI(\"http://localhost:8080\"), \"cluster\");\n  List<ServiceInstance> serviceInstances = new ArrayList<>();\n  serviceInstances.add(new ServiceInstance(\"serviceName\", new URI(\"http://example.com:8081\"), \"cluster\"));\n  Mockito.when(delegate.getInstances(Mockito.any(String.class))).thenReturn(serviceInstances);\n\n  DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator =\n    new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n\n  List<ServiceInstance> actual = decorator.getInstances(\"serviceName\");\n  List<ServiceInstance> expected = new ArrayList<>();\n  expected.add(selfInstance);\n  expected.addAll(serviceInstances);\n\n  assertEquals(expected, actual);\n}",
        "package com.ctrip.framework.apollo.biz.registry;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImplTest {\n    @Test\n    public void getInstancesTest() {\n        // Create a mock delegate DatabaseDiscoveryClient object\n        DatabaseDiscoveryClient delegate = new DatabaseDiscoveryClient() {\n            @Override\n            public List<ServiceInstance> getInstances(String serviceName) {\n                // Implement the behavior of the delegate getInstances() method\n                // based on your test scenario\n                return null;\n            }\n        };\n\n        // Create a mock selfInstance object\n        ServiceInstance selfInstance = new ServiceInstance(\"self\", new URI(\"http://localhost\"), \"default\");\n\n        // Create an instance of DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl\n        DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator =\n                new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n\n        // Invoke the getInstances() method on the decorator object\n        List<ServiceInstance> instances = decorator.getInstances(\"serviceName\");\n\n        // Use assertions to verify the output\n        assertEquals(instances.size(), 1);\n        assertEquals(instances.get(0), selfInstance);\n    }\n}",
        "@Test\npublic void getInstancesTest() {\n    // Create mocking objects\n    DatabaseDiscoveryClient delegate = Mockito.mock(DatabaseDiscoveryClient.class);\n    ServiceInstance selfInstance = new ServiceInstance(\"serviceA\", new URI(\"http://localhost:8080\"), \"clusterA\");\n    \n    // Create an instance of the class under test\n    DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl decorator = new DatabaseDiscoveryClientAlwaysAddSelfInstanceDecoratorImpl(delegate, selfInstance);\n    \n    // Mock the behavior of delegate.getInstances()\n    List<ServiceInstance> serviceInstances = new ArrayList<>();\n    ServiceInstance instance1 = new ServiceInstance(\"serviceA\", new URI(\"http://host1\"), \"clusterA\");\n    ServiceInstance instance2 = new ServiceInstance(\"serviceA\", new URI(\"http://host2\"), \"clusterA\");\n    serviceInstances.add(instance1);\n    serviceInstances.add(instance2);\n    Mockito.when(delegate.getInstances(\"serviceA\")).thenReturn(serviceInstances);\n    \n    // Call the method under test\n    List<ServiceInstance> result = decorator.getInstances(\"serviceA\");\n    \n    // Assert the result\n    assertEquals(3, result.size());\n    assertEquals(selfInstance, result.get(0));\n    assertEquals(instance1, result.get(1));\n    assertEquals(instance2, result.get(2));\n}"
    ]
}
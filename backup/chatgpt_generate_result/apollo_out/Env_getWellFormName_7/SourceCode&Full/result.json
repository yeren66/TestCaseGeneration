{
    "project_name": "apollo",
    "file_name": "Env.java",
    "relative_path": "apollo/apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/environment/Env.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.portal.environment",
    "docstring": "/**\n   * add some change to environment name trim and to upper\n   *\n   * @param envName\n   * @return\n   */",
    "source_code": "\nprivate static String getWellFormName(String envName) {\n  if (StringUtils.isBlank(envName)) {\n    return \"\";\n  }\n\n  String envWellFormName = envName.trim().toUpperCase();\n\n  // special case for production in case of typo\n  if (\"PROD\".equals(envWellFormName)) {\n    return Env.PRO.name;\n  }\n\n  // special case that FAT & FWS should map to FAT\n  if (\"FWS\".equals(envWellFormName)) {\n    return Env.FAT.name;\n  }\n\n  return envWellFormName;\n}\n",
    "class_name": "Env",
    "method_name": "getWellFormName",
    "arguments": [
        "String envName"
    ],
    "generate_test": [
        "@Test\npublic void getWellFormNameTest() {\n    // Test case 1: envName is blank\n    String result1 = Env.getWellFormName(\"\");\n    assertEquals(\"\", result1);\n\n    // Test case 2: envName is \"prod\"\n    String result2 = Env.getWellFormName(\"prod\");\n    assertEquals(\"PRO\", result2);\n\n    // Test case 3: envName is \"fws\"\n    String result3 = Env.getWellFormName(\"fws\");\n    assertEquals(\"FAT\", result3);\n\n    // Test case 4: envName is \"unknown\"\n    String result4 = Env.getWellFormName(\"unknown\");\n    assertEquals(\"UNKNOWN\", result4);\n}",
        "@Test\npublic void getWellFormNameTest() {\n    // Test case for a blank input\n    String result1 = Env.getWellFormName(\"\");\n    assertEquals(\"\", result1);\n\n    // Test case for a valid input\n    String result2 = Env.getWellFormName(\"prod\");\n    assertEquals(\"PRO\", result2);\n\n    // Test case for a special case\n    String result3 = Env.getWellFormName(\"fws\");\n    assertEquals(\"FAT\", result3);\n\n    // Test case for a valid input\n    String result4 = Env.getWellFormName(\"uat\");\n    assertEquals(\"UAT\", result4);\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    @Test\n    public void getWellFormNameTest() {\n        assertEquals(\"\", Env.getWellFormName(\"\"));\n        assertEquals(\"PRO\", Env.getWellFormName(\"PROD\"));\n        assertEquals(\"FAT\", Env.getWellFormName(\"FWS\"));\n        assertEquals(\"TEST\", Env.getWellFormName(\"Test\"));\n    }\n}",
        "@Test\npublic void getWellFormNameTest() {\n    // Test case for blank environment name\n    String blankEnvName = \"\";\n    String expectedBlankEnvResult = \"\";\n    String actualBlankEnvResult = Env.getWellFormName(blankEnvName);\n    assertEquals(expectedBlankEnvResult, actualBlankEnvResult);\n\n    // Test case for PROD environment name\n    String prodEnvName = \"PROD\";\n    String expectedProdEnvResult = Env.PRO.getName();\n    String actualProdEnvResult = Env.getWellFormName(prodEnvName);\n    assertEquals(expectedProdEnvResult, actualProdEnvResult);\n\n    // Test case for FWS environment name\n    String fwsEnvName = \"FWS\";\n    String expectedFwsEnvResult = Env.FAT.getName();\n    String actualFwsEnvResult = Env.getWellFormName(fwsEnvName);\n    assertEquals(expectedFwsEnvResult, actualFwsEnvResult);\n\n    // Test case for non-special environment name\n    String nonSpecialEnvName = \"DEV\";\n    String expectedNonSpecialEnvResult = nonSpecialEnvName.toUpperCase();\n    String actualNonSpecialEnvResult = Env.getWellFormName(nonSpecialEnvName);\n    assertEquals(expectedNonSpecialEnvResult, actualNonSpecialEnvResult);\n}",
        "@Test\npublic void getWellFormNameTest() {\n    // Test case 1: Blank environment name\n    String envName1 = \"\";\n    String expected1 = \"\";\n    String result1 = Env.getWellFormName(envName1);\n    assertEquals(expected1, result1);\n\n    // Test case 2: Normal environment name\n    String envName2 = \"UAT\";\n    String expected2 = \"UAT\";\n    String result2 = Env.getWellFormName(envName2);\n    assertEquals(expected2, result2);\n\n    // Test case 3: Special case \"PROD\"\n    String envName3 = \"PROD\";\n    String expected3 = Env.PRO.getName();\n    String result3 = Env.getWellFormName(envName3);\n    assertEquals(expected3, result3);\n\n    // Test case 4: Special case \"FWS\"\n    String envName4 = \"FWS\";\n    String expected4 = Env.FAT.getName();\n    String result4 = Env.getWellFormName(envName4);\n    assertEquals(expected4, result4);\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    @Test\n    public void getWellFormNameTest() {\n        // Test case 1: Blank environment name\n        String envName1 = \"\";\n        String expectedResult1 = \"\";\n        String actualResult1 = Env.getWellFormName(envName1);\n        assertEquals(expectedResult1, actualResult1);\n\n        // Test case 2: Production environment with typo\n        String envName2 = \"PROD\";\n        String expectedResult2 = Env.PRO.getName();\n        String actualResult2 = Env.getWellFormName(envName2);\n        assertEquals(expectedResult2, actualResult2);\n\n        // Test case 3: FWS environment\n        String envName3 = \"FWS\";\n        String expectedResult3 = Env.FAT.getName();\n        String actualResult3 = Env.getWellFormName(envName3);\n        assertEquals(expectedResult3, actualResult3);\n\n        // Add additional test cases if necessary\n        //...\n\n    }\n}",
        "@Test\npublic void getWellFormNameTest() {\n    // Test case for blank environment name\n    String blankEnvName = \"\";\n    String expectedResult = \"\";\n    String actualResult = Env.getWellFormName(blankEnvName);\n    assertEquals(expectedResult, actualResult);\n\n    // Test case for PROD environment with typo\n    String prodEnvName = \"PROD\";\n    expectedResult = Env.PRO.getName();\n    actualResult = Env.getWellFormName(prodEnvName);\n    assertEquals(expectedResult, actualResult);\n\n    // Test case for FWS environment mapping to FAT\n    String fwsEnvName = \"FWS\";\n    expectedResult = Env.FAT.getName();\n    actualResult = Env.getWellFormName(fwsEnvName);\n    assertEquals(expectedResult, actualResult);\n\n    // Test case for other environments\n    String otherEnvName = \"DEV\";\n    expectedResult = otherEnvName.toUpperCase();\n    actualResult = Env.getWellFormName(otherEnvName);\n    assertEquals(expectedResult, actualResult);\n}",
        "@Test\npublic void getWellFormNameTest() {\n    assertEquals(\"\", Env.getWellFormName(null));\n    assertEquals(\"\", Env.getWellFormName(\"\"));\n    assertEquals(\"DEV\", Env.getWellFormName(\"DEV\"));\n    assertEquals(\"PRO\", Env.getWellFormName(\"Prod\"));\n    assertEquals(\"FAT\", Env.getWellFormName(\"FWS\"));\n    assertEquals(\"UAT\", Env.getWellFormName(\"UAT\"));\n}",
        "@Test\npublic void getWellFormNameTest() {\n    // Given\n    String envName = \"  prod  \";\n\n    // When\n    String result = Env.getWellFormName(envName);\n\n    // Then\n    assertEquals(\"PRO\", result);\n}",
        "package com.ctrip.framework.apollo.portal.environment;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnvTest {\n    @Test\n    public void getWellFormNameTest() {\n        // Test case 1: Empty string input\n        String result1 = Env.getWellFormName(\"\");\n        assertEquals(\"\", result1);\n        \n        // Test case 2: Input with no special cases\n        String result2 = Env.getWellFormName(\"DEV\");\n        assertEquals(\"DEV\", result2);\n        \n        // Test case 3: \"PROD\" special case\n        String result3 = Env.getWellFormName(\"PROD\");\n        assertEquals(\"PRO\", result3);\n        \n        // Test case 4: \"FWS\" special case\n        String result4 = Env.getWellFormName(\"FWS\");\n        assertEquals(\"FAT\", result4);\n    }\n}"
    ]
}
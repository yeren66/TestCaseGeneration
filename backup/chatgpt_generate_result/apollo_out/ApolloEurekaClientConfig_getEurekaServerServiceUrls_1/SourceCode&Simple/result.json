{
    "project_name": "apollo",
    "file_name": "ApolloEurekaClientConfig.java",
    "relative_path": "apollo/apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/eureka/ApolloEurekaClientConfig.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.biz.eureka",
    "docstring": "/**\n   * Assert only one zone: defaultZone, but multiple environments.\n   */",
    "source_code": "\n@Override\npublic List<String> getEurekaServerServiceUrls(String myZone) {\n  List<String> urls = bizConfig.eurekaServiceUrls();\n  return CollectionUtils.isEmpty(urls) ? super.getEurekaServerServiceUrls(myZone) : urls;\n}\n",
    "class_name": "ApolloEurekaClientConfig",
    "method_name": "getEurekaServerServiceUrls",
    "arguments": [
        "String myZone"
    ],
    "generate_test": [
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.List;\nimport org.mockito.*;\n\npublic class ApolloEurekaClientConfigTest {\n    @InjectMocks\n    private ApolloEurekaClientConfig apolloEurekaClientConfig;\n\n    @Mock\n    private BizConfig bizConfig;\n\n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        List<String> urls = List.of(\"url1\", \"url2\", \"url3\");\n        Mockito.when(bizConfig.eurekaServiceUrls()).thenReturn(urls);\n    \n        String myZone = \"zone1\";\n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(myZone);\n    \n        assertEquals(urls, result);\n    }\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.springframework.util.CollectionUtils;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class ApolloEurekaClientConfigTest {\n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        // Given\n        String myZone = \"myZone\";\n        List<String> urls = Arrays.asList(\"url1\", \"url2\");\n        BizConfig bizConfig = new BizConfig();\n        ApolloEurekaClientConfig config = new ApolloEurekaClientConfig(bizConfig, null);\n        config.setBizConfig(bizConfig);\n\n        // When\n        List<String> result = config.getEurekaServerServiceUrls(myZone);\n\n        // Then\n        assertEquals(urls, result);\n    }\n}",
        "@Test\npublic void getEurekaServerServiceUrlsTest() {\n    // Create an instance of BizConfig\n    BizConfig bizConfig = new BizConfig();\n    \n    // Create an instance of ApolloEurekaClientConfig\n    ApolloEurekaClientConfig apolloEurekaClientConfig = new ApolloEurekaClientConfig(bizConfig, new RefreshScope());\n    \n    // Set the list of urls for bizConfig.eurekaServiceUrls() method\n    List<String> urls = new ArrayList<>();\n    urls.add(\"http://localhost:8761/eureka\");\n    bizConfig.setEurekaServiceUrls(urls);\n    \n    // Call the getEurekaServerServiceUrls() method and assert the result\n    List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"myZone\");\n    assertEquals(urls, result, \"Expected result and actual result do not match\");\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class ApolloEurekaClientConfigTest {\n\n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        ApolloEurekaClientConfig apolloEurekaClientConfig = new ApolloEurekaClientConfig();\n\n        // Test case when urls list is empty\n        apolloEurekaClientConfig.setBizConfig(new BizConfig());\n        List<String> emptyUrls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"myZone\");\n        assertTrue(emptyUrls.isEmpty());\n\n        // Test case when urls list is not empty\n        List<String> urls = Arrays.asList(\"url1\", \"url2\", \"url3\");\n        apolloEurekaClientConfig.setBizConfig(new BizConfig(urls));\n        List<String> nonEmptyUrls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"myZone\");\n        assertEquals(urls, nonEmptyUrls);\n    }\n}",
        "@Test\npublic void getEurekaServerServiceUrlsTest() {\n    ApolloEurekaClientConfig config = new ApolloEurekaClientConfig(null, null);\n    List<String> urls = new ArrayList<>();\n    urls.add(\"https://eureka1\");\n    urls.add(\"https://eureka2\");\n    \n    config.setBizConfig(new BizConfig());\n    config.getBizConfig().setEurekaServiceUrls(urls);\n    \n    List<String> result = config.getEurekaServerServiceUrls(\"myZone\");\n    \n    assertEquals(urls, result);\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class ApolloEurekaClientConfigTest {\n\n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        // Create the instance of ApolloEurekaClientConfig\n        ApolloEurekaClientConfig apolloEurekaClientConfig = new ApolloEurekaClientConfig(new BizConfig(), new RefreshScope());\n\n        // Set the values for urls and myZone\n        List<String> urls = Arrays.asList(\"url1\", \"url2\");\n        String myZone = \"zone1\";\n\n        // Set the urls using bizConfig\n        apolloEurekaClientConfig.bizConfig.setEurekaServiceUrls(urls);\n\n        // Invoke the method to get the result\n        List<String> result = apolloEurekaClientConfig.getEurekaServerServiceUrls(myZone);\n\n        // Verify the result\n        assertEquals(urls, result);\n    }\n\n}",
        "@Test\npublic void getEurekaServerServiceUrlsTest() {\n    ApolloEurekaClientConfig clientConfig = new ApolloEurekaClientConfig(new BizConfig(), new RefreshScope());\n    List<String> urls = clientConfig.getEurekaServerServiceUrls(\"myZone\");       \n    assertEquals(urls, clientConfig.getEurekaServerServiceUrls(\"myZone\"));\n}",
        "@Test\npublic void getEurekaServerServiceUrlsTest() {\n    // Prepare test data\n    String myZone = \"myZone\";\n    List<String> urls = new ArrayList<>();\n    urls.add(\"url1\");\n    urls.add(\"url2\");\n    \n    // Create instance of ApolloEurekaClientConfig\n    BizConfig bizConfig = new BizConfig();\n    RefreshScope refreshScope = new RefreshScope();\n    ApolloEurekaClientConfig clientConfig = new ApolloEurekaClientConfig(bizConfig, refreshScope);\n    \n    // Set URLs in bizConfig\n    bizConfig.setEurekaServiceUrls(urls);\n    \n    // Call the method being tested\n    List<String> result = clientConfig.getEurekaServerServiceUrls(myZone);\n    \n    // Verify the result\n    assertEquals(urls, result);\n}",
        "@Test\npublic void getEurekaServerServiceUrlsTest() {\n  ApolloEurekaClientConfig config = new ApolloEurekaClientConfig(mock(BizConfig.class), mock(RefreshScope.class));\n  List<String> urls = new ArrayList<>();\n  urls.add(\"http://localhost:8761\");\n  \n  // Set the mock response for bizConfig.eurekaServiceUrls()\n  when(config.bizConfig.eurekaServiceUrls()).thenReturn(urls);\n  \n  List<String> result = config.getEurekaServerServiceUrls(\"myZone\");\n  \n  assertEquals(urls, result);\n}",
        "package com.ctrip.framework.apollo.biz.eureka;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.Assertions;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class ApolloEurekaClientConfigTest {\n    @Test\n    public void getEurekaServerServiceUrlsTest() {\n        // Context\n        BizConfig bizConfig = new BizConfig();\n        ApolloEurekaClientConfig apolloEurekaClientConfig = new ApolloEurekaClientConfig(bizConfig, new RefreshScope());\n        \n        // Test on empty list\n        List<String> emptyUrls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"myZone\");\n        Assertions.assertTrue(emptyUrls.isEmpty());\n        \n        // Test on non-empty list\n        List<String> urls = Arrays.asList(\"url1\", \"url2\", \"url3\");\n        bizConfig.setEurekaServiceUrls(urls);\n        List<String> nonEmptyUrls = apolloEurekaClientConfig.getEurekaServerServiceUrls(\"myZone\");\n        Assertions.assertEquals(urls, nonEmptyUrls);\n    }\n}"
    ]
}
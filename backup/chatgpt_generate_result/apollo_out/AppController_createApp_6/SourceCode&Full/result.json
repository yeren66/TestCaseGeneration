{
    "project_name": "apollo",
    "file_name": "AppController.java",
    "relative_path": "apollo/apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/AppController.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.openapi.v1.controller",
    "docstring": "/**\n   * @see com.ctrip.framework.apollo.portal.controller.AppController#create(AppModel)\n   */",
    "source_code": "\n@Transactional\n@PreAuthorize(value = \"@consumerPermissionValidator.hasCreateApplicationPermission(#request)\")\n@PostMapping(value = \"/apps\")\npublic void createApp(\n    @RequestBody OpenCreateAppDTO req,\n    HttpServletRequest request\n) {\n  if (null == req.getApp()) {\n    throw new BadRequestException(\"App is null\");\n  }\n  final OpenAppDTO app = req.getApp();\n  if (null == app.getAppId()) {\n    throw new BadRequestException(\"AppId is null\");\n  }\n  // create app\n  this.appOpenApiService.createApp(req);\n  if (req.isAssignAppRoleToSelf()) {\n    long consumerId = this.consumerAuthUtil.retrieveConsumerId(request);\n    consumerService.assignAppRoleToConsumer(consumerId, app.getAppId());\n  }\n}\n",
    "class_name": "AppController",
    "method_name": "createApp",
    "arguments": [
        "OpenCreateAppDTO req",
        "HttpServletRequest request"
    ],
    "generate_test": [
        "@Test\npublic void createAppTest() {\n  OpenCreateAppDTO req = new OpenCreateAppDTO();\n  OpenAppDTO app = new OpenAppDTO();\n  app.setAppId(\"testAppId\");\n  req.setApp(app);\n  req.setAssignAppRoleToSelf(true);\n  \n  HttpServletRequest request = mock(HttpServletRequest.class);\n  when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(12345L);\n  \n  appController.createApp(req, request);\n  \n  verify(appOpenApiService, times(1)).createApp(req);\n  verify(consumerService, times(1)).assignAppRoleToConsumer(12345L, \"testAppId\");\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\nimport org.springframework.mock.web.MockHttpServletRequest;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class AppControllerTest {\n    @InjectMocks\n    private AppController appController;\n\n    @Mock\n    private ConsumerAuthUtil consumerAuthUtil;\n\n    @Mock\n    private ConsumerService consumerService;\n\n    @Mock\n    private AppOpenApiService appOpenApiService;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void createAppTest() {\n        OpenCreateAppDTO openCreateAppDTO = new OpenCreateAppDTO();\n        OpenAppDTO openAppDTO = new OpenAppDTO();\n        openAppDTO.setAppId(\"testAppId\");\n        openCreateAppDTO.setApp(openAppDTO);\n\n        MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest();\n\n        doReturn(1L).when(consumerAuthUtil).retrieveConsumerId(any(HttpServletRequest.class));\n\n        assertThrows(BadRequestException.class, () -> appController.createApp(null, mockHttpServletRequest));\n\n        assertThrows(BadRequestException.class, () -> appController.createApp(openCreateAppDTO, mockHttpServletRequest));\n\n        openAppDTO.setAppId(null);\n        assertThrows(BadRequestException.class, () -> appController.createApp(openCreateAppDTO, mockHttpServletRequest));\n\n        when(appOpenApiService.createApp(openCreateAppDTO)).thenReturn(true);\n        appController.createApp(openCreateAppDTO, mockHttpServletRequest);\n        verify(consumerService, times(1)).assignAppRoleToConsumer(1L, \"testAppId\");\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.http.MediaType;\nimport org.springframework.mock.web.MockHttpServletRequest;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.MvcResult;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.result.MockMvcResultMatchers;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport org.springframework.web.context.WebApplicationContext;\n    \n@ExtendWith(SpringExtension.class)\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class AppControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Autowired\n    private WebApplicationContext webApplicationContext;\n\n    @BeforeEach\n    public void setUp() {\n        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();\n    }\n    \n    @Test\n    public void createAppTest() throws Exception {\n        // Prepare the request body\n        String requestBody = \"{\\\"app\\\":{\\\"appId\\\":\\\"myApp\\\"},\\\"assignAppRoleToSelf\\\":true}\";\n\n        // Create a mock request\n        MockHttpServletRequest request = new MockHttpServletRequest();\n\n        MvcResult result = mockMvc.perform(MockMvcRequestBuilders.post(\"/openapi/v1/apps\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .content(requestBody)\n                .requestAttr(\"request\", request))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andReturn();\n\n        // Assert the response\n        assertEquals(200, result.getResponse().getStatus());\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AppControllerTest {\n    @Test\n    public void createAppTest() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(\"testAppId\");\n        req.setApp(app);\n        HttpServletRequest request = new MockHttpServletRequest();\n        \n        AppController appController = new AppController();\n        \n        appController.createApp(req, request);\n        \n        //Verify the result here\n        <FILL>\n    }\n}",
        "@Test\npublic void createAppTest() {\n  // Create a mock request object\n  HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n  \n  // Create a mock OpenCreateAppDTO object\n  OpenCreateAppDTO req = Mockito.mock(OpenCreateAppDTO.class);\n  \n  // Create a mock OpenAppDTO object\n  OpenAppDTO app = Mockito.mock(OpenAppDTO.class);\n  \n  // When req.getApp() is called, return the mock app object\n  Mockito.when(req.getApp()).thenReturn(app);\n  \n  // When app.getAppId() is called, return a non-null value\n  Mockito.when(app.getAppId()).thenReturn(\"123456\");\n  \n  // Create a mock AppOpenApiService object\n  AppOpenApiService appOpenApiService = Mockito.mock(AppOpenApiService.class);\n  \n  // Create a mock ConsumerAuthUtil object\n  ConsumerAuthUtil consumerAuthUtil = Mockito.mock(ConsumerAuthUtil.class);\n  \n  // Create a mock ConsumerService object\n  ConsumerService consumerService = Mockito.mock(ConsumerService.class);\n  \n  // Create an instance of the AppController class with the mock dependencies\n  AppController appController = new AppController(consumerAuthUtil, consumerService, appOpenApiService);\n  \n  // Call the createApp method with the mock arguments\n  appController.createApp(req, request);\n  \n  // Verify that the createApp method of the appOpenApiService is called with the mock req argument\n  Mockito.verify(appOpenApiService).createApp(req);\n  \n  // Verify that the assignAppRoleToConsumer method of the consumerService is called with the mock consumerId and app.getAppId() arguments\n  Mockito.verify(consumerService).assignAppRoleToConsumer(Mockito.anyLong(), Mockito.eq(app.getAppId()));\n}",
        "\npackage com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.springframework.mock.web.MockHttpServletRequest;\n\npublic class AppControllerTest {\n    \n    private AppController appController;\n    private MockHttpServletRequest request;\n    \n    @BeforeEach\n    public void setUp() {\n        appController = new AppController(/* dependencies */);\n        request = new MockHttpServletRequest();\n    }\n    \n    @Test\n    public void createAppTest() {\n        OpenCreateAppDTO requestDto = new OpenCreateAppDTO(/* createAppDTO properties */);\n        \n        // Assert that calling createApp method with valid request will not throw any exception\n        assertDoesNotThrow(() -> appController.createApp(requestDto, request));\n\n        // Assert that calling createApp method with null App throws BadRequestException with \"App is null\" message\n        requestDto.setApp(null);\n        assertThrows(BadRequestException.class, () -> appController.createApp(requestDto, request));\n\n        // Assert that calling createApp method with null AppId throws BadRequestException with \"AppId is null\" message\n        requestDto.setApp(new OpenAppDTO());\n        assertThrows(BadRequestException.class, () -> appController.createApp(requestDto, request));\n    }\n}\n",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AppControllerTest {\n  @Test\n  public void createAppTest() {\n    // Initialize required objects and dependencies\n    AppOpenApiService appOpenApiService = new AppOpenApiService();\n    ConsumerAuthUtil consumerAuthUtil = new ConsumerAuthUtil();\n    ConsumerService consumerService = new ConsumerService();\n    \n    // Create the test data\n    OpenCreateAppDTO req = new OpenCreateAppDTO();\n    OpenAppDTO app = new OpenAppDTO();\n    app.setAppId(\"testApp\");\n    req.setApp(app);\n    req.setAssignAppRoleToSelf(true);\n    \n    HttpServletRequest request = new HttpServletRequest();\n    \n    // Call the method under test\n    AppController appController = new AppController(consumerAuthUtil, consumerService, appOpenApiService);\n    appController.createApp(req, request);\n    \n    // Assert the expected outcomes\n    <FILL>\n  }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AppControllerTest {\n    @Test\n    public void createAppTest() {\n        // Arrange\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(\"testAppId\");\n        req.setApp(app);\n        req.setAssignAppRoleToSelf(true);\n        HttpServletRequest request = new MockHttpServletRequest();\n        AppController appController = new AppController(consumerAuthUtil, consumerService, appOpenApiService);\n        \n        // Act\n        appController.createApp(req, request);\n        \n        // Assert\n        // Check if the app is created\n        // Assertion code here\n    }\n}",
        "import org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.mock.web.MockHttpServletRequest;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.MvcResult;\nimport org.springframework.test.web.servlet.RequestBuilder;\nimport org.springframework.test.web.servlet.ResultMatcher;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport org.springframework.web.context.WebApplicationContext;\n\nimport static org.mockito.Mockito.when;\nimport static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;\nimport static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\nimport static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n@SpringBootTest\npublic class AppControllerTest {\n\n    @Autowired\n    private WebApplicationContext context;\n\n    private MockMvc mockMvc;\n\n    @MockBean\n    private AppOpenApiService appOpenApiService;\n\n    @MockBean\n    private ConsumerAuthUtil consumerAuthUtil;\n\n    @MockBean\n    private ConsumerService consumerService;\n\n    @BeforeEach\n    public void setUp() {\n        mockMvc = MockMvcBuilders\n                .webAppContextSetup(context)\n                .apply(springSecurity())\n                .build();\n    }\n\n    @Test\n    public void createAppTest() throws Exception {\n        // Setup\n        OpenCreateAppDTO requestDTO = new OpenCreateAppDTO();\n        OpenAppDTO appDTO = new OpenAppDTO();\n        appDTO.setAppId(\"testAppId\");\n        requestDTO.setApp(appDTO);\n        when(consumerAuthUtil.retrieveConsumerId(new MockHttpServletRequest())).thenReturn(1L);\n\n        // Execute\n        RequestBuilder requestBuilder = post(\"/openapi/v1/apps\")\n                .with(user(\"testUser\"))\n                .content(asJsonString(requestDTO))\n                .contentType(MediaType.APPLICATION_JSON);\n\n        MvcResult result = mockMvc.perform(requestBuilder)\n                .andExpect(status().isOk())\n                .andReturn();\n\n        // Assert\n        // Add your assertions here\n\n    }\n\n    private static String asJsonString(final Object obj) {\n        try {\n            return new ObjectMapper().writeValueAsString(obj);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n}",
        "\npackage com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport javax.servlet.http.HttpServletRequest;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class AppControllerTest {\n    @MockBean\n    private AppOpenApiService appOpenApiService;\n    \n    @MockBean\n    private ConsumerAuthUtil consumerAuthUtil;\n    \n    @MockBean\n    private ConsumerService consumerService;\n    \n    @Test\n    public void createAppTest() {\n        // Create mock objects\n        OpenCreateAppDTO req = mock(OpenCreateAppDTO.class);\n        OpenAppDTO app = mock(OpenAppDTO.class);\n        HttpServletRequest request = mock(HttpServletRequest.class);\n        \n        // Configure the mock objects\n        when(req.getApp()).thenReturn(app);\n        when(app.getAppId()).thenReturn(\"testAppId\");\n        when(req.isAssignAppRoleToSelf()).thenReturn(true);\n        when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(123L);\n        \n        // Call the method to be tested\n        AppController appController = new AppController(consumerAuthUtil, consumerService, appOpenApiService);\n        appController.createApp(req, request);\n        \n        // Verify that the methods were called with the correct parameters\n        verify(appOpenApiService).createApp(req);\n        verify(consumerService).assignAppRoleToConsumer(123L, \"testAppId\");\n    }\n}\n"
    ]
}
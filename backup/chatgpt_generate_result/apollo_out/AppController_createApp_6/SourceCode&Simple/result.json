{
    "project_name": "apollo",
    "file_name": "AppController.java",
    "relative_path": "apollo/apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/AppController.java",
    "execute_path": "apollo",
    "package": "com.ctrip.framework.apollo.openapi.v1.controller",
    "docstring": "/**\n   * @see com.ctrip.framework.apollo.portal.controller.AppController#create(AppModel)\n   */",
    "source_code": "\n@Transactional\n@PreAuthorize(value = \"@consumerPermissionValidator.hasCreateApplicationPermission(#request)\")\n@PostMapping(value = \"/apps\")\npublic void createApp(\n    @RequestBody OpenCreateAppDTO req,\n    HttpServletRequest request\n) {\n  if (null == req.getApp()) {\n    throw new BadRequestException(\"App is null\");\n  }\n  final OpenAppDTO app = req.getApp();\n  if (null == app.getAppId()) {\n    throw new BadRequestException(\"AppId is null\");\n  }\n  // create app\n  this.appOpenApiService.createApp(req);\n  if (req.isAssignAppRoleToSelf()) {\n    long consumerId = this.consumerAuthUtil.retrieveConsumerId(request);\n    consumerService.assignAppRoleToConsumer(consumerId, app.getAppId());\n  }\n}\n",
    "class_name": "AppController",
    "method_name": "createApp",
    "arguments": [
        "OpenCreateAppDTO req",
        "HttpServletRequest request"
    ],
    "generate_test": [
        "@Test\npublic void createAppTest() {\n  // Arrange\n  OpenCreateAppDTO req = new OpenCreateAppDTO();\n  HttpServletRequest request = new MockHttpServletRequest();\n\n  // Act\n  AppController appController = new AppController(new ConsumerAuthUtil(), new ConsumerService(), new AppOpenApiService());\n  appController.createApp(req, request);\n\n  // Assert\n  // Add assertions here to verify the expected behavior\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AppControllerTest {\n    @Test\n    public void createAppTest() {\n        // Arrange\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        HttpServletRequest request = new MockHttpServletRequest(); // Assuming MockHttpServletRequest is imported\n        \n        // Act\n        AppController appController = new AppController(new ConsumerAuthUtil(), new ConsumerService(), new AppOpenApiService());\n        appController.createApp(req, request);\n        \n        // Assert\n        // Add relevant assertions here based on the expected behavior of the createApp() method\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass AppControllerTest {\n    @Test\n    void createAppTest() {\n        // Create mock objects for dependencies\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        HttpServletRequest request = mock(HttpServletRequest.class);\n        ConsumerAuthUtil consumerAuthUtil = mock(ConsumerAuthUtil.class);\n        ConsumerService consumerService = mock(ConsumerService.class);\n        AppOpenApiService appOpenApiService = mock(AppOpenApiService.class);\n        \n        // Create an instance of AppController with the mock dependencies\n        AppController appController = new AppController(consumerAuthUtil, consumerService, appOpenApiService);\n        \n        // Set up the necessary mock behavior\n        when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(123L);\n        when(req.getApp()).thenReturn(new OpenAppDTO());\n        when(req.isAssignAppRoleToSelf()).thenReturn(true);\n        \n        // Call the method under test\n        appController.createApp(req, request);\n        \n        // Verify the expected behavior\n        verify(appOpenApiService).createApp(req);\n        verify(consumerService).assignAppRoleToConsumer(123L, req.getApp().getAppId());\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AppControllerTest {\n    @Test\n    public void createAppTest() {\n        // Arrange\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        HttpServletRequest request = new HttpServletRequest(); // Create a mock HttpServletRequest object\n        AppController appController = new AppController(new ConsumerAuthUtil(), new ConsumerService(), new AppOpenApiService());\n\n        // Act\n        assertDoesNotThrow(() -> appController.createApp(req, request)); // Call the createApp method and assert that it does not throw any exceptions\n\n        // Assert\n        // Add assertions here to verify the functionality of the createApp method\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AppControllerTest {\n    @Test\n    public void createAppTest() {\n        // Arrange\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        HttpServletRequest request = new HttpServletRequest() {\n            // mock implementation of HttpServletRequest methods\n        };\n\n        // Act\n        AppController appController = new AppController(null, null, null);\n        appController.createApp(req, request);\n\n        // Assert\n        // Add assertions here to verify the expected behavior of createApp method\n    }\n}",
        "import org.junit.jupiter.api.Test;\nimport org.springframework.mock.web.MockHttpServletRequest;\nimport com.ctrip.framework.apollo.openapi.dto.OpenCreateAppDTO;\nimport com.ctrip.framework.apollo.openapi.dto.OpenAppDTO;\nimport com.ctrip.framework.apollo.portal.entity.model.AppModel;\nimport javax.transaction.Transactional;\nimport javax.servlet.http.HttpServletRequest;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.when;\nimport com.ctrip.framework.apollo.common.exception.BadRequestException;\nimport com.ctrip.framework.apollo.openapi.api.AppOpenApiService;\nimport com.ctrip.framework.apollo.openapi.service.ConsumerService;\nimport com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;\n\npublic class AppControllerTest {\n\n    @Mock\n    private ConsumerAuthUtil consumerAuthUtil;\n\n    @Mock\n    private ConsumerService consumerService;\n\n    @Mock\n    private AppOpenApiService appOpenApiService;\n\n    @InjectMocks\n    private AppController appController;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void createAppTest() {\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        MockHttpServletRequest request = new MockHttpServletRequest();\n        assertThrows(BadRequestException.class, () -> appController.createApp(req, request));\n\n        OpenAppDTO app = new OpenAppDTO();\n        app.setAppId(\"123456\");\n        req.setApp(app);\n        assertDoesNotThrow(() -> appController.createApp(req, request));\n\n        req.setAssignAppRoleToSelf(true);\n        assertDoesNotThrow(() -> {\n            when(appOpenApiService.createApp(req)).thenReturn(new AppModel());\n            when(consumerAuthUtil.retrieveConsumerId(request)).thenReturn(123L);\n            appController.createApp(req, request);\n        });\n    }\n}",
        "@Test\npublic void createAppTest() {\n    // Arrange\n    OpenCreateAppDTO req = new OpenCreateAppDTO();\n    HttpServletRequest request = new HttpServletRequestStub();\n    AppController appController = new AppController(consumerAuthUtil, consumerService, appOpenApiService);\n    \n    // Act and Assert\n    assertThrows(BadRequestException.class, () -> {\n        appController.createApp(req, request);\n    });\n}",
        "@Test\npublic void createAppTest() {\n    // Arrange\n    AppOpenApiService mockAppOpenApiService = mock(AppOpenApiService.class);\n    ConsumerAuthUtil mockConsumerAuthUtil = mock(ConsumerAuthUtil.class);\n    ConsumerService mockConsumerService = mock(ConsumerService.class);\n    HttpServletRequest mockHttpServletRequest = mock(HttpServletRequest.class);\n    OpenCreateAppDTO mockOpenCreateAppDTO = mock(OpenCreateAppDTO.class);\n    OpenAppDTO mockOpenAppDTO = mock(OpenAppDTO.class);\n    \n    when(mockOpenCreateAppDTO.getApp()).thenReturn(mockOpenAppDTO);\n    \n    AppController appController = new AppController(mockConsumerAuthUtil, mockConsumerService, mockAppOpenApiService);\n    \n    // Act\n    appController.createApp(mockOpenCreateAppDTO, mockHttpServletRequest);\n    \n    // Assert\n    verify(mockAppOpenApiService).createApp(mockOpenCreateAppDTO);\n    // Add assertions for other method calls, if necessary\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AppControllerTest {\n    @Test\n    public void createAppTest() {\n        // Arrange\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        HttpServletRequest request = new MockHttpServletRequest();\n        AppController appController = new AppController(consumerAuthUtil, consumerService, appOpenApiService);\n        \n        // Act\n        appController.createApp(req, request);\n        \n        // Assert\n        // Add assertions here to verify the expected behavior of the method\n    }\n}",
        "package com.ctrip.framework.apollo.openapi.v1.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AppControllerTest {\n    @Test\n    public void createAppTest() {\n        // Arrange\n        AppController appController = new AppController(new ConsumerAuthUtil(), new ConsumerService(), new AppOpenApiService());\n        OpenCreateAppDTO req = new OpenCreateAppDTO();\n        HttpServletRequest request = new HttpServletRequest();\n        \n        // Act\n        Throwable exception = assertThrows(BadRequestException.class, () -> {\n            appController.createApp(req, request);\n        });\n        \n        // Assert\n        assertEquals(\"App is null\", exception.getMessage());\n    }\n}"
    ]
}
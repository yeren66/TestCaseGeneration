{
    "project_name": "jeecg-boot",
    "file_name": "SensitiveInfoUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/desensitization/util/SensitiveInfoUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.desensitization.util",
    "docstring": "/**\n     * \u5904\u7406\u5d4c\u5957\u5bf9\u8c61\n     * @param obj \u65b9\u6cd5\u8fd4\u56de\u503c\n     * @param entity \u5b9e\u4f53class\n     * @param isEncode \u662f\u5426\u52a0\u5bc6\uff08true: \u52a0\u5bc6\u64cd\u4f5c / false:\u89e3\u5bc6\u64cd\u4f5c\uff09\n     * @throws IllegalAccessException\n     */",
    "source_code": "\npublic static void handleNestedObject(Object obj, Class entity, boolean isEncode) throws IllegalAccessException {\n    Field[] fields = obj.getClass().getDeclaredFields();\n    for (Field field : fields) {\n        if(field.getType().isPrimitive()){\n            continue;\n        }\n        if(field.getType().equals(entity)){\n            // \u5bf9\u8c61\u91cc\u9762\u662f\u5b9e\u4f53\n            field.setAccessible(true);\n            Object nestedObject = field.get(obj);\n            handlerObject(nestedObject, isEncode);\n            break;\n        }else{\n            // \u5bf9\u8c61\u91cc\u9762\u662fList<\u5b9e\u4f53>\n            if(field.getGenericType() instanceof ParameterizedType){\n                ParameterizedType pt = (ParameterizedType)field.getGenericType();\n                if(pt.getRawType().equals(List.class)){\n                    if(pt.getActualTypeArguments()[0].equals(entity)){\n                        field.setAccessible(true);\n                        Object nestedObject = field.get(obj);\n                        handleList(nestedObject, entity, isEncode);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "class_name": "SensitiveInfoUtil",
    "method_name": "handleNestedObject",
    "arguments": [
        "Object obj",
        "Class entity",
        "boolean isEncode"
    ],
    "generate_test": [
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void handleNestedObjectTest() {\n        Object obj = new Object();\n        Class entity = Object.class;\n        boolean isEncode = true;\n        try {\n            SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n        // Add assertions to verify the expected results\n    }\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n\n    @Test\n    public void handleNestedObjectTest() throws IllegalAccessException {\n        // Create an instance of the object to be tested\n        Object obj = new Object(); // Replace Object with the actual object\n        \n        // Define the entity class to be used for testing\n        Class entity = MyClass.class; // Replace MyClass with the actual entity class\n        \n        // Define the isEncode flag\n        boolean isEncode = true; // Replace true/false with the actual value\n        \n        // Call the method to be tested\n        SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);\n        \n        // Add assertions to verify the expected behavior\n        // For example:\n        // assertEquals(expectedValue, actualValue);\n    }\n\n}",
        "Assert.assertNotNull(obj);\n        Class entity = MyClass.class;\n        boolean isEncode = true;\n        try {\n            SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }",
        "\npackage org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n    @Test\n    public void handleNestedObjectTest() {\n        // Create test objects\n        TestObject obj1 = new TestObject();\n        obj1.setName(\"John Doe\");\n        obj1.setAddress(\"123 Main St\");\n        \n        TestEntity entity1 = new TestEntity();\n        entity1.setId(1);\n        entity1.setValue(\"Test\");\n        \n        obj1.setEntity(entity1);\n        \n        // Perform the unit test\n        try {\n            SensitiveInfoUtil.handleNestedObject(obj1, TestEntity.class, false);\n        } catch (IllegalAccessException e) {\n            fail(\"IllegalAccessException occurred.\");\n        }\n        \n        // Verify the expected results\n        assertEquals(\"John Doe\", obj1.getName());\n        assertEquals(\"123 Main St\", obj1.getAddress());\n        assertEquals(1, entity1.getId());\n        assertEquals(\"Test\", entity1.getValue());\n    }\n    \n    // Define test classes\n    private class TestObject {\n        private String name;\n        private String address;\n        private TestEntity entity;\n        \n        public String getName() {\n            return name;\n        }\n        \n        public void setName(String name) {\n            this.name = name;\n        }\n        \n        public String getAddress() {\n            return address;\n        }\n        \n        public void setAddress(String address) {\n            this.address = address;\n        }\n        \n        public TestEntity getEntity() {\n            return entity;\n        }\n        \n        public void setEntity(TestEntity entity) {\n            this.entity = entity;\n        }\n    }\n    \n    private class TestEntity {\n        private int id;\n        private String value;\n        \n        public int getId() {\n            return id;\n        }\n        \n        public void setId(int id) {\n            this.id = id;\n        }\n        \n        public String getValue() {\n            return value;\n        }\n        \n        public void setValue(String value) {\n            this.value = value;\n        }\n    }\n}\n",
        "@Test\npublic void handleNestedObjectTest() throws IllegalAccessException {\n    // Create the object to test\n    Object obj = new Object();\n\n    // Set up the necessary fields for the object\n    // ...\n\n    // Call the method to test\n    SensitiveInfoUtil.handleNestedObject(obj, MyClass.class, true);\n\n    // Assert the expected result\n    // ...\n}",
        "package org.jeecg.common.desensitization.util;\n\nimport org.junit.jupiter.api.*;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SensitiveInfoUtilTest {\n\n    @Test\n    public void handleNestedObjectTest() {\n        // Create a test object\n        TestClass obj = new TestClass();\n        obj.setSensitiveField(\"sensitive value\");\n        obj.setNestedEntity(new NestedEntity());\n\n        // Call the method being tested\n        assertDoesNotThrow(() -> SensitiveInfoUtil.handleNestedObject(obj, NestedEntity.class, false));\n\n        // Assert the expected results\n        assertEquals(\"sensitive value\", obj.getSensitiveField());\n        assertNotNull(obj.getNestedEntity());\n    }\n\n    public static class TestClass {\n        @SensitiveField\n        private String sensitiveField;\n\n        private NestedEntity nestedEntity;\n\n        // Getter and Setter...\n\n        public String getSensitiveField() {\n            return sensitiveField;\n        }\n\n        public void setSensitiveField(String sensitiveField) {\n            this.sensitiveField = sensitiveField;\n        }\n\n        public NestedEntity getNestedEntity() {\n            return nestedEntity;\n        }\n\n        public void setNestedEntity(NestedEntity nestedEntity) {\n            this.nestedEntity = nestedEntity;\n        }\n    }\n\n    public static class NestedEntity {\n        @SensitiveField\n        private String sensitiveField;\n\n        // Getter and Setter...\n\n        public String getSensitiveField() {\n            return sensitiveField;\n        }\n\n        public void setSensitiveField(String sensitiveField) {\n            this.sensitiveField = sensitiveField;\n        }\n    }\n}",
        "@Test\npublic void handleNestedObjectTest() {\n    // Create a sample Object to test\n    SampleObject obj = new SampleObject();\n    \n    // Create a sample entity Class\n    Class entity = Entity.class;\n    \n    // Set the isEncode flag to true or false based on your requirement\n    boolean isEncode = true;\n    \n    // Call the handleNestedObject method with the sample inputs\n    assertDoesNotThrow(() -> SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode));\n    \n    // Assert the expected results\n    // Insert appropriate assertions here\n    <FILL>\n}",
        "public void handleNestedObjectTest() {\n    // Create an instance of the object to be tested\n    Object obj = new Object();\n\n    // Create an instance of the entity class\n    Class entity = Object.class;\n\n    // Create a boolean to indicate whether encoding is needed\n    boolean isEncode = true;\n\n    // Call the method to be tested\n    try {\n        SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode);\n    } catch (IllegalAccessException e) {\n        e.printStackTrace();\n    }\n\n    // Verify the result\n    <FILL>\n}",
        "@Test\npublic void handleNestedObjectTest() {\n    // Create a test object for handling\n    TestClass obj = new TestClass();\n    \n    // Set values for the object\n    \n    // Invoke the method to be tested\n    assertDoesNotThrow(() -> SensitiveInfoUtil.handleNestedObject(obj, TestEntity.class, false));\n    \n    // Perform validations/assertions on the object\n    \n}",
        "@Test\n    public void handleNestedObjectTest() {\n        MyClass obj = new MyClass();\n        Class<MyEntity> entity = MyEntity.class;\n        boolean isEncode = true;\n\n        assertDoesNotThrow(() -> SensitiveInfoUtil.handleNestedObject(obj, entity, isEncode));\n\n        // Perform assertions here\n    }"
    ]
}
{
    "project_name": "jeecg-boot",
    "file_name": "JwtUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/system/util/JwtUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.system.util",
    "docstring": "/**\n\t * \u6839\u636erequest\u4e2d\u7684token\u83b7\u53d6\u7528\u6237\u8d26\u53f7\n\t * \n\t * @param request\n\t * @return\n\t * @throws JeecgBootException\n\t */",
    "source_code": "\npublic static String getUserNameByToken(HttpServletRequest request) throws JeecgBootException {\n\tString accessToken = request.getHeader(\"X-Access-Token\");\n\tString username = getUsername(accessToken);\n\tif (oConvertUtils.isEmpty(username)) {\n\t\tthrow new JeecgBootException(\"\u672a\u83b7\u53d6\u5230\u7528\u6237\");\n\t}\n\treturn username;\n}\n",
    "class_name": "JwtUtil",
    "method_name": "getUserNameByToken",
    "arguments": [
        "HttpServletRequest request"
    ],
    "generate_test": [
        "@Test\npublic void getUserNameByTokenTest() {\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    when(request.getHeader(\"X-Access-Token\")).thenReturn(\"sampleAccessToken\");\n    \n    // Call the method under test\n    assertThrows(JeecgBootException.class, () -> JwtUtil.getUserNameByToken(request));\n}",
        "@Test\npublic void getUserNameByTokenTest() {\n    HttpServletRequest request = new MockHttpServletRequest();\n    String token = \"abc123\"; // example token\n    request.addHeader(\"X-Access-Token\", token);\n    try {\n        String username = JwtUtil.getUserNameByToken(request);\n        assertEquals(\"expectedUsername\", username); // Replace \"expectedUsername\" with the expected username\n    } catch (JeecgBootException e) {\n        fail(\"Exception should not be thrown\");\n    }\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JwtUtilTest {\n    @Test\n    public void getUserNameByTokenTest() throws JeecgBootException {\n        // Create HttpServletRequest object (mocked)\n        HttpServletRequest request = new HttpServletRequest() {\n            @Override\n            public String getHeader(String name) {\n                if (name.equals(\"X-Access-Token\")) {\n                    return \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\";\n                }\n                return null;\n            }\n            \n            // other methods...\n        };\n        \n        // Call the method and assert the result\n        String username = JwtUtil.getUserNameByToken(request);\n        assertEquals(\"John Doe\", username);\n    }\n}",
        "@Test\npublic void getUserNameByTokenTest() {\n    HttpServletRequest request = new MockHttpServletRequest();\n    request.addHeader(\"X-Access-Token\", \"myAccessToken\");\n    \n    String username = JwtUtil.getUserNameByToken(request);\n    \n    assertEquals(\"expectedUsername\", username);\n}",
        "@Test\npublic void getUserNameByTokenTest() throws JeecgBootException {\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    when(request.getHeader(\"X-Access-Token\")).thenReturn(\"token\");\n    \n    String username = \"testUser\";\n    when(JwtUtil.getUsername(\"token\")).thenReturn(username);\n    \n    String actualResult = JwtUtil.getUserNameByToken(request);\n    \n    assertEquals(username, actualResult);\n}",
        "@Test\npublic void getUserNameByTokenTest() throws JeecgBootException {\n    // Create HttpServletRequest object and set the required header\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    when(request.getHeader(\"X-Access-Token\")).thenReturn(\"your-access-token\");\n\n    // Call the getUserNameByToken method\n    String username = JwtUtil.getUserNameByToken(request);\n\n    // Assert the expected output against the actual output\n    assertEquals(\"expected-username\", username);\n}",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport javax.servlet.http.HttpServletRequest;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JwtUtilTest {\n    @Test\n    public void getUserNameByTokenTest() {\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n        \n        // Setup header\n        Mockito.when(request.getHeader(\"X-Access-Token\")).thenReturn(\"sampleAccessToken\");\n        \n        // Invoke method\n        String username = JwtUtil.getUserNameByToken(request);\n        \n        // Assert result\n        assertEquals(\"sampleUsername\", username);\n    }\n}",
        "@Test\npublic void getUserNameByTokenTest() throws JeecgBootException {\n    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n    Mockito.when(request.getHeader(\"X-Access-Token\")).thenReturn(\"accessToken\");\n    \n    String username = JwtUtil.getUserNameByToken(request);\n    \n    assertEquals(\"username\", username);\n}",
        "@Test\npublic void getUserNameByTokenTest() throws JeecgBootException {\n    // Create a mock HttpServletRequest\n    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n    // Set the expected X-Access-Token header value\n    Mockito.when(request.getHeader(\"X-Access-Token\")).thenReturn(\"sampleAccessToken\");\n    \n    // Call the method under test\n    String result = JwtUtil.getUserNameByToken(request);\n\n    // Assert the result\n    assertEquals(\"sampleUsername\", result);\n}",
        "@Test\npublic void getUserNameByTokenTest() {\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    when(request.getHeader(\"X-Access-Token\")).thenReturn(\"access_token\");\n\n    try {\n        String result = JwtUtil.getUserNameByToken(request);\n        assertEquals(\"expected_username\", result);\n    } catch (JeecgBootException e) {\n        fail(\"JeecgBootException should not be thrown\");\n    }\n}"
    ]
}
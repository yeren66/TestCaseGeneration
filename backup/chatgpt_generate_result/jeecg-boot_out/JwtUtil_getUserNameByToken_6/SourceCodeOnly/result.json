{
    "project_name": "jeecg-boot",
    "file_name": "JwtUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/system/util/JwtUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.system.util",
    "docstring": "/**\n\t * \u6839\u636erequest\u4e2d\u7684token\u83b7\u53d6\u7528\u6237\u8d26\u53f7\n\t * \n\t * @param request\n\t * @return\n\t * @throws JeecgBootException\n\t */",
    "source_code": "\npublic static String getUserNameByToken(HttpServletRequest request) throws JeecgBootException {\n\tString accessToken = request.getHeader(\"X-Access-Token\");\n\tString username = getUsername(accessToken);\n\tif (oConvertUtils.isEmpty(username)) {\n\t\tthrow new JeecgBootException(\"\u672a\u83b7\u53d6\u5230\u7528\u6237\");\n\t}\n\treturn username;\n}\n",
    "class_name": "JwtUtil",
    "method_name": "getUserNameByToken",
    "arguments": [
        "HttpServletRequest request"
    ],
    "generate_test": [
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JwtUtilTest {\n    @Test\n    public void getUserNameByTokenTest() {\n        // Create a mock HttpServletRequest\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n        \n        // Set the header value for \"X-Access-Token\"\n        Mockito.when(request.getHeader(\"X-Access-Token\")).thenReturn(\"testAccessToken\");\n        \n        // Invoke the method being tested\n        String result = JwtUtil.getUserNameByToken(request);\n        \n        // Assert the expected result\n        assertEquals(\"expectedUsername\", result);\n    }\n}",
        "@Test\npublic void getUserNameByTokenTest() {\n    HttpServletRequest request = new MockHttpServletRequest();\n    String accessToken = \"sampleAccessToken\";\n    request.addHeader(\"X-Access-Token\", accessToken);\n    \n    try {\n        String username = JwtUtil.getUserNameByToken(request);\n        assertNotNull(username);\n        assertEquals(\"testUsername\", username);\n    } catch (JeecgBootException e) {\n        fail(\"Exception should not be thrown.\");\n    }\n}",
        "@Test\npublic void getUserNameByTokenTest() throws JeecgBootException {\n    HttpServletRequest request = new MockHttpServletRequest();\n    request.addHeader(\"X-Access-Token\", \"dummy_token\");\n    String username = JwtUtil.getUserNameByToken(request);\n    assertEquals(\"dummy_username\", username);\n}",
        "@Test\npublic void getUserNameByTokenTest() {\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    when(request.getHeader(\"X-Access-Token\")).thenReturn(\"test_token\");\n    \n    String username = JwtUtil.getUserNameByToken(request);\n    \n    assertEquals(\"test_username\", username);\n}\n\nIn the above JUnit test case, I have mocked the HttpServletRequest class using the Mockito framework. I have also mocked the getHeader() method to return a test token value. Then, I call the getUserNameByToken() method from the JwtUtil class and store the returned username in a variable called \"username\". Finally, I use the assertEquals() method to verify that the expected username value matches the actual username value.",
        "@Test\npublic void getUserNameByTokenTest() {\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    when(request.getHeader(\"X-Access-Token\")).thenReturn(\"access_token\");\n    \n    try {\n        String username = JwtUtil.getUserNameByToken(request);\n        assertEquals(\"expected_username\", username);\n    } catch (JeecgBootException ex) {\n        fail(\"JeecgBootException thrown\");\n    }\n}",
        "@Test\npublic void getUserNameByTokenTest() {\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    when(request.getHeader(\"X-Access-Token\")).thenReturn(\"testToken\");\n    \n    try {\n        String result = JwtUtil.getUserNameByToken(request);\n        assertEquals(\"testUser\", result);\n    } catch (JeecgBootException e) {\n        fail(\"Exception should not be thrown\");\n    }\n    \n    when(request.getHeader(\"X-Access-Token\")).thenReturn(\"\");\n    \n    try {\n        JwtUtil.getUserNameByToken(request);\n        fail(\"Exception should be thrown\");\n    } catch (JeecgBootException e) {\n        assertEquals(\"\u672a\u83b7\u53d6\u5230\u7528\u6237\", e.getMessage());\n    }\n}",
        "@Test\npublic void getUserNameByTokenTest() {\n    HttpServletRequest request = new MockHttpServletRequest(); // create a mock object of HttpServletRequest\n    String token = \"sampleAccessToken\"; // set a sample access token for testing\n    request.addHeader(\"X-Access-Token\", token); // add the access token to the request header\n    try {\n        String result = JwtUtil.getUserNameByToken(request); // call the method to be tested\n        assertEquals(\"sampleUsername\", result); // assert that the expected username is returned\n    } catch (JeecgBootException e) {\n        fail(\"Exception should not be thrown\"); // the method should not throw an exception in this test case\n    }\n}",
        "@Test\npublic void getUserNameByTokenTest() throws JeecgBootException {\n    HttpServletRequest request = null; // Create a mock HttpServletRequest object\n    String expectedUsername = \"testUser\"; // Set the expected username\n    \n    String actualUsername = JwtUtil.getUserNameByToken(request);\n    \n    assertEquals(expectedUsername, actualUsername);\n}",
        "\n// Mocking the HttpServletRequest\nHttpServletRequest request = Mockito.mock(HttpServletRequest.class);\nMockito.when(request.getHeader(\"X-Access-Token\")).thenReturn(\"dummyToken\");\n\n// Call the method under test\nString username = JwtUtil.getUserNameByToken(request);\n\n// Assert the result\nassertEquals(\"dummyUsername\", username);\n",
        "package org.jeecg.common.system.util;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport javax.servlet.http.HttpServletRequest;\nimport org.jeecg.common.exception.JeecgBootException;\n\npublic class JwtUtilTest {\n    @Test\n    public void getUserNameByTokenTest() {\n        HttpServletRequest mockRequest = Mockito.mock(HttpServletRequest.class);\n        Mockito.when(mockRequest.getHeader(\"X-Access-Token\")).thenReturn(\"sample_token\");\n        \n        try {\n            String result = JwtUtil.getUserNameByToken(mockRequest);\n            assertEquals(\"expected_username\", result);\n        } catch (JeecgBootException e) {\n            fail(\"Unexpected exception occurred\");\n        }\n    }\n}"
    ]
}
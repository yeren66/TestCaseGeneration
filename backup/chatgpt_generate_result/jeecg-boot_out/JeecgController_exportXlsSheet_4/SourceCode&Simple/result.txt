Source code: 


protected ModelAndView exportXlsSheet(HttpServletRequest request, T object, Class<T> clazz, String title,String exportFields,Integer pageNum) {
    // Step.1 组装查询条件
    QueryWrapper<T> queryWrapper = QueryGenerator.initQueryWrapper(object, request.getParameterMap());
    LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();
    // Step.2 计算分页sheet数据
    double total = service.count();
    int count = (int)Math.ceil(total/pageNum);
    //update-begin-author:liusq---date:20220629--for: 多sheet导出根据选择导出写法调整 ---
    // Step.3  过滤选中数据
    String selections = request.getParameter("selections");
    if (oConvertUtils.isNotEmpty(selections)) {
        List<String> selectionList = Arrays.asList(selections.split(","));
        queryWrapper.in("id",selectionList);
    }
    //update-end-author:liusq---date:20220629--for: 多sheet导出根据选择导出写法调整 ---
    // Step.4 多sheet处理
    List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();
    for (int i = 1; i <=count ; i++) {
        Page<T> page = new Page<T>(i, pageNum);
        IPage<T> pageList = service.page(page, queryWrapper);
        List<T> exportList = pageList.getRecords();
        Map<String, Object> map = new HashMap<>(5);
        ExportParams exportParams=new ExportParams(title + "报表", "导出人:" + sysUser.getRealname(), title+i,jeecgBaseConfig.getPath().getUpload());
        exportParams.setType(ExcelType.XSSF);
        //map.put("title",exportParams);
        //表格Title
        map.put(NormalExcelConstants.PARAMS,exportParams);
        //表格对应实体
        map.put(NormalExcelConstants.CLASS,clazz);
        //数据集合
        map.put(NormalExcelConstants.DATA_LIST, exportList);
        listMap.add(map);
    }
    // Step.4 AutoPoi 导出Excel
    ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());
    //此处设置的filename无效 ,前端会重更新设置一下
    mv.addObject(NormalExcelConstants.FILE_NAME, title);
    mv.addObject(NormalExcelConstants.MAP_LIST, listMap);
    return mv;
}



No.1 generated result --------------------------

@Test
public void exportXlsSheetTest() {
    // Create a mock HttpServletRequest
    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
    
    // Create a mock T object and Class<T> object
    T object = Mockito.mock(T.class);
    Class<T> clazz = Mockito.mock(Class<T>.class);
    
    // Create other required variables
    String title = "Test Title";
    String exportFields = "field1, field2, field3";
    int pageNum = 10;
    
    // Create a JeecgController object
    JeecgController jeecgController = new JeecgController();
    
    // Call the exportXlsSheet method and get the output
    ModelAndView mv = jeecgController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);
    
    // Create assertion statements to verify the output
    assertNotNull(mv);
    assertEquals(title, mv.getModel().get(NormalExcelConstants.FILE_NAME));
}


No.2 generated result --------------------------

package org.jeecg.common.system.base.controller;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class JeecgControllerTest {
    @Test
    public void exportXlsSheetTest() {
        HttpServletRequest request = new MockHttpServletRequest();
        T object = new T();
        Class<T> clazz = T.class;
        String title = "Test Title";
        String exportFields = "field1,field2,field3";
        Integer pageNum = 10;
        
        JeecgController jeecgController = new JeecgController();
        ModelAndView result = jeecgController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);
        
        assertNotNull(result);
        // Add assertions for the expected output
        
    }
}


No.3 generated result --------------------------

@Test
public void exportXlsSheetTest() {
    HttpServletRequest request = mock(HttpServletRequest.class);
    T object = mock(T.class);
    Class<T> clazz = mock(Class.class);
    String title = "Test Title";
    String exportFields = "Field1, Field2, Field3";
    Integer pageNum = 10;
    
    // Create a QueryWrapper object
    QueryWrapper<T> queryWrapper = mock(QueryWrapper.class);
    when(QueryGenerator.initQueryWrapper(object, request.getParameterMap())).thenReturn(queryWrapper);
    
    // Create a LoginUser object
    LoginUser sysUser = mock(LoginUser.class);
    when(SecurityUtils.getSubject().getPrincipal()).thenReturn(sysUser);
    
    // Calculate total pages
    double total = 100;
    int count = (int) Math.ceil(total/pageNum);
    
    // Set up selected data in request
    String selections = "1,2,3";
    when(request.getParameter("selections")).thenReturn(selections);
    
    // Create a list of maps for each sheet
    List<Map<String, Object>> listMap = new ArrayList<>();
    for (int i = 1; i <= count; i++) {
        Page<T> page = new Page<>(i, pageNum);
        IPage<T> pageList = mock(IPage.class);
        when(service.page(page, queryWrapper)).thenReturn(pageList);
        List<T> exportList = new ArrayList<>();
        Map<String, Object> map = new HashMap<>(5);
        ExportParams exportParams = new ExportParams(title + "报表", "导出人:" + sysUser.getRealname(), title + i, jeecgBaseConfig.getPath().getUpload());
        exportParams.setType(ExcelType.XSSF);
        map.put(NormalExcelConstants.PARAMS, exportParams);
        map.put(NormalExcelConstants.CLASS, clazz);
        map.put(NormalExcelConstants.DATA_LIST, exportList);
        listMap.add(map);
    }
    
    // Create a ModelAndView object
    ModelAndView mv = mock(ModelAndView.class);
    whenNew(ModelAndView.class).withAnyArguments().thenReturn(mv);
    when(mv.addObject(NormalExcelConstants.FILE_NAME, title)).thenReturn(mv);
    when(mv.addObject(NormalExcelConstants.MAP_LIST, listMap)).thenReturn(mv);
    
    // Call the method under test
    JeecgController jeecgController = new JeecgController();
    ModelAndView result = jeecgController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);
    
    // Verify the result
    assertEquals(mv, result);
}


No.4 generated result --------------------------

@Test
public void exportXlsSheetTest() {
    HttpServletRequest request = new MockHttpServletRequest();
    T object = new T();
    Class<T> clazz = T.class;
    String title = "Test Title";
    String exportFields = "field1, field2, field3";
    Integer pageNum = 10;
    
    JeecgController controller = new JeecgController();
    ModelAndView result = controller.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);
    
    assertNotNull(result);
    assertEquals(title, result.getModel().get(NormalExcelConstants.FILE_NAME));
    assertNotNull(result.getModel().get(NormalExcelConstants.MAP_LIST));
    // Add assertions for other values in the ModelAndView object if necessary
}


No.5 generated result --------------------------

@Test
public void exportXlsSheetTest() {
    // Arrange
    HttpServletRequest request = new HttpServletRequest();
    T object = new T();
    Class<T> clazz = new Class<T>();
    String title = "Test Title";
    String exportFields = "Field1,Field2,Field3";
    Integer pageNum = 10;
    JeecgController jeecgController = new JeecgController();
    
    // Act
    ModelAndView result = jeecgController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);
    
    // Assert
    assertNotNull(result);
    assertEquals(title, result.getModel().get(NormalExcelConstants.FILE_NAME));
}


No.6 generated result --------------------------

package org.jeecg.common.system.base.controller;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class JeecgControllerTest {
    @Test
    public void exportXlsSheetTest() {
        // Initialize the required variables for the test case
        HttpServletRequest request = new MockHttpServletRequest();
        T object = new T();
        Class<T> clazz = T.class;
        String title = "Test Title";
        String exportFields = "field1,field2";
        Integer pageNum = 10;
        
        // Call the method to be tested
        ModelAndView result = exportXlsSheet(request, object, clazz, title, exportFields, pageNum);
        
        // Assert the expected result
        assertNotNull(result);
        assertEquals("Test Title", result.getModel().get(NormalExcelConstants.FILE_NAME));
        List<Map<String, Object>> listMap = (List<Map<String, Object>>) result.getModel().get(NormalExcelConstants.MAP_LIST);
        assertEquals(1, listMap.size());
        Map<String, Object> map = listMap.get(0);
        assertEquals("Test Title报表", map.get(NormalExcelConstants.PARAMS).getTitle());
        assertEquals("导出人:John Doe", map.get(NormalExcelConstants.PARAMS).getSecondTitle());
        assertEquals("Test Title1", map.get(NormalExcelConstants.PARAMS).getSheetName());
        assertEquals("path/to/upload", map.get(NormalExcelConstants.PARAMS).getPath());
        assertEquals(ExcelType.XSSF, map.get(NormalExcelConstants.PARAMS).getType());
        assertEquals(clazz, map.get(NormalExcelConstants.CLASS));
        assertEquals(exportList, map.get(NormalExcelConstants.DATA_LIST));
    }
}


No.7 generated result --------------------------

@Test
public void exportXlsSheetTest() {
    HttpServletRequest request = new HttpServletRequest();
    T object = new T();
    Class<T> clazz = T.class;
    String title = "Test Title";
    String exportFields = "Test Export Fields";
    Integer pageNum = 10;
    
    JeecgController controller = new JeecgController();
    ModelAndView result = controller.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);
    
    assertNotNull(result);
    assertEquals(title, result.getModel().get(NormalExcelConstants.FILE_NAME));
}


No.8 generated result --------------------------

package org.jeecg.common.system.base.controller;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class JeecgControllerTest {
    @Test
    public void exportXlsSheetTest() {
        JeecgController jeecgController = new JeecgController();
        HttpServletRequest request = new HttpServletRequest();
        T object = new T();
        Class<T> clazz = T.class;
        String title = "Test Title";
        String exportFields = "field1,field2";
        Integer pageNum = 10;
        
        ModelAndView result = jeecgController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);
        
        assertNotNull(result);
        // Add further assertions as needed
    }
}


No.9 generated result --------------------------

@Test
public void exportXlsSheetTest() {
    JeecgController controller = new JeecgController();
    HttpServletRequest request = new MockHttpServletRequest();
    
    // Create data for the test
    T object = new T();
    Class<T> clazz = T.class;
    String title = "Test Title";
    String exportFields = "field1, field2, field3";
    Integer pageNum = 10;
    
    // Call the method to be tested
    ModelAndView result = controller.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);
    
    // Perform assertions on the result
    assertNotNull(result);
    //Assert other assertions here
}


No.10 generated result --------------------------

@Test
public void exportXlsSheetTest() {
    JeecgController controller = new JeecgController();
    HttpServletRequest request = mock(HttpServletRequest.class);
    T object = mock(T.class);
    Class<T> clazz = mock(Class.class);
    String title = "Test Title";
    String exportFields = "field1,field2,field3";
    Integer pageNum = 10;
    
    ModelAndView mv = controller.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);
    
    assertNotNull(mv);
    assertEquals(title, mv.getModel().get(NormalExcelConstants.FILE_NAME));
    assertNotNull(mv.getModel().get(NormalExcelConstants.MAP_LIST));
    assertTrue(mv.getView() instance of JeecgEntityExcelView);
}



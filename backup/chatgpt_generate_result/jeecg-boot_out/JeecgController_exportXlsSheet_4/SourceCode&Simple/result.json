{
    "project_name": "jeecg-boot",
    "file_name": "JeecgController.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/system/base/controller/JeecgController.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.system.base.controller",
    "docstring": "/**\n     * \u6839\u636e\u6bcf\u9875sheet\u6570\u91cf\u5bfc\u51fa\u591asheet\n     *\n     * @param request\n     * @param object \u5b9e\u4f53\u7c7b\n     * @param clazz \u5b9e\u4f53\u7c7bclass\n     * @param title \u6807\u9898\n     * @param exportFields \u5bfc\u51fa\u5b57\u6bb5\u81ea\u5b9a\u4e49\n     * @param pageNum \u6bcf\u4e2asheet\u7684\u6570\u636e\u6761\u6570\n     * @param request\n     */",
    "source_code": "\nprotected ModelAndView exportXlsSheet(HttpServletRequest request, T object, Class<T> clazz, String title,String exportFields,Integer pageNum) {\n    // Step.1 \u7ec4\u88c5\u67e5\u8be2\u6761\u4ef6\n    QueryWrapper<T> queryWrapper = QueryGenerator.initQueryWrapper(object, request.getParameterMap());\n    LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();\n    // Step.2 \u8ba1\u7b97\u5206\u9875sheet\u6570\u636e\n    double total = service.count();\n    int count = (int)Math.ceil(total/pageNum);\n    //update-begin-author:liusq---date:20220629--for: \u591asheet\u5bfc\u51fa\u6839\u636e\u9009\u62e9\u5bfc\u51fa\u5199\u6cd5\u8c03\u6574 ---\n    // Step.3  \u8fc7\u6ee4\u9009\u4e2d\u6570\u636e\n    String selections = request.getParameter(\"selections\");\n    if (oConvertUtils.isNotEmpty(selections)) {\n        List<String> selectionList = Arrays.asList(selections.split(\",\"));\n        queryWrapper.in(\"id\",selectionList);\n    }\n    //update-end-author:liusq---date:20220629--for: \u591asheet\u5bfc\u51fa\u6839\u636e\u9009\u62e9\u5bfc\u51fa\u5199\u6cd5\u8c03\u6574 ---\n    // Step.4 \u591asheet\u5904\u7406\n    List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();\n    for (int i = 1; i <=count ; i++) {\n        Page<T> page = new Page<T>(i, pageNum);\n        IPage<T> pageList = service.page(page, queryWrapper);\n        List<T> exportList = pageList.getRecords();\n        Map<String, Object> map = new HashMap<>(5);\n        ExportParams exportParams=new ExportParams(title + \"\u62a5\u8868\", \"\u5bfc\u51fa\u4eba:\" + sysUser.getRealname(), title+i,jeecgBaseConfig.getPath().getUpload());\n        exportParams.setType(ExcelType.XSSF);\n        //map.put(\"title\",exportParams);\n        //\u8868\u683cTitle\n        map.put(NormalExcelConstants.PARAMS,exportParams);\n        //\u8868\u683c\u5bf9\u5e94\u5b9e\u4f53\n        map.put(NormalExcelConstants.CLASS,clazz);\n        //\u6570\u636e\u96c6\u5408\n        map.put(NormalExcelConstants.DATA_LIST, exportList);\n        listMap.add(map);\n    }\n    // Step.4 AutoPoi \u5bfc\u51faExcel\n    ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());\n    //\u6b64\u5904\u8bbe\u7f6e\u7684filename\u65e0\u6548 ,\u524d\u7aef\u4f1a\u91cd\u66f4\u65b0\u8bbe\u7f6e\u4e00\u4e0b\n    mv.addObject(NormalExcelConstants.FILE_NAME, title);\n    mv.addObject(NormalExcelConstants.MAP_LIST, listMap);\n    return mv;\n}\n",
    "class_name": "JeecgController",
    "method_name": "exportXlsSheet",
    "arguments": [
        "HttpServletRequest request",
        "T object",
        "Class<T> clazz",
        "String title",
        "String exportFields",
        "Integer pageNum"
    ],
    "generate_test": [
        "@Test\npublic void exportXlsSheetTest() {\n    // Create a mock HttpServletRequest\n    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n    \n    // Create a mock T object and Class<T> object\n    T object = Mockito.mock(T.class);\n    Class<T> clazz = Mockito.mock(Class<T>.class);\n    \n    // Create other required variables\n    String title = \"Test Title\";\n    String exportFields = \"field1, field2, field3\";\n    int pageNum = 10;\n    \n    // Create a JeecgController object\n    JeecgController jeecgController = new JeecgController();\n    \n    // Call the exportXlsSheet method and get the output\n    ModelAndView mv = jeecgController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n    \n    // Create assertion statements to verify the output\n    assertNotNull(mv);\n    assertEquals(title, mv.getModel().get(NormalExcelConstants.FILE_NAME));\n}",
        "package org.jeecg.common.system.base.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JeecgControllerTest {\n    @Test\n    public void exportXlsSheetTest() {\n        HttpServletRequest request = new MockHttpServletRequest();\n        T object = new T();\n        Class<T> clazz = T.class;\n        String title = \"Test Title\";\n        String exportFields = \"field1,field2,field3\";\n        Integer pageNum = 10;\n        \n        JeecgController jeecgController = new JeecgController();\n        ModelAndView result = jeecgController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n        \n        assertNotNull(result);\n        // Add assertions for the expected output\n        \n    }\n}",
        "@Test\npublic void exportXlsSheetTest() {\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    T object = mock(T.class);\n    Class<T> clazz = mock(Class.class);\n    String title = \"Test Title\";\n    String exportFields = \"Field1, Field2, Field3\";\n    Integer pageNum = 10;\n    \n    // Create a QueryWrapper object\n    QueryWrapper<T> queryWrapper = mock(QueryWrapper.class);\n    when(QueryGenerator.initQueryWrapper(object, request.getParameterMap())).thenReturn(queryWrapper);\n    \n    // Create a LoginUser object\n    LoginUser sysUser = mock(LoginUser.class);\n    when(SecurityUtils.getSubject().getPrincipal()).thenReturn(sysUser);\n    \n    // Calculate total pages\n    double total = 100;\n    int count = (int) Math.ceil(total/pageNum);\n    \n    // Set up selected data in request\n    String selections = \"1,2,3\";\n    when(request.getParameter(\"selections\")).thenReturn(selections);\n    \n    // Create a list of maps for each sheet\n    List<Map<String, Object>> listMap = new ArrayList<>();\n    for (int i = 1; i <= count; i++) {\n        Page<T> page = new Page<>(i, pageNum);\n        IPage<T> pageList = mock(IPage.class);\n        when(service.page(page, queryWrapper)).thenReturn(pageList);\n        List<T> exportList = new ArrayList<>();\n        Map<String, Object> map = new HashMap<>(5);\n        ExportParams exportParams = new ExportParams(title + \"\u62a5\u8868\", \"\u5bfc\u51fa\u4eba:\" + sysUser.getRealname(), title + i, jeecgBaseConfig.getPath().getUpload());\n        exportParams.setType(ExcelType.XSSF);\n        map.put(NormalExcelConstants.PARAMS, exportParams);\n        map.put(NormalExcelConstants.CLASS, clazz);\n        map.put(NormalExcelConstants.DATA_LIST, exportList);\n        listMap.add(map);\n    }\n    \n    // Create a ModelAndView object\n    ModelAndView mv = mock(ModelAndView.class);\n    whenNew(ModelAndView.class).withAnyArguments().thenReturn(mv);\n    when(mv.addObject(NormalExcelConstants.FILE_NAME, title)).thenReturn(mv);\n    when(mv.addObject(NormalExcelConstants.MAP_LIST, listMap)).thenReturn(mv);\n    \n    // Call the method under test\n    JeecgController jeecgController = new JeecgController();\n    ModelAndView result = jeecgController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n    \n    // Verify the result\n    assertEquals(mv, result);\n}",
        "@Test\npublic void exportXlsSheetTest() {\n    HttpServletRequest request = new MockHttpServletRequest();\n    T object = new T();\n    Class<T> clazz = T.class;\n    String title = \"Test Title\";\n    String exportFields = \"field1, field2, field3\";\n    Integer pageNum = 10;\n    \n    JeecgController controller = new JeecgController();\n    ModelAndView result = controller.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n    \n    assertNotNull(result);\n    assertEquals(title, result.getModel().get(NormalExcelConstants.FILE_NAME));\n    assertNotNull(result.getModel().get(NormalExcelConstants.MAP_LIST));\n    // Add assertions for other values in the ModelAndView object if necessary\n}",
        "@Test\npublic void exportXlsSheetTest() {\n    // Arrange\n    HttpServletRequest request = new HttpServletRequest();\n    T object = new T();\n    Class<T> clazz = new Class<T>();\n    String title = \"Test Title\";\n    String exportFields = \"Field1,Field2,Field3\";\n    Integer pageNum = 10;\n    JeecgController jeecgController = new JeecgController();\n    \n    // Act\n    ModelAndView result = jeecgController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n    \n    // Assert\n    assertNotNull(result);\n    assertEquals(title, result.getModel().get(NormalExcelConstants.FILE_NAME));\n}",
        "package org.jeecg.common.system.base.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JeecgControllerTest {\n    @Test\n    public void exportXlsSheetTest() {\n        // Initialize the required variables for the test case\n        HttpServletRequest request = new MockHttpServletRequest();\n        T object = new T();\n        Class<T> clazz = T.class;\n        String title = \"Test Title\";\n        String exportFields = \"field1,field2\";\n        Integer pageNum = 10;\n        \n        // Call the method to be tested\n        ModelAndView result = exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n        \n        // Assert the expected result\n        assertNotNull(result);\n        assertEquals(\"Test Title\", result.getModel().get(NormalExcelConstants.FILE_NAME));\n        List<Map<String, Object>> listMap = (List<Map<String, Object>>) result.getModel().get(NormalExcelConstants.MAP_LIST);\n        assertEquals(1, listMap.size());\n        Map<String, Object> map = listMap.get(0);\n        assertEquals(\"Test Title\u62a5\u8868\", map.get(NormalExcelConstants.PARAMS).getTitle());\n        assertEquals(\"\u5bfc\u51fa\u4eba:John Doe\", map.get(NormalExcelConstants.PARAMS).getSecondTitle());\n        assertEquals(\"Test Title1\", map.get(NormalExcelConstants.PARAMS).getSheetName());\n        assertEquals(\"path/to/upload\", map.get(NormalExcelConstants.PARAMS).getPath());\n        assertEquals(ExcelType.XSSF, map.get(NormalExcelConstants.PARAMS).getType());\n        assertEquals(clazz, map.get(NormalExcelConstants.CLASS));\n        assertEquals(exportList, map.get(NormalExcelConstants.DATA_LIST));\n    }\n}",
        "@Test\npublic void exportXlsSheetTest() {\n    HttpServletRequest request = new HttpServletRequest();\n    T object = new T();\n    Class<T> clazz = T.class;\n    String title = \"Test Title\";\n    String exportFields = \"Test Export Fields\";\n    Integer pageNum = 10;\n    \n    JeecgController controller = new JeecgController();\n    ModelAndView result = controller.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n    \n    assertNotNull(result);\n    assertEquals(title, result.getModel().get(NormalExcelConstants.FILE_NAME));\n}",
        "package org.jeecg.common.system.base.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JeecgControllerTest {\n    @Test\n    public void exportXlsSheetTest() {\n        JeecgController jeecgController = new JeecgController();\n        HttpServletRequest request = new HttpServletRequest();\n        T object = new T();\n        Class<T> clazz = T.class;\n        String title = \"Test Title\";\n        String exportFields = \"field1,field2\";\n        Integer pageNum = 10;\n        \n        ModelAndView result = jeecgController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n        \n        assertNotNull(result);\n        // Add further assertions as needed\n    }\n}",
        "@Test\npublic void exportXlsSheetTest() {\n    JeecgController controller = new JeecgController();\n    HttpServletRequest request = new MockHttpServletRequest();\n    \n    // Create data for the test\n    T object = new T();\n    Class<T> clazz = T.class;\n    String title = \"Test Title\";\n    String exportFields = \"field1, field2, field3\";\n    Integer pageNum = 10;\n    \n    // Call the method to be tested\n    ModelAndView result = controller.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n    \n    // Perform assertions on the result\n    assertNotNull(result);\n    //Assert other assertions here\n}",
        "@Test\npublic void exportXlsSheetTest() {\n    JeecgController controller = new JeecgController();\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    T object = mock(T.class);\n    Class<T> clazz = mock(Class.class);\n    String title = \"Test Title\";\n    String exportFields = \"field1,field2,field3\";\n    Integer pageNum = 10;\n    \n    ModelAndView mv = controller.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n    \n    assertNotNull(mv);\n    assertEquals(title, mv.getModel().get(NormalExcelConstants.FILE_NAME));\n    assertNotNull(mv.getModel().get(NormalExcelConstants.MAP_LIST));\n    assertTrue(mv.getView() instance of JeecgEntityExcelView);\n}"
    ]
}
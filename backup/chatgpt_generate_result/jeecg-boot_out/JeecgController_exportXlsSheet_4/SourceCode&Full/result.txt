Source code: 


protected ModelAndView exportXlsSheet(HttpServletRequest request, T object, Class<T> clazz, String title,String exportFields,Integer pageNum) {
    // Step.1 组装查询条件
    QueryWrapper<T> queryWrapper = QueryGenerator.initQueryWrapper(object, request.getParameterMap());
    LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();
    // Step.2 计算分页sheet数据
    double total = service.count();
    int count = (int)Math.ceil(total/pageNum);
    //update-begin-author:liusq---date:20220629--for: 多sheet导出根据选择导出写法调整 ---
    // Step.3  过滤选中数据
    String selections = request.getParameter("selections");
    if (oConvertUtils.isNotEmpty(selections)) {
        List<String> selectionList = Arrays.asList(selections.split(","));
        queryWrapper.in("id",selectionList);
    }
    //update-end-author:liusq---date:20220629--for: 多sheet导出根据选择导出写法调整 ---
    // Step.4 多sheet处理
    List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();
    for (int i = 1; i <=count ; i++) {
        Page<T> page = new Page<T>(i, pageNum);
        IPage<T> pageList = service.page(page, queryWrapper);
        List<T> exportList = pageList.getRecords();
        Map<String, Object> map = new HashMap<>(5);
        ExportParams exportParams=new ExportParams(title + "报表", "导出人:" + sysUser.getRealname(), title+i,jeecgBaseConfig.getPath().getUpload());
        exportParams.setType(ExcelType.XSSF);
        //map.put("title",exportParams);
        //表格Title
        map.put(NormalExcelConstants.PARAMS,exportParams);
        //表格对应实体
        map.put(NormalExcelConstants.CLASS,clazz);
        //数据集合
        map.put(NormalExcelConstants.DATA_LIST, exportList);
        listMap.add(map);
    }
    // Step.4 AutoPoi 导出Excel
    ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());
    //此处设置的filename无效 ,前端会重更新设置一下
    mv.addObject(NormalExcelConstants.FILE_NAME, title);
    mv.addObject(NormalExcelConstants.MAP_LIST, listMap);
    return mv;
}



No.1 generated result --------------------------

protected ModelAndView exportXlsSheet(HttpServletRequest request, T object, Class<T> clazz, String title,String exportFields,Integer pageNum) {
    // Step.1 组装查询条件
    QueryWrapper<T> queryWrapper = QueryGenerator.initQueryWrapper(object, request.getParameterMap());
    LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();
    // Step.2 计算分页sheet数据
    double total = service.count();
    int count = (int)Math.ceil(total/pageNum);
    // Step.3  过滤选中数据
    String selections = request.getParameter("selections");
    if (oConvertUtils.isNotEmpty(selections)) {
        List<String> selectionList = Arrays.asList(selections.split(","));
        queryWrapper.in("id", selectionList);
    }
    // Step.4 多sheet处理
    List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();
    for (int i = 1; i <=count ; i++) {
        Page<T> page = new Page<T>(i, pageNum);
        IPage<T> pageList = service.page(page, queryWrapper);
        List<T> exportList = pageList.getRecords();
        Map<String, Object> map = new HashMap<>(5);
        ExportParams exportParams=new ExportParams(title + "报表", "导出人:" + sysUser.getRealname(), title+i,jeecgBaseConfig.getPath().getUpload());
        exportParams.setType(ExcelType.XSSF);
        map.put(NormalExcelConstants.PARAMS,exportParams);
        map.put(NormalExcelConstants.CLASS,clazz);
        map.put(NormalExcelConstants.DATA_LIST, exportList);
        listMap.add(map);
    }
    // Step.5 AutoPoi 导出Excel
    ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());
    mv.addObject(NormalExcelConstants.FILE_NAME, title);
    mv.addObject(NormalExcelConstants.MAP_LIST, listMap);
    return mv;
}


No.2 generated result --------------------------

@Test
public void exportXlsSheetTest() {
    HttpServletRequest request = mock(HttpServletRequest.class);
    T object = mock(T.class);
    Class<T> clazz = mock(Class.class);
    String title = "TestTitle";
    String exportFields = "field1, field2, field3";
    int pageNum = 10;
    
    // Mock the necessary dependencies for the exportXlsSheet method
    QueryWrapper<T> queryWrapper = mock(QueryWrapper.class);
    LoginUser sysUser = mock(LoginUser.class);
    
    // Mock the service count method return value
    double total = 100;
    when(service.count()).thenReturn(total);
    
    // Mock the page and pageList objects
    Page<T> page = mock(Page.class);
    whenNew(Page<T>.class).withArguments(anyInt(), anyInt()).thenReturn(page);
    IPage<T> pageList = mock(IPage.class);
    when(service.page(page, queryWrapper)).thenReturn(pageList);
    
    // Mock the exportList
    List<T> exportList = new ArrayList<>();
    when(pageList.getRecords()).thenReturn(exportList);
    
    // Mock the exportParams object
    ExportParams exportParams = mock(ExportParams.class);
    whenNew(ExportParams.class).withArguments(anyString(), anyString(), anyString(), anyString()).thenReturn(exportParams);
    
    // Create the expected map object and add the necessary values
    Map<String, Object> map = new HashMap<>();
    map.put(NormalExcelConstants.PARAMS, exportParams);
    map.put(NormalExcelConstants.CLASS, clazz);
    map.put(NormalExcelConstants.DATA_LIST, exportList);
    
    // Create the expected listMap object and add the map
    List<Map<String, Object>> listMap = new ArrayList<>();
    listMap.add(map);
    
    // Mock the ModelAndView object
    ModelAndView mv = mock(ModelAndView.class);
    whenNew(ModelAndView.class).withArguments(any(JeecgEntityExcelView.class)).thenReturn(mv);
    
    // Perform the method call
    JeecgController<T, S> controller = new JeecgController<>();
    ModelAndView result = controller.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);
    
    // Verify the method invocations and assert the result
    verify(service).count();
    verify(service, times(count)).page(page, queryWrapper);
    verifyNew(ModelAndView.class).withArguments(any(JeecgEntityExcelView.class));
    verify(mv).addObject(NormalExcelConstants.FILE_NAME, title);
    verify(mv).addObject(NormalExcelConstants.MAP_LIST, listMap);
    assertEquals(mv, result);
}


No.3 generated result --------------------------

@Test
public void exportXlsSheetTest() {
    // Create a mock HttpServletRequest object
    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
    
    // Create a mock T object
    T object = Mockito.mock(T.class);
    
    // Create a mock Class object
    Class<T> clazz = Mockito.mock(Class.class);
    
    // Set the necessary parameters for the exportXlsSheet method
    String title = "Test Title";
    String exportFields = "Field1,Field2,Field3";
    Integer pageNum = 10;
    
    // Create a mock LoginUser object
    LoginUser sysUser = Mockito.mock(LoginUser.class);
    Mockito.when(SecurityUtils.getSubject().getPrincipal()).thenReturn(sysUser);
    
    // Create a mock QueryWrapper object
    QueryWrapper<T> queryWrapper = Mockito.mock(QueryWrapper.class);
    Mockito.when(QueryGenerator.initQueryWrapper(object, request.getParameterMap())).thenReturn(queryWrapper);
    
    // Create a mock IService object
    IService<T> service = Mockito.mock(IService.class);
    Mockito.when(service.count()).thenReturn(100.0);
    
    // Create a mock JeecgBaseConfig object
    JeecgBaseConfig jeecgBaseConfig = Mockito.mock(JeecgBaseConfig.class);
    Mockito.when(jeecgBaseConfig.getPath().getUpload()).thenReturn("path/to/upload");
    
    // Create a mock Page object
    Page<T> page = Mockito.mock(Page.class);
    Mockito.whenNew(Page.class).withArguments(1, pageNum).thenReturn(page);
    
    // Create a mock IPage object
    IPage<T> pageList = Mockito.mock(IPage.class);
    Mockito.when(service.page(page, queryWrapper)).thenReturn(pageList);
    
    // Create a mock List<T> object
    List<T> exportList = Mockito.mock(List.class);
    Mockito.when(pageList.getRecords()).thenReturn(exportList);
    
    // Create a mock HashMap object
    Map<String, Object> map = Mockito.mock(HashMap.class);
    Mockito.whenNew(HashMap.class).thenReturn(map);
    
    // Create a mock ExportParams object
    ExportParams exportParams = Mockito.mock(ExportParams.class);
    Mockito.whenNew(ExportParams.class).withArguments(title + "报表", "导出人:" + sysUser.getRealname(), title+i,jeecgBaseConfig.getPath().getUpload()).thenReturn(exportParams);
    
    // Set the necessary parameters for the map object
    Mockito.when(map.put(NormalExcelConstants.PARAMS, exportParams)).thenReturn(null);
    Mockito.when(map.put(NormalExcelConstants.CLASS, clazz)).thenReturn(null);
    Mockito.when(map.put(NormalExcelConstants.DATA_LIST, exportList)).thenReturn(null);
    
    // Create a mock JeecgEntityExcelView object
    JeecgEntityExcelView excelView = Mockito.mock(JeecgEntityExcelView.class);
    ModelAndView mv = new ModelAndView(excelView);
    Mockito.whenNew(ModelAndView.class).withArguments(excelView).thenReturn(mv);
    
    // Set the necessary parameters for the mv object
    Mockito.when(mv.addObject(NormalExcelConstants.FILE_NAME, title)).thenReturn(mv);
    Mockito.when(mv.addObject(NormalExcelConstants.MAP_LIST, Mockito.anyList())).thenReturn(mv);
    
    // Call the exportXlsSheet method
    JeecgController<T, IService<T>> controller = new JeecgController<>();
    controller.service = service;
    controller.jeecgBaseConfig = jeecgBaseConfig;
    ModelAndView result = controller.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);
    
    // Verify the expected behavior
    Mockito.verify(QueryGenerator).initQueryWrapper(object, request.getParameterMap());
    Mockito.verify(SecurityUtils.getSubject()).getPrincipal();
    Mockito.verify(service, Mockito.times(2)).count();
    Mockito.verify(jeecgBaseConfig.getPath()).getUpload();
    Mockito.verify(service).page(page, queryWrapper);
    Mockito.verify(pageList).getRecords();
    Mockito.verify(map).put(NormalExcelConstants.PARAMS, exportParams);
    Mockito.verify(map).put(NormalExcelConstants.CLASS, clazz);
    Mockito.verify(map).put(NormalExcelConstants.DATA_LIST, exportList);
    Mockito.verify(mv).addObject(NormalExcelConstants.FILE_NAME, title);
    Mockito.verify(mv).addObject(NormalExcelConstants.MAP_LIST, Mockito.anyList());
    assertEquals(excelView, result.getView());
}



No.4 generated result --------------------------

protected ModelAndView exportXlsSheet(HttpServletRequest request, T object, Class<T> clazz, String title, String exportFields, Integer pageNum) {
    // Step.1 组装查询条件
    QueryWrapper<T> queryWrapper = QueryGenerator.initQueryWrapper(object, request.getParameterMap());
    LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();
    // Step.2 计算分页sheet数据
    double total = service.count();
    int count = (int) Math.ceil(total / pageNum);
    //update-begin-author:liusq---date:20220629--for: 多sheet导出根据选择导出写法调整 ---
    // Step.3  过滤选中数据
    String selections = request.getParameter("selections");
    if (oConvertUtils.isNotEmpty(selections)) {
        List<String> selectionList = Arrays.asList(selections.split(","));
        queryWrapper.in("id", selectionList);
    }
    //update-end-author:liusq---date:20220629--for: 多sheet导出根据选择导出写法调整 ---
    // Step.4 多sheet处理
    List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();
    for (int i = 1; i <= count; i++) {
        Page<T> page = new Page<T>(i, pageNum);
        IPage<T> pageList = service.page(page, queryWrapper);
        List<T> exportList = pageList.getRecords();
        Map<String, Object> map = new HashMap<>(5);
        ExportParams exportParams = new ExportParams(title + "报表", "导出人:" + sysUser.getRealname(), title + i, jeecgBaseConfig.getPath().getUpload());
        exportParams.setType(ExcelType.XSSF);
        //map.put("title",exportParams);
        //表格Title
        map.put(NormalExcelConstants.PARAMS, exportParams);
        //表格对应实体
        map.put(NormalExcelConstants.CLASS, clazz);
        //数据集合
        map.put(NormalExcelConstants.DATA_LIST, exportList);
        listMap.add(map);
    }
    // Step.4 AutoPoi 导出Excel
    ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());
    //此处设置的filename无效 ,前端会重更新设置一下
    mv.addObject(NormalExcelConstants.FILE_NAME, title);
    mv.addObject(NormalExcelConstants.MAP_LIST, listMap);
    return mv;
}


No.5 generated result --------------------------

package org.jeecg.common.system.base.controller;

import org.junit.jupiter.api.*;
import org.springframework.web.servlet.ModelAndView;
import static org.junit.jupiter.api.Assertions.*;

public class JeecgControllerTest {
    @Test
    public void exportXlsSheetTest() {
        JeecgController<TestObject, TestService> controller = new JeecgController<>();

        // Create mock objects and set required values
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        TestObject object = Mockito.mock(TestObject.class);
        Class<TestObject> clazz = TestObject.class;
        String title = "Test Title";
        String exportFields = "Field1,Field2,Field3";
        int pageNum = 10;

        // Call the method to be tested
        ModelAndView result = controller.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);

        // Assert the expected result
        assertNotNull(result);
        assertEquals(title, result.getModel().get(NormalExcelConstants.FILE_NAME));
        assertEquals(clazz, result.getModel().get(NormalExcelConstants.MAP_LIST));
    }
}


No.6 generated result --------------------------

// Create a new instance of the JeecgController class
JeecgController<Object, IService<Object>> jeecgController = new JeecgController<Object, IService<Object>>();

// Create the required variables
HttpServletRequest request = new MockHttpServletRequest();
Object object = new Object();
Class<Object> clazz = Object.class;
String title = "Test Title";
String exportFields = "field1,field2";
Integer pageNum = 10;

// Call the exportXlsSheet method and store the result
ModelAndView result = jeecgController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);

// Assertions
assertEquals("Test Title", result.getModel().get(NormalExcelConstants.FILE_NAME));
assertEquals(1, result.getModel().get(NormalExcelConstants.MAP_LIST));


No.7 generated result --------------------------

@Test
public void exportXlsSheetTest() {
    HttpServletRequest request = new MockHttpServletRequest();
    T object = new T();
    Class<T> clazz = T.class;
    String title = "Test Report";
    String exportFields = "field1,field2,field3";
    Integer pageNum = 10;
    
    JeecgController<T, S> controller = new JeecgController<>();
    ModelAndView result = controller.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);
    
    assertNotNull(result);
    assertEquals(title, result.getModel().get(NormalExcelConstants.FILE_NAME));
    assertEquals(1, result.getModel().get(NormalExcelConstants.MAP_LIST).size());
}


No.8 generated result --------------------------

@Test
public void exportXlsSheetTest() {
    JeecgController<MyObject, MyService> controller = new JeecgController<>();
    HttpServletRequest request = new MockHttpServletRequest();
    MyObject object = new MyObject();
    Class<MyObject> clazz = MyObject.class;
    String title = "Test Export";
    String exportFields = "field1,field2,field3";
    int pageNum = 10;
    
    ModelAndView result = controller.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);
    
    assertNotNull(result);
    assertEquals(title, result.getModel().get(NormalExcelConstants.FILE_NAME));
    assertNotNull(result.getModel().get(NormalExcelConstants.MAP_LIST));
}


No.9 generated result --------------------------

protected ModelAndView exportXlsSheet(HttpServletRequest request, T object, Class<T> clazz, String title,String exportFields,Integer pageNum) {
    // Step.1 组装查询条件
    QueryWrapper<T> queryWrapper = QueryGenerator.initQueryWrapper(object, request.getParameterMap());
    LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();
    // Step.2 计算分页sheet数据
    double total = service.count();
    int count = (int)Math.ceil(total/pageNum);
    //update-begin-author:liusq---date:20220629--for: 多sheet导出根据选择导出写法调整 ---
    // Step.3  过滤选中数据
    String selections = request.getParameter("selections");
    if (oConvertUtils.isNotEmpty(selections)) {
        List<String> selectionList = Arrays.asList(selections.split(","));
        queryWrapper.in("id",selectionList);
    }
    //update-end-author:liusq---date:20220629--for: 多sheet导出根据选择导出写法调整 ---
    // Step.4 多sheet处理
    List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();
    for (int i = 1; i <=count ; i++) {
        Page<T> page = new Page<T>(i, pageNum);
        IPage<T> pageList = service.page(page, queryWrapper);
        List<T> exportList = pageList.getRecords();
        Map<String, Object> map = new HashMap<>(5);
        ExportParams exportParams=new ExportParams(title + "报表", "导出人:" + sysUser.getRealname(), title+i,jeecgBaseConfig.getPath().getUpload());
        exportParams.setType(ExcelType.XSSF);
        //map.put("title",exportParams);
        //表格Title
        map.put(NormalExcelConstants.PARAMS,exportParams);
        //表格对应实体
        map.put(NormalExcelConstants.CLASS,clazz);
        //数据集合
        map.put(NormalExcelConstants.DATA_LIST, exportList);
        listMap.add(map);
    }
    // Step.4 AutoPoi 导出Excel
    ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());
    //此处设置的filename无效 ,前端会重更新设置一下
    mv.addObject(NormalExcelConstants.FILE_NAME, title);
    mv.addObject(NormalExcelConstants.MAP_LIST, listMap);
    return mv;
}


No.10 generated result --------------------------

// Create a mock HttpServletRequest object
HttpServletRequest requestMock = mock(HttpServletRequest.class);

// Create mock objects for the required parameters
T objectMock = mock(T.class);
Class<T> clazzMock = mock(Class<T>.class);
String titleMock = "Mock Title";
String exportFieldsMock = "Mock Export Fields";
int pageNumMock = 10;

// Create an instance of JeecgController
JeecgController<T, S> jeecgControllerMock = mock(JeecgController.class);

// Call the exportXlsSheet method
ModelAndView result = jeecgControllerMock.exportXlsSheet(requestMock, objectMock, clazzMock, titleMock, exportFieldsMock, pageNumMock);

// Assert that the ModelAndView object is not null
assertNotNull(result);

// Add any additional assertions as needed



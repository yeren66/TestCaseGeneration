{
    "project_name": "jeecg-boot",
    "file_name": "JeecgController.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/system/base/controller/JeecgController.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.system.base.controller",
    "docstring": "/**\n     * \u6839\u636e\u6bcf\u9875sheet\u6570\u91cf\u5bfc\u51fa\u591asheet\n     *\n     * @param request\n     * @param object \u5b9e\u4f53\u7c7b\n     * @param clazz \u5b9e\u4f53\u7c7bclass\n     * @param title \u6807\u9898\n     * @param exportFields \u5bfc\u51fa\u5b57\u6bb5\u81ea\u5b9a\u4e49\n     * @param pageNum \u6bcf\u4e2asheet\u7684\u6570\u636e\u6761\u6570\n     * @param request\n     */",
    "source_code": "\nprotected ModelAndView exportXlsSheet(HttpServletRequest request, T object, Class<T> clazz, String title,String exportFields,Integer pageNum) {\n    // Step.1 \u7ec4\u88c5\u67e5\u8be2\u6761\u4ef6\n    QueryWrapper<T> queryWrapper = QueryGenerator.initQueryWrapper(object, request.getParameterMap());\n    LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();\n    // Step.2 \u8ba1\u7b97\u5206\u9875sheet\u6570\u636e\n    double total = service.count();\n    int count = (int)Math.ceil(total/pageNum);\n    //update-begin-author:liusq---date:20220629--for: \u591asheet\u5bfc\u51fa\u6839\u636e\u9009\u62e9\u5bfc\u51fa\u5199\u6cd5\u8c03\u6574 ---\n    // Step.3  \u8fc7\u6ee4\u9009\u4e2d\u6570\u636e\n    String selections = request.getParameter(\"selections\");\n    if (oConvertUtils.isNotEmpty(selections)) {\n        List<String> selectionList = Arrays.asList(selections.split(\",\"));\n        queryWrapper.in(\"id\",selectionList);\n    }\n    //update-end-author:liusq---date:20220629--for: \u591asheet\u5bfc\u51fa\u6839\u636e\u9009\u62e9\u5bfc\u51fa\u5199\u6cd5\u8c03\u6574 ---\n    // Step.4 \u591asheet\u5904\u7406\n    List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();\n    for (int i = 1; i <=count ; i++) {\n        Page<T> page = new Page<T>(i, pageNum);\n        IPage<T> pageList = service.page(page, queryWrapper);\n        List<T> exportList = pageList.getRecords();\n        Map<String, Object> map = new HashMap<>(5);\n        ExportParams exportParams=new ExportParams(title + \"\u62a5\u8868\", \"\u5bfc\u51fa\u4eba:\" + sysUser.getRealname(), title+i,jeecgBaseConfig.getPath().getUpload());\n        exportParams.setType(ExcelType.XSSF);\n        //map.put(\"title\",exportParams);\n        //\u8868\u683cTitle\n        map.put(NormalExcelConstants.PARAMS,exportParams);\n        //\u8868\u683c\u5bf9\u5e94\u5b9e\u4f53\n        map.put(NormalExcelConstants.CLASS,clazz);\n        //\u6570\u636e\u96c6\u5408\n        map.put(NormalExcelConstants.DATA_LIST, exportList);\n        listMap.add(map);\n    }\n    // Step.4 AutoPoi \u5bfc\u51faExcel\n    ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());\n    //\u6b64\u5904\u8bbe\u7f6e\u7684filename\u65e0\u6548 ,\u524d\u7aef\u4f1a\u91cd\u66f4\u65b0\u8bbe\u7f6e\u4e00\u4e0b\n    mv.addObject(NormalExcelConstants.FILE_NAME, title);\n    mv.addObject(NormalExcelConstants.MAP_LIST, listMap);\n    return mv;\n}\n",
    "class_name": "JeecgController",
    "method_name": "exportXlsSheet",
    "arguments": [
        "HttpServletRequest request",
        "T object",
        "Class<T> clazz",
        "String title",
        "String exportFields",
        "Integer pageNum"
    ],
    "generate_test": [
        "protected ModelAndView exportXlsSheet(HttpServletRequest request, T object, Class<T> clazz, String title,String exportFields,Integer pageNum) {\n    // Step.1 \u7ec4\u88c5\u67e5\u8be2\u6761\u4ef6\n    QueryWrapper<T> queryWrapper = QueryGenerator.initQueryWrapper(object, request.getParameterMap());\n    LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();\n    // Step.2 \u8ba1\u7b97\u5206\u9875sheet\u6570\u636e\n    double total = service.count();\n    int count = (int)Math.ceil(total/pageNum);\n    // Step.3  \u8fc7\u6ee4\u9009\u4e2d\u6570\u636e\n    String selections = request.getParameter(\"selections\");\n    if (oConvertUtils.isNotEmpty(selections)) {\n        List<String> selectionList = Arrays.asList(selections.split(\",\"));\n        queryWrapper.in(\"id\", selectionList);\n    }\n    // Step.4 \u591asheet\u5904\u7406\n    List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();\n    for (int i = 1; i <=count ; i++) {\n        Page<T> page = new Page<T>(i, pageNum);\n        IPage<T> pageList = service.page(page, queryWrapper);\n        List<T> exportList = pageList.getRecords();\n        Map<String, Object> map = new HashMap<>(5);\n        ExportParams exportParams=new ExportParams(title + \"\u62a5\u8868\", \"\u5bfc\u51fa\u4eba:\" + sysUser.getRealname(), title+i,jeecgBaseConfig.getPath().getUpload());\n        exportParams.setType(ExcelType.XSSF);\n        map.put(NormalExcelConstants.PARAMS,exportParams);\n        map.put(NormalExcelConstants.CLASS,clazz);\n        map.put(NormalExcelConstants.DATA_LIST, exportList);\n        listMap.add(map);\n    }\n    // Step.5 AutoPoi \u5bfc\u51faExcel\n    ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());\n    mv.addObject(NormalExcelConstants.FILE_NAME, title);\n    mv.addObject(NormalExcelConstants.MAP_LIST, listMap);\n    return mv;\n}",
        "@Test\npublic void exportXlsSheetTest() {\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    T object = mock(T.class);\n    Class<T> clazz = mock(Class.class);\n    String title = \"TestTitle\";\n    String exportFields = \"field1, field2, field3\";\n    int pageNum = 10;\n    \n    // Mock the necessary dependencies for the exportXlsSheet method\n    QueryWrapper<T> queryWrapper = mock(QueryWrapper.class);\n    LoginUser sysUser = mock(LoginUser.class);\n    \n    // Mock the service count method return value\n    double total = 100;\n    when(service.count()).thenReturn(total);\n    \n    // Mock the page and pageList objects\n    Page<T> page = mock(Page.class);\n    whenNew(Page<T>.class).withArguments(anyInt(), anyInt()).thenReturn(page);\n    IPage<T> pageList = mock(IPage.class);\n    when(service.page(page, queryWrapper)).thenReturn(pageList);\n    \n    // Mock the exportList\n    List<T> exportList = new ArrayList<>();\n    when(pageList.getRecords()).thenReturn(exportList);\n    \n    // Mock the exportParams object\n    ExportParams exportParams = mock(ExportParams.class);\n    whenNew(ExportParams.class).withArguments(anyString(), anyString(), anyString(), anyString()).thenReturn(exportParams);\n    \n    // Create the expected map object and add the necessary values\n    Map<String, Object> map = new HashMap<>();\n    map.put(NormalExcelConstants.PARAMS, exportParams);\n    map.put(NormalExcelConstants.CLASS, clazz);\n    map.put(NormalExcelConstants.DATA_LIST, exportList);\n    \n    // Create the expected listMap object and add the map\n    List<Map<String, Object>> listMap = new ArrayList<>();\n    listMap.add(map);\n    \n    // Mock the ModelAndView object\n    ModelAndView mv = mock(ModelAndView.class);\n    whenNew(ModelAndView.class).withArguments(any(JeecgEntityExcelView.class)).thenReturn(mv);\n    \n    // Perform the method call\n    JeecgController<T, S> controller = new JeecgController<>();\n    ModelAndView result = controller.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n    \n    // Verify the method invocations and assert the result\n    verify(service).count();\n    verify(service, times(count)).page(page, queryWrapper);\n    verifyNew(ModelAndView.class).withArguments(any(JeecgEntityExcelView.class));\n    verify(mv).addObject(NormalExcelConstants.FILE_NAME, title);\n    verify(mv).addObject(NormalExcelConstants.MAP_LIST, listMap);\n    assertEquals(mv, result);\n}",
        "@Test\npublic void exportXlsSheetTest() {\n    // Create a mock HttpServletRequest object\n    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n    \n    // Create a mock T object\n    T object = Mockito.mock(T.class);\n    \n    // Create a mock Class object\n    Class<T> clazz = Mockito.mock(Class.class);\n    \n    // Set the necessary parameters for the exportXlsSheet method\n    String title = \"Test Title\";\n    String exportFields = \"Field1,Field2,Field3\";\n    Integer pageNum = 10;\n    \n    // Create a mock LoginUser object\n    LoginUser sysUser = Mockito.mock(LoginUser.class);\n    Mockito.when(SecurityUtils.getSubject().getPrincipal()).thenReturn(sysUser);\n    \n    // Create a mock QueryWrapper object\n    QueryWrapper<T> queryWrapper = Mockito.mock(QueryWrapper.class);\n    Mockito.when(QueryGenerator.initQueryWrapper(object, request.getParameterMap())).thenReturn(queryWrapper);\n    \n    // Create a mock IService object\n    IService<T> service = Mockito.mock(IService.class);\n    Mockito.when(service.count()).thenReturn(100.0);\n    \n    // Create a mock JeecgBaseConfig object\n    JeecgBaseConfig jeecgBaseConfig = Mockito.mock(JeecgBaseConfig.class);\n    Mockito.when(jeecgBaseConfig.getPath().getUpload()).thenReturn(\"path/to/upload\");\n    \n    // Create a mock Page object\n    Page<T> page = Mockito.mock(Page.class);\n    Mockito.whenNew(Page.class).withArguments(1, pageNum).thenReturn(page);\n    \n    // Create a mock IPage object\n    IPage<T> pageList = Mockito.mock(IPage.class);\n    Mockito.when(service.page(page, queryWrapper)).thenReturn(pageList);\n    \n    // Create a mock List<T> object\n    List<T> exportList = Mockito.mock(List.class);\n    Mockito.when(pageList.getRecords()).thenReturn(exportList);\n    \n    // Create a mock HashMap object\n    Map<String, Object> map = Mockito.mock(HashMap.class);\n    Mockito.whenNew(HashMap.class).thenReturn(map);\n    \n    // Create a mock ExportParams object\n    ExportParams exportParams = Mockito.mock(ExportParams.class);\n    Mockito.whenNew(ExportParams.class).withArguments(title + \"\u62a5\u8868\", \"\u5bfc\u51fa\u4eba:\" + sysUser.getRealname(), title+i,jeecgBaseConfig.getPath().getUpload()).thenReturn(exportParams);\n    \n    // Set the necessary parameters for the map object\n    Mockito.when(map.put(NormalExcelConstants.PARAMS, exportParams)).thenReturn(null);\n    Mockito.when(map.put(NormalExcelConstants.CLASS, clazz)).thenReturn(null);\n    Mockito.when(map.put(NormalExcelConstants.DATA_LIST, exportList)).thenReturn(null);\n    \n    // Create a mock JeecgEntityExcelView object\n    JeecgEntityExcelView excelView = Mockito.mock(JeecgEntityExcelView.class);\n    ModelAndView mv = new ModelAndView(excelView);\n    Mockito.whenNew(ModelAndView.class).withArguments(excelView).thenReturn(mv);\n    \n    // Set the necessary parameters for the mv object\n    Mockito.when(mv.addObject(NormalExcelConstants.FILE_NAME, title)).thenReturn(mv);\n    Mockito.when(mv.addObject(NormalExcelConstants.MAP_LIST, Mockito.anyList())).thenReturn(mv);\n    \n    // Call the exportXlsSheet method\n    JeecgController<T, IService<T>> controller = new JeecgController<>();\n    controller.service = service;\n    controller.jeecgBaseConfig = jeecgBaseConfig;\n    ModelAndView result = controller.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n    \n    // Verify the expected behavior\n    Mockito.verify(QueryGenerator).initQueryWrapper(object, request.getParameterMap());\n    Mockito.verify(SecurityUtils.getSubject()).getPrincipal();\n    Mockito.verify(service, Mockito.times(2)).count();\n    Mockito.verify(jeecgBaseConfig.getPath()).getUpload();\n    Mockito.verify(service).page(page, queryWrapper);\n    Mockito.verify(pageList).getRecords();\n    Mockito.verify(map).put(NormalExcelConstants.PARAMS, exportParams);\n    Mockito.verify(map).put(NormalExcelConstants.CLASS, clazz);\n    Mockito.verify(map).put(NormalExcelConstants.DATA_LIST, exportList);\n    Mockito.verify(mv).addObject(NormalExcelConstants.FILE_NAME, title);\n    Mockito.verify(mv).addObject(NormalExcelConstants.MAP_LIST, Mockito.anyList());\n    assertEquals(excelView, result.getView());\n}\n",
        "protected ModelAndView exportXlsSheet(HttpServletRequest request, T object, Class<T> clazz, String title, String exportFields, Integer pageNum) {\n    // Step.1 \u7ec4\u88c5\u67e5\u8be2\u6761\u4ef6\n    QueryWrapper<T> queryWrapper = QueryGenerator.initQueryWrapper(object, request.getParameterMap());\n    LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();\n    // Step.2 \u8ba1\u7b97\u5206\u9875sheet\u6570\u636e\n    double total = service.count();\n    int count = (int) Math.ceil(total / pageNum);\n    //update-begin-author:liusq---date:20220629--for: \u591asheet\u5bfc\u51fa\u6839\u636e\u9009\u62e9\u5bfc\u51fa\u5199\u6cd5\u8c03\u6574 ---\n    // Step.3  \u8fc7\u6ee4\u9009\u4e2d\u6570\u636e\n    String selections = request.getParameter(\"selections\");\n    if (oConvertUtils.isNotEmpty(selections)) {\n        List<String> selectionList = Arrays.asList(selections.split(\",\"));\n        queryWrapper.in(\"id\", selectionList);\n    }\n    //update-end-author:liusq---date:20220629--for: \u591asheet\u5bfc\u51fa\u6839\u636e\u9009\u62e9\u5bfc\u51fa\u5199\u6cd5\u8c03\u6574 ---\n    // Step.4 \u591asheet\u5904\u7406\n    List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();\n    for (int i = 1; i <= count; i++) {\n        Page<T> page = new Page<T>(i, pageNum);\n        IPage<T> pageList = service.page(page, queryWrapper);\n        List<T> exportList = pageList.getRecords();\n        Map<String, Object> map = new HashMap<>(5);\n        ExportParams exportParams = new ExportParams(title + \"\u62a5\u8868\", \"\u5bfc\u51fa\u4eba:\" + sysUser.getRealname(), title + i, jeecgBaseConfig.getPath().getUpload());\n        exportParams.setType(ExcelType.XSSF);\n        //map.put(\"title\",exportParams);\n        //\u8868\u683cTitle\n        map.put(NormalExcelConstants.PARAMS, exportParams);\n        //\u8868\u683c\u5bf9\u5e94\u5b9e\u4f53\n        map.put(NormalExcelConstants.CLASS, clazz);\n        //\u6570\u636e\u96c6\u5408\n        map.put(NormalExcelConstants.DATA_LIST, exportList);\n        listMap.add(map);\n    }\n    // Step.4 AutoPoi \u5bfc\u51faExcel\n    ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());\n    //\u6b64\u5904\u8bbe\u7f6e\u7684filename\u65e0\u6548 ,\u524d\u7aef\u4f1a\u91cd\u66f4\u65b0\u8bbe\u7f6e\u4e00\u4e0b\n    mv.addObject(NormalExcelConstants.FILE_NAME, title);\n    mv.addObject(NormalExcelConstants.MAP_LIST, listMap);\n    return mv;\n}",
        "package org.jeecg.common.system.base.controller;\n\nimport org.junit.jupiter.api.*;\nimport org.springframework.web.servlet.ModelAndView;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JeecgControllerTest {\n    @Test\n    public void exportXlsSheetTest() {\n        JeecgController<TestObject, TestService> controller = new JeecgController<>();\n\n        // Create mock objects and set required values\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n        TestObject object = Mockito.mock(TestObject.class);\n        Class<TestObject> clazz = TestObject.class;\n        String title = \"Test Title\";\n        String exportFields = \"Field1,Field2,Field3\";\n        int pageNum = 10;\n\n        // Call the method to be tested\n        ModelAndView result = controller.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n\n        // Assert the expected result\n        assertNotNull(result);\n        assertEquals(title, result.getModel().get(NormalExcelConstants.FILE_NAME));\n        assertEquals(clazz, result.getModel().get(NormalExcelConstants.MAP_LIST));\n    }\n}",
        "// Create a new instance of the JeecgController class\nJeecgController<Object, IService<Object>> jeecgController = new JeecgController<Object, IService<Object>>();\n\n// Create the required variables\nHttpServletRequest request = new MockHttpServletRequest();\nObject object = new Object();\nClass<Object> clazz = Object.class;\nString title = \"Test Title\";\nString exportFields = \"field1,field2\";\nInteger pageNum = 10;\n\n// Call the exportXlsSheet method and store the result\nModelAndView result = jeecgController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n\n// Assertions\nassertEquals(\"Test Title\", result.getModel().get(NormalExcelConstants.FILE_NAME));\nassertEquals(1, result.getModel().get(NormalExcelConstants.MAP_LIST));",
        "@Test\npublic void exportXlsSheetTest() {\n    HttpServletRequest request = new MockHttpServletRequest();\n    T object = new T();\n    Class<T> clazz = T.class;\n    String title = \"Test Report\";\n    String exportFields = \"field1,field2,field3\";\n    Integer pageNum = 10;\n    \n    JeecgController<T, S> controller = new JeecgController<>();\n    ModelAndView result = controller.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n    \n    assertNotNull(result);\n    assertEquals(title, result.getModel().get(NormalExcelConstants.FILE_NAME));\n    assertEquals(1, result.getModel().get(NormalExcelConstants.MAP_LIST).size());\n}",
        "@Test\npublic void exportXlsSheetTest() {\n    JeecgController<MyObject, MyService> controller = new JeecgController<>();\n    HttpServletRequest request = new MockHttpServletRequest();\n    MyObject object = new MyObject();\n    Class<MyObject> clazz = MyObject.class;\n    String title = \"Test Export\";\n    String exportFields = \"field1,field2,field3\";\n    int pageNum = 10;\n    \n    ModelAndView result = controller.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n    \n    assertNotNull(result);\n    assertEquals(title, result.getModel().get(NormalExcelConstants.FILE_NAME));\n    assertNotNull(result.getModel().get(NormalExcelConstants.MAP_LIST));\n}",
        "protected ModelAndView exportXlsSheet(HttpServletRequest request, T object, Class<T> clazz, String title,String exportFields,Integer pageNum) {\n    // Step.1 \u7ec4\u88c5\u67e5\u8be2\u6761\u4ef6\n    QueryWrapper<T> queryWrapper = QueryGenerator.initQueryWrapper(object, request.getParameterMap());\n    LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();\n    // Step.2 \u8ba1\u7b97\u5206\u9875sheet\u6570\u636e\n    double total = service.count();\n    int count = (int)Math.ceil(total/pageNum);\n    //update-begin-author:liusq---date:20220629--for: \u591asheet\u5bfc\u51fa\u6839\u636e\u9009\u62e9\u5bfc\u51fa\u5199\u6cd5\u8c03\u6574 ---\n    // Step.3  \u8fc7\u6ee4\u9009\u4e2d\u6570\u636e\n    String selections = request.getParameter(\"selections\");\n    if (oConvertUtils.isNotEmpty(selections)) {\n        List<String> selectionList = Arrays.asList(selections.split(\",\"));\n        queryWrapper.in(\"id\",selectionList);\n    }\n    //update-end-author:liusq---date:20220629--for: \u591asheet\u5bfc\u51fa\u6839\u636e\u9009\u62e9\u5bfc\u51fa\u5199\u6cd5\u8c03\u6574 ---\n    // Step.4 \u591asheet\u5904\u7406\n    List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();\n    for (int i = 1; i <=count ; i++) {\n        Page<T> page = new Page<T>(i, pageNum);\n        IPage<T> pageList = service.page(page, queryWrapper);\n        List<T> exportList = pageList.getRecords();\n        Map<String, Object> map = new HashMap<>(5);\n        ExportParams exportParams=new ExportParams(title + \"\u62a5\u8868\", \"\u5bfc\u51fa\u4eba:\" + sysUser.getRealname(), title+i,jeecgBaseConfig.getPath().getUpload());\n        exportParams.setType(ExcelType.XSSF);\n        //map.put(\"title\",exportParams);\n        //\u8868\u683cTitle\n        map.put(NormalExcelConstants.PARAMS,exportParams);\n        //\u8868\u683c\u5bf9\u5e94\u5b9e\u4f53\n        map.put(NormalExcelConstants.CLASS,clazz);\n        //\u6570\u636e\u96c6\u5408\n        map.put(NormalExcelConstants.DATA_LIST, exportList);\n        listMap.add(map);\n    }\n    // Step.4 AutoPoi \u5bfc\u51faExcel\n    ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());\n    //\u6b64\u5904\u8bbe\u7f6e\u7684filename\u65e0\u6548 ,\u524d\u7aef\u4f1a\u91cd\u66f4\u65b0\u8bbe\u7f6e\u4e00\u4e0b\n    mv.addObject(NormalExcelConstants.FILE_NAME, title);\n    mv.addObject(NormalExcelConstants.MAP_LIST, listMap);\n    return mv;\n}",
        "// Create a mock HttpServletRequest object\nHttpServletRequest requestMock = mock(HttpServletRequest.class);\n\n// Create mock objects for the required parameters\nT objectMock = mock(T.class);\nClass<T> clazzMock = mock(Class<T>.class);\nString titleMock = \"Mock Title\";\nString exportFieldsMock = \"Mock Export Fields\";\nint pageNumMock = 10;\n\n// Create an instance of JeecgController\nJeecgController<T, S> jeecgControllerMock = mock(JeecgController.class);\n\n// Call the exportXlsSheet method\nModelAndView result = jeecgControllerMock.exportXlsSheet(requestMock, objectMock, clazzMock, titleMock, exportFieldsMock, pageNumMock);\n\n// Assert that the ModelAndView object is not null\nassertNotNull(result);\n\n// Add any additional assertions as needed"
    ]
}
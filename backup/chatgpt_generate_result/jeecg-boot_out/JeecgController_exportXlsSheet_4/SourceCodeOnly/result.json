{
    "project_name": "jeecg-boot",
    "file_name": "JeecgController.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/system/base/controller/JeecgController.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.system.base.controller",
    "docstring": "/**\n     * \u6839\u636e\u6bcf\u9875sheet\u6570\u91cf\u5bfc\u51fa\u591asheet\n     *\n     * @param request\n     * @param object \u5b9e\u4f53\u7c7b\n     * @param clazz \u5b9e\u4f53\u7c7bclass\n     * @param title \u6807\u9898\n     * @param exportFields \u5bfc\u51fa\u5b57\u6bb5\u81ea\u5b9a\u4e49\n     * @param pageNum \u6bcf\u4e2asheet\u7684\u6570\u636e\u6761\u6570\n     * @param request\n     */",
    "source_code": "\nprotected ModelAndView exportXlsSheet(HttpServletRequest request, T object, Class<T> clazz, String title,String exportFields,Integer pageNum) {\n    // Step.1 \u7ec4\u88c5\u67e5\u8be2\u6761\u4ef6\n    QueryWrapper<T> queryWrapper = QueryGenerator.initQueryWrapper(object, request.getParameterMap());\n    LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();\n    // Step.2 \u8ba1\u7b97\u5206\u9875sheet\u6570\u636e\n    double total = service.count();\n    int count = (int)Math.ceil(total/pageNum);\n    //update-begin-author:liusq---date:20220629--for: \u591asheet\u5bfc\u51fa\u6839\u636e\u9009\u62e9\u5bfc\u51fa\u5199\u6cd5\u8c03\u6574 ---\n    // Step.3  \u8fc7\u6ee4\u9009\u4e2d\u6570\u636e\n    String selections = request.getParameter(\"selections\");\n    if (oConvertUtils.isNotEmpty(selections)) {\n        List<String> selectionList = Arrays.asList(selections.split(\",\"));\n        queryWrapper.in(\"id\",selectionList);\n    }\n    //update-end-author:liusq---date:20220629--for: \u591asheet\u5bfc\u51fa\u6839\u636e\u9009\u62e9\u5bfc\u51fa\u5199\u6cd5\u8c03\u6574 ---\n    // Step.4 \u591asheet\u5904\u7406\n    List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();\n    for (int i = 1; i <=count ; i++) {\n        Page<T> page = new Page<T>(i, pageNum);\n        IPage<T> pageList = service.page(page, queryWrapper);\n        List<T> exportList = pageList.getRecords();\n        Map<String, Object> map = new HashMap<>(5);\n        ExportParams exportParams=new ExportParams(title + \"\u62a5\u8868\", \"\u5bfc\u51fa\u4eba:\" + sysUser.getRealname(), title+i,jeecgBaseConfig.getPath().getUpload());\n        exportParams.setType(ExcelType.XSSF);\n        //map.put(\"title\",exportParams);\n        //\u8868\u683cTitle\n        map.put(NormalExcelConstants.PARAMS,exportParams);\n        //\u8868\u683c\u5bf9\u5e94\u5b9e\u4f53\n        map.put(NormalExcelConstants.CLASS,clazz);\n        //\u6570\u636e\u96c6\u5408\n        map.put(NormalExcelConstants.DATA_LIST, exportList);\n        listMap.add(map);\n    }\n    // Step.4 AutoPoi \u5bfc\u51faExcel\n    ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());\n    //\u6b64\u5904\u8bbe\u7f6e\u7684filename\u65e0\u6548 ,\u524d\u7aef\u4f1a\u91cd\u66f4\u65b0\u8bbe\u7f6e\u4e00\u4e0b\n    mv.addObject(NormalExcelConstants.FILE_NAME, title);\n    mv.addObject(NormalExcelConstants.MAP_LIST, listMap);\n    return mv;\n}\n",
    "class_name": "JeecgController",
    "method_name": "exportXlsSheet",
    "arguments": [
        "HttpServletRequest request",
        "T object",
        "Class<T> clazz",
        "String title",
        "String exportFields",
        "Integer pageNum"
    ],
    "generate_test": [
        "package org.jeecg.common.system.base.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JeecgControllerTest {\n\n    @Test\n    public void exportXlsSheetTest() {\n        // Create an instance of JeecgController\n        JeecgController jeecgController = new JeecgController();\n\n        // Provide the necessary input parameters for the exportXlsSheet method\n        HttpServletRequest request = new MockHttpServletRequest(); // Use a MockHttpServletRequest or provide a real HttpServletRequest object\n        T object = new T(); // Create a new instance of the T class\n        Class<T> clazz = T.class; // Specify the Class of the T object\n        String title = \"Test Title\";\n        String exportFields = \"field1,field2,field3\";\n        Integer pageNum = 10;\n\n        // Call the exportXlsSheet method\n        ModelAndView result = jeecgController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n\n        // Perform the necessary assertions to verify the output\n        assertNotNull(result);\n        assertEquals(\"expectedFileName\", result.getModel().get(NormalExcelConstants.FILE_NAME));\n        // Add more assertions if needed\n    }\n}",
        "@Test\npublic void exportXlsSheetTest() {\n    HttpServletRequest request = new MockHttpServletRequest();\n    T object = new T(); // Replace T with the desired object type\n    Class<T> clazz = object.getClass();\n    String title = \"Test Title\";\n    String exportFields = \"field1,field2,field3\"; // Replace with actual export fields\n    int pageNum = 10; // Replace with desired page size\n    \n    ModelAndView result = exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n    \n    // Add assertions here to verify the expected behavior of the exportXlsSheet method\n}",
        "@Test\npublic void exportXlsSheetTest() {\n    HttpServletRequest request = new MockHttpServletRequest();\n    Class<T> clazz = T.class;\n    String title = \"Test Sheet\";\n    String exportFields = \"field1,field2,field3\";\n    Integer pageNum = 10;\n    \n    // Create a sample object of type T\n    T object = new T();\n    \n    // Call the method under test\n    ModelAndView result = exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n    \n    // Assert the result\n    assertNotNull(result);\n    assertEquals(title, result.getModel().get(NormalExcelConstants.FILE_NAME));\n    assertTrue(result.getModel().get(NormalExcelConstants.MAP_LIST) instanceof List);\n    List<Map<String, Object>> listMap = (List<Map<String, Object>>) result.getModel().get(NormalExcelConstants.MAP_LIST);\n    assertEquals(Math.ceil(service.count() / pageNum), listMap.size());\n}",
        " java\npackage org.jeecg.common.system.base.controller;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.mockito.*;\nimport org.mockito.junit.jupiter.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class JeecgControllerTest {\n    @InjectMocks\n    private JeecgController jeecgController;\n\n    @Mock\n    private HttpServletRequest request;\n    \n    @Mock\n    private Service<T> service;\n    \n    @Mock\n    private Page<T> page;\n    \n    @Mock\n    private IPage<T> pageList;\n    \n    @Mock\n    private LoginUser sysUser;\n    \n    @Mock\n    private ExportParams exportParams;\n\n    @Captor\n    private ArgumentCaptor<List<T>> captor;\n\n    @Test\n    public void exportXlsSheetTest() {\n        // Step 1: Mock the necessary objects and set up the expected values\n        T object = Mockito.mock(T.class);\n        Class<T> clazz = Mockito.mock(Class<T>.class);\n        String title = \"Test Title\";\n        String exportFields = \"field1, field2\";\n        Integer pageNum = 10;\n        \n        Mockito.when(request.getParameterMap()).thenReturn(Mockito.mock(Map.class));\n        Mockito.when(SecurityUtils.getSubject().getPrincipal()).thenReturn(sysUser);\n        Mockito.when(service.count()).thenReturn(100.0);\n        Mockito.when(Math.ceil(100.0/pageNum)).thenReturn(10);\n        \n        // Step 2: Call the actual method to be tested\n        ModelAndView result = jeecgController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n        \n        // Step 3: Assert the expected result against the actual result\n        assertEquals(title, result.getModel().get(NormalExcelConstants.FILE_NAME));\n        assertEquals(10, result.getModel().get(NormalExcelConstants.MAP_LIST).size());\n    }\n}\n",
        "@Test\npublic void exportXlsSheetTest() {\n    HttpServletRequest request = new MockHttpServletRequest();\n    T object = new T();\n    Class<T> clazz = T.class;\n    String title = \"Test Report\";\n    String exportFields = \"field1, field2, field3\";\n    Integer pageNum = 10;\n    \n    JeecgController jeecgController = new JeecgController();\n    ModelAndView mv = jeecgController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n    \n    assertNotNull(mv);\n}",
        "@Test\npublic void exportXlsSheetTest() {\n    // Mock HttpServletRequest\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    // Mock object, clazz, title, exportFields, and pageNum\n    T object = mock(T.class);\n    Class<T> clazz = mock(Class.class);\n    String title = \"Test Report\";\n    String exportFields = \"field1,field2,field3\";\n    Integer pageNum = 10;\n\n    // Create an instance of the controller class\n    JeecgController jeecgController = new JeecgController();\n\n    // Call the function to be tested\n    ModelAndView result = jeecgController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n\n    // Assertions\n    assertNotNull(result);\n    assertEquals(JeecgEntityExcelView.class, result.getView().getClass());\n    assertEquals(title, result.getModel().get(NormalExcelConstants.FILE_NAME));\n\n    List<Map<String, Object>> listMap = (List<Map<String, Object>>) result.getModel().get(NormalExcelConstants.MAP_LIST);\n    assertEquals(count, listMap.size());\n\n    for (Map<String, Object> map : listMap) {\n        ExportParams exportParams = (ExportParams) map.get(NormalExcelConstants.PARAMS);\n        assertNotNull(exportParams);\n        assertEquals(title + \"\u62a5\u8868\", exportParams.getTitle());\n        assertEquals(\"\u5bfc\u51fa\u4eba:\" + sysUser.getRealname(), exportParams.getAuthor());\n        // TODO: Add assertions for other properties of exportParams\n\n        assertEquals(clazz, map.get(NormalExcelConstants.CLASS));\n\n        List<T> exportList = (List<T>) map.get(NormalExcelConstants.DATA_LIST);\n        // TODO: Add assertions for the exportList\n    }\n    \n}",
        "@Test\npublic void exportXlsSheetTest() {\n    HttpServletRequest mockRequest = Mockito.mock(HttpServletRequest.class);\n    T mockObject = Mockito.mock(T.class);\n    Class<T> mockClass = Mockito.mock(Class.class);\n    String mockTitle = \"Test Title\";\n    String mockExportFields = \"field1,field2,field3\";\n    Integer mockPageNum = 10;\n    \n    ModelAndView result = exportXlsSheet(mockRequest, mockObject, mockClass, mockTitle, mockExportFields, mockPageNum);\n    \n    assertNotNull(result);\n    assertEquals(mockTitle, result.getModel().get(NormalExcelConstants.FILE_NAME));\n    assertEquals(2, result.getModel().get(NormalExcelConstants.MAP_LIST).size());\n    // Add additional assertions for expected values in the model and other assertions as needed\n}",
        "@Test\npublic void exportXlsSheetTest() {\n    HttpServletRequest request = new MockHttpServletRequest();\n    T object = new T();\n    Class<T> clazz = T.class;\n    String title = \"Test Title\";\n    String exportFields = \"field1,field2,field3\";\n    Integer pageNum = 10;\n    \n    ModelAndView mv = exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n    \n    assertNotNull(mv);\n    assertEquals(\"Test Title\", mv.getModel().get(NormalExcelConstants.FILE_NAME));\n    // Add assertions for other expected values and behaviors\n}",
        "@Test\npublic void exportXlsSheetTest() {\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    T object = mock(T.class);\n    Class<T> clazz = T.class;\n    String title = \"Test Title\";\n    String exportFields = \"Field1, Field2, Field3\";\n    Integer pageNum = 10;\n\n    ModelAndView expectedResult = new ModelAndView(new JeecgEntityExcelView());\n    expectedResult.addObject(NormalExcelConstants.FILE_NAME, title);\n\n    QueryWrapper<T> queryWrapper = QueryGenerator.initQueryWrapper(object, request.getParameterMap());\n    LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();\n    double total = service.count();\n    int count = (int)Math.ceil(total/pageNum);\n\n    String selections = request.getParameter(\"selections\");\n    if (oConvertUtils.isNotEmpty(selections)) {\n        List<String> selectionList = Arrays.asList(selections.split(\",\"));\n        queryWrapper.in(\"id\",selectionList);\n    }\n\n    List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();\n    for (int i = 1; i <=count ; i++) {\n        Page<T> page = new Page<T>(i, pageNum);\n        IPage<T> pageList = service.page(page, queryWrapper);\n        List<T> exportList = pageList.getRecords();\n        Map<String, Object> map = new HashMap<>(5);\n        ExportParams exportParams=new ExportParams(title + \"\u62a5\u8868\", \"\u5bfc\u51fa\u4eba:\" + sysUser.getRealname(), title+i,jeecgBaseConfig.getPath().getUpload());\n        exportParams.setType(ExcelType.XSSF);\n        map.put(NormalExcelConstants.PARAMS,exportParams);\n        map.put(NormalExcelConstants.CLASS,clazz);\n        map.put(NormalExcelConstants.DATA_LIST, exportList);\n        listMap.add(map);\n    }\n\n    expectedResult.addObject(NormalExcelConstants.MAP_LIST, listMap);\n\n    ModelAndView actualResult = exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\n\n    assertEquals(expectedResult.getView(), actualResult.getView());\n    assertEquals(expectedResult.getModel().get(NormalExcelConstants.FILE_NAME), actualResult.getModel().get(NormalExcelConstants.FILE_NAME));\n    assertEquals(expectedResult.getModel().get(NormalExcelConstants.MAP_LIST), actualResult.getModel().get(NormalExcelConstants.MAP_LIST));\n}",
        "protected ModelAndView result = exportXlsSheet(request, object, clazz, title, exportFields, pageNum);\nassertEquals(title, result.getModel().get(NormalExcelConstants.FILE_NAME));\nassertEquals(listMap, result.getModel().get(NormalExcelConstants.MAP_LIST));"
    ]
}
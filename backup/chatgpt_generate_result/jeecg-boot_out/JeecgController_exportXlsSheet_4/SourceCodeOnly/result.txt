Source code: 


protected ModelAndView exportXlsSheet(HttpServletRequest request, T object, Class<T> clazz, String title,String exportFields,Integer pageNum) {
    // Step.1 组装查询条件
    QueryWrapper<T> queryWrapper = QueryGenerator.initQueryWrapper(object, request.getParameterMap());
    LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();
    // Step.2 计算分页sheet数据
    double total = service.count();
    int count = (int)Math.ceil(total/pageNum);
    //update-begin-author:liusq---date:20220629--for: 多sheet导出根据选择导出写法调整 ---
    // Step.3  过滤选中数据
    String selections = request.getParameter("selections");
    if (oConvertUtils.isNotEmpty(selections)) {
        List<String> selectionList = Arrays.asList(selections.split(","));
        queryWrapper.in("id",selectionList);
    }
    //update-end-author:liusq---date:20220629--for: 多sheet导出根据选择导出写法调整 ---
    // Step.4 多sheet处理
    List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();
    for (int i = 1; i <=count ; i++) {
        Page<T> page = new Page<T>(i, pageNum);
        IPage<T> pageList = service.page(page, queryWrapper);
        List<T> exportList = pageList.getRecords();
        Map<String, Object> map = new HashMap<>(5);
        ExportParams exportParams=new ExportParams(title + "报表", "导出人:" + sysUser.getRealname(), title+i,jeecgBaseConfig.getPath().getUpload());
        exportParams.setType(ExcelType.XSSF);
        //map.put("title",exportParams);
        //表格Title
        map.put(NormalExcelConstants.PARAMS,exportParams);
        //表格对应实体
        map.put(NormalExcelConstants.CLASS,clazz);
        //数据集合
        map.put(NormalExcelConstants.DATA_LIST, exportList);
        listMap.add(map);
    }
    // Step.4 AutoPoi 导出Excel
    ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());
    //此处设置的filename无效 ,前端会重更新设置一下
    mv.addObject(NormalExcelConstants.FILE_NAME, title);
    mv.addObject(NormalExcelConstants.MAP_LIST, listMap);
    return mv;
}



No.1 generated result --------------------------

package org.jeecg.common.system.base.controller;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class JeecgControllerTest {

    @Test
    public void exportXlsSheetTest() {
        // Create an instance of JeecgController
        JeecgController jeecgController = new JeecgController();

        // Provide the necessary input parameters for the exportXlsSheet method
        HttpServletRequest request = new MockHttpServletRequest(); // Use a MockHttpServletRequest or provide a real HttpServletRequest object
        T object = new T(); // Create a new instance of the T class
        Class<T> clazz = T.class; // Specify the Class of the T object
        String title = "Test Title";
        String exportFields = "field1,field2,field3";
        Integer pageNum = 10;

        // Call the exportXlsSheet method
        ModelAndView result = jeecgController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);

        // Perform the necessary assertions to verify the output
        assertNotNull(result);
        assertEquals("expectedFileName", result.getModel().get(NormalExcelConstants.FILE_NAME));
        // Add more assertions if needed
    }
}


No.2 generated result --------------------------

@Test
public void exportXlsSheetTest() {
    HttpServletRequest request = new MockHttpServletRequest();
    T object = new T(); // Replace T with the desired object type
    Class<T> clazz = object.getClass();
    String title = "Test Title";
    String exportFields = "field1,field2,field3"; // Replace with actual export fields
    int pageNum = 10; // Replace with desired page size
    
    ModelAndView result = exportXlsSheet(request, object, clazz, title, exportFields, pageNum);
    
    // Add assertions here to verify the expected behavior of the exportXlsSheet method
}


No.3 generated result --------------------------

@Test
public void exportXlsSheetTest() {
    HttpServletRequest request = new MockHttpServletRequest();
    Class<T> clazz = T.class;
    String title = "Test Sheet";
    String exportFields = "field1,field2,field3";
    Integer pageNum = 10;
    
    // Create a sample object of type T
    T object = new T();
    
    // Call the method under test
    ModelAndView result = exportXlsSheet(request, object, clazz, title, exportFields, pageNum);
    
    // Assert the result
    assertNotNull(result);
    assertEquals(title, result.getModel().get(NormalExcelConstants.FILE_NAME));
    assertTrue(result.getModel().get(NormalExcelConstants.MAP_LIST) instanceof List);
    List<Map<String, Object>> listMap = (List<Map<String, Object>>) result.getModel().get(NormalExcelConstants.MAP_LIST);
    assertEquals(Math.ceil(service.count() / pageNum), listMap.size());
}


No.4 generated result --------------------------

 java
package org.jeecg.common.system.base.controller;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import org.mockito.*;
import org.mockito.junit.jupiter.*;

@ExtendWith(MockitoExtension.class)
public class JeecgControllerTest {
    @InjectMocks
    private JeecgController jeecgController;

    @Mock
    private HttpServletRequest request;
    
    @Mock
    private Service<T> service;
    
    @Mock
    private Page<T> page;
    
    @Mock
    private IPage<T> pageList;
    
    @Mock
    private LoginUser sysUser;
    
    @Mock
    private ExportParams exportParams;

    @Captor
    private ArgumentCaptor<List<T>> captor;

    @Test
    public void exportXlsSheetTest() {
        // Step 1: Mock the necessary objects and set up the expected values
        T object = Mockito.mock(T.class);
        Class<T> clazz = Mockito.mock(Class<T>.class);
        String title = "Test Title";
        String exportFields = "field1, field2";
        Integer pageNum = 10;
        
        Mockito.when(request.getParameterMap()).thenReturn(Mockito.mock(Map.class));
        Mockito.when(SecurityUtils.getSubject().getPrincipal()).thenReturn(sysUser);
        Mockito.when(service.count()).thenReturn(100.0);
        Mockito.when(Math.ceil(100.0/pageNum)).thenReturn(10);
        
        // Step 2: Call the actual method to be tested
        ModelAndView result = jeecgController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);
        
        // Step 3: Assert the expected result against the actual result
        assertEquals(title, result.getModel().get(NormalExcelConstants.FILE_NAME));
        assertEquals(10, result.getModel().get(NormalExcelConstants.MAP_LIST).size());
    }
}



No.5 generated result --------------------------

@Test
public void exportXlsSheetTest() {
    HttpServletRequest request = new MockHttpServletRequest();
    T object = new T();
    Class<T> clazz = T.class;
    String title = "Test Report";
    String exportFields = "field1, field2, field3";
    Integer pageNum = 10;
    
    JeecgController jeecgController = new JeecgController();
    ModelAndView mv = jeecgController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);
    
    assertNotNull(mv);
}


No.6 generated result --------------------------

@Test
public void exportXlsSheetTest() {
    // Mock HttpServletRequest
    HttpServletRequest request = mock(HttpServletRequest.class);
    // Mock object, clazz, title, exportFields, and pageNum
    T object = mock(T.class);
    Class<T> clazz = mock(Class.class);
    String title = "Test Report";
    String exportFields = "field1,field2,field3";
    Integer pageNum = 10;

    // Create an instance of the controller class
    JeecgController jeecgController = new JeecgController();

    // Call the function to be tested
    ModelAndView result = jeecgController.exportXlsSheet(request, object, clazz, title, exportFields, pageNum);

    // Assertions
    assertNotNull(result);
    assertEquals(JeecgEntityExcelView.class, result.getView().getClass());
    assertEquals(title, result.getModel().get(NormalExcelConstants.FILE_NAME));

    List<Map<String, Object>> listMap = (List<Map<String, Object>>) result.getModel().get(NormalExcelConstants.MAP_LIST);
    assertEquals(count, listMap.size());

    for (Map<String, Object> map : listMap) {
        ExportParams exportParams = (ExportParams) map.get(NormalExcelConstants.PARAMS);
        assertNotNull(exportParams);
        assertEquals(title + "报表", exportParams.getTitle());
        assertEquals("导出人:" + sysUser.getRealname(), exportParams.getAuthor());
        // TODO: Add assertions for other properties of exportParams

        assertEquals(clazz, map.get(NormalExcelConstants.CLASS));

        List<T> exportList = (List<T>) map.get(NormalExcelConstants.DATA_LIST);
        // TODO: Add assertions for the exportList
    }
    
}


No.7 generated result --------------------------

@Test
public void exportXlsSheetTest() {
    HttpServletRequest mockRequest = Mockito.mock(HttpServletRequest.class);
    T mockObject = Mockito.mock(T.class);
    Class<T> mockClass = Mockito.mock(Class.class);
    String mockTitle = "Test Title";
    String mockExportFields = "field1,field2,field3";
    Integer mockPageNum = 10;
    
    ModelAndView result = exportXlsSheet(mockRequest, mockObject, mockClass, mockTitle, mockExportFields, mockPageNum);
    
    assertNotNull(result);
    assertEquals(mockTitle, result.getModel().get(NormalExcelConstants.FILE_NAME));
    assertEquals(2, result.getModel().get(NormalExcelConstants.MAP_LIST).size());
    // Add additional assertions for expected values in the model and other assertions as needed
}


No.8 generated result --------------------------

@Test
public void exportXlsSheetTest() {
    HttpServletRequest request = new MockHttpServletRequest();
    T object = new T();
    Class<T> clazz = T.class;
    String title = "Test Title";
    String exportFields = "field1,field2,field3";
    Integer pageNum = 10;
    
    ModelAndView mv = exportXlsSheet(request, object, clazz, title, exportFields, pageNum);
    
    assertNotNull(mv);
    assertEquals("Test Title", mv.getModel().get(NormalExcelConstants.FILE_NAME));
    // Add assertions for other expected values and behaviors
}


No.9 generated result --------------------------

@Test
public void exportXlsSheetTest() {
    HttpServletRequest request = mock(HttpServletRequest.class);
    T object = mock(T.class);
    Class<T> clazz = T.class;
    String title = "Test Title";
    String exportFields = "Field1, Field2, Field3";
    Integer pageNum = 10;

    ModelAndView expectedResult = new ModelAndView(new JeecgEntityExcelView());
    expectedResult.addObject(NormalExcelConstants.FILE_NAME, title);

    QueryWrapper<T> queryWrapper = QueryGenerator.initQueryWrapper(object, request.getParameterMap());
    LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();
    double total = service.count();
    int count = (int)Math.ceil(total/pageNum);

    String selections = request.getParameter("selections");
    if (oConvertUtils.isNotEmpty(selections)) {
        List<String> selectionList = Arrays.asList(selections.split(","));
        queryWrapper.in("id",selectionList);
    }

    List<Map<String, Object>> listMap = new ArrayList<Map<String, Object>>();
    for (int i = 1; i <=count ; i++) {
        Page<T> page = new Page<T>(i, pageNum);
        IPage<T> pageList = service.page(page, queryWrapper);
        List<T> exportList = pageList.getRecords();
        Map<String, Object> map = new HashMap<>(5);
        ExportParams exportParams=new ExportParams(title + "报表", "导出人:" + sysUser.getRealname(), title+i,jeecgBaseConfig.getPath().getUpload());
        exportParams.setType(ExcelType.XSSF);
        map.put(NormalExcelConstants.PARAMS,exportParams);
        map.put(NormalExcelConstants.CLASS,clazz);
        map.put(NormalExcelConstants.DATA_LIST, exportList);
        listMap.add(map);
    }

    expectedResult.addObject(NormalExcelConstants.MAP_LIST, listMap);

    ModelAndView actualResult = exportXlsSheet(request, object, clazz, title, exportFields, pageNum);

    assertEquals(expectedResult.getView(), actualResult.getView());
    assertEquals(expectedResult.getModel().get(NormalExcelConstants.FILE_NAME), actualResult.getModel().get(NormalExcelConstants.FILE_NAME));
    assertEquals(expectedResult.getModel().get(NormalExcelConstants.MAP_LIST), actualResult.getModel().get(NormalExcelConstants.MAP_LIST));
}


No.10 generated result --------------------------

protected ModelAndView result = exportXlsSheet(request, object, clazz, title, exportFields, pageNum);
assertEquals(title, result.getModel().get(NormalExcelConstants.FILE_NAME));
assertEquals(listMap, result.getModel().get(NormalExcelConstants.MAP_LIST));



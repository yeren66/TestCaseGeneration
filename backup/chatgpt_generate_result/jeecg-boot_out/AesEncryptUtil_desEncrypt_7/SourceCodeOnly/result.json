{
    "project_name": "jeecg-boot",
    "file_name": "AesEncryptUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/encryption/AesEncryptUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.util.encryption",
    "docstring": "/**\n     * \u89e3\u5bc6\u65b9\u6cd5\n     * @param data \u8981\u89e3\u5bc6\u7684\u6570\u636e\n     * @param key  \u89e3\u5bc6key\n     * @param iv \u89e3\u5bc6iv\n     * @return \u89e3\u5bc6\u7684\u7ed3\u679c\n     * @throws Exception\n     */",
    "source_code": "\npublic static String desEncrypt(String data, String key, String iv) throws Exception {\n    //update-begin-author:taoyan date:2022-5-23 for:VUEN-1084 \u3010vue3\u3011online\u8868\u5355\u6d4b\u8bd5\u53d1\u73b0\u7684\u65b0\u95ee\u9898 6\u3001\u89e3\u5bc6\u62a5\u9519 ---\u89e3\u7801\u5931\u8d25\u5e94\u8be5\u628a\u5f02\u5e38\u629b\u51fa\u53bb\uff0c\u5728\u5916\u9762\u5904\u7406\n    byte[] encrypted1 = Base64.decode(data);\n\n    Cipher cipher = Cipher.getInstance(\"AES/CBC/NoPadding\");\n    SecretKeySpec keyspec = new SecretKeySpec(key.getBytes(), \"AES\");\n    IvParameterSpec ivspec = new IvParameterSpec(iv.getBytes());\n\n    cipher.init(Cipher.DECRYPT_MODE, keyspec, ivspec);\n\n    byte[] original = cipher.doFinal(encrypted1);\n    String originalString = new String(original);\n    //\u52a0\u5bc6\u89e3\u7801\u540e\u7684\u5b57\u7b26\u4e32\u4f1a\u51fa\u73b0\\u0000\n    return originalString.replaceAll(\"\\\\u0000\", \"\");\n    //update-end-author:taoyan date:2022-5-23 for:VUEN-1084 \u3010vue3\u3011online\u8868\u5355\u6d4b\u8bd5\u53d1\u73b0\u7684\u65b0\u95ee\u9898 6\u3001\u89e3\u5bc6\u62a5\u9519 ---\u89e3\u7801\u5931\u8d25\u5e94\u8be5\u628a\u5f02\u5e38\u629b\u51fa\u53bb\uff0c\u5728\u5916\u9762\u5904\u7406\n}\n",
    "class_name": "AesEncryptUtil",
    "method_name": "desEncrypt",
    "arguments": [
        "String data",
        "String key",
        "String iv"
    ],
    "generate_test": [
        "@Test\npublic void desEncryptTest() {\n    try {\n        String data = \"exampleData\";\n        String key = \"exampleKey\";\n        String iv = \"exampleIV\";\n        \n        String encryptedData = AesEncryptUtil.desEncrypt(data, key, iv);\n        \n        assertNotNull(encryptedData);\n        // Add additional assertions for the expected encrypted data\n        \n    } catch (Exception e) {\n        fail(\"An exception occurred: \" + e.getMessage());\n    }\n}",
        "@Test\npublic void desEncryptTest() {\n    try {\n        String data = \"<data>\";\n        String key = \"<key>\";\n        String iv = \"<iv>\";\n        String expected = \"<expected result>\";\n\n        String result = AesEncryptUtil.desEncrypt(data, key, iv);\n\n        assertEquals(expected, result);\n    } catch (Exception e) {\n        fail(\"An exception occurred: \" + e.getMessage());\n    }\n}",
        "@Test\npublic void desEncryptTest() {\n    try {\n        String data = \"encrypted data\";\n        String key = \"encryption key\";\n        String iv = \"initialization vector\";\n        \n        String encryptedData = \"encrypted data\"; // replace with actual encrypted data\n        \n        String decryptedData = AesEncryptUtil.desEncrypt(data, key, iv);\n        \n        assertEquals(encryptedData, decryptedData);\n    } catch (Exception e) {\n        e.printStackTrace();\n        fail(\"An exception occurred.\");\n    }\n}",
        "package org.jeecg.common.util.encryption;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AesEncryptUtilTest {\n    @Test\n    public void desEncryptTest() {\n        String data = \"\"; // enter the test data\n        String key = \"\"; // enter the encryption key\n        String iv = \"\"; // enter the initialization vector\n\n        try {\n            String encryptedData = AesEncryptUtil.desEncrypt(data, key, iv);\n            // assert the expected decrypted value\n            assertEquals(\"\", encryptedData);\n        } catch (Exception e) {\n            fail(\"An exception occurred: \" + e.getMessage());\n        }\n    }\n}",
        "@Test\npublic void desEncryptTest() {\n    try {\n        String data = \"\"; // Write test data\n        String key = \"\"; // Write test key\n        String iv = \"\"; // Write test iv\n        String expected = \"\"; // Write expected result\n        \n        String result = AesEncryptUtil.desEncrypt(data, key, iv);\n        \n        assertEquals(expected, result);\n    } catch (Exception e) {\n        fail(\"An exception occurred: \" + e.getMessage());\n    }\n}",
        "package org.jeecg.common.util.encryption;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AesEncryptUtilTest {\n    @Test\n    public void desEncryptTest() {\n        try {\n            String data = \"encryptedData\";\n            String key = \"encryptionKey\";\n            String iv = \"initializationVector\";\n\n            String encryptedData = AesEncryptUtil.desEncrypt(data, key, iv);\n\n            // Assert statements\n            assertEquals(\"decryptedData\", encryptedData);\n        } catch (Exception e) {\n            fail(\"An exception occurred: \" + e.getMessage());\n        }\n    }\n}",
        "@Test\npublic void desEncryptTest() throws Exception {\n    String data = \"abcdefghijklmnopqrstuvwxyz\";\n    String key = \"1234567890123456\";\n    String iv = \"1234567890123456\";\n\n    String encryptedData = AesEncryptUtil.desEncrypt(data, key, iv);\n    String decryptedData = desEncrypt(encryptedData, key, iv);\n\n    assertEquals(data, decryptedData);\n}",
        "@Test\npublic void desEncryptTest() {\n    String data = \"\u2026\"; // provide test data\n    String key = \"\u2026\"; // provide test key\n    String iv = \"\u2026\"; // provide test iv\n\n    try {\n        String result = AesEncryptUtil.desEncrypt(data, key, iv);\n        assertEquals(\"expectedResult\", result); // provide expected decrypted result\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}",
        "@Test\npublic void desEncryptTest() {\n    try {\n        String data = \"...\"; // Provide the test data\n        String key = \"...\" // Provide the test key\n        String iv = \"...\" // Provide the test iv\n\n        String encryptedData = AesEncryptUtil.encrypt(data, key, iv);\n        String decryptedData = AesEncryptUtil.desEncrypt(encryptedData, key, iv);\n\n        assertEquals(data, decryptedData, \"Decrypted data should match the original data\");\n    } catch (Exception e) {\n        fail(\"An exception occurred: \" + e.getMessage());\n    }\n}",
        "@Test\n    public void desEncryptTest() {\n        String data = \"SGVsbG8gV29ybGQ=\"; // encrypted data\n        String key = \"ThisIsAKey123456\"; // encryption key\n        String iv = \"ThisIsAnIV123456\"; // initialization vector\n\n        try {\n            String decryptedData = AesEncryptUtil.desEncrypt(data, key, iv);\n            assertEquals(\"Hello World\", decryptedData);\n        } catch (Exception e) {\n            fail(\"An exception occurred: \" + e.getMessage());\n        }\n    }"
    ]
}
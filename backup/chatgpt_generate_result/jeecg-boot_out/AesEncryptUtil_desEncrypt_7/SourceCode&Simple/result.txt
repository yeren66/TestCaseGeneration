Source code: 


public static String desEncrypt(String data, String key, String iv) throws Exception {
    //update-begin-author:taoyan date:2022-5-23 for:VUEN-1084 【vue3】online表单测试发现的新问题 6、解密报错 ---解码失败应该把异常抛出去，在外面处理
    byte[] encrypted1 = Base64.decode(data);

    Cipher cipher = Cipher.getInstance("AES/CBC/NoPadding");
    SecretKeySpec keyspec = new SecretKeySpec(key.getBytes(), "AES");
    IvParameterSpec ivspec = new IvParameterSpec(iv.getBytes());

    cipher.init(Cipher.DECRYPT_MODE, keyspec, ivspec);

    byte[] original = cipher.doFinal(encrypted1);
    String originalString = new String(original);
    //加密解码后的字符串会出现\u0000
    return originalString.replaceAll("\\u0000", "");
    //update-end-author:taoyan date:2022-5-23 for:VUEN-1084 【vue3】online表单测试发现的新问题 6、解密报错 ---解码失败应该把异常抛出去，在外面处理
}



No.1 generated result --------------------------

@Test
public void desEncryptTest() throws Exception {
    String data = "SGVsbG8gd29ybGQh"; // Base64 encoded string
    String key = "1234567890123456";
    String iv = "abcdefghijklmnop";
    
    String expectedResult = "Hello world!";
    String actualResult = AesEncryptUtil.desEncrypt(data, key, iv);
    
    assertEquals(expectedResult, actualResult);
}


No.2 generated result --------------------------

@Test
public void desEncryptTest() throws Exception {
    String data = "YOUR_DATA";
    String key = "YOUR_KEY";
    String iv = "YOUR_IV";
    
    String encryptedData = "ENCRYPTED_DATA";
    String expected = "EXPECTED_DECRYPTED_DATA";
    
    String actual = AesEncryptUtil.desEncrypt(encryptedData, key, iv);
    
    assertEquals(expected, actual);
}


No.3 generated result --------------------------

@Test
public void desEncryptTest() throws Exception {
    String data = "SGVsbG8gd29ybGQh";
    String key = "0123456789abcdef";
    String iv = "1234567890abcdef";

    String expectedResult = "Hello world!";
    String actualResult = AesEncryptUtil.desEncrypt(data, key, iv);

    assertEquals(expectedResult, actualResult);
}


No.4 generated result --------------------------


@Test
public void desEncryptTest() {
    try {
        String data = "exampleData";
        String key = "exampleKey";
        String iv = "exampleIV";
        
        String encryptedData = AesEncryptUtil.encrypt(data, key, iv);
        String decryptedData = AesEncryptUtil.desEncrypt(encryptedData, key, iv);
        
        assertEquals(data, decryptedData);
    } catch (Exception e) {
        fail("An exception occurred: " + e.getMessage());
    }
}



No.5 generated result --------------------------

@Test
public void desEncryptTest() {
    try {
        String data = "encrypted data";
        String key = "encryption key";
        String iv = "initialization vector";
        
        String encryptedData = AesEncryptUtil.encrypt(data, key, iv);
        String decryptedData = AesEncryptUtil.desEncrypt(encryptedData, key, iv);
        
        assertEquals(data, decryptedData);
    } catch (Exception e) {
        fail("An exception occurred: " + e.getMessage());
    }
}


No.6 generated result --------------------------

@Test
public void desEncryptTest() {
    try {
        String data = "SGVsbG8gd29ybGQ=";
        String key = "0123456789abcdef";
        String iv = "abcdef0123456789";
        String expected = "Hello world";

        String result = AesEncryptUtil.desEncrypt(data, key, iv);
        assertEquals(expected, result);
    } catch (Exception e) {
        fail("An exception occurred: " + e.getMessage());
    }
}


No.7 generated result --------------------------

@Test
public void desEncryptTest() {
    try {
        String data = "TWFu";
        String key = "0123456789abcdef";
        String iv = "abcdef0123456789";
        
        String expected = "Man";
        String actual = AesEncryptUtil.desEncrypt(data, key, iv);
        
        assertEquals(expected, actual);
    } catch (Exception e) {
        fail("An exception occurred: " + e.getMessage());
    }
}


No.8 generated result --------------------------

@Test
public void desEncryptTest() throws Exception {
    String data = "exampleData";
    String key = "exampleKey";
    String iv = "exampleIV";
    
    String encryptedData = AesEncryptUtil.encrypt(data, key, iv);
    String decryptedData = AesEncryptUtil.desEncrypt(encryptedData, key, iv);
    
    assertEquals(data, decryptedData);
}


No.9 generated result --------------------------

@Test
public void desEncryptTest() {
    try {
        String data = "encrypted data";
        String key = "encryption key";
        String iv = "initialization vector";
        
        String decryptedData = AesEncryptUtil.desEncrypt(data, key, iv);
        
        // Add assertions to test the decrypted data
        assertEquals("expected decrypted data", decryptedData);
        
    } catch (Exception e) {
        // Handle any exceptions that occur during the test
        fail("An exception occurred: " + e.getMessage());
    }
}


No.10 generated result --------------------------

@Test
public void desEncryptTest() {
    String data = "some encrypted data";
    String key = "some encryption key";
    String iv = "some initialization vector";
    
    try {
        String decryptedData = AesEncryptUtil.desEncrypt(data, key, iv);
        assertEquals("expected decrypted data", decryptedData);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}



{
    "project_name": "jeecg-boot",
    "file_name": "JdbcSecurityUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/security/JdbcSecurityUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.util.security",
    "docstring": "/**\n     * \u6821\u9a8csql\u662f\u5426\u6709\u7279\u5b9a\u7684key\n     * @param jdbcUrl\n     * @return\n     */",
    "source_code": "\npublic static void validate(String jdbcUrl){\n    if(oConvertUtils.isEmpty(jdbcUrl)){\n        return;\n    }\n    String urlConcatChar = \"?\";\n    if(jdbcUrl.indexOf(urlConcatChar)<0){\n        return;\n    }\n    String argString = jdbcUrl.substring(jdbcUrl.indexOf(urlConcatChar)+1);\n    String[] keyAndValues = argString.split(\"&\");\n    for(String temp: keyAndValues){\n        String key = temp.split(\"=\")[0];\n        for(String prop: notAllowedProps){\n            if(prop.equalsIgnoreCase(key)){\n                throw new JeecgBootException(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\uff0c\u3010\"+key+\"\u3011\");\n            }\n        }\n    }\n}\n",
    "class_name": "JdbcSecurityUtil",
    "method_name": "validate",
    "arguments": [
        "String jdbcUrl"
    ],
    "generate_test": [
        "@Test\npublic void validateTest() {\n    // Test case 1: jdbcUrl is empty\n    String jdbcUrl1 = \"\";\n    JdbcSecurityUtil.validate(jdbcUrl1);\n\n    // Test case 2: jdbcUrl does not contain '?'\n    String jdbcUrl2 = \"jdbc:mysql://localhost:3306/test\";\n    JdbcSecurityUtil.validate(jdbcUrl2);\n\n    // Test case 3: jdbcUrl contains '?', but does not contain any key-value pairs\n    String jdbcUrl3 = \"jdbc:mysql://localhost:3306/test?\";\n    JdbcSecurityUtil.validate(jdbcUrl3);\n\n    // Test case 4: jdbcUrl contains '?', with key-value pairs\n    String jdbcUrl4 = \"jdbc:mysql://localhost:3306/test?username=admin&password=123456\";\n    // The key 'username' should trigger the exception\n    assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(jdbcUrl4));\n\n    // Test case 5: jdbcUrl contains '?', with key-value pairs (testing case-insensitivity)\n    String jdbcUrl5 = \"jdbc:mysql://localhost:3306/test?A=1&B=2&C=3\";\n    // The keys 'A' and 'C' should trigger the exception\n    assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(jdbcUrl5));\n}",
        "package org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n    @Test\n    public void validateTest() {\n        String jdbcUrl = \"jdbc:mysql://localhost:3306/testDB?user=root&password=pass123&authenticationPluginClassName=com.mysql.cj.jdbc.MysqlKeycloakPlugin\";\n        assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(jdbcUrl));\n    }\n}",
        "@Test\npublic void validateTest() {\n    // Test case 1: Valid jdbcUrl with no forbidden properties\n    JdbcSecurityUtil.validate(\"jdbc:postgresql://localhost:5432/dbname\");\n    \n    // Test case 2: Valid jdbcUrl with forbidden properties\n    JeecgBootException exception = assertThrows(JeecgBootException.class, () -> {\n        JdbcSecurityUtil.validate(\"jdbc:postgresql://localhost:5432/dbname?authenticationPluginClassName=admin\");\n    });\n    assertEquals(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\uff0c\u3010authenticationPluginClassName\u3011\", exception.getMessage());\n    \n    // Test case 3: Invalid jdbcUrl\n    JdbcSecurityUtil.validate(\"\");\n    \n    // Test case 4: Valid jdbcUrl with no parameters\n    JdbcSecurityUtil.validate(\"jdbc:postgresql://localhost:5432/dbname\");\n}",
        "@Test\npublic void validateTest() {\n    String jdbcUrl = \"jdbc:mysql://localhost:3306/test?authenticationPluginClassName=com.example.MyPlugin\";\n    assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(jdbcUrl));\n    \n    jdbcUrl = \"jdbc:postgresql://localhost:5432/test?sslhostnameverifier=org.example.MyVerifier\";\n    assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(jdbcUrl));\n    \n    jdbcUrl = \"jdbc:oracle://localhost:1521/test?socketFactory=com.example.MySocketFactory\";\n    assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(jdbcUrl));\n    \n    jdbcUrl = \"jdbc:db2://localhost:50000/test?sslfactory=com.example.MySSLFactory\";\n    assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(jdbcUrl));\n    \n    jdbcUrl = \"jdbc:sqlserver://localhost:1433/test?sslpasswordcallback=com.example.MyCallback\";\n    assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(jdbcUrl));\n}",
        "@Test\npublic void validateTest() {\n    // Test case 1: Empty jdbcUrl\n    JdbcSecurityUtil.validate(\"\");\n    \n    // Test case 2: jdbcUrl without urlConcatChar\n    JdbcSecurityUtil.validate(\"jdbc:mysql://localhost:3306/test\");\n    \n    // Test case 3: jdbcUrl with urlConcatChar\n    JdbcSecurityUtil.validate(\"jdbc:mysql://localhost:3306/test?user=root&password=123456\");\n    \n    // Test case 4: jdbcUrl with notAllowedProps\n    String jdbcUrl = \"jdbc:mysql://localhost:3306/test?user=root&authenticationPluginClassName=xxx\";\n    assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(jdbcUrl));\n    \n    // Test case 5: jdbcUrl with multiple notAllowedProps\n    jdbcUrl = \"jdbc:mysql://localhost:3306/test?user=root&authenticationPluginClassName=xxx&sslhostnameverifier=xxx\";\n    assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(jdbcUrl));\n}",
        "package org.jeecg.common.util.security;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class JdbcSecurityUtilTest {\n    @Test\n    public void validateTest() {\n        String jdbcUrl = \"jdbc:mysql://localhost:3306/test?user=root&password=pass\";\n        \n        assertDoesNotThrow(() -> JdbcSecurityUtil.validate(jdbcUrl));\n        \n        jdbcUrl = \"jdbc:mysql://localhost:3306/test?user=root&authenticationPluginClassName=test\";\n        \n        JeecgBootException exception = assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(jdbcUrl));\n        assertTrue(exception.getMessage().contains(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\uff0c\u3010authenticationPluginClassName\u3011\"));\n    }\n}",
        "@Test\npublic void validateTest() {\n    String jdbcUrl = \"jdbc:mysql://localhost:3306/dbname?authenticationPluginClassName=myPlugin\";\n    assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(jdbcUrl));\n}",
        "@Test\npublic void validateTest() {\n    String jdbcUrl = \"jdbc:mysql://localhost:3306/mydb?authenticationPluginClassName=xxxx\";\n    assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(jdbcUrl));\n}",
        "@Test\npublic void validateTest() {\n    // Test Case 1: empty jdbcUrl\n    JdbcSecurityUtil.validate(\"\");\n    \n    // Test Case 2: jdbcUrl without urlConcatChar\n    JdbcSecurityUtil.validate(\"jdbc:mysql://localhost/dbname\");\n    \n    // Test Case 3: jdbcUrl with allowed properties\n    JdbcSecurityUtil.validate(\"jdbc:mysql://localhost/dbname?user=user&password=pass\");\n    \n    // Test Case 4: jdbcUrl with notAllowedProps property\n    try {\n        JdbcSecurityUtil.validate(\"jdbc:mysql://localhost/dbname?authenticationPluginClassName=plugin\");\n        fail(\"Expected JeecgBootException\");\n    } catch (JeecgBootException e) {\n        assertEquals(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\uff0c\u3010authenticationPluginClassName\u3011\", e.getMessage());\n    }\n}",
        "@Test\npublic void validateTest() {\n    String jdbcUrl = \"jdbc:mysql://localhost:3306/sampleDB?user=root&password=pass123\";\n    assertDoesNotThrow(() -> JdbcSecurityUtil.validate(jdbcUrl));\n}\n\n@Test\npublic void validateTest_InvalidUrl() {\n    String jdbcUrl = \"\";\n    assertDoesNotThrow(() -> JdbcSecurityUtil.validate(jdbcUrl));\n}\n\n@Test\npublic void validateTest_SecurityRisk() {\n    String jdbcUrl = \"jdbc:mysql://localhost:3306/sampleDB?socketFactory=com.example.SocketFactory\";\n    JeecgBootException exception = assertThrows(JeecgBootException.class, () -> JdbcSecurityUtil.validate(jdbcUrl));\n    assertEquals(\"\u8fde\u63a5\u5730\u5740\u6709\u5b89\u5168\u98ce\u9669\uff0c\u3010socketFactory\u3011\", exception.getMessage());\n}"
    ]
}
{
    "project_name": "jeecg-boot",
    "file_name": "OssBootUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/oss/OssBootUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.util.oss",
    "docstring": "/**\n     * \u4e0a\u4f20\u6587\u4ef6\u81f3\u963f\u91cc\u4e91 OSS\n     * \u6587\u4ef6\u4e0a\u4f20\u6210\u529f,\u8fd4\u56de\u6587\u4ef6\u5b8c\u6574\u8bbf\u95ee\u8def\u5f84\n     * \u6587\u4ef6\u4e0a\u4f20\u5931\u8d25,\u8fd4\u56de null\n     *\n     * @param file    \u5f85\u4e0a\u4f20\u6587\u4ef6\n     * @param fileDir \u6587\u4ef6\u4fdd\u5b58\u76ee\u5f55\n     * @return oss \u4e2d\u7684\u76f8\u5bf9\u6587\u4ef6\u8def\u5f84\n     */",
    "source_code": "\npublic static String upload(FileItemStream file, String fileDir) {\n    String filePath = null;\n    initOss(endPoint, accessKeyId, accessKeySecret);\n    StringBuilder fileUrl = new StringBuilder();\n    try {\n        String suffix = file.getName().substring(file.getName().lastIndexOf('.'));\n        String fileName = UUID.randomUUID().toString().replace(\"-\", \"\") + suffix;\n        if (!fileDir.endsWith(SymbolConstant.SINGLE_SLASH)) {\n            fileDir = fileDir.concat(SymbolConstant.SINGLE_SLASH);\n        }\n        fileDir = StrAttackFilter.filter(fileDir);\n        fileUrl = fileUrl.append(fileDir + fileName);\n        if (oConvertUtils.isNotEmpty(staticDomain) && staticDomain.toLowerCase().startsWith(CommonConstant.STR_HTTP)) {\n            filePath = staticDomain + SymbolConstant.SINGLE_SLASH + fileUrl;\n        } else {\n            filePath = \"https://\" + bucketName + \".\" + endPoint + SymbolConstant.SINGLE_SLASH + fileUrl;\n        }\n        PutObjectResult result = ossClient.putObject(bucketName, fileUrl.toString(), file.openStream());\n        // \u8bbe\u7f6e\u6743\u9650(\u516c\u5f00\u8bfb)\n        ossClient.setBucketAcl(bucketName, CannedAccessControlList.PublicRead);\n        if (result != null) {\n            log.info(\"------OSS\u6587\u4ef6\u4e0a\u4f20\u6210\u529f------\" + fileUrl);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n    return filePath;\n}\n",
    "class_name": "OssBootUtil",
    "method_name": "upload",
    "arguments": [
        "FileItemStream file",
        "String fileDir"
    ],
    "generate_test": [
        "@Test\npublic void uploadTest() {\n    FileItemStream file = mock(FileItemStream.class);\n    String fileDir = \"testDir/\";\n    String expectedFilePath = \"https://bucketName.endPoint/testDir/fileName\";\n    \n    // Mocking the file.getName() method to return a test file name\n    when(file.getName()).thenReturn(\"testFile.jpg\");\n    \n    // Mocking the file.openStream() method to return a test input stream\n    InputStream inputStream = new ByteArrayInputStream(\"test data\".getBytes());\n    when(file.openStream()).thenReturn(inputStream);\n    \n    // Call the upload method and validate the returned file path\n    String actualFilePath = OssBootUtil.upload(file, fileDir);\n    assertEquals(expectedFilePath, actualFilePath);\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OssBootUtilTest {\n    @Test\n    public void uploadTest() {\n        // Arrange\n        FileItemStream file = <fill with a file>;\n        String fileDir = <fill with a file directory>;\n        \n        // Act\n        String result = OssBootUtil.upload(file, fileDir);\n        \n        // Assert\n        assertNotNull(result);\n        assertEquals(expectedFilePath, result);\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OssBootUtilTest {\n    @Test\n    public void uploadTest() {\n        // Arrange\n        FileItemStream file = null; // mock the file item stream\n        String fileDir = \"example/fileDir\";\n\n        // Act\n        String result = OssBootUtil.upload(file, fileDir);\n\n        // Assert\n        assertNotNull(result);\n        // additional assertions based on the expected behavior of the upload method\n    }\n}",
        "@Test\npublic void uploadTest() {\n    FileItemStream file = // create a mock FileItemStream object with desired parameters\n    String fileDir = \"test/file/dir\";\n    String expectedFilePath = \"https://bucketName.endPoint/test/file/dir/fileName\";\n    \n    String actualFilePath = OssBootUtil.upload(file, fileDir);\n    \n    assertEquals(expectedFilePath, actualFilePath);\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OssBootUtilTest {\n    @Test\n    public void uploadTest() {\n        // Prepare test data\n        FileItemStream file = ... ; // Provide actual FileItemStream object\n        String fileDir = ... ; // Provide actual fileDir value\n\n        // Call the upload() method\n        String filePath = OssBootUtil.upload(file, fileDir);\n\n        // Assert the expected result\n        assertNotNull(filePath);\n        // Add more assertions if necessary\n    }\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OssBootUtilTest {\n    @Test\n    public void uploadTest() {\n        FileItemStream file = // create a FileItemStream object\n        String fileDir = // specify the file directory\n\n        String expectedFilePath = // specify the expected file path\n\n        String actualFilePath = OssBootUtil.upload(file, fileDir);\n\n        assertEquals(expectedFilePath, actualFilePath);\n    }\n}",
        "@Test\npublic void uploadTest() {\n    FileItemStream file = new FileItemStream();\n    String fileDir = \"uploads/\";\n    String expectedFilePath = \"https://bucketName.endPoint/uploads/fileName\";\n    \n    String actualFilePath = OssBootUtil.upload(file, fileDir);\n    \n    assertEquals(expectedFilePath, actualFilePath);\n}",
        "public class OssBootUtilTest {\n    @Test\n    public void uploadTest() {\n        // Create a mock FileItemStream object\n        FileItemStream file = mock(FileItemStream.class);\n        when(file.getName()).thenReturn(\"test.pdf\");\n        when(file.getName().lastIndexOf('.')).thenReturn(4);\n        \n        // Create a mock InputStream object\n        InputStream inputStream = mock(InputStream.class);\n        \n        // Create a mock PutObjectResult object\n        PutObjectResult result = mock(PutObjectResult.class);\n        \n        // Create a mock OSSClient object\n        OSSClient ossClient = mock(OSSClient.class);\n        when(ossClient.putObject(bucketName, fileUrl.toString(), inputStream)).thenReturn(result);\n        \n        // Create a mock OssBootUtil object and set the ossClient\n        OssBootUtil ossBootUtil = mock(OssBootUtil.class);\n        ossBootUtil.setOssClient(ossClient);\n        \n        // Call the method under test\n        String filePath = ossBootUtil.upload(file, \"testDir/\");\n        \n        // Verify the expected URL\n        assertEquals(\"https://<bucketName>.<endPoint>/testDir/<randomUUID>.pdf\", filePath);\n    }\n}",
        "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OssBootUtilTest {\n    @Test\n    public void uploadTest() {\n        // Create a temporary file for testing\n        FileItemStream file = createTempFile();\n        String fileDir = \"testDir\";\n\n        // Call the upload method\n        String result = OssBootUtil.upload(file, fileDir);\n\n        // Assert the result is not null\n        assertNotNull(result);\n\n        // Add additional assertions if needed\n        // ...\n\n        // Cleanup (delete the temporary file if needed)\n        deleteTempFile(file);\n    }\n\n    private FileItemStream createTempFile() {\n        // Implement logic to create a temporary file for testing\n        // ...\n\n        return null;\n    }\n\n    private void deleteTempFile(FileItemStream file) {\n        // Implement logic to delete the temporary file\n        // ...\n    }\n}",
        "@Test\npublic void uploadTest() {\n    String fileDir = \"/uploads/\";\n    FileItemStream file = new FileItemStream(\"file.txt\");\n    \n    String result = OssBootUtil.upload(file, fileDir);\n    \n    assertNotNull(result);\n    assertTrue(result.startsWith(\"https://\"));\n    assertTrue(result.contains(fileDir));\n    assertTrue(result.contains(\".txt\"));\n}"
    ]
}
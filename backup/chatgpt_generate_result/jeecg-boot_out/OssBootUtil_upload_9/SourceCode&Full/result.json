{
    "project_name": "jeecg-boot",
    "file_name": "OssBootUtil.java",
    "relative_path": "jeecg-boot/jeecg-boot-base-core/src/main/java/org/jeecg/common/util/oss/OssBootUtil.java",
    "execute_path": "jeecg-boot",
    "package": "org.jeecg.common.util.oss",
    "docstring": "/**\n     * \u4e0a\u4f20\u6587\u4ef6\u81f3\u963f\u91cc\u4e91 OSS\n     * \u6587\u4ef6\u4e0a\u4f20\u6210\u529f,\u8fd4\u56de\u6587\u4ef6\u5b8c\u6574\u8bbf\u95ee\u8def\u5f84\n     * \u6587\u4ef6\u4e0a\u4f20\u5931\u8d25,\u8fd4\u56de null\n     *\n     * @param file    \u5f85\u4e0a\u4f20\u6587\u4ef6\n     * @param fileDir \u6587\u4ef6\u4fdd\u5b58\u76ee\u5f55\n     * @return oss \u4e2d\u7684\u76f8\u5bf9\u6587\u4ef6\u8def\u5f84\n     */",
    "source_code": "\npublic static String upload(FileItemStream file, String fileDir) {\n    String filePath = null;\n    initOss(endPoint, accessKeyId, accessKeySecret);\n    StringBuilder fileUrl = new StringBuilder();\n    try {\n        String suffix = file.getName().substring(file.getName().lastIndexOf('.'));\n        String fileName = UUID.randomUUID().toString().replace(\"-\", \"\") + suffix;\n        if (!fileDir.endsWith(SymbolConstant.SINGLE_SLASH)) {\n            fileDir = fileDir.concat(SymbolConstant.SINGLE_SLASH);\n        }\n        fileDir = StrAttackFilter.filter(fileDir);\n        fileUrl = fileUrl.append(fileDir + fileName);\n        if (oConvertUtils.isNotEmpty(staticDomain) && staticDomain.toLowerCase().startsWith(CommonConstant.STR_HTTP)) {\n            filePath = staticDomain + SymbolConstant.SINGLE_SLASH + fileUrl;\n        } else {\n            filePath = \"https://\" + bucketName + \".\" + endPoint + SymbolConstant.SINGLE_SLASH + fileUrl;\n        }\n        PutObjectResult result = ossClient.putObject(bucketName, fileUrl.toString(), file.openStream());\n        // \u8bbe\u7f6e\u6743\u9650(\u516c\u5f00\u8bfb)\n        ossClient.setBucketAcl(bucketName, CannedAccessControlList.PublicRead);\n        if (result != null) {\n            log.info(\"------OSS\u6587\u4ef6\u4e0a\u4f20\u6210\u529f------\" + fileUrl);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n    return filePath;\n}\n",
    "class_name": "OssBootUtil",
    "method_name": "upload",
    "arguments": [
        "FileItemStream file",
        "String fileDir"
    ],
    "generate_test": [
        "@Test\npublic void uploadTest() {\n    FileItemStream file = null; // Replace null with a FileItemStream object\n    String fileDir = \"testDir\"; // Replace \"testDir\" with the desired file directory\n    \n    String result = OssBootUtil.upload(file, fileDir);\n    \n    assertNotNull(result);\n    assertTrue(result.startsWith(\"https://\"));\n    assertTrue(result.endsWith(fileDir));\n}",
        "@Test\npublic void uploadTest() {\n    FileItemStream file = createFileItemStream(); // Create a FileItemStream object with a test file\n    String fileDir = \"uploads/\"; // Set the file directory\n    \n    String result = OssBootUtil.upload(file, fileDir); // Call the upload method\n    \n    assertNotNull(result); // Assert that the result is not null\n    assertTrue(result.startsWith(\"https://\")); // Assert that the result starts with \"https://\"\n}",
        "package org.jeecg.common.util.oss;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OssBootUtilTest {\n    @Test\n    public void uploadTest() {\n        // Create a new FileItemStream object for testing\n        FileItemStream file = new FileItemStream();\n        file.setName(\"testfile.txt\");\n        file.openStream() = // Provide the input stream for the file that needs to be uploaded\n        \n        // Specify the file directory\n        String fileDir = \"path/to/directory\";\n        \n        // Call the upload method from OssBootUtil class\n        String filePath = OssBootUtil.upload(file, fileDir);\n        \n        // Verify that the filePath is not null\n        assertNotNull(filePath);\n        \n        // Verify any other assertions if required\n        // ...\n    }\n}",
        "@Test\npublic void uploadTest() {\n    String fileDir = \"test\";\n    FileItemStream file = mock(FileItemStream.class);\n    when(file.getName()).thenReturn(\"test.txt\");\n    when(file.openStream()).thenReturn(mock(InputStream.class));\n\n    String result = OssBootUtil.upload(file, fileDir);\n\n    assertNotNull(result);\n    assertEquals(\"https://bucketName.endPoint/test/fileName\", result);\n}",
        "@Test\npublic void uploadTest() {\n    // Create a dummy FileItemStream object\n    FileItemStream file = new FileItemStream(\"filename.txt\");\n    String fileDir = \"uploads/\";\n\n    // Call the upload() method and store the return value\n    String filePath = OssBootUtil.upload(file, fileDir);\n\n    // Assert that the filePath is not null\n    assertNotNull(filePath);\n}",
        "@Test\npublic void uploadTest() {\n    // Prepare test data\n    String fileDir = \"/test/\";\n    FileItemStream file = new FileItemStream();\n\n    // Execute the method under test\n    String result = OssBootUtil.upload(file, fileDir);\n\n    // Verify the result\n    assertNotNull(result);\n}",
        "@Test\n public void uploadTest() {\n     // Create a sample FileItemStream object\n     FileItemStream fileItemStream = mock(FileItemStream.class);\n     // Set the required properties of the FileItemStream object for testing\n     when(fileItemStream.getName()).thenReturn(\"test.jpg\");\n     when(fileItemStream.openStream()).thenReturn(new FileInputStream(\"path/to/test.jpg\"));\n     \n     // Create a sample fileDir string\n     String fileDir = \"uploads/\";\n     \n     // Call the upload method and store the result\n     String result = OssBootUtil.upload(fileItemStream, fileDir);\n     \n     // Assert the result\n     assertNotNull(result);\n     assertEquals(\"https://bucketName.endPoint/uploads/generatedUUID.jpg\", result);\n }",
        "package org.jeecg.common.util.oss;\n\nimport org.junit.jupiter.api.*;\nimport org.springframework.mock.web.MockMultipartFile;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OssBootUtilTest {\n  \n    private static final String ENDPOINT = \"<fill_endpoint>\";\n    private static final String ACCESS_KEY_ID = \"<fill_access_key_id>\";\n    private static final String ACCESS_KEY_SECRET = \"<fill_access_key_secret>\";\n    private static final String BUCKET_NAME = \"<fill_bucket_name>\";\n\n    @Test\n    public void uploadTest() {\n        // Set up the test environment\n        OssBootUtil.setEndPoint(ENDPOINT);\n        OssBootUtil.setAccessKeyId(ACCESS_KEY_ID);\n        OssBootUtil.setAccessKeySecret(ACCESS_KEY_SECRET);\n        OssBootUtil.setBucketName(BUCKET_NAME);\n\n        // Create a mock multipart file\n        MockMultipartFile file = new MockMultipartFile(\"test.txt\", \"Hello, World!\".getBytes());\n\n        // Call the upload method\n        String fileDir = \"uploads\";\n        String filePath = null;\n        try {\n            filePath = OssBootUtil.upload(file, fileDir);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        // Verify the output\n        assertNotNull(filePath);\n        assertTrue(filePath.startsWith(\"https://\"));\n        assertTrue(filePath.contains(BUCKET_NAME));\n        assertTrue(filePath.contains(fileDir));\n        assertTrue(filePath.contains(\"test.txt\"));\n    }\n}",
        "@Test\npublic void uploadTest() {\n    FileItemStream file = createFileItemStream(); // create a file item stream for testing\n    String fileDir = \"test/dir\"; // set the file directory\n    String filePath = OssBootUtil.upload(file, fileDir); // upload the file using the OssBootUtil.upload() method\n    assertNotNull(filePath); // assert that the returned file path is not null\n    assertTrue(filePath.startsWith(\"https://\")); // assert that the returned file path starts with \"https://\"\n}",
        "@Test\npublic void uploadTest() {\n    FileItemStream file = null; // create a FileItemStream object\n    String fileDir = \"test\"; // set the file directory\n\n    String result = OssBootUtil.upload(file, fileDir); // call the upload method\n\n    assertNotNull(result); // assert that the result is not null\n}"
    ]
}
Source code: 


private String getReqestParams(HttpServletRequest request, JoinPoint joinPoint) {
    String httpMethod = request.getMethod();
    String params = "";
    if (CommonConstant.HTTP_POST.equals(httpMethod) || CommonConstant.HTTP_PUT.equals(httpMethod) || CommonConstant.HTTP_PATCH.equals(httpMethod)) {
        Object[] paramsArray = joinPoint.getArgs();
        // java.lang.IllegalStateException: It is illegal to call this method if the current request is not in asynchronous mode (i.e. isAsyncStarted() returns false)
        //  https://my.oschina.net/mengzhang6/blog/2395893
        Object[] arguments  = new Object[paramsArray.length];
        for (int i = 0; i < paramsArray.length; i++) {
            if (paramsArray[i] instanceof BindingResult || paramsArray[i] instanceof ServletRequest || paramsArray[i] instanceof ServletResponse || paramsArray[i] instanceof MultipartFile) {
                //ServletRequest不能序列化，从入参里排除，否则报异常：java.lang.IllegalStateException: It is illegal to call this method if the current request is not in asynchronous mode (i.e. isAsyncStarted() returns false)
                //ServletResponse不能序列化 从入参里排除，否则报异常：java.lang.IllegalStateException: getOutputStream() has already been called for this response
                continue;
            }
            arguments[i] = paramsArray[i];
        }
        //update-begin-author:taoyan date:20200724 for:日志数据太长的直接过滤掉
        PropertyFilter profilter = new PropertyFilter() {
            @Override
            public boolean apply(Object o, String name, Object value) {
                int length = 500;
                if(value!=null && value.toString().length()>length){
                    return false;
                }
                return true;
            }
        };
        params = JSONObject.toJSONString(arguments, profilter);
        //update-end-author:taoyan date:20200724 for:日志数据太长的直接过滤掉
    } else {
        MethodSignature signature = (MethodSignature) joinPoint.getSignature();
        Method method = signature.getMethod();
        // 请求的方法参数值
        Object[] args = joinPoint.getArgs();
        // 请求的方法参数名称
        LocalVariableTableParameterNameDiscoverer u = new LocalVariableTableParameterNameDiscoverer();
        String[] paramNames = u.getParameterNames(method);
        if (args != null && paramNames != null) {
            for (int i = 0; i < args.length; i++) {
                params += "  " + paramNames[i] + ": " + args[i];
            }
        }
    }
    return params;
}



No.1 generated result --------------------------

String methodName = "testMethod";
int operateType = 1;

AutoLogAspect aspect = new AutoLogAspect();
HttpServletRequest request = null; // provide a HttpServletRequest object and set its values accordingly
JoinPoint joinPoint = null; // provide a JoinPoint object and set its values accordingly

String result = aspect.getReqestParams(request, joinPoint);

assertEquals("<expected result>", result);


No.2 generated result --------------------------

@Test
public void getReqestParamsTest() {
    // Create a mock HttpServletRequest object
    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
    
    // Create a mock JoinPoint object
    JoinPoint joinPoint = Mockito.mock(JoinPoint.class);
    
    // Set the necessary values for the mock HttpServletRequest object
    Mockito.when(request.getMethod()).thenReturn("POST");
    
    // Set the necessary values for the mock JoinPoint object
    Object[] paramsArray = new Object[2];
    paramsArray[0] = "param1";
    paramsArray[1] = "param2";
    Mockito.when(joinPoint.getArgs()).thenReturn(paramsArray);
    
    // Create an instance of AutoLogAspect
    AutoLogAspect aspect = new AutoLogAspect();
    
    // Call the getReqestParams method and get the result
    String result = aspect.getReqestParams(request, joinPoint);
    
    // Verify the result
    assertEquals("\"[\\\"param1\\\",\\\"param2\\\"]\"", result);
}


No.3 generated result --------------------------

package org.jeecg.common.aspect;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AutoLogAspectTest {
    @Test
    public void getReqestParamsTest() {
        HttpServletRequest request = new HttpServletRequest();
        JoinPoint joinPoint = new JoinPoint();
        AutoLogAspect aspect = new AutoLogAspect();
        String result = aspect.getReqestParams(request, joinPoint);
        assertNotNull(result);
        assertEquals("", result);
    }
}


No.4 generated result --------------------------

package org.jeecg.common.aspect;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AutoLogAspectTest {
    @Test
    public void getReqestParamsTest() {
        AutoLogAspect aspect = new AutoLogAspect();
        HttpServletRequest request = new HttpServletRequest();
        JoinPoint joinPoint = new JoinPoint();
        String params = aspect.getReqestParams(request, joinPoint);
        assertNotNull(params);
    }
}


No.5 generated result --------------------------

@Test
public void getReqestParamsTest() {
    // Create a dummy HttpServletRequest object
    HttpServletRequest request = mock(HttpServletRequest.class);
    // Create a dummy JoinPoint object
    JoinPoint joinPoint = mock(JoinPoint.class);
    
    // Set up the necessary dependencies for the getReqestParams() method
    // ...

    // Call the getReqestParams() method with the dummy HttpServletRequest and JoinPoint objects
    String result = autoLogAspect.getReqestParams(request, joinPoint);
    
    // Assert the result
    assertEquals(expectedResult, result);
}


No.6 generated result --------------------------

package org.jeecg.common.aspect;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import org.springframework.mock.web.MockHttpServletRequest;
import org.aspectj.lang.JoinPoint;

public class AutoLogAspectTest {
    
    @Test
    public void getReqestParamsTest() {
        HttpServletRequest request = new MockHttpServletRequest();
        JoinPoint joinPoint = new MockJoinPoint();
        AutoLogAspect aspect = new AutoLogAspect();
        String params = aspect.getReqestParams(request, joinPoint);
        
        // Assert the expected result
        String expectedParams = "<expected params>";
        Assertions.assertEquals(expectedParams, params);
    }
}


No.7 generated result --------------------------

@Test
public void getReqestParamsTest() {
    HttpServletRequest request = mock(HttpServletRequest.class);
    JoinPoint joinPoint = mock(JoinPoint.class);

    when(request.getMethod()).thenReturn("POST");

    Object[] paramsArray = new Object[1];
    paramsArray[0] = "testParam";
    when(joinPoint.getArgs()).thenReturn(paramsArray);

    AutoLogAspect autoLogAspect = new AutoLogAspect();
    String result = autoLogAspect.getReqestParams(request, joinPoint);

    assertEquals("testParam", result);
}


No.8 generated result --------------------------

package org.jeecg.common.aspect;

import org.junit.jupiter.api.*;
import org.springframework.mock.web.MockHttpServletRequest;

import static org.junit.jupiter.api.Assertions.*;

public class AutoLogAspectTest {
    @Test
    public void getReqestParamsTest() {
        AutoLogAspect autoLogAspect = new AutoLogAspect();
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setMethod("POST");
        JoinPoint joinPoint = null; // Set the desired value for joinPoint
        
        String result = autoLogAspect.getReqestParams(request, joinPoint);
        // Add assertions to validate the result
        // For example:
        assertEquals(expectedResult, result);
    }
}


No.9 generated result --------------------------


package org.jeecg.common.aspect;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

import javax.servlet.http.HttpServletRequest;

public class AutoLogAspectTest {
    
    @Test
    public void getReqestParamsTest() {
        // Create a mock HttpServletRequest object
        HttpServletRequest request = mock(HttpServletRequest.class);
        // Set the required attributes and methods for the mock object
        when(request.getMethod()).thenReturn("POST");
        
        // Create a mock JoinPoint object
        JoinPoint joinPoint = mock(JoinPoint.class);
        // Set the required attributes and methods for the mock object
        Object[] paramsArray = new Object[3];
        // Populate the paramsArray with necessary objects
        // ...
        when(joinPoint.getArgs()).thenReturn(paramsArray);
        
        // Create an instance of the AutoLogAspect class
        AutoLogAspect logAspect = new AutoLogAspect();
        
        // Call the getReqestParams() method and store the result
        String result = logAspect.getReqestParams(request, joinPoint);
        
        // Assert the expected result with the actual result
        // ...
    }
}



No.10 generated result --------------------------

package org.jeecg.common.aspect;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

import javax.servlet.http.HttpServletRequest;

public class AutoLogAspectTest {
    
    @Test
    public void getReqestParamsTest() {
        AutoLogAspect autoLogAspect = new AutoLogAspect();
        HttpServletRequest request = null; // Create a HttpServletRequest object
        
        // Create a JoinPoint object
        JoinPoint joinPoint = new JoinPoint() {
            @Override
            public String toShortString() {
                return null;
            }

            @Override
            public String toLongString() {
                return null;
            }

            @Override
            public Object getThis() {
                return null;
            }

            @Override
            public Object getTarget() {
                return null;
            }

            @Override
            public Object[] getArgs() {
                return null;
            }

            @Override
            public Signature getSignature() {
                return null;
            }

            @Override
            public SourceLocation getSourceLocation() {
                return null;
            }

            @Override
            public String getKind() {
                return null;
            }

            @Override
            public StaticPart getStaticPart() {
                return null;
            }
        };

        String result = autoLogAspect.getReqestParams(request, joinPoint);
        assertEquals("", result); // Expected result goes here
    }
}



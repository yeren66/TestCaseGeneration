{
    "project_name": "javacv",
    "file_name": "IPCameraFrameGrabber.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/IPCameraFrameGrabber.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**\n     * Returns the value of the {@code long} argument;\n     * throwing an exception if the value overflows an {@code int}.\n     *\n     * @param value the long value\n     * @return the argument as an int\n     * @throws ArithmeticException if the {@code argument} overflows an int\n     * @see <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toIntExact-long-\">Java 8 Implementation</a>\n     */",
    "source_code": "\nprivate static int toIntExact(long value) {\n    if ((int) value != value) {\n        throw new ArithmeticException(\"integer overflow\");\n    }\n    return (int) value;\n}\n",
    "class_name": "IPCameraFrameGrabber",
    "method_name": "toIntExact",
    "arguments": [
        "long value"
    ],
    "generate_test": [
        "@Test\n    public void toIntExactTest() {\n        assertThrows(ArithmeticException.class, () -> {\n            IPCameraFrameGrabber.toIntExact(2147483648L);\n        });\n    }",
        "@Test\npublic void toIntExactTest() {\n    assertThrows(ArithmeticException.class, () -> {\n        IPCameraFrameGrabber.toIntExact(2147483648L);\n    });\n    \n    assertEquals(0, IPCameraFrameGrabber.toIntExact(0L));\n    \n    assertEquals(1, IPCameraFrameGrabber.toIntExact(1L));\n    \n    assertEquals(-1, IPCameraFrameGrabber.toIntExact(-1L));\n    \n    assertEquals(2147483647, IPCameraFrameGrabber.toIntExact(2147483647L));\n}",
        "@Test\npublic void toIntExactTest() {\n    assertThrows(ArithmeticException.class, () -> {\n        IPCameraFrameGrabber.toIntExact(Long.MAX_VALUE);\n    });\n    \n    assertEquals(Integer.MIN_VALUE, IPCameraFrameGrabber.toIntExact(Long.MIN_VALUE));\n    \n    assertEquals(0, IPCameraFrameGrabber.toIntExact(0));\n    \n    assertEquals(1234, IPCameraFrameGrabber.toIntExact(1234L));\n    \n    assertEquals(-5678, IPCameraFrameGrabber.toIntExact(-5678L));\n}",
        "@Test\npublic void toIntExactTest() {\n    assertThrows(ArithmeticException.class, () -> {\n        IPCameraFrameGrabber.toIntExact(<value>);\n    });\n}",
        "@Test\npublic void toIntExactTest() {\n    assertThrows(ArithmeticException.class, () -> {\n        IPCameraFrameGrabber.toIntExact(Long.MAX_VALUE);\n    });\n}",
        "@Test\npublic void toIntExactTest() {\n    // Test case 1: value is within the range of int type\n    long value1 = 100;\n    int expected1 = 100;\n    assertEquals(expected1, IPCameraFrameGrabber.toIntExact(value1));\n\n    // Test case 2: value is at the lower limit of int type\n    long value2 = Integer.MIN_VALUE;\n    int expected2 = Integer.MIN_VALUE;\n    assertEquals(expected2, IPCameraFrameGrabber.toIntExact(value2));\n\n    // Test case 3: value is at the upper limit of int type\n    long value3 = Integer.MAX_VALUE;\n    int expected3 = Integer.MAX_VALUE;\n    assertEquals(expected3, IPCameraFrameGrabber.toIntExact(value3));\n\n    // Test case 4: value is greater than the upper limit of int type\n    long value4 = Integer.MAX_VALUE + 1;\n    assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(value4));\n\n    // Test case 5: value is less than the lower limit of int type\n    long value5 = Integer.MIN_VALUE - 1;\n    assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(value5));\n}",
        "@Test\npublic void toIntExactTest() {\n    //Test case 1: value within int range\n    long value1 = 100;\n    int expected1 = 100;\n    int actual1 = toIntExact(value1);\n    assertEquals(expected1, actual1);\n\n    //Test case 2: value outside int range\n    long value2 = Long.MAX_VALUE;\n    assertThrows(ArithmeticException.class, () -> {\n        toIntExact(value2);\n    });\n}",
        "@Test\npublic void toIntExactTest() {\n    assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(2147483648L));\n    assertEquals(0, IPCameraFrameGrabber.toIntExact(0L));\n    assertEquals(-2147483648, IPCameraFrameGrabber.toIntExact(-2147483648L));\n    assertEquals(2147483647, IPCameraFrameGrabber.toIntExact(2147483647L));\n}",
        "@Test\npublic void toIntExactTest() {\n    long value1 = 10;\n    long value2 = 2147483648L; // Maximum value for int\n    int expectedValue1 = 10;\n    \n    // Test case 1: when value is within the range of int\n    int result1 = IPCameraFrameGrabber.toIntExact(value1);\n    assertEquals(expectedValue1, result1);\n    \n    // Test case 2: when value exceeds the range of int\n    assertThrows(ArithmeticException.class, () -> IPCameraFrameGrabber.toIntExact(value2));\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IPCameraFrameGrabberTest {\n    @Test\n    public void toIntExactTest() {\n        int result;\n        try {\n            result = IPCameraFrameGrabber.toIntExact(10);\n            assertEquals(10, result);\n        } catch (ArithmeticException e) {\n            fail(\"Expected value does not cause an exception\");\n        }\n        \n        try {\n            result = IPCameraFrameGrabber.toIntExact(1234567890123456789L);\n            fail(\"Expected exception not thrown\");\n        } catch (ArithmeticException e) {\n            assertEquals(\"integer overflow\", e.getMessage());\n        }\n    }\n}"
    ]
}
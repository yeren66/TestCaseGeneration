Source code: 


public Frame convert(byte[] data, int width, int height) {
    if (frame == null || frame.imageWidth != width
            || frame.imageHeight != height || frame.imageChannels != 3) {
        if (frame != null) {
            frame.close();
        }
        frame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);
    }
    ByteBuffer out = (ByteBuffer)frame.image[0];
    int stride = frame.imageStride;

    // ported from https://android.googlesource.com/platform/development/+/master/tools/yuv420sp2rgb/yuv420sp2rgb.c
    int offset = height * width;
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            int Y = data[i * width + j] & 0xFF;
            int V = data[offset + (i/2) * width + 2 * (j/2)    ] & 0xFF;
            int U = data[offset + (i/2) * width + 2 * (j/2) + 1] & 0xFF;

            // Yuv Convert
            Y -= 16;
            U -= 128;
            V -= 128;

            if (Y < 0)
                Y = 0;

            // R = (int)(1.164 * Y + 2.018 * U);
            // G = (int)(1.164 * Y - 0.813 * V - 0.391 * U);
            // B = (int)(1.164 * Y + 1.596 * V);

            int B = (int)(1192 * Y + 2066 * U);
            int G = (int)(1192 * Y - 833 * V - 400 * U);
            int R = (int)(1192 * Y + 1634 * V);

            R = Math.min(262143, Math.max(0, R));
            G = Math.min(262143, Math.max(0, G));
            B = Math.min(262143, Math.max(0, B));

            R >>= 10; R &= 0xff;
            G >>= 10; G &= 0xff;
            B >>= 10; B &= 0xff;

            out.put(i * stride + 3 * j,     (byte)B);
            out.put(i * stride + 3 * j + 1, (byte)G);
            out.put(i * stride + 3 * j + 2, (byte)R);
        }
    }
    return frame;
}



No.1 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AndroidFrameConverterTest {
    @Test
    public void convertTest() {
        byte[] data = new byte[<DATA_SIZE>];
        int width = <WIDTH>;
        int height = <HEIGHT>;
        
        Frame expectedFrame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);
        Frame actualFrame = convert(data, width, height);
        
        assertEquals(expectedFrame.imageWidth, actualFrame.imageWidth);
        assertEquals(expectedFrame.imageHeight, actualFrame.imageHeight);
        assertEquals(expectedFrame.imageChannels, actualFrame.imageChannels);
        
        // Perform additional assertions on the pixel values if needed
        
        expectedFrame.close();
        actualFrame.close();
    }
}


No.2 generated result --------------------------

package org.bytedeco.javacv;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class AndroidFrameConverterTest {
    @Test
    public void convertTest() {
        byte[] data = new byte[10]; // Example data for testing
        int width = 320; // Example width for testing
        int height = 240; // Example height for testing
        
        Frame frame = new Frame(); // Create a new Frame object
        
        // Perform the conversion
        // Replace <FILL> with the code to call the "convert" method and assign the result to the "frame" variable
        frame = convert(data, width, height);
        
        assertNotNull(frame); // Assert that the frame is not null
        assertEquals(width, frame.imageWidth); // Assert that the frame width is correct
        assertEquals(height, frame.imageHeight); // Assert that the frame height is correct
        assertEquals(3, frame.imageChannels); // Assert that the frame has 3 channels
        
        // Add additional assertions if needed to test the output of the conversion
        // For example, you could assert specific values of pixels in the frame
    }
}


No.3 generated result --------------------------

@Test
public void convertTest() {
    byte[] data = new byte[10];
    int width = 640;
    int height = 480;
    
    Frame expectedFrame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);
    Frame actualFrame = convert(data, width, height);
    
    assertArrayEquals(expectedFrame.image[0].array(), actualFrame.image[0].array());
}


No.4 generated result --------------------------

@Test
public void convertTest() {
    byte[] data = new byte[10];
    int width = 640;
    int height = 480;
    
    Frame expectedFrame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);
    ByteBuffer expectedOut = (ByteBuffer)expectedFrame.image[0];
    int expectedStride = expectedFrame.imageStride;
    
    // Set up the expected output
    
    // TODO: Populate expectedOut with expected pixel values
    
    // Perform the conversion
    Frame actualFrame = convert(data, width, height);
    ByteBuffer actualOut = (ByteBuffer)actualFrame.image[0];
    
    // Check if the output frame matches the expected frame
    assertArrayEquals(expectedOut.array(), actualOut.array());
    
    // Check if the stride in the output frame matches the expected stride
    assertEquals(expectedStride, actualFrame.imageStride);
}


No.5 generated result --------------------------

@Test
public void convertTest() {
    byte[] data = new byte[100];
    int width = 10;
    int height = 10;
    Frame expectedFrame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);
    
    Frame actualFrame = convert(data, width, height);
    
    assertEquals(expectedFrame.imageWidth, actualFrame.imageWidth);
    assertEquals(expectedFrame.imageHeight, actualFrame.imageHeight);
    assertEquals(expectedFrame.imageChannels, actualFrame.imageChannels);
    assertArrayEquals(expectedFrame.image[0], actualFrame.image[0]);
}


No.6 generated result --------------------------

@Test
public void convertTest() {
    byte[] data = new byte[width * height]; // size of the data array should be determined
    int width = 640; // example value
    int height = 480; // example value
    
    // Fill the data array with appropriate values
    
    Frame frame = convert(data, width, height); // Call the method to be tested
    
    int expectedImageWidth = frame.imageWidth;
    int expectedImageHeight = frame.imageHeight;
    int expectedImageChannels = frame.imageChannels;
    
    // Assert statements should be added to verify the correctness of the conversion
    
    assertEquals(expectedImageWidth, width);
    assertEquals(expectedImageHeight, height);
    assertEquals(expectedImageChannels, 3);
}


No.7 generated result --------------------------

@Test
public void convertTest() {
    byte[] data = new byte[] {255, 0, 0, 0, 255, 0, 0, 0, 255}; // Example data
    int width = 3;
    int height = 1;
    
    Frame expectedFrame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);
    ByteBuffer expectedOutput = (ByteBuffer)expectedFrame.image[0];
    expectedOutput.put(0, (byte)0);
    expectedOutput.put(1, (byte)0);
    expectedOutput.put(2, (byte)255);
    expectedOutput.put(3, (byte)0);
    expectedOutput.put(4, (byte)255);
    expectedOutput.put(5, (byte)0);
    expectedOutput.put(6, (byte)255);
    expectedOutput.put(7, (byte)0);
    expectedOutput.put(8, (byte)255);
    
    Frame actualFrame = convert(data, width, height);
    ByteBuffer actualOutput = (ByteBuffer)actualFrame.image[0];
    
    assertArrayEquals(expectedOutput.array(), actualOutput.array());
    assertEquals(expectedFrame.imageWidth, actualFrame.imageWidth);
    assertEquals(expectedFrame.imageHeight, actualFrame.imageHeight);
    assertEquals(expectedFrame.imageChannels, actualFrame.imageChannels);
    
    if (frame != null) {
        frame.close();
    }
    frame = null;
}


No.8 generated result --------------------------

@Test
public void convertTest() {
    byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 }; // Sample data for testing
    int width = 2; // Sample width for testing
    int height = 2; // Sample height for testing

    // Initialize the converter object
    AndroidFrameConverter converter = new AndroidFrameConverter();

    // Call the convert method and get the result
    Frame result = converter.convert(data, width, height);

    // Verify the expected result
    assertNotNull(result);
    assertEquals(width, result.imageWidth);
    assertEquals(height, result.imageHeight);
    assertEquals(3, result.imageChannels);

    // Add more assertions to verify the data in the resulting frame
    // For example, you can test specific pixel values

    //...
}


No.9 generated result --------------------------

public class AndroidFrameConverterTest {
    @Test
    public void convertTest() {
        // Arrange
        byte[] data = new byte[10]; // sample data
        int width = 640;
        int height = 480;
        Frame frame = null; // initialize frame
        AndroidFrameConverter converter = new AndroidFrameConverter(); //assuming AndroidFrameConverter class exists

        // Act
        Frame result = converter.convert(data, width, height);

        // Assert
        assertNotNull(result);
        assertEquals(width, result.imageWidth);
        assertEquals(height, result.imageHeight);
        assertEquals(3, result.imageChannels);
    }
}


No.10 generated result --------------------------

@Test
public void convertTest() {
    byte[] data = new byte[10];
    int width = 5;
    int height = 2;
    
    Frame expectedFrame = new Frame(width, height, Frame.DEPTH_UBYTE, 3);
    Frame actualFrame = convert(data, width, height);
    
    assertArrayEquals(expectedFrame.image[0].array(), actualFrame.image[0].array());
}



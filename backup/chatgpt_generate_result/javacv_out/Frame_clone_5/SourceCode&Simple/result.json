{
    "project_name": "javacv",
    "file_name": "Frame.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/Frame.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**Care must be taken if this method is to be used in conjunction with movie recordings.\n     *  Cloning a frame containing a full HD picture (alpha channel included) would take 1920 x 1080 * 4 = 8.294.400 Bytes.\n     *  Expect a heap overflow exception when using this method without cleaning up.\n     *\n     * @return A deep copy of this frame.\n     * @see {@link #cloneBufferArray}\n     *\n     * @author Extension proposed by Dragos Dutu\n     * */",
    "source_code": "\n@Override\npublic Frame clone() {\n    Frame newFrame = new Frame();\n\n    // Video part\n    newFrame.imageWidth = imageWidth;\n    newFrame.imageHeight = imageHeight;\n    newFrame.imageDepth = imageDepth;\n    newFrame.imageChannels = imageChannels;\n    newFrame.imageStride = imageStride;\n    newFrame.keyFrame = keyFrame;\n    newFrame.pictType = pictType;\n    newFrame.streamIndex = streamIndex;\n    newFrame.type = type;\n    newFrame.opaque = new Pointer[3];\n    if (image != null) {\n        newFrame.image = new Buffer[image.length];\n        ((Pointer[])newFrame.opaque)[0] = cloneBufferArray(image, newFrame.image);\n    }\n\n    // Audio part\n    newFrame.audioChannels = audioChannels;\n    newFrame.sampleRate = sampleRate;\n    if (samples != null) {\n        newFrame.samples = new Buffer[samples.length];\n        ((Pointer[])newFrame.opaque)[1] = cloneBufferArray(samples, newFrame.samples);\n    }\n\n    // Other data streams\n    if (data != null) {\n        ByteBuffer[] dst = new ByteBuffer[1];\n        ((Pointer[])newFrame.opaque)[2] = cloneBufferArray(new ByteBuffer[]{data}, dst);\n        newFrame.data = dst[0];\n    }\n\n    // Add timestamp\n    newFrame.timestamp = timestamp;\n\n    return newFrame;\n}\n",
    "class_name": "Frame",
    "method_name": "clone",
    "arguments": [],
    "generate_test": [
        "@Test\npublic void cloneTest() {\n    Frame frame = new Frame();\n    frame.imageWidth = 640;\n    frame.imageHeight = 480;\n    frame.imageDepth = 8;\n    frame.imageChannels = 3;\n    frame.imageStride = 1920;\n    frame.keyFrame = true;\n    frame.pictType = 'I';\n    frame.streamIndex = 0;\n    frame.type = Frame.Type.VIDEO;\n    frame.opaque = new Pointer[3];\n    frame.image = ByteBuffer.allocate(1920 * 1080 * 3);\n\n    frame.audioChannels = 2;\n    frame.sampleRate = 44100;\n    frame.samples = ShortBuffer.allocate(44100 * 2);\n    \n    frame.data = ByteBuffer.allocate(1024);\n    \n    frame.timestamp = System.currentTimeMillis();\n    \n    Frame clonedFrame = frame.clone();\n\n    assertEquals(frame.imageWidth, clonedFrame.imageWidth);\n    assertEquals(frame.imageHeight, clonedFrame.imageHeight);\n    assertEquals(frame.imageDepth, clonedFrame.imageDepth);\n    assertEquals(frame.imageChannels, clonedFrame.imageChannels);\n    assertEquals(frame.imageStride, clonedFrame.imageStride);\n    assertEquals(frame.keyFrame, clonedFrame.keyFrame);\n    assertEquals(frame.pictType, clonedFrame.pictType);\n    assertEquals(frame.streamIndex, clonedFrame.streamIndex);\n    assertEquals(frame.type, clonedFrame.type);\n    assertArrayEquals((Pointer[]) frame.opaque, (Pointer[]) clonedFrame.opaque);\n    assertArrayEquals(((ByteBuffer) frame.image).array(), ((ByteBuffer) clonedFrame.image).array());\n    assertEquals(frame.audioChannels, clonedFrame.audioChannels);\n    assertEquals(frame.sampleRate, clonedFrame.sampleRate);\n    assertArrayEquals(((ShortBuffer) frame.samples).array(), ((ShortBuffer) clonedFrame.samples).array());\n    assertArrayEquals(frame.data.array(), clonedFrame.data.array());\n    assertEquals(frame.timestamp, clonedFrame.timestamp);\n}",
        "// Initialize a new Frame object\nFrame frame = new Frame();\n\n// Set values for the frame properties\nframe.imageWidth = 640;\nframe.imageHeight = 480;\nframe.imageDepth = Frame.DEPTH_BYTE;\nframe.imageChannels = 3;\nframe.imageStride = 1920;\nframe.keyFrame = true;\nframe.pictType = 'I';\nframe.streamIndex = 0;\nframe.type = Frame.Type.VIDEO;\nframe.opaque = new Pointer[3];\n\n// Create and set the image buffer\nBufferedImage image = new BufferedImage(frame.imageWidth, frame.imageHeight, BufferedImage.TYPE_3BYTE_BGR);\nbyte[] imageData = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();\nframe.image = ByteBuffer.wrap(imageData);\n\n// Create and set the audio buffer\nShortBuffer audioBuffer = ShortBuffer.allocate(1024);\nframe.audioChannels = 2;\nframe.sampleRate = 44100;\nframe.samples = audioBuffer;\n\n// Set the data buffer\nByteBuffer dataBuffer = ByteBuffer.wrap(new byte[]{0x01, 0x02, 0x03});\nframe.data = dataBuffer;\n\n// Set the timestamp\nframe.timestamp = System.currentTimeMillis();\n\n// Clone the frame using the clone() method\nFrame clonedFrame = frame.clone();\n\n// Assert that the cloned frame is not the same object as the original frame\nassertNotSame(frame, clonedFrame);\n\n// Assert that the cloned frame has the same property values as the original frame\nassertEquals(frame.imageWidth, clonedFrame.imageWidth);\nassertEquals(frame.imageHeight, clonedFrame.imageHeight);\nassertEquals(frame.imageDepth, clonedFrame.imageDepth);\nassertEquals(frame.imageChannels, clonedFrame.imageChannels);\nassertEquals(frame.imageStride, clonedFrame.imageStride);\nassertEquals(frame.keyFrame, clonedFrame.keyFrame);\nassertEquals(frame.pictType, clonedFrame.pictType);\nassertEquals(frame.streamIndex, clonedFrame.streamIndex);\nassertEquals(frame.type, clonedFrame.type);\nassertArrayEquals(frame.opaque, clonedFrame.opaque);\nassertEquals(frame.image, clonedFrame.image);\nassertEquals(frame.audioChannels, clonedFrame.audioChannels);\nassertEquals(frame.sampleRate, clonedFrame.sampleRate);\nassertEquals(frame.samples, clonedFrame.samples);\nassertEquals(frame.data, clonedFrame.data);\nassertEquals(frame.timestamp, clonedFrame.timestamp);",
        "@Test\npublic void cloneTest() {\n    Frame originalFrame = new Frame();\n\n    originalFrame.imageWidth = 640;\n    originalFrame.imageHeight = 480;\n    originalFrame.imageDepth = Frame.DEPTH_BYTE;\n    originalFrame.imageChannels = 3;\n    originalFrame.imageStride = 1920;\n    originalFrame.keyFrame = true;\n    originalFrame.pictType = 'I';\n    originalFrame.streamIndex = 0;\n    originalFrame.type = Frame.Type.VIDEO;\n    originalFrame.opaque = new Pointer[3];\n    originalFrame.image = ByteBuffer.allocate(640*480*3);\n    originalFrame.audioChannels = 2;\n    originalFrame.sampleRate = 44100;\n    originalFrame.samples = ByteBuffer.allocate(44100*2);\n    originalFrame.data = ByteBuffer.allocate(1024);\n    originalFrame.timestamp = System.currentTimeMillis();\n\n    Frame clonedFrame = originalFrame.clone();\n\n    assertEquals(originalFrame.imageWidth, clonedFrame.imageWidth);\n    assertEquals(originalFrame.imageHeight, clonedFrame.imageHeight);\n    assertEquals(originalFrame.imageDepth, clonedFrame.imageDepth);\n    assertEquals(originalFrame.imageChannels, clonedFrame.imageChannels);\n    assertEquals(originalFrame.imageStride, clonedFrame.imageStride);\n    assertEquals(originalFrame.keyFrame, clonedFrame.keyFrame);\n    assertEquals(originalFrame.pictType, clonedFrame.pictType);\n    assertEquals(originalFrame.streamIndex, clonedFrame.streamIndex);\n    assertEquals(originalFrame.type, clonedFrame.type);\n    assertArrayEquals(originalFrame.opaque, clonedFrame.opaque);\n    assertArrayEquals(originalFrame.image.array(), clonedFrame.image.array());\n    assertEquals(originalFrame.audioChannels, clonedFrame.audioChannels);\n    assertEquals(originalFrame.sampleRate, clonedFrame.sampleRate);\n    assertArrayEquals(originalFrame.samples.array(), clonedFrame.samples.array());\n    assertArrayEquals(originalFrame.data.array(), clonedFrame.data.array());\n    assertEquals(originalFrame.timestamp, clonedFrame.timestamp);\n}",
        "@Test\npublic void cloneTest() {\n    Frame originalFrame = new Frame();\n    // Set values for the original frame\n\n    Frame clonedFrame = originalFrame.clone();\n\n    // Compare each field of the original frame and cloned frame using assertions\n    assertEquals(originalFrame.imageWidth, clonedFrame.imageWidth);\n    assertEquals(originalFrame.imageHeight, clonedFrame.imageHeight);\n    assertEquals(originalFrame.imageDepth, clonedFrame.imageDepth);\n    assertEquals(originalFrame.imageChannels, clonedFrame.imageChannels);\n    assertEquals(originalFrame.imageStride, clonedFrame.imageStride);\n    assertEquals(originalFrame.keyFrame, clonedFrame.keyFrame);\n    assertEquals(originalFrame.pictType, clonedFrame.pictType);\n    assertEquals(originalFrame.streamIndex, clonedFrame.streamIndex);\n    assertEquals(originalFrame.type, clonedFrame.type);\n    assertArrayEquals(originalFrame.opaque, clonedFrame.opaque);\n    \n    // Additional assertions for the video part\n    assertArrayEquals(originalFrame.image, clonedFrame.image);\n    \n    // Additional assertions for the audio part\n    assertEquals(originalFrame.audioChannels, clonedFrame.audioChannels);\n    assertEquals(originalFrame.sampleRate, clonedFrame.sampleRate);\n    assertArrayEquals(originalFrame.samples, clonedFrame.samples);\n    \n    // Additional assertions for the data part\n    assertEquals(originalFrame.data, clonedFrame.data);\n    \n    // Assertion for timestamp\n    assertEquals(originalFrame.timestamp, clonedFrame.timestamp);\n}",
        "@Test\npublic void cloneTest() {\n    Frame frame = new Frame();\n    frame.imageWidth = 100;\n    frame.imageHeight = 100;\n    frame.imageDepth = Frame.DEPTH_BYTE;\n    frame.imageChannels = 3;\n    frame.imageStride = 300;\n    frame.keyFrame = true;\n    frame.pictType = 'I';\n    frame.streamIndex = 0;\n    frame.type = Frame.Type.VIDEO;\n    frame.image = ByteBuffer.allocate(30000);\n\n    frame.audioChannels = 2;\n    frame.sampleRate = 44100;\n    frame.samples = ShortBuffer.allocate(8000);\n\n    frame.data = ByteBuffer.allocate(1024);\n\n    frame.timestamp = System.currentTimeMillis();\n\n    Frame clonedFrame = frame.clone();\n\n    assertEquals(frame.imageWidth, clonedFrame.imageWidth);\n    assertEquals(frame.imageHeight, clonedFrame.imageHeight);\n    assertEquals(frame.imageDepth, clonedFrame.imageDepth);\n    assertEquals(frame.imageChannels, clonedFrame.imageChannels);\n    assertEquals(frame.imageStride, clonedFrame.imageStride);\n    assertEquals(frame.keyFrame, clonedFrame.keyFrame);\n    assertEquals(frame.pictType, clonedFrame.pictType);\n    assertEquals(frame.streamIndex, clonedFrame.streamIndex);\n    assertEquals(frame.type, clonedFrame.type);\n    assertEquals(frame.image, clonedFrame.image);\n    assertEquals(frame.audioChannels, clonedFrame.audioChannels);\n    assertEquals(frame.sampleRate, clonedFrame.sampleRate);\n    assertEquals(frame.samples, clonedFrame.samples);\n    assertEquals(frame.data, clonedFrame.data);\n    assertEquals(frame.timestamp, clonedFrame.timestamp);\n}",
        "@Test\npublic void cloneTest() {\n    Frame frame = new Frame();\n    frame.imageWidth = 1920;\n    frame.imageHeight = 1080;\n    frame.imageDepth = Frame.DEPTH_UBYTE;\n    frame.imageChannels = 3;\n    frame.imageStride = 5760;\n    frame.keyFrame = true;\n    frame.pictType = 'P';\n    frame.streamIndex = 1;\n    frame.type = Frame.Type.VIDEO;\n\n    ByteBuffer imageBuffer = ByteBuffer.allocate(1920 * 1080 * 3);\n    frame.image = imageBuffer;\n\n    frame.audioChannels = 2;\n    frame.sampleRate = 44100;\n\n    ByteBuffer audioBuffer = ByteBuffer.allocate(44100 * 2);\n    frame.samples = audioBuffer;\n\n    ByteBuffer dataBuffer = ByteBuffer.allocate(1024);\n    frame.data = dataBuffer;\n\n    frame.timestamp = 1000000;\n\n    Frame clonedFrame = frame.clone();\n\n    assertEquals(frame.imageWidth, clonedFrame.imageWidth);\n    assertEquals(frame.imageHeight, clonedFrame.imageHeight);\n    assertEquals(frame.imageDepth, clonedFrame.imageDepth);\n    assertEquals(frame.imageChannels, clonedFrame.imageChannels);\n    assertEquals(frame.imageStride, clonedFrame.imageStride);\n    assertEquals(frame.keyFrame, clonedFrame.keyFrame);\n    assertEquals(frame.pictType, clonedFrame.pictType);\n    assertEquals(frame.streamIndex, clonedFrame.streamIndex);\n    assertEquals(frame.type, clonedFrame.type);\n    assertEquals(frame.image, clonedFrame.image);\n    assertEquals(frame.audioChannels, clonedFrame.audioChannels);\n    assertEquals(frame.sampleRate, clonedFrame.sampleRate);\n    assertEquals(frame.samples, clonedFrame.samples);\n    assertEquals(frame.data, clonedFrame.data);\n    assertEquals(frame.timestamp, clonedFrame.timestamp);\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FrameTest {\n    @Test\n    public void cloneTest() {\n        Frame frame = new Frame();\n        frame.imageWidth = 1920; // Set image width\n        frame.imageHeight = 1080; // Set image height\n\n        Frame clonedFrame = frame.clone();\n\n        assertEquals(frame.imageWidth, clonedFrame.imageWidth); // Check if image width is cloned correctly\n        assertEquals(frame.imageHeight, clonedFrame.imageHeight); // Check if image height is cloned correctly\n    }\n}",
        "@Override\npublic Frame clone() {\n    Frame newFrame = new Frame();\n\n    // Video part\n    newFrame.imageWidth = imageWidth;\n    newFrame.imageHeight = imageHeight;\n    newFrame.imageDepth = imageDepth;\n    newFrame.imageChannels = imageChannels;\n    newFrame.imageStride = imageStride;\n    newFrame.keyFrame = keyFrame;\n    newFrame.pictType = pictType;\n    newFrame.streamIndex = streamIndex;\n    newFrame.type = type;\n    newFrame.opaque = new Pointer[3];\n    if (image != null) {\n        newFrame.image = new Buffer[image.length];\n        ((Pointer[]) newFrame.opaque)[0] = cloneBufferArray(image, newFrame.image);\n    }\n\n    // Audio part\n    newFrame.audioChannels = audioChannels;\n    newFrame.sampleRate = sampleRate;\n    if (samples != null) {\n        newFrame.samples = new Buffer[samples.length];\n        ((Pointer[]) newFrame.opaque)[1] = cloneBufferArray(samples, newFrame.samples);\n    }\n\n    // Other data streams\n    if (data != null) {\n        ByteBuffer[] dst = new ByteBuffer[1];\n        ((Pointer[]) newFrame.opaque)[2] = cloneBufferArray(new ByteBuffer[]{data}, dst);\n        newFrame.data = dst[0];\n    }\n\n    // Add timestamp\n    newFrame.timestamp = timestamp;\n\n    return newFrame;\n}\n\n@Test\npublic void cloneTest() {\n    Frame frame = new Frame();\n    frame.imageWidth = 10;\n    frame.imageHeight = 10;\n    frame.imageDepth = 3;\n    frame.imageChannels = 3;\n    frame.imageStride = 10;\n    frame.keyFrame = true;\n    frame.pictType = 'A';\n    frame.streamIndex = 1;\n    frame.type = Frame.Type.VIDEO;\n    frame.opaque = new Pointer[3];\n    frame.image = new Buffer[1];\n    frame.audioChannels = 2;\n    frame.sampleRate = 44100;\n    frame.samples = new Buffer[2];\n    frame.data = ByteBuffer.allocate(1024);\n    frame.timestamp = System.currentTimeMillis();\n\n    Frame clonedFrame = frame.clone();\n\n    assertEquals(frame.imageWidth, clonedFrame.imageWidth);\n    assertEquals(frame.imageHeight, clonedFrame.imageHeight);\n    assertEquals(frame.imageDepth, clonedFrame.imageDepth);\n    assertEquals(frame.imageChannels, clonedFrame.imageChannels);\n    assertEquals(frame.imageStride, clonedFrame.imageStride);\n    assertEquals(frame.keyFrame, clonedFrame.keyFrame);\n    assertEquals(frame.pictType, clonedFrame.pictType);\n    assertEquals(frame.streamIndex, clonedFrame.streamIndex);\n    assertEquals(frame.type, clonedFrame.type);\n    assertArrayEquals(frame.opaque, clonedFrame.opaque);\n    assertArrayEquals(frame.image, clonedFrame.image);\n    assertEquals(frame.audioChannels, clonedFrame.audioChannels);\n    assertEquals(frame.sampleRate, clonedFrame.sampleRate);\n    assertArrayEquals(frame.samples, clonedFrame.samples);\n    assertEquals(frame.data, clonedFrame.data);\n    assertEquals(frame.timestamp, clonedFrame.timestamp);\n}",
        "@Test\npublic void cloneTest() {\n    // Create a new instance of Frame\n    Frame frame = new Frame();\n    \n    // Set the properties of the frame\n    frame.imageWidth = 640;\n    frame.imageHeight = 480;\n    frame.imageDepth = 8;\n    frame.imageChannels = 3;\n    frame.imageStride = frame.imageWidth * frame.imageChannels;\n    frame.keyFrame = true;\n    frame.pictType = 'I';\n    frame.streamIndex = 0;\n    frame.type = Frame.Type.VIDEO;\n    frame.opaque = new Pointer[3];\n    frame.image = ByteBuffer.allocate(frame.imageStride * frame.imageHeight);\n\n    frame.audioChannels = 2;\n    frame.sampleRate = 44100;\n    frame.samples = ShortBuffer.allocate(1024);\n\n    frame.data = ByteBuffer.allocate(1024);\n\n    frame.timestamp = System.currentTimeMillis();\n\n    // Clone the frame\n    Frame clonedFrame = frame.clone();\n\n    // Perform assertions on the cloned frame\n    assertEquals(frame.imageWidth, clonedFrame.imageWidth);\n    assertEquals(frame.imageHeight, clonedFrame.imageHeight);\n    assertEquals(frame.imageDepth, clonedFrame.imageDepth);\n    assertEquals(frame.imageChannels, clonedFrame.imageChannels);\n    assertEquals(frame.imageStride, clonedFrame.imageStride);\n    assertEquals(frame.keyFrame, clonedFrame.keyFrame);\n    assertEquals(frame.pictType, clonedFrame.pictType);\n    assertEquals(frame.streamIndex, clonedFrame.streamIndex);\n    assertEquals(frame.type, clonedFrame.type);\n    assertArrayEquals((Pointer[])frame.opaque, (Pointer[])clonedFrame.opaque);\n    assertArrayEquals(frame.image.array(), clonedFrame.image.array());\n    assertEquals(frame.audioChannels, clonedFrame.audioChannels);\n    assertEquals(frame.sampleRate, clonedFrame.sampleRate);\n    assertArrayEquals(frame.samples.array(), clonedFrame.samples.array());\n    assertEquals(frame.data.array(), clonedFrame.data.array());\n    assertEquals(frame.timestamp, clonedFrame.timestamp);\n}",
        "@Test\npublic void cloneTest() {\n    Frame frame = new Frame();\n    frame.imageWidth = 1280;\n    frame.imageHeight = 720;\n    frame.imageDepth = Frame.DEPTH_UBYTE;\n    frame.imageChannels = 3;\n    frame.imageStride = frame.imageWidth * frame.imageChannels;\n    frame.keyFrame = true;\n    frame.pictType = 'I';\n    frame.streamIndex = 0;\n    frame.type = Frame.Type.VIDEO;\n    frame.opaque = new Pointer[3];\n    frame.image = ByteBuffer.allocate(frame.imageStride * frame.imageHeight);\n    frame.audioChannels = 2;\n    frame.sampleRate = 44100;\n    frame.samples = ShortBuffer.allocate(frame.audioChannels * frame.sampleRate);\n    frame.data = ByteBuffer.allocate(1024);\n    frame.timestamp = System.currentTimeMillis();\n\n    Frame clonedFrame = frame.clone();\n\n    assertEquals(frame.imageWidth, clonedFrame.imageWidth);\n    assertEquals(frame.imageHeight, clonedFrame.imageHeight);\n    assertEquals(frame.imageDepth, clonedFrame.imageDepth);\n    assertEquals(frame.imageChannels, clonedFrame.imageChannels);\n    assertEquals(frame.imageStride, clonedFrame.imageStride);\n    assertEquals(frame.keyFrame, clonedFrame.keyFrame);\n    assertEquals(frame.pictType, clonedFrame.pictType);\n    assertEquals(frame.streamIndex, clonedFrame.streamIndex);\n    assertEquals(frame.type, clonedFrame.type);\n    assertArrayEquals(frame.image.array(), clonedFrame.image.array());\n    assertEquals(frame.audioChannels, clonedFrame.audioChannels);\n    assertEquals(frame.sampleRate, clonedFrame.sampleRate);\n    assertArrayEquals(frame.samples.array(), clonedFrame.samples.array());\n    assertEquals(frame.data, clonedFrame.data);\n    assertEquals(frame.timestamp, clonedFrame.timestamp);\n}\n"
    ]
}
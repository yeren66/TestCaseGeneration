{
    "project_name": "javacv",
    "file_name": "FFmpegFrameGrabber.java",
    "relative_path": "javacv/src/main/java/org/bytedeco/javacv/FFmpegFrameGrabber.java",
    "execute_path": "javacv",
    "package": "org.bytedeco.javacv",
    "docstring": "/**Estimation of audio frames per second.\n     *\n     * Care must be taken as this method may require unnecessary call of\n     * grabFrame(true, false, false, false, false) with frameGrabbed set to true.\n     *\n     * @return (double) getSampleRate()) / samples_frame.nb_samples()\n     * if samples_frame.nb_samples() is not zero, otherwise return 0\n     */",
    "source_code": "\npublic double getAudioFrameRate() {\n    if (audio_st == null) {\n        return 0.0;\n    } else {\n        if (samples_frame == null || samples_frame.nb_samples() == 0) {\n            try {\n                grabFrame(true, false, false, false, false);\n                frameGrabbed = true;\n            } catch (Exception e) {\n                return 0.0;\n            }\n        }\n        if (samples_frame != null && samples_frame.nb_samples() != 0)\n            return ((double) getSampleRate()) / samples_frame.nb_samples();\n        else return 0.0;\n\n    }\n}\n",
    "class_name": "FFmpegFrameGrabber",
    "method_name": "getAudioFrameRate",
    "arguments": [],
    "generate_test": [
        "public void getAudioFrameRateTest() {\n    FFmpegFrameGrabber frameGrabber = new FFmpegFrameGrabber();\n    frameGrabber.setAudio_st(new AudioStream());\n    frameGrabber.setSamples_frame(new SampleFrame());\n    \n    double expectedFrameRate = 0.0;\n    double actualFrameRate = frameGrabber.getAudioFrameRate();\n    assertEquals(expectedFrameRate, actualFrameRate);\n}",
        "@Test\npublic void getAudioFrameRateTest() {\n    FFmpegFrameGrabber frameGrabber = new FFmpegFrameGrabber();\n    frameGrabber.audio_st = new FFmpegFrameGrabber.Stream();\n    frameGrabber.samples_frame = new Frame();\n    frameGrabber.samples_frame.samples = 10;\n\n    double expected = 48000 / 10; // Assuming getSampleRate() returns 48000\n\n    double result = frameGrabber.getAudioFrameRate();\n    assertEquals(expected, result, 0.001);\n}",
        "@Test\npublic void getAudioFrameRateTest() {\n    FFmpegFrameGrabber frameGrabber = new FFmpegFrameGrabber();\n    double audioFrameRate = frameGrabber.getAudioFrameRate();\n    assertEquals(0.0, audioFrameRate);\n}",
        "@Test\npublic void getAudioFrameRateTest() {\n    FFmpegFrameGrabber grabber = new FFmpegFrameGrabber();\n    grabber.setAudioTimestamp(12345L);\n    double expected = 44.1;\n\n    double result = grabber.getAudioFrameRate();\n\n    assertEquals(expected, result);\n}",
        "@Test\npublic void getAudioFrameRateTest() {\n    FFmpegFrameGrabber frameGrabber = new FFmpegFrameGrabber();\n\n    // Test 1: audio_st is null\n    double result1 = frameGrabber.getAudioFrameRate();\n    assertEquals(0.0, result1);\n\n    // Test 2: samples_frame is null or has no samples\n    frameGrabber.audio_st = new AVStream();\n    double result2 = frameGrabber.getAudioFrameRate();\n    assertEquals(0.0, result2);\n\n    // Test 3: samples_frame is not null and has samples\n    SampleFrame samples_frame = new SampleFrame();\n    samples_frame.setNb_samples(100);\n    frameGrabber.samples_frame = samples_frame;\n    double result3 = frameGrabber.getAudioFrameRate();\n    double expected3 = ((double) frameGrabber.getSampleRate()) / samples_frame.nb_samples();\n    assertEquals(expected3, result3);\n}",
        "@Test\npublic void getAudioFrameRateTest() {\n    FFmpegFrameGrabber grabber = new FFmpegFrameGrabber();\n    double expectedFrameRate = 0.0;\n\n    // Test when audio_st is null\n    grabber.audio_st = null;\n    double actualFrameRate = grabber.getAudioFrameRate();\n    assertEquals(expectedFrameRate, actualFrameRate);\n\n    // Test when samples_frame is null\n    grabber.audio_st = new AVStream();\n    grabber.samples_frame = null;\n    expectedFrameRate = 0.0;\n    actualFrameRate = grabber.getAudioFrameRate();\n    assertEquals(expectedFrameRate, actualFrameRate);\n\n    // Test when nb_samples is 0\n    grabber.samples_frame = new AVFrame();\n    expectedFrameRate = 0.0;\n    actualFrameRate = grabber.getAudioFrameRate();\n    assertEquals(expectedFrameRate, actualFrameRate);\n\n    // Test when nb_samples is not 0\n    grabber.samples_frame.setNb_samples(10);\n    grabber.setSampleRate(100);\n    expectedFrameRate = 10.0;\n    actualFrameRate = grabber.getAudioFrameRate();\n    assertEquals(expectedFrameRate, actualFrameRate);\n}",
        "\npackage org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FFmpegFrameGrabberTest {\n    @Test\n    public void getAudioFrameRateTest() {\n        FFmpegFrameGrabber grabber = new FFmpegFrameGrabber(\"inputFile.mp4\");\n        \n        // Test when audio_st is null\n        grabber.audio_st = null;\n        double result1 = grabber.getAudioFrameRate();\n        assertEquals(0.0, result1);\n\n        // Test when samples_frame is null or empty\n        grabber.audio_st = new AVStream();\n        grabber.samples_frame = null;\n        double result2 = grabber.getAudioFrameRate();\n        assertEquals(0.0, result2);\n        \n        // Test when samples_frame is not null and nb_samples is not 0\n        grabber.samples_frame = new AVFrame();\n        grabber.samples_frame.nb_samples(10);\n        grabber.setSampleRate(44100);\n        double result3 = grabber.getAudioFrameRate();\n        assertEquals(44100/10, result3);\n        \n        // Test when samples_frame is not null but nb_samples is 0\n        grabber.samples_frame.nb_samples(0);\n        double result4 = grabber.getAudioFrameRate();\n        assertEquals(0.0, result4);\n    }\n}\n",
        "@Test\npublic void getAudioFrameRateTest() {\n    FFmpegFrameGrabber grabber = new FFmpegFrameGrabber();\n    grabber.setAudioStream(0);\n    double expected = 0.0;\n    double actual = grabber.getAudioFrameRate();\n    assertEquals(expected, actual, 0.0);\n}",
        "package org.bytedeco.javacv;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class FFmpegFrameGrabberTest {\n    @Test\n    public void getAudioFrameRateTest() {\n        // Create a mock FFmpegFrameGrabber object\n        FFmpegFrameGrabber grabber = mock(FFmpegFrameGrabber.class);\n\n        // Set up the conditions for the test\n        when(grabber.getAudioStream()).thenReturn(new FFmpegStream());\n\n        // Call the method under test\n        double frameRate = grabber.getAudioFrameRate();\n\n        // Verify the result\n        assertEquals(0.0, frameRate);\n    }\n}",
        "@Test\npublic void getAudioFrameRateTest() {\n    // Create a new instance of FFmpegFrameGrabber\n    FFmpegFrameGrabber grabber = new FFmpegFrameGrabber();\n    \n    // Set the audio_st field to null\n    grabber.audio_st = null;\n    \n    // Call the getAudioFrameRate() method and assert that it returns 0.0\n    assertEquals(0.0, grabber.getAudioFrameRate());\n    \n    // Set the audio_st field to a non-null value\n    grabber.audio_st = new SomeAudioStream();\n    \n    // Set the samples_frame field to null and call the grabFrame() method\n    // It should throw an exception, so catch it and assert that getAudioFrameRate() returns 0.0\n    grabber.samples_frame = null;\n    assertThrows(Exception.class, () -> grabber.grabFrame(true, false, false, false, false));\n    assertEquals(0.0, grabber.getAudioFrameRate());\n    \n    // Set the samples_frame field to a non-null value with nb_samples() == 0\n    grabber.samples_frame = new SomeAudioSampleFrame(0);\n    \n    // Call the getAudioFrameRate() method and assert that it returns 0.0\n    assertEquals(0.0, grabber.getAudioFrameRate());\n    \n    // Set the samples_frame field to a non-null value with nb_samples() > 0\n    grabber.samples_frame = new SomeAudioSampleFrame(100);\n    \n    // Set the sampleRate field to a non-zero value\n    grabber.setSampleRate(44100);\n    \n    // Call the getAudioFrameRate() method and calculate the expected result\n    double expectedFrameRate = 44100.0 / 100;\n    assertEquals(expectedFrameRate, grabber.getAudioFrameRate());\n    \n    // Set the samples_frame field back to null and call the getAudioFrameRate() method\n    // It should return 0.0 again\n    grabber.samples_frame = null;\n    assertEquals(0.0, grabber.getAudioFrameRate());\n}"
    ]
}
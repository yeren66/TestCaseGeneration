{
    "project_name": "zxing",
    "file_name": "IntentIntegrator.java",
    "relative_path": "zxing/android-integration/src/main/java/com/google/zxing/integration/android/IntentIntegrator.java",
    "execute_path": "zxing",
    "package": "com.google.zxing.integration.android",
    "docstring": "/**\n   * Initiates a scan, using the specified camera, only for a certain set of barcode types, given as strings\n   * corresponding to their names in ZXing's {@code BarcodeFormat} class like \"UPC_A\". You can supply constants\n   * like {@link #PRODUCT_CODE_TYPES} for example.\n   *\n   * @param desiredBarcodeFormats names of {@code BarcodeFormat}s to scan for\n   * @param cameraId camera ID of the camera to use. A negative value means \"no preference\".\n   * @return the {@link AlertDialog} that was shown to the user prompting them to download the app\n   *   if a prompt was needed, or null otherwise\n   */",
    "source_code": "\npublic final AlertDialog initiateScan(Collection<String> desiredBarcodeFormats, int cameraId) {\n  Intent intentScan = new Intent(BS_PACKAGE + \".SCAN\");\n  intentScan.addCategory(Intent.CATEGORY_DEFAULT);\n\n  // check which types of codes to scan for\n  if (desiredBarcodeFormats != null) {\n    // set the desired barcode types\n    StringBuilder joinedByComma = new StringBuilder();\n    for (String format : desiredBarcodeFormats) {\n      if (joinedByComma.length() > 0) {\n        joinedByComma.append(',');\n      }\n      joinedByComma.append(format);\n    }\n    intentScan.putExtra(\"SCAN_FORMATS\", joinedByComma.toString());\n  }\n\n  // check requested camera ID\n  if (cameraId >= 0) {\n    intentScan.putExtra(\"SCAN_CAMERA_ID\", cameraId);\n  }\n\n  String targetAppPackage = findTargetAppPackage(intentScan);\n  if (targetAppPackage == null) {\n    return showDownloadDialog();\n  }\n  intentScan.setPackage(targetAppPackage);\n  intentScan.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n  intentScan.addFlags(FLAG_NEW_DOC);\n  attachMoreExtras(intentScan);\n  startActivityForResult(intentScan, REQUEST_CODE);\n  return null;\n}\n",
    "class_name": "IntentIntegrator",
    "method_name": "initiateScan",
    "arguments": [
        "Collection<String> desiredBarcodeFormats",
        "int cameraId"
    ],
    "generate_test": [
        "\npackage com.google.zxing.integration.android;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IntentIntegratorTest {\n    @Test\n    public void initiateScanTest() {\n        // Arrange\n        String targetAppPackage = \"com.google.zxing.integration.android\";\n        Collection<String> desiredBarcodeFormats = Arrays.asList(\"CODE_128\", \"CODE_39\");\n        int cameraId = 0;\n\n        // Act\n        Intent intentScan = initiateScan(desiredBarcodeFormats, cameraId);\n\n        // Assert\n        assertNotNull(intentScan);\n        assertEquals(\"SCAN\", intentScan.getAction());\n        assertEquals(targetAppPackage, intentScan.getPackage());\n        assertEquals(Intent.CATEGORY_DEFAULT, intentScan.getCategory());\n        assertEquals(2, intentScan.getExtras().size());\n        assertTrue(intentScan.hasExtra(\"SCAN_FORMATS\"));\n        assertEquals(\"CODE_128,CODE_39\", intentScan.getStringExtra(\"SCAN_FORMATS\"));\n        assertTrue(intentScan.hasExtra(\"SCAN_CAMERA_ID\"));\n        assertEquals(cameraId, intentScan.getIntExtra(\"SCAN_CAMERA_ID\", -1));\n    }\n}",
        "\n@Test\npublic void initiateScanTest() {\n    // Arrange\n    Intent intent = new Intent(BS_PACKAGE + \".SCAN\");\n    intent.addCategory(Intent.CATEGORY_DEFAULT);\n    Collection<String> desiredBarcodeFormats = Arrays.asList(\"QR_CODE\", \"PDF417\");\n    int cameraId = 0;\n    \n    // Act\n    AlertDialog dialog = initiateScan(desiredBarcodeFormats, cameraId);\n    \n    // Assert\n    assertNotNull(dialog);\n    assertEquals(\"SCAN\", intent.getAction());\n    assertEquals(\"QR_CODE,PDF417\", intent.getStringExtra(\"SCAN_FORMATS\"));\n    assertEquals(0, intent.getIntExtra(\"SCAN_CAMERA_ID\", -1));\n}",
        "\npackage com.google.zxing.integration.android;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IntentIntegratorTest {\n    @Test\n    public void initiateScanTest() {\n        Collection<String> desiredBarcodeFormats = new ArrayList<>();\n        int cameraId = 0;\n        AlertDialog dialog = IntentIntegrator.initiateScan(desiredBarcodeFormats, cameraId);\n        assertNotNull(dialog);\n    }\n}",
        "\n@Test\npublic void initiateScanTest() {\n    // Set up mock objects for the methods that will be called during scan\n    Intent mockIntent = Mockito.mock(Intent.class);\n    when(mockIntent.putExtra(\"SCAN_FORMATS\", anyString())).thenReturn(mockIntent);\n    when(mockIntent.addCategory(anyString())).thenReturn(mockIntent);\n    \n    // Set up mock objects for the methods that will be called during download dialog display\n    AlertDialog mockDialog = Mockito.mock(AlertDialog.class);\n    when(mockDialog.setMessage(anyString())).thenReturn(mockDialog);\n    when(mockDialog.show()).thenReturn(true);\n    \n    // Set up the test data\n    Collection<String> desiredBarcodeFormats = Arrays.asList(\"EAN_13\", \"UPC_A\");\n    int cameraId = 0;\n    \n    // Initiate scan and verify that the intent was set up correctly\n    IntentIntegrator integrator = new IntentIntegrator();\n    integrator.initiateScan(desiredBarcodeFormats, cameraId);\n    ArgumentCaptor<Intent> captor = ArgumentCaptor.forClass(Intent.class);\n    verify(mockIntent).putExtra(\"SCAN_FORMATS\", anyString());\n    verify(mockIntent).addCategory(anyString());\n    \n    // Verify that the download dialog was displayed correctly\n    verify(mockDialog).setMessage(anyString());\n    verify(mockDialog).show();\n}\n",
        "\npackage com.google.zxing.integration.android;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IntentIntegratorTest {\n    @Test\n    public void initiateScanTest() {\n        // Arrange\n        Collection<String> desiredBarcodeFormats = Arrays.asList(\"QR_CODE\", \"AZTEC\");\n        int cameraId = 1;\n        \n        // Act\n        AlertDialog alertDialog = IntentIntegrator.initiateScan(desiredBarcodeFormats, cameraId);\n        \n        // Assert\n        assertNotNull(alertDialog);\n    }\n}",
        "package com.google.zxing.integration.android;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class IntentIntegratorTest {\n    @Test\n    public void initiateScanTest() {\n        // Test case 1: null desiredBarcodeFormats and negative cameraId\n        Collection<String> desiredBarcodeFormats = null;\n        int cameraId = -1;\n        AlertDialog result = IntentIntegrator.initiateScan(desiredBarcodeFormats, cameraId);\n        assertNull(result);\n    }\n    \n    @Test\n    public void initiateScanTest() {\n        // Test case 2: non-null desiredBarcodeFormats and positive cameraId\n        Collection<String> desiredBarcodeFormats = new ArrayList<>();\n        desiredBarcodeFormats.add(\"AZTEC\");\n        int cameraId = 0;\n        AlertDialog result = IntentIntegrator.initiateScan(desiredBarcodeFormats, cameraId);\n        assertNotNull(result);\n    }\n    \n    @Test\n    public void initiateScanTest() {\n        // Test case 3: null desiredBarcodeFormats and positive cameraId\n        Collection<String> desiredBarcodeFormats = null;\n        int cameraId = 0;\n        AlertDialog result = IntentIntegrator.initiateScan(desiredBarcodeFormats, cameraId);\n        assertNull(result);\n    }\n}",
        "@Test\npublic void initiateScanTest() {\n    // Create a new instance of the IntentIntegrator class\n    IntentIntegrator integrator = new IntentIntegrator();\n    \n    // Call the initiateScan method with some dummy values for desiredBarcodeFormats and cameraId\n    Collection<String> desiredBarcodeFormats = Arrays.asList(\"QR_CODE\", \"UPC_A\");\n    int cameraId = 0;\n    Intent intent = integrator.initiateScan(desiredBarcodeFormats, cameraId);\n    \n    // Assert that the intent object has the expected extras\n    assertEquals(intent.getStringExtra(\"SCAN_FORMATS\"), \"QR_CODE,UPC_A\");\n    assertEquals(intent.getIntExtra(\"SCAN_CAMERA_ID\", -1), 0);\n    \n    // Assert that the intent object has the expected action and category\n    assertEquals(intent.getAction(), Intent.ACTION_MAIN);\n    assertEquals(intent.getCategory(), Intent.CATEGORY_LAUNCHER);\n}",
        "\n@Test\npublic void initiateScanTest() {\n    // Arrange\n    Collection<String> desiredBarcodeFormats = new ArrayList<>();\n    int cameraId = 0;\n\n    // Act\n    AlertDialog dialog = initiateScan(desiredBarcodeFormats, cameraId);\n\n    // Assert\n    assertNotNull(dialog);\n}",
        "\n@Test\npublic void initiateScanTest() {\n    // Arrange\n    Collection<String> desiredBarcodeFormats = new ArrayList<>();\n    int cameraId = 1;\n\n    // Act\n    AlertDialog dialog = initiateScan(desiredBarcodeFormats, cameraId);\n\n    // Assert\n    assertNotNull(dialog);\n}",
        "\n@Test\npublic void initiateScanTest() {\n  // Arrange\n  Collection<String> desiredBarcodeFormats = Arrays.asList(\"CODE_39\", \"QR_CODE\");\n  int cameraId = 1;\n  IntentIntegrator integrator = new IntentIntegrator();\n  AlertDialog dialog = Mockito.mock(AlertDialog.class);\n  PowerMockito.whenNew(AlertDialog.Builder.class).withArguments(any(Context.class)).thenReturn(dialog);\n  // Act\n  integrator.initiateScan(desiredBarcodeFormats, cameraId);\n  // Assert\n  Mockito.verify(dialog, times(1)).show();\n}"
    ]
}
{
    "project_name": "Java",
    "file_name": "MatrixGraphs.java",
    "relative_path": "Java/src/main/java/com/thealgorithms/datastructures/graphs/MatrixGraphs.java",
    "execute_path": "Java",
    "package": "com.thealgorithms.datastructures.graphs",
    "docstring": "/**\n     * This method adds an edge to the graph between two specified vertices\n     *\n     * @param from the data of the vertex the edge is from\n     * @param to the data of the vertex the edge is going to\n     * @return returns true if the edge did not exist, return false if it\n     * already did\n     */",
    "source_code": "\npublic boolean addEdge(int from, int to) {\n    if (this.vertexDoesExist(from) && this.vertexDoesExist(to)) {\n        if (!this.adjacencyOfEdgeDoesExist(from, to)) {\n            this.adjacency()[from][to] = AdjacencyMatrixGraph.EDGE_EXIST;\n            this.adjacency()[to][from] = AdjacencyMatrixGraph.EDGE_EXIST;\n            this.setNumberOfEdges(this.numberOfEdges() + 1);\n            return true;\n        }\n    }\n\n    return false;\n}\n",
    "class_name": "MatrixGraphs",
    "method_name": "addEdge",
    "arguments": [
        "int from",
        "int to"
    ],
    "generate_test": [
        "@Test\npublic void addEdgeTest() {\n    AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph(4);\n    assertTrue(graph.addEdge(0, 1));\n    assertFalse(graph.addEdge(2, 3));\n    assertEquals(1, graph.getNumberOfEdges());\n}",
        "@Test\npublic void addEdgeTest() {\n    // Test case 1: adding a new edge between two existing vertices\n    MatrixGraphs graph = new MatrixGraphs();\n    int fromVertex = 0;\n    int toVertex = 1;\n    assertFalse(graph.addEdge(fromVertex, toVertex));\n    graph.addVertex(fromVertex);\n    graph.addVertex(toVertex);\n    assertTrue(graph.addEdge(fromVertex, toVertex));\n    // Test case 2: adding an edge between a non-existent vertex and an existing vertex\n    fromVertex = -1;\n    toVertex = 0;\n    assertFalse(graph.addEdge(fromVertex, toVertex));\n    // Test case 3: adding an edge between two vertices with no edge already present\n    fromVertex = 0;\n    toVertex = 1;\n    assertTrue(graph.addEdge(fromVertex, toVertex));\n}",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MatrixGraphsTest {\n    @Test\n    public void addEdgeTest() {\n        MatrixGraph graph = new MatrixGraph(2, 10);\n        assertEquals(graph.addEdge(0, 1), true);\n        assertEquals(graph.numberOfEdges(), 1);\n        assertEquals(graph.adjacency()[0][1], AdjacencyMatrixGraph.EDGE_EXIST);\n    }\n}",
        "\npackage com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MatrixGraphsTest {\n    @Test\n    public void addEdgeTest() {\n        MatrixGraph graph = new MatrixGraph(3);\n        assertFalse(graph.addEdge(-1, 0)); // from vertex does not exist\n        assertFalse(graph.addEdge(0, -1)); // to vertex does not exist\n        assertTrue(graph.addEdge(0, 1)); // valid edge addition\n        assertEquals(1, graph.numberOfEdges()); // number of edges is correct\n    }\n}\n",
        "package com.thealgorithms.datastructures.graphs;\n\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MatrixGraphsTest {\n    @Test\n    public void addEdgeTest() {\n        AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph();\n        int from = 0;\n        int to = 1;\n        boolean expectedResult = true;\n        \n        assertEquals(expectedResult, graph.addEdge(from, to));\n    }\n}",
        "\n@Test\npublic void addEdgeTest() {\n    AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph();\n    int vertex1 = 0;\n    int vertex2 = 1;\n    int vertex3 = 2;\n    boolean result;\n\n    // Test case 1: Verify that an edge can be added between two existing vertices.\n    graph.addVertex(vertex1);\n    graph.addVertex(vertex2);\n    result = graph.addEdge(vertex1, vertex2);\n    assertTrue(result);\n\n    // Test case 2: Verify that an edge cannot be added between two non-existent vertices.\n    result = graph.addEdge(vertex3, vertex2);\n    assertFalse(result);\n\n    // Test case 3: Verify that an edge cannot be added when both vertices are the same.\n    result = graph.addEdge(vertex1, vertex1);\n    assertFalse(result);\n}",
        "\n@Test\npublic void addEdgeTest() {\n    // Create a new instance of the AdjacencyMatrixGraph class\n    AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph();\n\n    // Add two vertices to the graph\n    int vertex1 = graph.addVertex();\n    int vertex2 = graph.addVertex();\n\n    // Check that both vertices exist in the graph\n    assertTrue(graph.vertexDoesExist(vertex1));\n    assertTrue(graph.vertexDoesExist(vertex2));\n\n    // Add an edge between the two vertices\n    boolean result = graph.addEdge(vertex1, vertex2);\n\n    // Check that the edge was added successfully\n    assertTrue(result);\n\n    // Check that both vertices are connected by the edge\n    assertEquals(graph.adjacencyOfEdgeDoesExist(vertex1, vertex2), AdjacencyMatrixGraph.EDGE_EXIST);\n    assertEquals(graph.adjacencyOfEdgeDoesExist(vertex2, vertex1), AdjacencyMatrixGraph.EDGE_EXIST);\n\n    // Check that the number of edges in the graph is correct\n    assertEquals(graph.numberOfEdges(), 1);\n}",
        "@Test\npublic void addEdgeTest() {\n    // Create a new AdjacencyMatrixGraph object\n    AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph();\n    \n    // Add an edge to the graph\n    int from = 1;\n    int to = 2;\n    boolean result = graph.addEdge(from, to);\n    \n    // Check that the edge was added successfully\n    assertTrue(result);\n    assertEquals(graph.numberOfEdges(), 1);\n}",
        "Timeout",
        "@Test\npublic void addEdgeTest() {\n    AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph(4);\n    // Add edges to create a cycle\n    assertTrue(graph.addEdge(0, 1));\n    assertTrue(graph.addEdge(1, 2));\n    assertTrue(graph.addEdge(2, 3));\n    assertTrue(graph.addEdge(3, 0));\n    \n    // Check that the graph has a cycle\n    assertTrue(graph.hasCycle());\n}"
    ]
}
Source code: 


public boolean addEdge(int from, int to) {
    if (this.vertexDoesExist(from) && this.vertexDoesExist(to)) {
        if (!this.adjacencyOfEdgeDoesExist(from, to)) {
            this.adjacency()[from][to] = AdjacencyMatrixGraph.EDGE_EXIST;
            this.adjacency()[to][from] = AdjacencyMatrixGraph.EDGE_EXIST;
            this.setNumberOfEdges(this.numberOfEdges() + 1);
            return true;
        }
    }

    return false;
}



No.1 generated result --------------------------


package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class MatrixGraphsTest {
    @Test
    public void addEdgeTest() {
        AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph(3);
        assertTrue(graph.addEdge(0, 1));
        assertFalse(graph.addEdge(1, 0));
        assertFalse(graph.addEdge(2, 3));
    }
}


No.2 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class MatrixGraphsTest {
    @Test
    public void addEdgeTest() {
        AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph(4);
        assertEquals(0, graph.numberOfEdges());

        boolean added = graph.addEdge(1, 2);
        assertTrue(added);
        assertEquals(1, graph.numberOfEdges());

        added = graph.addEdge(3, 4);
        assertTrue(added);
        assertEquals(2, graph.numberOfEdges());

        added = graph.addEdge(2, 3);
        assertFalse(added);
    }
}


No.3 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class MatrixGraphsTest {
    @Test
    public void addEdgeTest() {
        AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph(4);

        // Test adding an edge that already exists
        assertFalse(graph.addEdge(1, 2)); // Edge (1, 2) should not be added because it already exists

        // Test adding an edge that does not exist
        assertTrue(graph.addEdge(3, 4)); // Edge (3, 4) should be added successfully

        // Test adding an edge to a vertex that does not exist
        assertFalse(graph.addEdge(5, 1)); // Edge (5, 1) should not be added because vertex 5 does not exist
    }
}


No.4 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class MatrixGraphsTest {
    private AdjacencyMatrixGraph graph;

    @BeforeEach
    public void setUp() {
        // Set up the graph with 4 vertices and 0 edges
        this.graph = new AdjacencyMatrixGraph(4);
    }

    @Test
    public void addEdgeTest() {
        // Add an edge from vertex 1 to vertex 2
        assertTrue(this.graph.addEdge(1, 2));
        assertEquals(this.graph.numberOfEdges(), 1);
        assertTrue(this.graph.adjacencyOfEdgeDoesExist(1, 2));
        assertFalse(this.graph.adjacencyOfEdgeDoesExist(2, 1));
    }
}


No.5 generated result --------------------------


package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class MatrixGraphsTest {
    @Test
    public void addEdgeTest() {
        AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph(5);
        assertFalse(graph.addEdge(-1, 0));
        assertFalse(graph.addEdge(0, -1));
        assertTrue(graph.addEdge(0, 1));
        assertEquals(1, graph.numberOfEdges());
        assertTrue(graph.addEdge(2, 3));
        assertEquals(2, graph.numberOfEdges());
    }
}


No.6 generated result --------------------------


package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class MatrixGraphsTest {
    @Test
    public void addEdgeTest() {
        AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph(4);
        graph.addEdge(0, 1);
        graph.addEdge(1, 2);
        graph.addEdge(3, 2);
        assertTrue(graph.edgeDoesExist(0, 1));
        assertTrue(graph.edgeDoesExist(1, 2));
        assertTrue(graph.edgeDoesExist(3, 2));
    }
}


No.7 generated result --------------------------

package com.thealgorithms.datastructures.graphs;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class MatrixGraphsTest {
    @Test
    public void addEdgeTest() {
        AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph(4);
        assertFalse(graph.addEdge(-1, 0)); // invalid from vertex
        assertFalse(graph.addEdge(0, -1)); // invalid to vertex
        assertTrue(graph.addEdge(0, 1)); // valid edge
        assertTrue(graph.adjacencyOfEdgeDoesExist(0, 1)); // check if edge exists
        assertEquals(1, graph.numberOfEdges()); // check number of edges
    }
}


No.8 generated result --------------------------


@Test
public void addEdgeTest() {
    AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph(5);
    assertFalse(graph.addEdge(-1, 0)); // invalid from vertex index
    assertFalse(graph.addEdge(0, -1)); // invalid to vertex index
    assertFalse(graph.addEdge(3, 4)); // edge already exists

    assertTrue(graph.addEdge(0, 1)); // valid edge addition
    assertEquals(graph.numberOfEdges(), 1); // check number of edges
    assertEquals(graph._adjacency[0][1], AdjacencyMatrixGraph.EDGE_EXIST); // check adjacency matrix

    graph = new AdjacencyMatrixGraph(5);
    assertTrue(graph.addEdge(0, 2)); // valid edge addition
    assertEquals(graph.numberOfEdges(), 1); // check number of edges
    assertEquals(graph._adjacency[0][2], AdjacencyMatrixGraph.EDGE_EXIST); // check adjacency matrix
}


No.9 generated result --------------------------

@Test
public void addEdgeTest() {
    AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph(5);
    
    // Add edges to the graph
    graph.addEdge(1, 2);
    graph.addEdge(3, 4);
    graph.addEdge(5, 6);
    
    // Check if edges were added correctly
    assertEquals(true, graph.adjacencyOfEdgeDoesExist(1, 2));
    assertEquals(true, graph.adjacencyOfEdgeDoesExist(3, 4));
    assertEquals(true, graph.adjacencyOfEdgeDoesExist(5, 6));
    
    // Check if the number of edges is correct
    assertEquals(3, graph.numberOfEdges());
}


No.10 generated result --------------------------

@Test
public void addEdgeTest() {
    AdjacencyMatrixGraph graph = new AdjacencyMatrixGraph(4);
    int fromVertex = 1;
    int toVertex = 2;
    
    boolean result = graph.addEdge(fromVertex, toVertex);
    assertTrue(result);
    
    // Check that the edge was added to both vertices
    assertEquals(graph.adjacency()[fromVertex][toVertex], AdjacencyMatrixGraph.EDGE_EXIST);
    assertEquals(graph.adjacency()[toVertex][fromVertex], AdjacencyMatrixGraph.EDGE_EXIST);
    
    // Check that the number of edges was incremented
    assertEquals(graph.numberOfEdges(), 1);
}


